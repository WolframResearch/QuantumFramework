(* Content-type: application/vnd.wolfram.mathematica *)

(*** Wolfram Notebook File ***)
(* http://www.wolfram.com/nb *)

(* CreatedBy='Mathematica 13.0' *)

(*CacheID: 234*)
(* Internal cache information:
NotebookFileLineBreakTest
NotebookFileLineBreakTest
NotebookDataPosition[       158,          7]
NotebookDataLength[   1477078,      28749]
NotebookOptionsPosition[   1467099,      28584]
NotebookOutlinePosition[   1467576,      28601]
CellTagsIndexPosition[   1467533,      28598]
WindowFrame->Normal*)

(* Beginning of Notebook Content *)
Notebook[{
Cell[BoxData[
 RowBox[{"<<", "Wolfram`QuantumFramework`"}]], "Input",
 CellChangeTimes->{{3.841079059951508*^9, 3.841079059955752*^9}, {
  3.842904664626049*^9, 3.84290467756604*^9}, {3.843147055904336*^9, 
  3.84314705669494*^9}},
 CellLabel->
  "In[195]:=",ExpressionUUID->"ba218f66-949c-4cb0-80b7-30bcefccf128"],

Cell[CellGroupData[{

Cell["QuditName", "Section",
 CellChangeTimes->{
  3.841079433020781*^9, {3.843147067415793*^9, 
   3.843147068038095*^9}},ExpressionUUID->"f938d78f-b371-45cf-b0fd-\
9b8205bfdd3e"],

Cell["\<\
QuditName is a convenient wrapper around qudit names with special formatting\
\>", "Text",
 CellChangeTimes->{{3.841075915577775*^9, 3.841075919641801*^9}, {
  3.8410759774757013`*^9, 3.841076022851282*^9}, {3.843147069403041*^9, 
  3.843147070005927*^9}},ExpressionUUID->"497f79f6-3f58-415e-b030-\
51b3b387f93d"],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{"QuditName", "[", 
  RowBox[{"{", 
   RowBox[{"A", ",", "B"}], "}"}], "]"}], "\[IndentingNewLine]", 
 RowBox[{"Dataset", "@", 
  RowBox[{"AssociationMap", "[", 
   RowBox[{"%", ",", 
    RowBox[{"%", "[", "\"\<Properties\>\"", "]"}]}], "]"}]}]}], "Input",
 CellChangeTimes->{{3.841075953210742*^9, 3.841075969666072*^9}, 
   3.841076999973483*^9, {3.8431470656171083`*^9, 3.8431470662550507`*^9}, {
   3.858281510156139*^9, 3.858281511886204*^9}},
 CellLabel->
  "In[196]:=",ExpressionUUID->"5fcd8cca-9075-44be-a85e-2e752abbb0d8"],

Cell[BoxData[
 InterpretationBox[
  TemplateBox[{
    RowBox[{"A", "\[InvisibleSpace]", "B"}]},
   "Ket"],
  Wolfram`QuantumFramework`QuditName[{$CellContext`A, $CellContext`B}, "Dual" -> 
   False]]], "Output",
 CellChangeTimes->{
  3.8410759237301483`*^9, {3.8410759551988153`*^9, 3.841075969970508*^9}, 
   3.8410770003984127`*^9, 3.8410784225598087`*^9, 3.841078471108715*^9, 
   3.841078544159623*^9, 3.8410790781374598`*^9, {3.841088519269599*^9, 
   3.8410885344354057`*^9}, 3.841088588037016*^9, 3.8429047145551987`*^9, {
   3.843147062282753*^9, 3.843147071980088*^9}, {3.8582814911051197`*^9, 
   3.8582815125634003`*^9}, 3.858285723538905*^9},
 CellLabel->
  "Out[196]=",ExpressionUUID->"cce035ce-6bae-44db-bbdc-1ccc9179e590"],

Cell[BoxData[
 TagBox[
  TagBox[
   DynamicModuleBox[{TypeSystem`NestedGrid`PackagePrivate`$state$$ = <|
    "InitialData" -> <|
      "Name" -> {$CellContext`A, $CellContext`B}, "DualQ" -> False, "Dual" -> 
       Wolfram`QuantumFramework`QuditName[{$CellContext`A, $CellContext`B}, 
         "Dual" -> True], "Qudits" -> 2|>, "AllowEmbedding" -> True, 
     "InitialShape" -> 
     TypeSystem`PackageScope`DocumentShape[<|{"Name"} -> 
        TypeSystem`PackageScope`UnknownShape[False], {"DualQ"} -> 
        TypeSystem`PackageScope`AtomShape[36], {"Dual"} -> 
        TypeSystem`PackageScope`UnknownShape[False], {"Qudits"} -> 
        TypeSystem`PackageScope`AtomShape[34]|>, 1], "InitialType" -> 
     TypeSystem`Struct[{"Name", "DualQ", "Dual", "Qudits"}, {
        TypeSystem`Vector[TypeSystem`AnyType, 2], 
        TypeSystem`Atom[TypeSystem`Boolean], TypeSystem`AnyType, 
        TypeSystem`Atom[Integer]}], "Meta" -> <||>, "RowTarget" -> 20, 
     "ColumnTarget" -> 10, "Shape" -> 
     TypeSystem`PackageScope`DocumentShape[<|{"Name"} -> 
        TypeSystem`PackageScope`UnknownShape[False], {"DualQ"} -> 
        TypeSystem`PackageScope`AtomShape[36], {"Dual"} -> 
        TypeSystem`PackageScope`UnknownShape[False], {"Qudits"} -> 
        TypeSystem`PackageScope`AtomShape[34]|>, 1], "Type" -> 
     TypeSystem`Struct[{"Name", "DualQ", "Dual", "Qudits"}, {
        TypeSystem`Vector[TypeSystem`AnyType, 2], 
        TypeSystem`Atom[TypeSystem`Boolean], TypeSystem`AnyType, 
        TypeSystem`Atom[Integer]}], "Path" -> {}, "DisplayedRowCount" -> 20, 
     "DisplayedColumnCount" -> 10, "DataRowCount" -> 4, "DataColumnCount" -> 
     1, "SortPaths" -> {}, "SortDirections" -> {}, "HiddenItemsMap" -> Null, 
     "UpdateType" -> 1|>, TypeSystem`NestedGrid`PackagePrivate`$outputID$$, 
    TypeSystem`NestedGrid`PackagePrivate`$path$$ = {}, 
    TypeSystem`NestedGrid`PackagePrivate`$vPos$$ = 1, 
    TypeSystem`NestedGrid`PackagePrivate`$hPos$$ = 1, 
    TypeSystem`NestedGrid`PackagePrivate`$grid$$ = 
    DynamicModule[{
     TypeSystem`NestedGrid`PackagePrivate`renderedGrid = Deploy[
        Style[
         Grid[{{
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover["Name", 
                  Style[
                  "Name", FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                If[
                  TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                    Key["Name"]}, 1]]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key["Name"]}, "RowHeader", False], "Mouse"], 
              ImageSize -> {{1, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
             GrayLevel[0.95], Alignment -> {Left, Baseline}], 
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover[
                  
                  Style[{$CellContext`A, $CellContext`B}, 
                   ShowStringCharacters -> False], 
                  Style[
                   
                   Style[{$CellContext`A, $CellContext`B}, 
                    ShowStringCharacters -> False], FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                If[
                  TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                    Key["Name"]}, 4]]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key["Name"]}, "Item", False], "Mouse"], 
              ImageMargins -> {{5, 3}, {4, 5}}]]}, {
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover["DualQ", 
                  Style[
                  "DualQ", FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                If[
                  TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                    Key["DualQ"]}, 1]]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key["DualQ"]}, "RowHeader", False], "Mouse"], 
              ImageSize -> {{1, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
             GrayLevel[0.95], Alignment -> {Left, Baseline}], 
            Item[
             Pane[
              Annotation[
               RawBoxes["False"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key["DualQ"]}, "Item", False], "Mouse"], 
              ImageSize -> {{36, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}]}, {
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover["Dual", 
                  Style[
                  "Dual", FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                If[
                  TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                    Key["Dual"]}, 1]]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key["Dual"]}, "RowHeader", False], "Mouse"], 
              ImageSize -> {{1, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
             GrayLevel[0.95], Alignment -> {Left, Baseline}], 
            Item[
             Pane[
              Annotation[
               RawBoxes[
                StyleBox[
                 InterpretationBox[
                  TemplateBox[{
                    RowBox[{"A", "\[InvisibleSpace]", "B"}]}, "Bra"], 
                  
                  Wolfram`QuantumFramework`QuditName[{$CellContext`A, \
$CellContext`B}, "Dual" -> True]], FontFamily -> Dynamic[
                   CurrentValue[{"StyleHints", "CodeFont"}]], 
                 ShowStringCharacters -> True]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key["Dual"]}, "Item", False], "Mouse"], 
              ImageSize -> {{60, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}]}, {
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover["Qudits", 
                  Style[
                  "Qudits", FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                If[
                  TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                    Key["Qudits"]}, 1]]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key["Qudits"]}, "RowHeader", False], "Mouse"], 
              ImageSize -> {{1, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
             GrayLevel[0.95], Alignment -> {Left, Baseline}], 
            Item[
             Pane[
              Annotation[
               RawBoxes["2"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key["Qudits"]}, "Item", False], "Mouse"], 
              ImageSize -> {{34, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}]}}, 
          BaseStyle -> {
           ContextMenu -> 
            Dynamic[TypeSystem`NestedGrid`PackagePrivate`$contextMenuTrigger; 
              Which[TypeSystem`NestedGrid`PackagePrivate`$lastOutputID =!= 
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                 TypeSystem`NestedGrid`PackagePrivate`$outputID$$], {}, 
                TypeSystem`NestedGrid`PackagePrivate`$contextMenuTrigger === 
                TypeSystem`NestedGrid`PackagePrivate`$lastContextMenuTrigger, 
                TypeSystem`NestedGrid`PackagePrivate`$lastContextMenu, True, 
                TypeSystem`NestedGrid`PackagePrivate`$lastContextMenuTrigger = 
                 TypeSystem`NestedGrid`PackagePrivate`$contextMenuTrigger; 
                TypeSystem`NestedGrid`PackagePrivate`$lastContextMenu = 
                 Block[{TypeSystem`NestedGrid`PackagePrivate`$globalScrollPos = \
{TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$}}, 
                   
                   With[{TypeSystem`NestedGrid`PackagePrivate`lastPath$ = 
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath, 
                    TypeSystem`NestedGrid`PackagePrivate`lastPathType$ = 
                    TypeSystem`NestedGrid`PackagePrivate`$lastPathType, 
                    TypeSystem`NestedGrid`PackagePrivate`isLeafHeader$ = 
                    TypeSystem`NestedGrid`PackagePrivate`$\
lastPathIsLeafHeader, TypeSystem`NestedGrid`PackagePrivate`headerHidden$ = And[
                    MatchQ[TypeSystem`NestedGrid`PackagePrivate`$lastPathType, 
                    Alternatives["RowHeader", "ColumnHeader"]], 
                    TypeSystem`NestedGrid`PackagePrivate`headerHiddenQ[
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath, 
                    TypeSystem`NestedGrid`PackagePrivate`$state$$]], 
                    TypeSystem`NestedGrid`PackagePrivate`allHidden$ = 
                    TypeSystem`NestedGrid`PackagePrivate`allHiddenQ[
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath, 
                    TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                    TypeSystem`NestedGrid`PackagePrivate`anyHidden$ = 
                    TypeSystem`NestedGrid`PackagePrivate`anyHiddenQ[
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath, 
                    TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                    TypeSystem`NestedGrid`PackagePrivate`sortDirection$ = 
                    TypeSystem`NestedGrid`PackagePrivate`columnSortDirection[
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath, 
                    TypeSystem`NestedGrid`PackagePrivate`$state$$[
                    "SortPaths"], 
                    TypeSystem`NestedGrid`PackagePrivate`$state$$[
                    "SortDirections"]], 
                    TypeSystem`NestedGrid`PackagePrivate`haveData$ = Not[
                    FailureQ[
                    TypeSystem`NestedGrid`PackagePrivate`datasetInitialData[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$]]], 
                    TypeSystem`NestedGrid`PackagePrivate`isKeyDummy$ = Not[
                    FreeQ[
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath, Keys]]}, 
                    Join[{
                    If[
                    Or[
                    Not[TypeSystem`NestedGrid`PackagePrivate`haveData$], 
                    Not[TypeSystem`NestedGrid`PackagePrivate`anyHidden$], 
                    TypeSystem`NestedGrid`PackagePrivate`isKeyDummy$], 
                    Nothing, 
                    MenuItem[
                    "Show " <> 
                    Which[TypeSystem`NestedGrid`PackagePrivate`lastPathType$ == 
                    "Item", "", 
                    TypeSystem`NestedGrid`PackagePrivate`lastPathType$ == 
                    "RowHeader", "Row", 
                    TypeSystem`NestedGrid`PackagePrivate`lastPathType$ == 
                    "ColumnHeader", "Column", True, ""], 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`updateHiddenItems[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][
                    TypeSystem`NestedGrid`PackagePrivate`lastPath$, 
                    "remove"]], MenuEvaluator -> Automatic]], 
                    If[
                    Or[
                    Not[TypeSystem`NestedGrid`PackagePrivate`haveData$], 
                    TypeSystem`NestedGrid`PackagePrivate`pathEmptyQ[
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath, 
                    TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                    TypeSystem`NestedGrid`PackagePrivate`isKeyDummy$, 
                    And[
                    TypeSystem`NestedGrid`PackagePrivate`allHidden$, 
                    TypeSystem`NestedGrid`PackagePrivate`headerHidden$]], 
                    Nothing, 
                    MenuItem[
                    "Hide " <> 
                    Which[TypeSystem`NestedGrid`PackagePrivate`lastPathType$ == 
                    "Item", "", 
                    TypeSystem`NestedGrid`PackagePrivate`lastPathType$ == 
                    "RowHeader", "Row", 
                    TypeSystem`NestedGrid`PackagePrivate`lastPathType$ == 
                    "ColumnHeader", "Column", True, ""], 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`updateHiddenItems[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][
                    TypeSystem`NestedGrid`PackagePrivate`lastPath$, "add"]], 
                    MenuEvaluator -> Automatic]], Delimiter}, 
                    If[
                    And[TypeSystem`NestedGrid`PackagePrivate`haveData$, 
                    MatchQ[TypeSystem`NestedGrid`PackagePrivate`lastPathType$, 
                    Alternatives["ColumnHeader", "KeyDummy"]], 
                    TypeSystem`NestedGrid`PackagePrivate`isLeafHeader$, 
                    Not[TypeSystem`NestedGrid`PackagePrivate`allHidden$]], {
                    If[
                    TypeSystem`NestedGrid`PackagePrivate`sortDirection$ =!= 
                    "Ascending", 
                    MenuItem["Sort", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`updateSort[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][
                    TypeSystem`NestedGrid`PackagePrivate`lastPath$, 
                    "Ascending"]], MenuEvaluator -> Automatic], Nothing], 
                    If[
                    TypeSystem`NestedGrid`PackagePrivate`sortDirection$ =!= 
                    "Descending", 
                    MenuItem["Reverse Sort", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`updateSort[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][
                    TypeSystem`NestedGrid`PackagePrivate`lastPath$, 
                    "Descending"]], MenuEvaluator -> Automatic], Nothing], 
                    If[
                    TypeSystem`NestedGrid`PackagePrivate`sortDirection$ =!= 
                    None, 
                    MenuItem["Unsort", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`updateSort[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][
                    TypeSystem`NestedGrid`PackagePrivate`lastPath$, None]], 
                    MenuEvaluator -> Automatic], Nothing], Delimiter}, {}], {
                    MenuItem["Copy Position to Clipboard", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`toCurrentPosition[
                    TypeSystem`NestedGrid`PackagePrivate`copyClip]], 
                    MenuEvaluator -> Automatic], 
                    If[TypeSystem`NestedGrid`PackagePrivate`haveData$, 
                    MenuItem["Copy Data to Clipboard", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`toCurrentData[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`copyClip]], 
                    MenuEvaluator -> Automatic], Nothing], Delimiter, 
                    MenuItem["Paste Position in New Cell", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`toCurrentPosition[
                    TypeSystem`NestedGrid`PackagePrivate`cellPaste]], 
                    MenuEvaluator -> Automatic], 
                    If[TypeSystem`NestedGrid`PackagePrivate`haveData$, 
                    MenuItem["Paste Data in New Cell", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`toCurrentData[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`cellPaste]], 
                    MenuEvaluator -> Automatic], Nothing]}]]]]], FontFamily -> 
            "Source Sans Pro", FontSize -> 14, FontWeight -> Plain}, Dividers -> 
          All, FrameStyle -> GrayLevel[0.7490196078431373], 
          Spacings -> {0, 0}, Alignment -> Left, 
          BaseStyle -> {
           FontFamily -> "Source Sans Pro", FontSize -> 14, FontWeight -> 
            Plain}], LineBreakWithin -> False, ContextMenu -> {}, NumberMarks -> 
         False, ShowAutoStyles -> False]], 
      TypeSystem`NestedGrid`PackagePrivate`initialQ = True}, 
     Dynamic[
      TypeSystem`NestedGrid`PackagePrivate`setupViewPath[
      TypeSystem`NestedGrid`PackagePrivate`$path$$, If[
         Not[TypeSystem`NestedGrid`PackagePrivate`initialQ], 
         Module[{
          TypeSystem`NestedGrid`PackagePrivate`tmpGrid$ = $Failed, 
           TypeSystem`NestedGrid`PackagePrivate`tmpData$ = 
           TypeSystem`NestedGrid`PackagePrivate`datasetData[
            TypeSystem`NestedGrid`PackagePrivate`$state$$]}, 
          TypeSystem`NestedGrid`PackagePrivate`tmpGrid$ = If[
             FailureQ[TypeSystem`NestedGrid`PackagePrivate`tmpData$], 
             TypeSystem`NestedGrid`PackagePrivate`renderedGrid, 
             TypeSystem`NestedGrid`PackagePrivate`renderGrid[
             TypeSystem`NestedGrid`PackagePrivate`$state$$, 
              TypeSystem`NestedGrid`PackagePrivate`$path$$, 
              TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
              TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
              TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
              TypeSystem`NestedGrid`PackagePrivate`localHold[
              TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][
             TypeSystem`NestedGrid`PackagePrivate`tmpData$]]; If[
            Not[
             FailureQ[TypeSystem`NestedGrid`PackagePrivate`tmpGrid$]], 
            TypeSystem`NestedGrid`PackagePrivate`renderedGrid = 
            TypeSystem`NestedGrid`PackagePrivate`tmpGrid$]; Null]]; 
       TypeSystem`NestedGrid`PackagePrivate`initialQ = False; 
       TypeSystem`NestedGrid`PackagePrivate`$vPos$$; 
       TypeSystem`NestedGrid`PackagePrivate`$hPos$$; If[
         FailureQ[TypeSystem`NestedGrid`PackagePrivate`renderedGrid], 
         TypeSystem`SparseGrid[
          TypeSystem`H["(data no longer present)"]], 
         TypeSystem`NestedGrid`PackagePrivate`renderedGrid]], 
      TrackedSymbols :> {
       TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
        TypeSystem`NestedGrid`PackagePrivate`$hPos$$}], 
     DynamicModuleValues :> {}], 
    TypeSystem`NestedGrid`PackagePrivate`$topBar$$ = Dynamic[
     TypeSystem`NestedGrid`PackagePrivate`makeFramedBar[
      TypeSystem`PackageScope`SubViewPathbar[
      TypeSystem`NestedGrid`PackagePrivate`$path$$, 
       TypeSystem`NestedGrid`PackagePrivate`updateState[
       TypeSystem`NestedGrid`PackagePrivate`$state$$, 
        TypeSystem`NestedGrid`PackagePrivate`$path$$, 
        TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
        TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
        TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
        TypeSystem`NestedGrid`PackagePrivate`localHold[
        TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]]], 
     TrackedSymbols :> {TypeSystem`NestedGrid`PackagePrivate`$path$$}], 
    TypeSystem`NestedGrid`PackagePrivate`$bottomBar$$ = Style[
     Framed[
      Dynamic[
       Replace[
       TypeSystem`NestedGrid`PackagePrivate`mouseAnnotation$$, {
        TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
           TypeSystem`NestedGrid`PackagePrivate`localHold[
           TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][Null, 
           Blank[]] -> "", TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
           TypeSystem`NestedGrid`PackagePrivate`localHold[
           TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][
           Pattern[TypeSystem`NestedGrid`PackagePrivate`path$, 
            Blank[]], 
           Pattern[TypeSystem`NestedGrid`PackagePrivate`pathType$, 
            Blank[]], 
           Pattern[TypeSystem`NestedGrid`PackagePrivate`isLeafHeader$, 
            Blank[]]] :> (
          Increment[TypeSystem`NestedGrid`PackagePrivate`$contextMenuTrigger]; 
          TypeSystem`NestedGrid`PackagePrivate`$lastPath = 
           TypeSystem`NestedGrid`PackagePrivate`path$; 
          TypeSystem`NestedGrid`PackagePrivate`$lastPathType = 
           TypeSystem`NestedGrid`PackagePrivate`pathType$; 
          TypeSystem`NestedGrid`PackagePrivate`$lastPathIsLeafHeader = 
           TypeSystem`NestedGrid`PackagePrivate`isLeafHeader$; 
          TypeSystem`NestedGrid`PackagePrivate`$lastOutputID = 
           TypeSystem`NestedGrid`PackagePrivate`localHold[
            TypeSystem`NestedGrid`PackagePrivate`$outputID$$]; 
          TypeSystem`NestedGrid`PackagePrivate`makePathTrail[
           TypeSystem`NestedGrid`PackagePrivate`path$, 
            TypeSystem`NestedGrid`PackagePrivate`makePathElements]), Null :> 
         Spacer[10], Blank[] :> Spacer[10]}], 
       TrackedSymbols :> {
        TypeSystem`NestedGrid`PackagePrivate`mouseAnnotation$$}], FrameStyle -> 
      None, ImageMargins -> 0, FrameMargins -> 0, Alignment -> Top, 
      ImageSize -> {Automatic, 15}], FontSize -> 1], 
    TypeSystem`NestedGrid`PackagePrivate`mouseAnnotation$$ = Null}, 
    DynamicWrapperBox[
     DynamicBox[ToBoxes[
       Dataset`DatasetContent[
       2, "Path" -> Hold[TypeSystem`NestedGrid`PackagePrivate`$path$$], 
        "Grid" -> Hold[TypeSystem`NestedGrid`PackagePrivate`$grid$$], "State" -> 
        Hold[TypeSystem`NestedGrid`PackagePrivate`$state$$], "VPos" -> 
        Hold[TypeSystem`NestedGrid`PackagePrivate`$vPos$$], "HPos" -> 
        Hold[TypeSystem`NestedGrid`PackagePrivate`$hPos$$], "TopBar" -> 
        Hold[TypeSystem`NestedGrid`PackagePrivate`$topBar$$], "BottomBar" -> 
        Hold[TypeSystem`NestedGrid`PackagePrivate`$bottomBar$$], "OutputID" -> 
        Hold[
          TypeSystem`NestedGrid`PackagePrivate`localHold[
          TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]], StandardForm],
      ImageSizeCache->{117., {62.134033203125, 67.865966796875}},
      TrackedSymbols:>{
       TypeSystem`NestedGrid`PackagePrivate`$state$$, 
        TypeSystem`NestedGrid`PackagePrivate`$grid$$}], 
     TypeSystem`NestedGrid`PackagePrivate`mouseAnnotation$$ = 
     MouseAnnotation[],
     ImageSizeCache->{117., {62.134033203125, 67.865966796875}}],
    BaseStyle->{LineBreakWithin -> False},
    DynamicModuleValues:>{},
    Initialization:>(TypeSystem`NestedGrid`PackagePrivate`$outputID$$ = 
     CreateUUID[]),
    UnsavedVariables:>{TypeSystem`NestedGrid`PackagePrivate`$outputID$$}],
   Deploy,
   DefaultBaseStyle->"Deploy"],
  Dataset`InterpretDataset[1],
  Editable->False,
  SelectWithContents->True,
  Selectable->False]], "Output",
 CellChangeTimes->{
  3.8410759237301483`*^9, {3.8410759551988153`*^9, 3.841075969970508*^9}, 
   3.8410770003984127`*^9, 3.8410784225598087`*^9, 3.841078471108715*^9, 
   3.841078544159623*^9, 3.8410790781374598`*^9, {3.841088519269599*^9, 
   3.8410885344354057`*^9}, 3.841088588037016*^9, 3.8429047145551987`*^9, {
   3.843147062282753*^9, 3.843147071980088*^9}, {3.8582814911051197`*^9, 
   3.8582815125634003`*^9}, 3.858285723559957*^9},
 CellLabel->
  "Out[197]=",ExpressionUUID->"97215bf8-afec-4819-9e57-49c56508d71c"]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["QuantumTensorProduct", "Section",
 CellChangeTimes->{
  3.84107942852435*^9},ExpressionUUID->"2bd17964-ada8-4518-a755-2644df17d046"],

Cell["QuantumTensorProduct works with various Quantum* objects", "Text",
 CellChangeTimes->{{3.841075930309939*^9, 
  3.841075943707219*^9}},ExpressionUUID->"31d8f2db-4baf-49cb-9d55-\
30d61a9a0e5d"],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{"QuantumTensorProduct", "[", 
  RowBox[{
   RowBox[{"QuditName", "[", "A", "]"}], ",", 
   RowBox[{"QuditName", "[", "B", "]"}], ",", 
   RowBox[{"QuditName", "[", "C", "]"}]}], "]"}], "\[IndentingNewLine]", 
 RowBox[{"QuantumTensorProduct", "[", 
  RowBox[{
   RowBox[{"QuditBasis", "[", "\"\<Pauli\>\"", "]"}], ",", 
   RowBox[{"QuditBasis", "[", "\"\<PauliZ\>\"", "]"}]}], 
  "]"}], "\[IndentingNewLine]", 
 RowBox[{"QuantumTensorProduct", "[", 
  RowBox[{
   RowBox[{"QuantumState", "[", "\"\<Plus\>\"", "]"}], ",", 
   RowBox[{"QuantumState", "[", "\"\<Minus\>\"", "]"}]}], 
  "]"}], "\[IndentingNewLine]", 
 RowBox[{"QuantumTensorProduct", "[", 
  RowBox[{
   RowBox[{"QuantumOperator", "[", "\"\<Fourier\>\"", "]"}], ",", 
   RowBox[{"QuantumOperator", "[", "\"\<T\>\"", "]"}]}], 
  "]"}], "\[IndentingNewLine]", 
 RowBox[{"QuantumTensorProduct", "[", 
  RowBox[{
   RowBox[{"QuantumMeasurementOperator", "[", "\"\<X\>\"", "]"}], ",", 
   RowBox[{"QuantumMeasurementOperator", "[", 
    RowBox[{"\"\<Z\>\"", ",", 
     RowBox[{"{", "2", "}"}]}], "]"}]}], "]"}]}], "Input",
 CellChangeTimes->{{3.841075773681432*^9, 3.84107581995494*^9}, {
  3.841075855718114*^9, 3.841075856748391*^9}, {3.841075887661104*^9, 
  3.8410759069851294`*^9}, {3.841076919772503*^9, 3.841076932122677*^9}, {
  3.8410794442386417`*^9, 3.841079465657682*^9}, {3.841079762062801*^9, 
  3.841079820915153*^9}, {3.841080059274806*^9, 3.841080062208098*^9}, {
  3.841080489957095*^9, 3.841080545002802*^9}, {3.8410806723071327`*^9, 
  3.841080707421431*^9}, {3.843147075910972*^9, 3.843147081147456*^9}, {
  3.858281658312131*^9, 3.858281681395027*^9}},
 CellLabel->
  "In[198]:=",ExpressionUUID->"dbf199d1-8293-4870-b237-5f66f62d34bc"],

Cell[BoxData[
 InterpretationBox[
  TemplateBox[{
    RowBox[{"A", "\[InvisibleSpace]", "B", "\[InvisibleSpace]", "C"}]},
   "Ket"],
  Wolfram`QuantumFramework`QuditName[{$CellContext`A, $CellContext`B, C}, 
   "Dual" -> False]]], "Output",
 CellChangeTimes->{{3.841075778651243*^9, 3.84107582017299*^9}, {
   3.8410758570150013`*^9, 3.84107590728156*^9}, 3.841076932316979*^9, 
   3.8410769835653687`*^9, 3.8410784711672564`*^9, 3.8410785442174253`*^9, 
   3.841079078193989*^9, 3.841079465927289*^9, 3.841079646755548*^9, {
   3.841079754311804*^9, 3.841079821631288*^9}, 3.8410800087869987`*^9, {
   3.8410800429410067`*^9, 3.841080063563486*^9}, 3.84108010499826*^9, 
   3.841080148149797*^9, 3.841080325593912*^9, {3.841080488230867*^9, 
   3.8410805452327433`*^9}, 3.84108057723281*^9, 3.841080628832789*^9, {
   3.841080661688246*^9, 3.841080707710718*^9}, {3.84108852191459*^9, 
   3.8410885367450447`*^9}, {3.841088583400566*^9, 3.84108858810081*^9}, 
   3.8429047314941063`*^9, {3.843147062369788*^9, 3.843147081879332*^9}, 
   3.858281530072414*^9, {3.8582816727206984`*^9, 3.858281687656364*^9}, 
   3.858285723640872*^9},
 CellLabel->
  "Out[198]=",ExpressionUUID->"f0b9845f-74ce-475f-9a45-5c3f53c2808d"],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\[LeftAssociation]", 
   RowBox[{
    RowBox[{
     InterpretationBox[
      TemplateBox[{
        RowBox[{
          SubscriptBox["\"\[Sigma]\"", "\"0\""], "\[InvisibleSpace]", 
          SubscriptBox["\"\[Psi]\"", 
           SubscriptBox["\"z\"", "\"-\""]]}]},
       "Ket"],
      Wolfram`QuantumFramework`QuditName[{
        Subscript["\[Sigma]", "0"], 
        Subscript["\[Psi]", 
         Subscript["z", "-"]]}, "Dual" -> False]], "\[Rule]", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{
         RowBox[{"{", 
          RowBox[{"0", ",", "1"}], "}"}], ",", 
         RowBox[{"{", 
          RowBox[{"0", ",", "0"}], "}"}]}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{
         RowBox[{"{", 
          RowBox[{"0", ",", "0"}], "}"}], ",", 
         RowBox[{"{", 
          RowBox[{"0", ",", "1"}], "}"}]}], "}"}]}], "}"}]}], ",", 
    RowBox[{
     InterpretationBox[
      TemplateBox[{
        RowBox[{
          SubscriptBox["\"\[Sigma]\"", "\"0\""], "\[InvisibleSpace]", 
          SubscriptBox["\"\[Psi]\"", 
           SubscriptBox["\"z\"", "\"+\""]]}]},
       "Ket"],
      Wolfram`QuantumFramework`QuditName[{
        Subscript["\[Sigma]", "0"], 
        Subscript["\[Psi]", 
         Subscript["z", "+"]]}, "Dual" -> False]], "\[Rule]", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{
         RowBox[{"{", 
          RowBox[{"1", ",", "0"}], "}"}], ",", 
         RowBox[{"{", 
          RowBox[{"0", ",", "0"}], "}"}]}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{
         RowBox[{"{", 
          RowBox[{"0", ",", "0"}], "}"}], ",", 
         RowBox[{"{", 
          RowBox[{"1", ",", "0"}], "}"}]}], "}"}]}], "}"}]}], ",", 
    RowBox[{
     InterpretationBox[
      TemplateBox[{
        RowBox[{
          SubscriptBox["\"\[Sigma]\"", "\"1\""], "\[InvisibleSpace]", 
          SubscriptBox["\"\[Psi]\"", 
           SubscriptBox["\"z\"", "\"-\""]]}]},
       "Ket"],
      Wolfram`QuantumFramework`QuditName[{
        Subscript["\[Sigma]", "1"], 
        Subscript["\[Psi]", 
         Subscript["z", "-"]]}, "Dual" -> False]], "\[Rule]", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{
         RowBox[{"{", 
          RowBox[{"0", ",", "0"}], "}"}], ",", 
         RowBox[{"{", 
          RowBox[{"0", ",", "1"}], "}"}]}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{
         RowBox[{"{", 
          RowBox[{"0", ",", "1"}], "}"}], ",", 
         RowBox[{"{", 
          RowBox[{"0", ",", "0"}], "}"}]}], "}"}]}], "}"}]}], ",", 
    RowBox[{
     InterpretationBox[
      TemplateBox[{
        RowBox[{
          SubscriptBox["\"\[Sigma]\"", "\"1\""], "\[InvisibleSpace]", 
          SubscriptBox["\"\[Psi]\"", 
           SubscriptBox["\"z\"", "\"+\""]]}]},
       "Ket"],
      Wolfram`QuantumFramework`QuditName[{
        Subscript["\[Sigma]", "1"], 
        Subscript["\[Psi]", 
         Subscript["z", "+"]]}, "Dual" -> False]], "\[Rule]", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{
         RowBox[{"{", 
          RowBox[{"0", ",", "0"}], "}"}], ",", 
         RowBox[{"{", 
          RowBox[{"1", ",", "0"}], "}"}]}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{
         RowBox[{"{", 
          RowBox[{"1", ",", "0"}], "}"}], ",", 
         RowBox[{"{", 
          RowBox[{"0", ",", "0"}], "}"}]}], "}"}]}], "}"}]}], ",", 
    RowBox[{
     InterpretationBox[
      TemplateBox[{
        RowBox[{
          SubscriptBox["\"\[Sigma]\"", "\"2\""], "\[InvisibleSpace]", 
          SubscriptBox["\"\[Psi]\"", 
           SubscriptBox["\"z\"", "\"-\""]]}]},
       "Ket"],
      Wolfram`QuantumFramework`QuditName[{
        Subscript["\[Sigma]", "2"], 
        Subscript["\[Psi]", 
         Subscript["z", "-"]]}, "Dual" -> False]], "\[Rule]", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{
         RowBox[{"{", 
          RowBox[{"0", ",", "0"}], "}"}], ",", 
         RowBox[{"{", 
          RowBox[{"0", ",", 
           RowBox[{"-", "\[ImaginaryI]"}]}], "}"}]}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{
         RowBox[{"{", 
          RowBox[{"0", ",", "\[ImaginaryI]"}], "}"}], ",", 
         RowBox[{"{", 
          RowBox[{"0", ",", "0"}], "}"}]}], "}"}]}], "}"}]}], ",", 
    RowBox[{
     InterpretationBox[
      TemplateBox[{
        RowBox[{
          SubscriptBox["\"\[Sigma]\"", "\"2\""], "\[InvisibleSpace]", 
          SubscriptBox["\"\[Psi]\"", 
           SubscriptBox["\"z\"", "\"+\""]]}]},
       "Ket"],
      Wolfram`QuantumFramework`QuditName[{
        Subscript["\[Sigma]", "2"], 
        Subscript["\[Psi]", 
         Subscript["z", "+"]]}, "Dual" -> False]], "\[Rule]", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{
         RowBox[{"{", 
          RowBox[{"0", ",", "0"}], "}"}], ",", 
         RowBox[{"{", 
          RowBox[{
           RowBox[{"-", "\[ImaginaryI]"}], ",", "0"}], "}"}]}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{
         RowBox[{"{", 
          RowBox[{"\[ImaginaryI]", ",", "0"}], "}"}], ",", 
         RowBox[{"{", 
          RowBox[{"0", ",", "0"}], "}"}]}], "}"}]}], "}"}]}], ",", 
    RowBox[{
     InterpretationBox[
      TemplateBox[{
        RowBox[{
          SubscriptBox["\"\[Sigma]\"", "\"3\""], "\[InvisibleSpace]", 
          SubscriptBox["\"\[Psi]\"", 
           SubscriptBox["\"z\"", "\"-\""]]}]},
       "Ket"],
      Wolfram`QuantumFramework`QuditName[{
        Subscript["\[Sigma]", "3"], 
        Subscript["\[Psi]", 
         Subscript["z", "-"]]}, "Dual" -> False]], "\[Rule]", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{
         RowBox[{"{", 
          RowBox[{"0", ",", "1"}], "}"}], ",", 
         RowBox[{"{", 
          RowBox[{"0", ",", "0"}], "}"}]}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{
         RowBox[{"{", 
          RowBox[{"0", ",", "0"}], "}"}], ",", 
         RowBox[{"{", 
          RowBox[{"0", ",", 
           RowBox[{"-", "1"}]}], "}"}]}], "}"}]}], "}"}]}], ",", 
    RowBox[{
     InterpretationBox[
      TemplateBox[{
        RowBox[{
          SubscriptBox["\"\[Sigma]\"", "\"3\""], "\[InvisibleSpace]", 
          SubscriptBox["\"\[Psi]\"", 
           SubscriptBox["\"z\"", "\"+\""]]}]},
       "Ket"],
      Wolfram`QuantumFramework`QuditName[{
        Subscript["\[Sigma]", "3"], 
        Subscript["\[Psi]", 
         Subscript["z", "+"]]}, "Dual" -> False]], "\[Rule]", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{
         RowBox[{"{", 
          RowBox[{"1", ",", "0"}], "}"}], ",", 
         RowBox[{"{", 
          RowBox[{"0", ",", "0"}], "}"}]}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{
         RowBox[{"{", 
          RowBox[{"0", ",", "0"}], "}"}], ",", 
         RowBox[{"{", 
          RowBox[{
           RowBox[{"-", "1"}], ",", "0"}], "}"}]}], "}"}]}], "}"}]}]}], 
   "\[RightAssociation]"}],
  Wolfram`QuantumFramework`QuditBasis[<|{
      Wolfram`QuantumFramework`QuditName[
       Subscript["\[Sigma]", "0"], "Dual" -> False], 1} -> 
    SparseArray[Automatic, {2, 2}, 0, {1, {{0, 1, 2}, {{1}, {2}}}, {1, 1}}], {
     
      Wolfram`QuantumFramework`QuditName[
       Subscript["\[Sigma]", "1"], "Dual" -> False], 1} -> 
    SparseArray[Automatic, {2, 2}, 0, {1, {{0, 1, 2}, {{2}, {1}}}, {1, 1}}], {
     
      Wolfram`QuantumFramework`QuditName[
       Subscript["\[Sigma]", "2"], "Dual" -> False], 1} -> 
    SparseArray[
     Automatic, {2, 2}, 0, {
      1, {{0, 1, 2}, {{2}, {1}}}, {Complex[0, -1], Complex[0, 1]}}], {
      Wolfram`QuantumFramework`QuditName[
       Subscript["\[Sigma]", "3"], "Dual" -> False], 1} -> 
    SparseArray[Automatic, {2, 2}, 0, {1, {{0, 1, 2}, {{1}, {2}}}, {1, -1}}], {
      Wolfram`QuantumFramework`QuditName[
       Subscript["\[Psi]", 
        Subscript["z", "-"]], "Dual" -> False], 2} -> 
    SparseArray[Automatic, {2}, 0, {1, {{0, 1}, {{2}}}, {1}}], {
      Wolfram`QuantumFramework`QuditName[
       Subscript["\[Psi]", 
        Subscript["z", "+"]], "Dual" -> False], 2} -> 
    SparseArray[Automatic, {2}, 0, {1, {{0, 1}, {{1}}}, {1}}]|>]]], "Output",
 CellChangeTimes->{{3.841075778651243*^9, 3.84107582017299*^9}, {
   3.8410758570150013`*^9, 3.84107590728156*^9}, 3.841076932316979*^9, 
   3.8410769835653687`*^9, 3.8410784711672564`*^9, 3.8410785442174253`*^9, 
   3.841079078193989*^9, 3.841079465927289*^9, 3.841079646755548*^9, {
   3.841079754311804*^9, 3.841079821631288*^9}, 3.8410800087869987`*^9, {
   3.8410800429410067`*^9, 3.841080063563486*^9}, 3.84108010499826*^9, 
   3.841080148149797*^9, 3.841080325593912*^9, {3.841080488230867*^9, 
   3.8410805452327433`*^9}, 3.84108057723281*^9, 3.841080628832789*^9, {
   3.841080661688246*^9, 3.841080707710718*^9}, {3.84108852191459*^9, 
   3.8410885367450447`*^9}, {3.841088583400566*^9, 3.84108858810081*^9}, 
   3.8429047314941063`*^9, {3.843147062369788*^9, 3.843147081879332*^9}, 
   3.858281530072414*^9, {3.8582816727206984`*^9, 3.858281687656364*^9}, 
   3.858285723659672*^9},
 CellLabel->
  "Out[199]=",ExpressionUUID->"74346b27-20bc-4ce6-8bc8-45c28fca3c80"],

Cell[BoxData[
 InterpretationBox[
  RowBox[{
   TagBox["QuantumState",
    "SummaryHead"], "[", 
   DynamicModuleBox[{Typeset`open$$ = False, Typeset`embedState$$ = "Ready"}, 
    
    TemplateBox[{
      PaneSelectorBox[{False -> GridBox[{{
            PaneBox[
             ButtonBox[
              DynamicBox[
               FEPrivate`FrontEndResource["FEBitmaps", "SummaryBoxOpener"]], 
              ButtonFunction :> (Typeset`open$$ = True), Appearance -> None, 
              BaseStyle -> {}, Evaluator -> Automatic, Method -> 
              "Preemptive"], Alignment -> {Center, Center}, ImageSize -> 
             Dynamic[{
               Automatic, 
                3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                 Magnification])}]], 
            GraphicsBox[
             RasterBox[CompressedData["
1:eJxTTMoPSmVmYGBggWIQW0u+adXF1RfskwQiLLecuGZ/W1hl2+72N/YMYPDB
/mGVyDr3h7egfNLVU8scXOqHuvsBAFGMaA==
              "], {{0, 0}, {4, 4}}, {0, 
              1}], Frame -> False, FrameLabel -> {None, None}, 
             FrameTicks -> {{None, None}, {None, None}}, GridLinesStyle -> 
             Directive[
               GrayLevel[0.5, 0.4]], ImageSize -> 
             Dynamic[{
               Automatic, 
                3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                 Magnification])}], 
             Method -> {
              "AxisPadding" -> Scaled[0.02], "DefaultBoundaryStyle" -> 
               Automatic, 
               "DefaultGraphicsInteraction" -> {
                "Version" -> 1.2, "TrackMousePosition" -> {True, False}, 
                 "Effects" -> {
                  "Highlight" -> {"ratio" -> 2}, 
                   "HighlightPoint" -> {"ratio" -> 2}, 
                   "Droplines" -> {
                    "freeformCursorMode" -> True, 
                    "placement" -> {"x" -> "All", "y" -> "None"}}}}, 
               "DefaultPlotStyle" -> Automatic, "DomainPadding" -> 
               Scaled[0.02], "RangePadding" -> Scaled[0.05]}], 
            GridBox[{{
               RowBox[{
                 TagBox["\"StateType: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox["\"Vector\"", "SummaryItem"]}], 
               RowBox[{
                 TagBox["\"Qudits: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox["2", "SummaryItem"]}]}, {
               RowBox[{
                 TagBox["\"Type: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox["\"Pure\"", "SummaryItem"]}], 
               RowBox[{
                 TagBox["\"Dimension: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox["4", "SummaryItem"]}]}, {
               RowBox[{
                 TagBox["\"Picture: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox["\"Schr\[ODoubleDot]dinger\"", "SummaryItem"]}], ""}},
              GridBoxAlignment -> {
              "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, AutoDelete -> 
             False, GridBoxItemSize -> {
              "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
             GridBoxSpacings -> {"Columns" -> {{2}}, "Rows" -> {{Automatic}}},
              BaseStyle -> {
              ShowStringCharacters -> False, NumberMarks -> False, 
               PrintPrecision -> 3, ShowSyntaxStyles -> False}]}}, 
          GridBoxAlignment -> {"Columns" -> {{Left}}, "Rows" -> {{Top}}}, 
          AutoDelete -> False, 
          GridBoxItemSize -> {
           "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
          BaselinePosition -> {1, 1}], True -> GridBox[{{
            PaneBox[
             ButtonBox[
              DynamicBox[
               FEPrivate`FrontEndResource["FEBitmaps", "SummaryBoxCloser"]], 
              ButtonFunction :> (Typeset`open$$ = False), Appearance -> None, 
              BaseStyle -> {}, Evaluator -> Automatic, Method -> 
              "Preemptive"], Alignment -> {Center, Center}, ImageSize -> 
             Dynamic[{
               Automatic, 
                3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                 Magnification])}]], 
            GraphicsBox[
             RasterBox[CompressedData["
1:eJxTTMoPSmVmYGBggWIQW0u+adXF1RfskwQiLLecuGZ/W1hl2+72N/YMYPDB
/mGVyDr3h7egfNLVU8scXOqHuvsBAFGMaA==
              "], {{0, 0}, {4, 4}}, {0, 
              1}], Frame -> False, FrameLabel -> {None, None}, 
             FrameTicks -> {{None, None}, {None, None}}, GridLinesStyle -> 
             Directive[
               GrayLevel[0.5, 0.4]], ImageSize -> 
             Dynamic[{
               Automatic, 
                3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                 Magnification])}], 
             Method -> {
              "AxisPadding" -> Scaled[0.02], "DefaultBoundaryStyle" -> 
               Automatic, 
               "DefaultGraphicsInteraction" -> {
                "Version" -> 1.2, "TrackMousePosition" -> {True, False}, 
                 "Effects" -> {
                  "Highlight" -> {"ratio" -> 2}, 
                   "HighlightPoint" -> {"ratio" -> 2}, 
                   "Droplines" -> {
                    "freeformCursorMode" -> True, 
                    "placement" -> {"x" -> "All", "y" -> "None"}}}}, 
               "DefaultPlotStyle" -> Automatic, "DomainPadding" -> 
               Scaled[0.02], "RangePadding" -> Scaled[0.05]}], 
            GridBox[{{
               RowBox[{
                 TagBox["\"StateType: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox["\"Vector\"", "SummaryItem"]}], 
               RowBox[{
                 TagBox["\"Qudits: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox["2", "SummaryItem"]}]}, {
               RowBox[{
                 TagBox["\"Type: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox["\"Pure\"", "SummaryItem"]}], 
               RowBox[{
                 TagBox["\"Dimension: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox["4", "SummaryItem"]}]}, {
               RowBox[{
                 TagBox["\"Picture: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox["\"Schr\[ODoubleDot]dinger\"", "SummaryItem"]}], ""}, {
               RowBox[{
                 TagBox["\"Purity: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox["1.`", "SummaryItem"]}], ""}, {
               RowBox[{
                 TagBox["\"Von Neumann Entropy: \"", "SummaryItemAnnotation"],
                  "\[InvisibleSpace]", 
                 TagBox[
                  
                  TemplateBox[{"0.`", "\"b\"", "bits", "\"Bits\""}, 
                   "Quantity", SyntaxForm -> Mod], "SummaryItem"]}], ""}, {
               RowBox[{
                 TagBox["\"Dimensions: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox[
                  RowBox[{"{", 
                    RowBox[{"2", ",", "2"}], "}"}], "SummaryItem"]}], ""}, {
               RowBox[{
                 TagBox["\"ParameterArity: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox["0", "SummaryItem"]}], 
               RowBox[{
                 TagBox["\"Parameters: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox[
                  RowBox[{"{", "}"}], "SummaryItem"]}]}}, 
             GridBoxAlignment -> {
              "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, AutoDelete -> 
             False, GridBoxItemSize -> {
              "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
             GridBoxSpacings -> {"Columns" -> {{2}}, "Rows" -> {{Automatic}}},
              BaseStyle -> {
              ShowStringCharacters -> False, NumberMarks -> False, 
               PrintPrecision -> 3, ShowSyntaxStyles -> False}]}}, 
          GridBoxAlignment -> {"Columns" -> {{Left}}, "Rows" -> {{Top}}}, 
          AutoDelete -> False, 
          GridBoxItemSize -> {
           "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
          BaselinePosition -> {1, 1}]}, 
       Dynamic[Typeset`open$$], ImageSize -> Automatic]},
     "SummaryPanel"],
    DynamicModuleValues:>{}], "]"}],
  Wolfram`QuantumFramework`QuantumState[
   SparseArray[Automatic, {4}, 0, {1, {{0, 4}, {{1}, {2}, {3}, {4}}}, {
      Rational[-1, 2], 
      Rational[1, 2], 
      Rational[-1, 2], 
      Rational[1, 2]}}], 
   Wolfram`QuantumFramework`QuantumBasis[<|
    "Output" -> Wolfram`QuantumFramework`QuditBasis[<|{
          Wolfram`QuantumFramework`QuditName[0, "Dual" -> False], 1} -> 
        SparseArray[Automatic, {2}, 0, {1, {{0, 1}, {{1}}}, {1}}], {
          Wolfram`QuantumFramework`QuditName[1, "Dual" -> False], 1} -> 
        SparseArray[Automatic, {2}, 0, {1, {{0, 1}, {{2}}}, {1}}], {
          Wolfram`QuantumFramework`QuditName[0, "Dual" -> False], 2} -> 
        SparseArray[Automatic, {2}, 0, {1, {{0, 1}, {{1}}}, {1}}], {
          Wolfram`QuantumFramework`QuditName[1, "Dual" -> False], 2} -> 
        SparseArray[Automatic, {2}, 0, {1, {{0, 1}, {{2}}}, {1}}]|>], "Input" -> 
     Wolfram`QuantumFramework`QuditBasis[<|{
          
          Wolfram`QuantumFramework`QuditName[\[FormalCapitalI], "Dual" -> 
           False], 1} -> 1|>], "Picture" -> "Schr\[ODoubleDot]dinger", 
     "Label" -> CircleTimes["+", "-"], "ParameterSpec" -> {}|>]],
  Editable->False,
  SelectWithContents->True,
  Selectable->False]], "Output",
 CellChangeTimes->{{3.841075778651243*^9, 3.84107582017299*^9}, {
   3.8410758570150013`*^9, 3.84107590728156*^9}, 3.841076932316979*^9, 
   3.8410769835653687`*^9, 3.8410784711672564`*^9, 3.8410785442174253`*^9, 
   3.841079078193989*^9, 3.841079465927289*^9, 3.841079646755548*^9, {
   3.841079754311804*^9, 3.841079821631288*^9}, 3.8410800087869987`*^9, {
   3.8410800429410067`*^9, 3.841080063563486*^9}, 3.84108010499826*^9, 
   3.841080148149797*^9, 3.841080325593912*^9, {3.841080488230867*^9, 
   3.8410805452327433`*^9}, 3.84108057723281*^9, 3.841080628832789*^9, {
   3.841080661688246*^9, 3.841080707710718*^9}, {3.84108852191459*^9, 
   3.8410885367450447`*^9}, {3.841088583400566*^9, 3.84108858810081*^9}, 
   3.8429047314941063`*^9, {3.843147062369788*^9, 3.843147081879332*^9}, 
   3.858281530072414*^9, {3.8582816727206984`*^9, 3.858281687656364*^9}, 
   3.858285723717465*^9},
 CellLabel->
  "Out[200]=",ExpressionUUID->"13135f1d-00ef-4a84-a469-b396719b4ea0"],

Cell[BoxData[
 InterpretationBox[
  RowBox[{
   TagBox["QuantumOperator",
    "SummaryHead"], "[", 
   DynamicModuleBox[{Typeset`open$$ = False, Typeset`embedState$$ = "Ready"}, 
    
    TemplateBox[{
      PaneSelectorBox[{False -> GridBox[{{
            PaneBox[
             ButtonBox[
              DynamicBox[
               FEPrivate`FrontEndResource["FEBitmaps", "SummaryBoxOpener"]], 
              ButtonFunction :> (Typeset`open$$ = True), Appearance -> None, 
              BaseStyle -> {}, Evaluator -> Automatic, Method -> 
              "Preemptive"], Alignment -> {Center, Center}, ImageSize -> 
             Dynamic[{
               Automatic, 
                3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                 Magnification])}]], 
            GraphicsBox[
             RasterBox[CompressedData["
1:eJxTTMoPSmVmYGBggWIQGwI+2KPTvS+ebgm5+dpeTtppf4PnY/snUx8+O/Zg
O4Y6GH1un+fdPZsu2Jtekvb///WB/UGZyTvvX30Fl39YJbLO/eEtewYUgGmO
lnzTqourL9gnCURYbjlxzf62sMq23e1vcNpLLfcTUk+s+0lVDwC5zXR7
              "], {{
              0, 0}, {4, 4}}, {0, 1}], Frame -> False, 
             FrameLabel -> {None, None}, 
             FrameTicks -> {{None, None}, {None, None}}, GridLinesStyle -> 
             Directive[
               GrayLevel[0.5, 0.4]], ImageSize -> 
             Dynamic[{
               Automatic, 
                3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                 Magnification])}], 
             Method -> {
              "AxisPadding" -> Scaled[0.02], "DefaultBoundaryStyle" -> 
               Automatic, 
               "DefaultGraphicsInteraction" -> {
                "Version" -> 1.2, "TrackMousePosition" -> {True, False}, 
                 "Effects" -> {
                  "Highlight" -> {"ratio" -> 2}, 
                   "HighlightPoint" -> {"ratio" -> 2}, 
                   "Droplines" -> {
                    "freeformCursorMode" -> True, 
                    "placement" -> {"x" -> "All", "y" -> "None"}}}}, 
               "DefaultPlotStyle" -> Automatic, "DomainPadding" -> 
               Scaled[0.02], "RangePadding" -> Scaled[0.05]}], 
            GridBox[{{
               RowBox[{
                 TagBox["\"Picture: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox["\"Schr\[ODoubleDot]dinger\"", "SummaryItem"]}], 
               RowBox[{
                 TagBox["\"Arity: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox["2", "SummaryItem"]}]}, {
               RowBox[{
                 TagBox["\"Dimension: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox[
                  TemplateBox[{"4", "\"\[RightArrow]\"", "4"}, "RowDefault"], 
                  "SummaryItem"]}], 
               RowBox[{
                 TagBox["\"Qudits: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox[
                  TemplateBox[{"2", "\"\[RightArrow]\"", "2"}, "RowDefault"], 
                  "SummaryItem"]}]}}, 
             GridBoxAlignment -> {
              "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, AutoDelete -> 
             False, GridBoxItemSize -> {
              "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
             GridBoxSpacings -> {"Columns" -> {{2}}, "Rows" -> {{Automatic}}},
              BaseStyle -> {
              ShowStringCharacters -> False, NumberMarks -> False, 
               PrintPrecision -> 3, ShowSyntaxStyles -> False}]}}, 
          GridBoxAlignment -> {"Columns" -> {{Left}}, "Rows" -> {{Top}}}, 
          AutoDelete -> False, 
          GridBoxItemSize -> {
           "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
          BaselinePosition -> {1, 1}], True -> GridBox[{{
            PaneBox[
             ButtonBox[
              DynamicBox[
               FEPrivate`FrontEndResource["FEBitmaps", "SummaryBoxCloser"]], 
              ButtonFunction :> (Typeset`open$$ = False), Appearance -> None, 
              BaseStyle -> {}, Evaluator -> Automatic, Method -> 
              "Preemptive"], Alignment -> {Center, Center}, ImageSize -> 
             Dynamic[{
               Automatic, 
                3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                 Magnification])}]], 
            GraphicsBox[
             RasterBox[CompressedData["
1:eJxTTMoPSmVmYGBggWIQGwI+2KPTvS+ebgm5+dpeTtppf4PnY/snUx8+O/Zg
O4Y6GH1un+fdPZsu2Jtekvb///WB/UGZyTvvX30Fl39YJbLO/eEtewYUgGmO
lnzTqourL9gnCURYbjlxzf62sMq23e1vcNpLLfcTUk+s+0lVDwC5zXR7
              "], {{
              0, 0}, {4, 4}}, {0, 1}], Frame -> False, 
             FrameLabel -> {None, None}, 
             FrameTicks -> {{None, None}, {None, None}}, GridLinesStyle -> 
             Directive[
               GrayLevel[0.5, 0.4]], ImageSize -> 
             Dynamic[{
               Automatic, 
                3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                 Magnification])}], 
             Method -> {
              "AxisPadding" -> Scaled[0.02], "DefaultBoundaryStyle" -> 
               Automatic, 
               "DefaultGraphicsInteraction" -> {
                "Version" -> 1.2, "TrackMousePosition" -> {True, False}, 
                 "Effects" -> {
                  "Highlight" -> {"ratio" -> 2}, 
                   "HighlightPoint" -> {"ratio" -> 2}, 
                   "Droplines" -> {
                    "freeformCursorMode" -> True, 
                    "placement" -> {"x" -> "All", "y" -> "None"}}}}, 
               "DefaultPlotStyle" -> Automatic, "DomainPadding" -> 
               Scaled[0.02], "RangePadding" -> Scaled[0.05]}], 
            GridBox[{{
               RowBox[{
                 TagBox["\"Picture: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox["\"Schr\[ODoubleDot]dinger\"", "SummaryItem"]}], 
               RowBox[{
                 TagBox["\"Arity: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox["2", "SummaryItem"]}]}, {
               RowBox[{
                 TagBox["\"Dimension: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox[
                  TemplateBox[{"4", "\"\[RightArrow]\"", "4"}, "RowDefault"], 
                  "SummaryItem"]}], 
               RowBox[{
                 TagBox["\"Qudits: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox[
                  TemplateBox[{"2", "\"\[RightArrow]\"", "2"}, "RowDefault"], 
                  "SummaryItem"]}]}, {
               RowBox[{
                 TagBox["\"Hermitian: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox["False", "SummaryItem"]}], 
               RowBox[{
                 TagBox["\"Order: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox[
                  TemplateBox[{
                    RowBox[{"{", 
                    RowBox[{"1", ",", "2"}], "}"}], "\"\[RightArrow]\"", 
                    RowBox[{"{", 
                    RowBox[{"1", ",", "2"}], "}"}]}, "RowDefault"], 
                  "SummaryItem"]}]}, {
               RowBox[{
                 TagBox["\"Unitary: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox["True", "SummaryItem"]}], 
               RowBox[{
                 TagBox["\"Dimensions: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox[
                  TemplateBox[{
                    RowBox[{"{", 
                    RowBox[{"2", ",", "2"}], "}"}], "\"\[RightArrow]\"", 
                    RowBox[{"{", 
                    RowBox[{"2", ",", "2"}], "}"}]}, "RowDefault"], 
                  "SummaryItem"]}]}, {
               RowBox[{
                 TagBox["\"ParameterArity: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox["0", "SummaryItem"]}], 
               RowBox[{
                 TagBox["\"Parameters: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox[
                  RowBox[{"{", "}"}], "SummaryItem"]}]}}, 
             GridBoxAlignment -> {
              "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, AutoDelete -> 
             False, GridBoxItemSize -> {
              "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
             GridBoxSpacings -> {"Columns" -> {{2}}, "Rows" -> {{Automatic}}},
              BaseStyle -> {
              ShowStringCharacters -> False, NumberMarks -> False, 
               PrintPrecision -> 3, ShowSyntaxStyles -> False}]}}, 
          GridBoxAlignment -> {"Columns" -> {{Left}}, "Rows" -> {{Top}}}, 
          AutoDelete -> False, 
          GridBoxItemSize -> {
           "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
          BaselinePosition -> {1, 1}]}, 
       Dynamic[Typeset`open$$], ImageSize -> Automatic]},
     "SummaryPanel"],
    DynamicModuleValues:>{}], "]"}],
  Wolfram`QuantumFramework`QuantumOperator[
   Wolfram`QuantumFramework`QuantumState[
    SparseArray[
    Automatic, {16}, 0, {
     1, {{0, 8}, {{1}, {3}, {6}, {8}, {9}, {11}, {14}, {16}}}, {
      2^Rational[-1, 2], 2^Rational[-1, 2], 2^Rational[-1, 2] E^(Complex[0, 
           Rational[1, 4]] Pi), 2^Rational[-1, 2] E^(Complex[0, 
           Rational[1, 4]] Pi), 2^Rational[-1, 2], -2^Rational[-1, 2], 
       2^Rational[-1, 2] E^(Complex[0, 
           Rational[1, 4]] Pi), -2^Rational[-1, 2] E^(Complex[0, 
           Rational[1, 4]] Pi)}}], 
    Wolfram`QuantumFramework`QuantumBasis[<|
     "Output" -> Wolfram`QuantumFramework`QuditBasis[<|{
           Wolfram`QuantumFramework`QuditName[0, "Dual" -> False], 1} -> 
         SparseArray[Automatic, {2}, 0, {1, {{0, 1}, {{1}}}, {1}}], {
           Wolfram`QuantumFramework`QuditName[1, "Dual" -> False], 1} -> 
         SparseArray[Automatic, {2}, 0, {1, {{0, 1}, {{2}}}, {1}}], {
           Wolfram`QuantumFramework`QuditName[0, "Dual" -> False], 2} -> 
         SparseArray[Automatic, {2}, 0, {1, {{0, 1}, {{1}}}, {1}}], {
           Wolfram`QuantumFramework`QuditName[1, "Dual" -> False], 2} -> 
         SparseArray[Automatic, {2}, 0, {1, {{0, 1}, {{2}}}, {1}}]|>], 
      "Input" -> Wolfram`QuantumFramework`QuditBasis[<|{
           Wolfram`QuantumFramework`QuditName[0, "Dual" -> True], 1} -> 
         SparseArray[Automatic, {2}, 0, {1, {{0, 1}, {{1}}}, {1}}], {
           Wolfram`QuantumFramework`QuditName[1, "Dual" -> True], 1} -> 
         SparseArray[Automatic, {2}, 0, {1, {{0, 1}, {{2}}}, {1}}], {
           Wolfram`QuantumFramework`QuditName[0, "Dual" -> True], 2} -> 
         SparseArray[Automatic, {2}, 0, {1, {{0, 1}, {{1}}}, {1}}], {
           Wolfram`QuantumFramework`QuditName[1, "Dual" -> True], 2} -> 
         SparseArray[Automatic, {2}, 0, {1, {{0, 1}, {{2}}}, {1}}]|>], 
      "Picture" -> "Schr\[ODoubleDot]dinger", "Label" -> 
      CircleTimes["QFT", "T"], "ParameterSpec" -> {}|>]], {{1, 2}, {1, 2}}],
  Editable->False,
  SelectWithContents->True,
  Selectable->False]], "Output",
 CellChangeTimes->{{3.841075778651243*^9, 3.84107582017299*^9}, {
   3.8410758570150013`*^9, 3.84107590728156*^9}, 3.841076932316979*^9, 
   3.8410769835653687`*^9, 3.8410784711672564`*^9, 3.8410785442174253`*^9, 
   3.841079078193989*^9, 3.841079465927289*^9, 3.841079646755548*^9, {
   3.841079754311804*^9, 3.841079821631288*^9}, 3.8410800087869987`*^9, {
   3.8410800429410067`*^9, 3.841080063563486*^9}, 3.84108010499826*^9, 
   3.841080148149797*^9, 3.841080325593912*^9, {3.841080488230867*^9, 
   3.8410805452327433`*^9}, 3.84108057723281*^9, 3.841080628832789*^9, {
   3.841080661688246*^9, 3.841080707710718*^9}, {3.84108852191459*^9, 
   3.8410885367450447`*^9}, {3.841088583400566*^9, 3.84108858810081*^9}, 
   3.8429047314941063`*^9, {3.843147062369788*^9, 3.843147081879332*^9}, 
   3.858281530072414*^9, {3.8582816727206984`*^9, 3.858281687656364*^9}, 
   3.858285723832451*^9},
 CellLabel->
  "Out[201]=",ExpressionUUID->"df3d3021-7909-4e69-8bef-ecb1ca2f02ff"],

Cell[BoxData[
 InterpretationBox[
  RowBox[{
   TagBox["QuantumMeasurementOperator",
    "SummaryHead"], "[", 
   DynamicModuleBox[{Typeset`open$$ = False, Typeset`embedState$$ = "Ready"}, 
    
    TemplateBox[{
      PaneSelectorBox[{False -> GridBox[{{
            PaneBox[
             ButtonBox[
              DynamicBox[
               FEPrivate`FrontEndResource["FEBitmaps", "SummaryBoxOpener"]], 
              ButtonFunction :> (Typeset`open$$ = True), Appearance -> None, 
              BaseStyle -> {}, Evaluator -> Automatic, Method -> 
              "Preemptive"], Alignment -> {Center, Center}, ImageSize -> 
             Dynamic[{
               Automatic, 
                3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                 Magnification])}]], 
            GraphicsBox[
             RasterBox[CompressedData["
1:eJxTTMoPSmVmYGBggWIQGwI+2NOaflglss794S17BhRAPfVD1f0A+cNCiA==

              "], {{0, 0}, {4, 4}}, {0, 1}], Frame -> False, 
             FrameLabel -> {None, None}, 
             FrameTicks -> {{None, None}, {None, None}}, GridLinesStyle -> 
             Directive[
               GrayLevel[0.5, 0.4]], ImageSize -> 
             Dynamic[{
               Automatic, 
                3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                 Magnification])}], 
             Method -> {
              "AxisPadding" -> Scaled[0.02], "DefaultBoundaryStyle" -> 
               Automatic, 
               "DefaultGraphicsInteraction" -> {
                "Version" -> 1.2, "TrackMousePosition" -> {True, False}, 
                 "Effects" -> {
                  "Highlight" -> {"ratio" -> 2}, 
                   "HighlightPoint" -> {"ratio" -> 2}, 
                   "Droplines" -> {
                    "freeformCursorMode" -> True, 
                    "placement" -> {"x" -> "All", "y" -> "None"}}}}, 
               "DefaultPlotStyle" -> Automatic, "DomainPadding" -> 
               Scaled[0.02], "RangePadding" -> Scaled[0.05]}], 
            GridBox[{{
               RowBox[{
                 TagBox["\"Measurement Type: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox["\"Projection\"", "SummaryItem"]}], 
               RowBox[{
                 TagBox["\"Target: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox[
                  RowBox[{"{", 
                    RowBox[{"1", ",", "2"}], "}"}], "SummaryItem"]}]}, {
               RowBox[{
                 TagBox["\"Dimension: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox[
                  TemplateBox[{"4", "\"\[RightArrow]\"", "4"}, "RowDefault"], 
                  "SummaryItem"]}], 
               RowBox[{
                 TagBox["\"Qudits: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox[
                  TemplateBox[{"2", "\"\[RightArrow]\"", "2"}, "RowDefault"], 
                  "SummaryItem"]}]}}, 
             GridBoxAlignment -> {
              "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, AutoDelete -> 
             False, GridBoxItemSize -> {
              "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
             GridBoxSpacings -> {"Columns" -> {{2}}, "Rows" -> {{Automatic}}},
              BaseStyle -> {
              ShowStringCharacters -> False, NumberMarks -> False, 
               PrintPrecision -> 3, ShowSyntaxStyles -> False}]}}, 
          GridBoxAlignment -> {"Columns" -> {{Left}}, "Rows" -> {{Top}}}, 
          AutoDelete -> False, 
          GridBoxItemSize -> {
           "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
          BaselinePosition -> {1, 1}], True -> GridBox[{{
            PaneBox[
             ButtonBox[
              DynamicBox[
               FEPrivate`FrontEndResource["FEBitmaps", "SummaryBoxCloser"]], 
              ButtonFunction :> (Typeset`open$$ = False), Appearance -> None, 
              BaseStyle -> {}, Evaluator -> Automatic, Method -> 
              "Preemptive"], Alignment -> {Center, Center}, ImageSize -> 
             Dynamic[{
               Automatic, 
                3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                 Magnification])}]], 
            GraphicsBox[
             RasterBox[CompressedData["
1:eJxTTMoPSmVmYGBggWIQGwI+2NOaflglss794S17BhRAPfVD1f0A+cNCiA==

              "], {{0, 0}, {4, 4}}, {0, 1}], Frame -> False, 
             FrameLabel -> {None, None}, 
             FrameTicks -> {{None, None}, {None, None}}, GridLinesStyle -> 
             Directive[
               GrayLevel[0.5, 0.4]], ImageSize -> 
             Dynamic[{
               Automatic, 
                3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                 Magnification])}], 
             Method -> {
              "AxisPadding" -> Scaled[0.02], "DefaultBoundaryStyle" -> 
               Automatic, 
               "DefaultGraphicsInteraction" -> {
                "Version" -> 1.2, "TrackMousePosition" -> {True, False}, 
                 "Effects" -> {
                  "Highlight" -> {"ratio" -> 2}, 
                   "HighlightPoint" -> {"ratio" -> 2}, 
                   "Droplines" -> {
                    "freeformCursorMode" -> True, 
                    "placement" -> {"x" -> "All", "y" -> "None"}}}}, 
               "DefaultPlotStyle" -> Automatic, "DomainPadding" -> 
               Scaled[0.02], "RangePadding" -> Scaled[0.05]}], 
            GridBox[{{
               RowBox[{
                 TagBox["\"Measurement Type: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox["\"Projection\"", "SummaryItem"]}], 
               RowBox[{
                 TagBox["\"Target: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox[
                  RowBox[{"{", 
                    RowBox[{"1", ",", "2"}], "}"}], "SummaryItem"]}]}, {
               RowBox[{
                 TagBox["\"Dimension: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox[
                  TemplateBox[{"4", "\"\[RightArrow]\"", "4"}, "RowDefault"], 
                  "SummaryItem"]}], 
               RowBox[{
                 TagBox["\"Qudits: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox[
                  TemplateBox[{"2", "\"\[RightArrow]\"", "2"}, "RowDefault"], 
                  "SummaryItem"]}]}, {
               RowBox[{
                 TagBox["\"Hermitian: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox["True", "SummaryItem"]}], 
               RowBox[{
                 TagBox["\"Order: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox[
                  TemplateBox[{
                    RowBox[{"{", 
                    RowBox[{"1", ",", "2"}], "}"}], "\"\[RightArrow]\"", 
                    RowBox[{"{", 
                    RowBox[{"1", ",", "2"}], "}"}]}, "RowDefault"], 
                  "SummaryItem"]}]}, {
               RowBox[{
                 TagBox["\"Unitary: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox["False", "SummaryItem"]}], 
               RowBox[{
                 TagBox["\"Dimensions: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox[
                  TemplateBox[{
                    RowBox[{"{", 
                    RowBox[{"2", ",", "2"}], "}"}], "\"\[RightArrow]\"", 
                    RowBox[{"{", 
                    RowBox[{"2", ",", "2"}], "}"}]}, "RowDefault"], 
                  "SummaryItem"]}]}}, 
             GridBoxAlignment -> {
              "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, AutoDelete -> 
             False, GridBoxItemSize -> {
              "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
             GridBoxSpacings -> {"Columns" -> {{2}}, "Rows" -> {{Automatic}}},
              BaseStyle -> {
              ShowStringCharacters -> False, NumberMarks -> False, 
               PrintPrecision -> 3, ShowSyntaxStyles -> False}]}}, 
          GridBoxAlignment -> {"Columns" -> {{Left}}, "Rows" -> {{Top}}}, 
          AutoDelete -> False, 
          GridBoxItemSize -> {
           "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
          BaselinePosition -> {1, 1}]}, 
       Dynamic[Typeset`open$$], ImageSize -> Automatic]},
     "SummaryPanel"],
    DynamicModuleValues:>{}], "]"}],
  Wolfram`QuantumFramework`QuantumMeasurementOperator[
   Wolfram`QuantumFramework`QuantumOperator[
    Wolfram`QuantumFramework`QuantumState[
     SparseArray[Automatic, {16}, 0, {1, {{0, 1}, {{16}}}, {1}}], 
     Wolfram`QuantumFramework`QuantumBasis[<|
      "Output" -> Wolfram`QuantumFramework`QuditBasis[<|{
            Wolfram`QuantumFramework`QuditName[
             Subscript["\[Psi]", 
              Subscript["x", "-"]], "Dual" -> False], 1} -> 
          SparseArray[
           Automatic, {2}, 0, {
            1, {{0, 2}, {{1}, {2}}}, {-2^Rational[-1, 2], 2^
              Rational[-1, 2]}}], {
            Wolfram`QuantumFramework`QuditName[
             Subscript["\[Psi]", 
              Subscript["x", "+"]], "Dual" -> False], 1} -> 
          SparseArray[
           Automatic, {2}, 0, {
            1, {{0, 2}, {{1}, {2}}}, {
             2^Rational[-1, 2], 2^Rational[-1, 2]}}], {
            Wolfram`QuantumFramework`QuditName[
             Subscript["\[Psi]", 
              Subscript["z", "-"]], "Dual" -> False], 2} -> 
          SparseArray[Automatic, {2}, 0, {1, {{0, 1}, {{2}}}, {1}}], {
            Wolfram`QuantumFramework`QuditName[
             Subscript["\[Psi]", 
              Subscript["z", "+"]], "Dual" -> False], 2} -> 
          SparseArray[Automatic, {2}, 0, {1, {{0, 1}, {{1}}}, {1}}]|>], 
       "Input" -> Wolfram`QuantumFramework`QuditBasis[<|{
            Wolfram`QuantumFramework`QuditName[
             Subscript["\[Psi]", 
              Subscript["x", "-"]], "Dual" -> True], 1} -> 
          SparseArray[
           Automatic, {2}, 0, {
            1, {{0, 2}, {{1}, {2}}}, {-2^Rational[-1, 2], 2^
              Rational[-1, 2]}}], {
            Wolfram`QuantumFramework`QuditName[
             Subscript["\[Psi]", 
              Subscript["x", "+"]], "Dual" -> True], 1} -> 
          SparseArray[
           Automatic, {2}, 0, {
            1, {{0, 2}, {{1}, {2}}}, {
             2^Rational[-1, 2], 2^Rational[-1, 2]}}], {
            Wolfram`QuantumFramework`QuditName[
             Subscript["\[Psi]", 
              Subscript["z", "-"]], "Dual" -> True], 2} -> 
          SparseArray[Automatic, {2}, 0, {1, {{0, 1}, {{2}}}, {1}}], {
            Wolfram`QuantumFramework`QuditName[
             Subscript["\[Psi]", 
              Subscript["z", "+"]], "Dual" -> True], 2} -> 
          SparseArray[Automatic, {2}, 0, {1, {{0, 1}, {{1}}}, {1}}]|>], 
       "Picture" -> "Schr\[ODoubleDot]dinger", "Label" -> 
       CircleTimes["X", "Z"], "ParameterSpec" -> {}|>]], {{1, 2}, {1, 2}}], {
   1, 2}],
  Editable->False,
  SelectWithContents->True,
  Selectable->False]], "Output",
 CellChangeTimes->{{3.841075778651243*^9, 3.84107582017299*^9}, {
   3.8410758570150013`*^9, 3.84107590728156*^9}, 3.841076932316979*^9, 
   3.8410769835653687`*^9, 3.8410784711672564`*^9, 3.8410785442174253`*^9, 
   3.841079078193989*^9, 3.841079465927289*^9, 3.841079646755548*^9, {
   3.841079754311804*^9, 3.841079821631288*^9}, 3.8410800087869987`*^9, {
   3.8410800429410067`*^9, 3.841080063563486*^9}, 3.84108010499826*^9, 
   3.841080148149797*^9, 3.841080325593912*^9, {3.841080488230867*^9, 
   3.8410805452327433`*^9}, 3.84108057723281*^9, 3.841080628832789*^9, {
   3.841080661688246*^9, 3.841080707710718*^9}, {3.84108852191459*^9, 
   3.8410885367450447`*^9}, {3.841088583400566*^9, 3.84108858810081*^9}, 
   3.8429047314941063`*^9, {3.843147062369788*^9, 3.843147081879332*^9}, 
   3.858281530072414*^9, {3.8582816727206984`*^9, 3.858281687656364*^9}, 
   3.85828572397473*^9},
 CellLabel->
  "Out[202]=",ExpressionUUID->"8d135f74-2a53-4ed7-8c5a-55b5c3f8a890"]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["QuditBasis", "Section",
 CellChangeTimes->{
  3.841079423832621*^9},ExpressionUUID->"fdf330ef-0c95-4cd2-a86f-\
b777f78d661e"],

Cell["\<\
QuditBasis is a mapping from a qudit name to its tensor representation\
\>", "Text",
 CellChangeTimes->{{3.841073502657234*^9, 
  3.8410735322507877`*^9}},ExpressionUUID->"f14f7f6b-05f1-45ff-99c6-\
94c974776586"],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{"QuditBasis", "[", 
  RowBox[{"{", 
   RowBox[{"\"\<Fourier\>\"", ",", "\"\<Bell\>\""}], "}"}], 
  "]"}], "\[IndentingNewLine]", 
 RowBox[{"Dataset", "@", 
  RowBox[{"AssociationMap", "[", 
   RowBox[{"%", ",", 
    RowBox[{"%", "[", "\"\<Properties\>\"", "]"}]}], "]"}]}]}], "Input",
 CellChangeTimes->{{3.8410755778772573`*^9, 3.841075668563265*^9}, {
  3.8410757022377872`*^9, 3.841075735059868*^9}, {3.841077026354385*^9, 
  3.8410770288186703`*^9}, {3.842904793316154*^9, 3.8429048243896227`*^9}, {
  3.858281952164225*^9, 3.858281962529997*^9}},
 CellLabel->
  "In[203]:=",ExpressionUUID->"a63601be-69f6-43d8-8b16-1fae203723ba"],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\[LeftAssociation]", 
   RowBox[{
    RowBox[{
     InterpretationBox[
      TemplateBox[{
        RowBox[{
          SubscriptBox["\"F\"", "1"], "\[InvisibleSpace]", 
          
          TemplateBox[{"\"\[CapitalPhi]\"", "\"-\""}, "Superscript", 
           SyntaxForm -> SuperscriptBox]}]},
       "Ket"],
      Wolfram`QuantumFramework`QuditName[{
        Subscript["F", 1], 
        Superscript["\[CapitalPhi]", "-"]}, "Dual" -> False]], "\[Rule]", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{
         FractionBox["1", "2"], ",", "0", ",", "0", ",", 
         RowBox[{"-", 
          FractionBox["1", "2"]}]}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{
         FractionBox["1", "2"], ",", "0", ",", "0", ",", 
         RowBox[{"-", 
          FractionBox["1", "2"]}]}], "}"}]}], "}"}]}], ",", 
    RowBox[{
     InterpretationBox[
      TemplateBox[{
        RowBox[{
          SubscriptBox["\"F\"", "1"], "\[InvisibleSpace]", 
          
          TemplateBox[{"\"\[CapitalPhi]\"", "\"+\""}, "Superscript", 
           SyntaxForm -> SuperscriptBox]}]},
       "Ket"],
      Wolfram`QuantumFramework`QuditName[{
        Subscript["F", 1], 
        Superscript["\[CapitalPhi]", "+"]}, "Dual" -> False]], "\[Rule]", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{
         FractionBox["1", "2"], ",", "0", ",", "0", ",", 
         FractionBox["1", "2"]}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{
         FractionBox["1", "2"], ",", "0", ",", "0", ",", 
         FractionBox["1", "2"]}], "}"}]}], "}"}]}], ",", 
    RowBox[{
     InterpretationBox[
      TemplateBox[{
        RowBox[{
          SubscriptBox["\"F\"", "1"], "\[InvisibleSpace]", 
          
          TemplateBox[{"\"\[CapitalPsi]\"", "\"-\""}, "Superscript", 
           SyntaxForm -> SuperscriptBox]}]},
       "Ket"],
      Wolfram`QuantumFramework`QuditName[{
        Subscript["F", 1], 
        Superscript["\[CapitalPsi]", "-"]}, "Dual" -> False]], "\[Rule]", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{"0", ",", 
         FractionBox["1", "2"], ",", 
         RowBox[{"-", 
          FractionBox["1", "2"]}], ",", "0"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{"0", ",", 
         FractionBox["1", "2"], ",", 
         RowBox[{"-", 
          FractionBox["1", "2"]}], ",", "0"}], "}"}]}], "}"}]}], ",", 
    RowBox[{
     InterpretationBox[
      TemplateBox[{
        RowBox[{
          SubscriptBox["\"F\"", "1"], "\[InvisibleSpace]", 
          
          TemplateBox[{"\"\[CapitalPsi]\"", "\"+\""}, "Superscript", 
           SyntaxForm -> SuperscriptBox]}]},
       "Ket"],
      Wolfram`QuantumFramework`QuditName[{
        Subscript["F", 1], 
        Superscript["\[CapitalPsi]", "+"]}, "Dual" -> False]], "\[Rule]", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{"0", ",", 
         FractionBox["1", "2"], ",", 
         FractionBox["1", "2"], ",", "0"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{"0", ",", 
         FractionBox["1", "2"], ",", 
         FractionBox["1", "2"], ",", "0"}], "}"}]}], "}"}]}], ",", 
    RowBox[{
     InterpretationBox[
      TemplateBox[{
        RowBox[{
          SubscriptBox["\"F\"", "2"], "\[InvisibleSpace]", 
          
          TemplateBox[{"\"\[CapitalPhi]\"", "\"-\""}, "Superscript", 
           SyntaxForm -> SuperscriptBox]}]},
       "Ket"],
      Wolfram`QuantumFramework`QuditName[{
        Subscript["F", 2], 
        Superscript["\[CapitalPhi]", "-"]}, "Dual" -> False]], "\[Rule]", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{
         FractionBox["1", "2"], ",", "0", ",", "0", ",", 
         RowBox[{"-", 
          FractionBox["1", "2"]}]}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{
         RowBox[{"-", 
          FractionBox["1", "2"]}], ",", "0", ",", "0", ",", 
         FractionBox["1", "2"]}], "}"}]}], "}"}]}], ",", 
    RowBox[{
     InterpretationBox[
      TemplateBox[{
        RowBox[{
          SubscriptBox["\"F\"", "2"], "\[InvisibleSpace]", 
          
          TemplateBox[{"\"\[CapitalPhi]\"", "\"+\""}, "Superscript", 
           SyntaxForm -> SuperscriptBox]}]},
       "Ket"],
      Wolfram`QuantumFramework`QuditName[{
        Subscript["F", 2], 
        Superscript["\[CapitalPhi]", "+"]}, "Dual" -> False]], "\[Rule]", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{
         FractionBox["1", "2"], ",", "0", ",", "0", ",", 
         FractionBox["1", "2"]}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{
         RowBox[{"-", 
          FractionBox["1", "2"]}], ",", "0", ",", "0", ",", 
         RowBox[{"-", 
          FractionBox["1", "2"]}]}], "}"}]}], "}"}]}], ",", 
    RowBox[{
     InterpretationBox[
      TemplateBox[{
        RowBox[{
          SubscriptBox["\"F\"", "2"], "\[InvisibleSpace]", 
          
          TemplateBox[{"\"\[CapitalPsi]\"", "\"-\""}, "Superscript", 
           SyntaxForm -> SuperscriptBox]}]},
       "Ket"],
      Wolfram`QuantumFramework`QuditName[{
        Subscript["F", 2], 
        Superscript["\[CapitalPsi]", "-"]}, "Dual" -> False]], "\[Rule]", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{"0", ",", 
         FractionBox["1", "2"], ",", 
         RowBox[{"-", 
          FractionBox["1", "2"]}], ",", "0"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{"0", ",", 
         RowBox[{"-", 
          FractionBox["1", "2"]}], ",", 
         FractionBox["1", "2"], ",", "0"}], "}"}]}], "}"}]}], ",", 
    RowBox[{
     InterpretationBox[
      TemplateBox[{
        RowBox[{
          SubscriptBox["\"F\"", "2"], "\[InvisibleSpace]", 
          
          TemplateBox[{"\"\[CapitalPsi]\"", "\"+\""}, "Superscript", 
           SyntaxForm -> SuperscriptBox]}]},
       "Ket"],
      Wolfram`QuantumFramework`QuditName[{
        Subscript["F", 2], 
        Superscript["\[CapitalPsi]", "+"]}, "Dual" -> False]], "\[Rule]", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{"0", ",", 
         FractionBox["1", "2"], ",", 
         FractionBox["1", "2"], ",", "0"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{"0", ",", 
         RowBox[{"-", 
          FractionBox["1", "2"]}], ",", 
         RowBox[{"-", 
          FractionBox["1", "2"]}], ",", "0"}], "}"}]}], "}"}]}]}], 
   "\[RightAssociation]"}],
  Wolfram`QuantumFramework`QuditBasis[<|{
      Wolfram`QuantumFramework`QuditName[
       Subscript["F", 1], "Dual" -> False], 1} -> 
    SparseArray[
     Automatic, {2}, 0, {
      1, {{0, 2}, {{1}, {2}}}, {2^Rational[-1, 2], 2^Rational[-1, 2]}}], {
      Wolfram`QuantumFramework`QuditName[
       Subscript["F", 2], "Dual" -> False], 1} -> 
    SparseArray[
     Automatic, {2}, 0, {
      1, {{0, 2}, {{1}, {2}}}, {2^Rational[-1, 2], -2^Rational[-1, 2]}}], {
      Wolfram`QuantumFramework`QuditName[
       Superscript["\[CapitalPhi]", "-"], "Dual" -> False], 2} -> 
    SparseArray[
     Automatic, {4}, 0, {
      1, {{0, 2}, {{1}, {4}}}, {2^Rational[-1, 2], -2^Rational[-1, 2]}}], {
      Wolfram`QuantumFramework`QuditName[
       Superscript["\[CapitalPhi]", "+"], "Dual" -> False], 2} -> 
    SparseArray[
     Automatic, {4}, 0, {
      1, {{0, 2}, {{1}, {4}}}, {2^Rational[-1, 2], 2^Rational[-1, 2]}}], {
      Wolfram`QuantumFramework`QuditName[
       Superscript["\[CapitalPsi]", "-"], "Dual" -> False], 2} -> 
    SparseArray[
     Automatic, {4}, 0, {
      1, {{0, 2}, {{2}, {3}}}, {2^Rational[-1, 2], -2^Rational[-1, 2]}}], {
      Wolfram`QuantumFramework`QuditName[
       Superscript["\[CapitalPsi]", "+"], "Dual" -> False], 2} -> 
    SparseArray[
     Automatic, {4}, 0, {
      1, {{0, 2}, {{2}, {3}}}, {
       2^Rational[-1, 2], 2^Rational[-1, 2]}}]|>]]], "Output",
 CellChangeTimes->{{3.841075583926704*^9, 3.841075668939776*^9}, {
   3.84107570277337*^9, 3.841075735548373*^9}, 3.841077029007434*^9, 
   3.841078426112816*^9, 3.841078471227243*^9, 3.8410785442755947`*^9, 
   3.8410790782552443`*^9, 3.841088588209663*^9, 3.842904749222351*^9, {
   3.842904809687847*^9, 3.842904825269494*^9}, 3.843147062625929*^9, 
   3.8431476422865543`*^9, 3.858281710348568*^9, {3.858281952656513*^9, 
   3.858281963031947*^9}, 3.8582857240743856`*^9},
 CellLabel->
  "Out[203]=",ExpressionUUID->"1a05c79d-2267-44cd-ada1-2235c06728bd"],

Cell[BoxData[
 TagBox[
  TagBox[
   DynamicModuleBox[{TypeSystem`NestedGrid`PackagePrivate`$state$$ = <|
    "InitialData" -> <|
      "Association" -> <|Wolfram`QuantumFramework`QuditName[{
            Subscript["F", 1], 
            Superscript["\[CapitalPhi]", "-"]}, "Dual" -> False] -> 
         SparseArray[
          Automatic, {2, 4}, 0, {
           1, {{0, 2, 4}, {{1}, {4}, {1}, {4}}}, {
            Rational[1, 2], Rational[-1, 2], Rational[1, 2], 
             Rational[-1, 2]}}], Wolfram`QuantumFramework`QuditName[{
            Subscript["F", 1], 
            Superscript["\[CapitalPhi]", "+"]}, "Dual" -> False] -> 
         SparseArray[
          Automatic, {2, 4}, 0, {
           1, {{0, 2, 4}, {{1}, {4}, {1}, {4}}}, {
            Rational[1, 2], Rational[1, 2], Rational[1, 2], Rational[1, 2]}}],
          Wolfram`QuantumFramework`QuditName[{
            Subscript["F", 1], 
            Superscript["\[CapitalPsi]", "-"]}, "Dual" -> False] -> 
         SparseArray[
          Automatic, {2, 4}, 0, {
           1, {{0, 2, 4}, {{2}, {3}, {2}, {3}}}, {
            Rational[1, 2], Rational[-1, 2], Rational[1, 2], 
             Rational[-1, 2]}}], Wolfram`QuantumFramework`QuditName[{
            Subscript["F", 1], 
            Superscript["\[CapitalPsi]", "+"]}, "Dual" -> False] -> 
         SparseArray[
          Automatic, {2, 4}, 0, {
           1, {{0, 2, 4}, {{2}, {3}, {2}, {3}}}, {
            Rational[1, 2], Rational[1, 2], Rational[1, 2], Rational[1, 2]}}],
          Wolfram`QuantumFramework`QuditName[{
            Subscript["F", 2], 
            Superscript["\[CapitalPhi]", "-"]}, "Dual" -> False] -> 
         SparseArray[
          Automatic, {2, 4}, 0, {
           1, {{0, 2, 4}, {{1}, {4}, {1}, {4}}}, {
            Rational[1, 2], Rational[-1, 2], Rational[-1, 2], Rational[
             1, 2]}}], Wolfram`QuantumFramework`QuditName[{
            Subscript["F", 2], 
            Superscript["\[CapitalPhi]", "+"]}, "Dual" -> False] -> 
         SparseArray[
          Automatic, {2, 4}, 0, {
           1, {{0, 2, 4}, {{1}, {4}, {1}, {4}}}, {
            Rational[1, 2], Rational[1, 2], Rational[-1, 2], 
             Rational[-1, 2]}}], Wolfram`QuantumFramework`QuditName[{
            Subscript["F", 2], 
            Superscript["\[CapitalPsi]", "-"]}, "Dual" -> False] -> 
         SparseArray[
          Automatic, {2, 4}, 0, {
           1, {{0, 2, 4}, {{2}, {3}, {2}, {3}}}, {
            Rational[1, 2], Rational[-1, 2], Rational[-1, 2], Rational[
             1, 2]}}], Wolfram`QuantumFramework`QuditName[{
            Subscript["F", 2], 
            Superscript["\[CapitalPsi]", "+"]}, "Dual" -> False] -> 
         SparseArray[
          Automatic, {2, 4}, 0, {
           1, {{0, 2, 4}, {{2}, {3}, {2}, {3}}}, {
            Rational[1, 2], Rational[1, 2], Rational[-1, 2], 
             Rational[-1, 2]}}]|>, "Dimensions" -> {2, 4}, "Dual" -> 
       Wolfram`QuantumFramework`QuditBasis[<|{
            Wolfram`QuantumFramework`QuditName[
             Subscript["F", 1], "Dual" -> True], 1} -> 
          SparseArray[
           Automatic, {2}, 0, {
            1, {{0, 2}, {{1}, {2}}}, {
             2^Rational[-1, 2], 2^Rational[-1, 2]}}], {
            Wolfram`QuantumFramework`QuditName[
             Subscript["F", 2], "Dual" -> True], 1} -> 
          SparseArray[
           Automatic, {2}, 0, {
            1, {{0, 2}, {{1}, {2}}}, {
             2^Rational[-1, 2], -2^Rational[-1, 2]}}], {
            Wolfram`QuantumFramework`QuditName[
             Superscript["\[CapitalPhi]", "-"], "Dual" -> True], 2} -> 
          SparseArray[
           Automatic, {4}, 0, {
            1, {{0, 2}, {{1}, {4}}}, {
             2^Rational[-1, 2], -2^Rational[-1, 2]}}], {
            Wolfram`QuantumFramework`QuditName[
             Superscript["\[CapitalPhi]", "+"], "Dual" -> True], 2} -> 
          SparseArray[
           Automatic, {4}, 0, {
            1, {{0, 2}, {{1}, {4}}}, {
             2^Rational[-1, 2], 2^Rational[-1, 2]}}], {
            Wolfram`QuantumFramework`QuditName[
             Superscript["\[CapitalPsi]", "-"], "Dual" -> True], 2} -> 
          SparseArray[
           Automatic, {4}, 0, {
            1, {{0, 2}, {{2}, {3}}}, {
             2^Rational[-1, 2], -2^Rational[-1, 2]}}], {
            Wolfram`QuantumFramework`QuditName[
             Superscript["\[CapitalPsi]", "+"], "Dual" -> True], 2} -> 
          SparseArray[
           Automatic, {4}, 0, {
            1, {{0, 2}, {{2}, {3}}}, {
             2^Rational[-1, 2], 2^Rational[-1, 2]}}]|>], "ElementDimension" -> 
       8, "ElementDimensions" -> {2, 4}, "Elements" -> 
       SparseArray[
        Automatic, {8, 2, 4}, 0, {
         1, {{0, 4, 8, 12, 16, 20, 24, 28, 32}, {{1, 1}, {1, 4}, {2, 1}, {2, 
           4}, {1, 1}, {1, 4}, {2, 1}, {2, 4}, {1, 2}, {1, 3}, {2, 2}, {2, 
           3}, {1, 2}, {1, 3}, {2, 2}, {2, 3}, {1, 1}, {1, 4}, {2, 1}, {2, 
           4}, {1, 1}, {1, 4}, {2, 1}, {2, 4}, {1, 2}, {1, 3}, {2, 2}, {2, 
           3}, {1, 2}, {1, 3}, {2, 2}, {2, 3}}}, {
          Rational[1, 2], Rational[-1, 2], Rational[1, 2], Rational[-1, 2], 
           Rational[1, 2], Rational[1, 2], Rational[1, 2], Rational[1, 2], 
           Rational[1, 2], Rational[-1, 2], Rational[1, 2], Rational[-1, 2], 
           Rational[1, 2], Rational[1, 2], Rational[1, 2], Rational[1, 2], 
           Rational[1, 2], Rational[-1, 2], Rational[-1, 2], Rational[1, 2], 
           Rational[1, 2], Rational[1, 2], Rational[-1, 2], Rational[-1, 2], 
           Rational[1, 2], Rational[-1, 2], Rational[-1, 2], Rational[1, 2], 
           Rational[1, 2], Rational[1, 2], Rational[-1, 2], 
           Rational[-1, 2]}}], "Matrix" -> 
       SparseArray[
        Automatic, {8, 8}, 0, {
         1, {{0, 4, 8, 12, 16, 20, 24, 28, 32}, {{1}, {2}, {5}, {6}, {3}, {
           4}, {7}, {8}, {3}, {4}, {7}, {8}, {1}, {2}, {5}, {6}, {1}, {2}, {
           5}, {6}, {3}, {4}, {7}, {8}, {3}, {4}, {7}, {8}, {1}, {2}, {5}, {
           6}}}, {Rational[1, 2], Rational[1, 2], Rational[1, 2], Rational[
           1, 2], Rational[1, 2], Rational[1, 2], Rational[1, 2], Rational[
           1, 2], Rational[-1, 2], Rational[1, 2], Rational[-1, 2], Rational[
           1, 2], Rational[-1, 2], Rational[1, 2], Rational[-1, 2], Rational[
           1, 2], Rational[1, 2], Rational[1, 2], Rational[-1, 2], 
           Rational[-1, 2], Rational[1, 2], Rational[1, 2], Rational[-1, 2], 
           Rational[-1, 2], Rational[-1, 2], Rational[1, 2], Rational[1, 2], 
           Rational[-1, 2], Rational[-1, 2], Rational[1, 2], Rational[1, 2], 
           Rational[-1, 2]}}], "MatrixDimensions" -> {8, 8}, "NameRank" -> 2, 
       "Names" -> {
         Wolfram`QuantumFramework`QuditName[{
           Subscript["F", 1], 
           Superscript["\[CapitalPhi]", "-"]}, "Dual" -> False], 
         Wolfram`QuantumFramework`QuditName[{
           Subscript["F", 1], 
           Superscript["\[CapitalPhi]", "+"]}, "Dual" -> False], 
         Wolfram`QuantumFramework`QuditName[{
           Subscript["F", 1], 
           Superscript["\[CapitalPsi]", "-"]}, "Dual" -> False], 
         Wolfram`QuantumFramework`QuditName[{
           Subscript["F", 1], 
           Superscript["\[CapitalPsi]", "+"]}, "Dual" -> False], 
         Wolfram`QuantumFramework`QuditName[{
           Subscript["F", 2], 
           Superscript["\[CapitalPhi]", "-"]}, "Dual" -> False], 
         Wolfram`QuantumFramework`QuditName[{
           Subscript["F", 2], 
           Superscript["\[CapitalPhi]", "+"]}, "Dual" -> False], 
         Wolfram`QuantumFramework`QuditName[{
           Subscript["F", 2], 
           Superscript["\[CapitalPsi]", "-"]}, "Dual" -> False], 
         Wolfram`QuantumFramework`QuditName[{
           Subscript["F", 2], 
           Superscript["\[CapitalPsi]", "+"]}, "Dual" -> False]}, 
       "NameTensor" -> {{
          Wolfram`QuantumFramework`QuditName[{
            Subscript["F", 1], 
            Superscript["\[CapitalPhi]", "-"]}, "Dual" -> False], 
          Wolfram`QuantumFramework`QuditName[{
            Subscript["F", 1], 
            Superscript["\[CapitalPhi]", "+"]}, "Dual" -> False], 
          Wolfram`QuantumFramework`QuditName[{
            Subscript["F", 1], 
            Superscript["\[CapitalPsi]", "-"]}, "Dual" -> False], 
          Wolfram`QuantumFramework`QuditName[{
            Subscript["F", 1], 
            Superscript["\[CapitalPsi]", "+"]}, "Dual" -> False]}, {
          Wolfram`QuantumFramework`QuditName[{
            Subscript["F", 2], 
            Superscript["\[CapitalPhi]", "-"]}, "Dual" -> False], 
          Wolfram`QuantumFramework`QuditName[{
            Subscript["F", 2], 
            Superscript["\[CapitalPhi]", "+"]}, "Dual" -> False], 
          Wolfram`QuantumFramework`QuditName[{
            Subscript["F", 2], 
            Superscript["\[CapitalPsi]", "-"]}, "Dual" -> False], 
          Wolfram`QuantumFramework`QuditName[{
            Subscript["F", 2], 
            Superscript["\[CapitalPsi]", "+"]}, "Dual" -> False]}}, "Qudits" -> 
       2, "Rank" -> 2, "Representations" -> <|{
           Wolfram`QuantumFramework`QuditName[
            Subscript["F", 1], "Dual" -> False], 1} -> 
         SparseArray[
          Automatic, {2}, 0, {
           1, {{0, 2}, {{1}, {2}}}, {2^Rational[-1, 2], 2^Rational[-1, 2]}}], {
           Wolfram`QuantumFramework`QuditName[
            Subscript["F", 2], "Dual" -> False], 1} -> 
         SparseArray[
          Automatic, {2}, 0, {
           1, {{0, 2}, {{1}, {2}}}, {
            2^Rational[-1, 2], -2^Rational[-1, 2]}}], {
           Wolfram`QuantumFramework`QuditName[
            Superscript["\[CapitalPhi]", "-"], "Dual" -> False], 2} -> 
         SparseArray[
          Automatic, {4}, 0, {
           1, {{0, 2}, {{1}, {4}}}, {
            2^Rational[-1, 2], -2^Rational[-1, 2]}}], {
           Wolfram`QuantumFramework`QuditName[
            Superscript["\[CapitalPhi]", "+"], "Dual" -> False], 2} -> 
         SparseArray[
          Automatic, {4}, 0, {
           1, {{0, 2}, {{1}, {4}}}, {2^Rational[-1, 2], 2^Rational[-1, 2]}}], {
           Wolfram`QuantumFramework`QuditName[
            Superscript["\[CapitalPsi]", "-"], "Dual" -> False], 2} -> 
         SparseArray[
          Automatic, {4}, 0, {
           1, {{0, 2}, {{2}, {3}}}, {
            2^Rational[-1, 2], -2^Rational[-1, 2]}}], {
           Wolfram`QuantumFramework`QuditName[
            Superscript["\[CapitalPsi]", "+"], "Dual" -> False], 2} -> 
         SparseArray[
          Automatic, {4}, 0, {
           1, {{0, 2}, {{2}, {3}}}, {
            2^Rational[-1, 2], 2^Rational[-1, 2]}}]|>, "Reverse" -> 
       Wolfram`QuantumFramework`QuditBasis[<|{
            Wolfram`QuantumFramework`QuditName[
             Superscript["\[CapitalPhi]", "-"], "Dual" -> False], 1} -> 
          SparseArray[
           Automatic, {4}, 0, {
            1, {{0, 2}, {{1}, {4}}}, {
             2^Rational[-1, 2], -2^Rational[-1, 2]}}], {
            Wolfram`QuantumFramework`QuditName[
             Superscript["\[CapitalPhi]", "+"], "Dual" -> False], 1} -> 
          SparseArray[
           Automatic, {4}, 0, {
            1, {{0, 2}, {{1}, {4}}}, {
             2^Rational[-1, 2], 2^Rational[-1, 2]}}], {
            Wolfram`QuantumFramework`QuditName[
             Superscript["\[CapitalPsi]", "-"], "Dual" -> False], 1} -> 
          SparseArray[
           Automatic, {4}, 0, {
            1, {{0, 2}, {{2}, {3}}}, {
             2^Rational[-1, 2], -2^Rational[-1, 2]}}], {
            Wolfram`QuantumFramework`QuditName[
             Superscript["\[CapitalPsi]", "+"], "Dual" -> False], 1} -> 
          SparseArray[
           Automatic, {4}, 0, {
            1, {{0, 2}, {{2}, {3}}}, {
             2^Rational[-1, 2], 2^Rational[-1, 2]}}], {
            Wolfram`QuantumFramework`QuditName[
             Subscript["F", 1], "Dual" -> False], 2} -> 
          SparseArray[
           Automatic, {2}, 0, {
            1, {{0, 2}, {{1}, {2}}}, {
             2^Rational[-1, 2], 2^Rational[-1, 2]}}], {
            Wolfram`QuantumFramework`QuditName[
             Subscript["F", 2], "Dual" -> False], 2} -> 
          SparseArray[
           Automatic, {2}, 0, {
            1, {{0, 2}, {{1}, {2}}}, {
             2^Rational[-1, 2], -2^Rational[-1, 2]}}]|>], "Size" -> 8, 
       "Tensor" -> 
       SparseArray[
        Automatic, {2, 4, 2, 4}, 0, {
         1, {{0, 16, 32}, {{1, 1, 1}, {1, 1, 2}, {1, 2, 1}, {1, 2, 2}, {2, 1, 
           3}, {2, 1, 4}, {2, 2, 3}, {2, 2, 4}, {3, 1, 3}, {3, 1, 4}, {3, 2, 
           3}, {3, 2, 4}, {4, 1, 1}, {4, 1, 2}, {4, 2, 1}, {4, 2, 2}, {1, 1, 
           1}, {1, 1, 2}, {1, 2, 1}, {1, 2, 2}, {2, 1, 3}, {2, 1, 4}, {2, 2, 
           3}, {2, 2, 4}, {3, 1, 3}, {3, 1, 4}, {3, 2, 3}, {3, 2, 4}, {4, 1, 
           1}, {4, 1, 2}, {4, 2, 1}, {4, 2, 2}}}, {
          Rational[1, 2], Rational[1, 2], Rational[1, 2], Rational[1, 2], 
           Rational[1, 2], Rational[1, 2], Rational[1, 2], Rational[1, 2], 
           Rational[-1, 2], Rational[1, 2], Rational[-1, 2], Rational[1, 2], 
           Rational[-1, 2], Rational[1, 2], Rational[-1, 2], Rational[1, 2], 
           Rational[1, 2], Rational[1, 2], Rational[-1, 2], Rational[-1, 2], 
           Rational[1, 2], Rational[1, 2], Rational[-1, 2], Rational[-1, 2], 
           Rational[-1, 2], Rational[1, 2], Rational[1, 2], Rational[-1, 2], 
           Rational[-1, 2], Rational[1, 2], Rational[1, 2], 
           Rational[-1, 2]}}], "TensorDimensions" -> {2, 4, 2, 4}|>, 
     "AllowEmbedding" -> True, "InitialShape" -> 
     TypeSystem`PackageScope`Limited[
       TypeSystem`PackageScope`ColumnShape[
        TypeSystem`PackageScope`KeyValueShape[
         TypeSystem`PackageScope`AtomShape[179.20000000000002`], 
         TypeSystem`PackageScope`UnknownShape[False]]], 18, 
       DirectedInfinity[1], {}], "InitialType" -> TypeSystem`Assoc[
       TypeSystem`Atom[String], TypeSystem`AnyType, 18], "Meta" -> <||>, 
     "RowTarget" -> 20, "ColumnTarget" -> 10, "Shape" -> 
     TypeSystem`PackageScope`Limited[
       TypeSystem`PackageScope`ColumnShape[
        TypeSystem`PackageScope`KeyValueShape[
         TypeSystem`PackageScope`AtomShape[179.20000000000002`], 
         TypeSystem`PackageScope`UnknownShape[False]]], 18, 
       DirectedInfinity[1], {}], "Type" -> TypeSystem`Assoc[
       TypeSystem`Atom[String], TypeSystem`AnyType, 18], "Path" -> {}, 
     "DisplayedRowCount" -> 18, "DisplayedColumnCount" -> 1, "DataRowCount" -> 
     18, "DataColumnCount" -> 1, "SortPaths" -> {}, "SortDirections" -> {}, 
     "HiddenItemsMap" -> Null, "UpdateType" -> 1|>, 
    TypeSystem`NestedGrid`PackagePrivate`$outputID$$, 
    TypeSystem`NestedGrid`PackagePrivate`$path$$ = {}, 
    TypeSystem`NestedGrid`PackagePrivate`$vPos$$ = 1, 
    TypeSystem`NestedGrid`PackagePrivate`$hPos$$ = 1, 
    TypeSystem`NestedGrid`PackagePrivate`$grid$$ = 
    DynamicModule[{
     TypeSystem`NestedGrid`PackagePrivate`renderedGrid = Deploy[
        Style[
         Grid[{{
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover["Association", 
                  Style[
                  "Association", FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                If[
                  TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                    Key["Association"]}, 1]]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key["Association"]}, "RowHeader", False], "Mouse"], 
              ImageSize -> {{179.20000000000002`, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
             GrayLevel[0.95], Alignment -> {Left, Baseline}], 
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover[
                  Style[
                   Row[{"\[LeftAssociation] ", 
                    Subscript["\[Ellipsis]", 8], "\[RightAssociation]"}], 
                   GrayLevel[0.5]], 
                  Style[
                   Style[
                    Row[{"\[LeftAssociation] ", 
                    Subscript["\[Ellipsis]", 8], "\[RightAssociation]"}], 
                    GrayLevel[0.5]], FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                If[
                  TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                    Key["Association"]}, 4]]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key["Association"]}, "Item", False], "Mouse"], 
              ImageMargins -> {{5, 3}, {4, 5}}], BaseStyle -> {
               GrayLevel[0.5]}]}, {
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover["Dimensions", 
                  Style[
                  "Dimensions", FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                If[
                  TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                    Key["Dimensions"]}, 1]]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key["Dimensions"]}, "RowHeader", False], "Mouse"], 
              ImageSize -> {{179.20000000000002`, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
             GrayLevel[0.95], Alignment -> {Left, Baseline}], 
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover[
                  Style[{2, 4}, ShowStringCharacters -> False], 
                  Style[
                   Style[{2, 4}, ShowStringCharacters -> False], FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                If[
                  TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                    Key["Dimensions"]}, 4]]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key["Dimensions"]}, "Item", False], "Mouse"], 
              ImageMargins -> {{5, 3}, {4, 5}}]]}, {
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover["Dual", 
                  Style[
                  "Dual", FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                If[
                  TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                    Key["Dual"]}, 1]]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key["Dual"]}, "RowHeader", False], "Mouse"], 
              ImageSize -> {{179.20000000000002`, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
             GrayLevel[0.95], Alignment -> {Left, Baseline}], 
            Item[
             Pane[
              Annotation[
               RawBoxes[
                StyleBox[
                 InterpretationBox[
                  RowBox[{"\[LeftAssociation]", 
                    RowBox[{
                    RowBox[{
                    InterpretationBox[
                    TemplateBox[{
                    RowBox[{
                    SubscriptBox["\"F\"", "1"], "\[InvisibleSpace]", 
                    
                    TemplateBox[{"\"\[CapitalPhi]\"", "\"-\""}, "Superscript",
                     SyntaxForm -> SuperscriptBox]}]}, "Bra"], 
                    Wolfram`QuantumFramework`QuditName[{
                    Subscript["F", 1], 
                    Superscript["\[CapitalPhi]", "-"]}, "Dual" -> True]], 
                    "\[Rule]", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{
                    FractionBox["1", "2"], ",", "0", ",", "0", ",", 
                    RowBox[{"-", 
                    FractionBox["1", "2"]}]}], "}"}], ",", 
                    RowBox[{"{", 
                    RowBox[{
                    FractionBox["1", "2"], ",", "0", ",", "0", ",", 
                    RowBox[{"-", 
                    FractionBox["1", "2"]}]}], "}"}]}], "}"}]}], ",", 
                    RowBox[{
                    InterpretationBox[
                    TemplateBox[{
                    RowBox[{
                    SubscriptBox["\"F\"", "1"], "\[InvisibleSpace]", 
                    
                    TemplateBox[{"\"\[CapitalPhi]\"", "\"+\""}, "Superscript",
                     SyntaxForm -> SuperscriptBox]}]}, "Bra"], 
                    Wolfram`QuantumFramework`QuditName[{
                    Subscript["F", 1], 
                    Superscript["\[CapitalPhi]", "+"]}, "Dual" -> True]], 
                    "\[Rule]", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{
                    FractionBox["1", "2"], ",", "0", ",", "0", ",", 
                    FractionBox["1", "2"]}], "}"}], ",", 
                    RowBox[{"{", 
                    RowBox[{
                    FractionBox["1", "2"], ",", "0", ",", "0", ",", 
                    FractionBox["1", "2"]}], "}"}]}], "}"}]}], ",", 
                    RowBox[{
                    InterpretationBox[
                    TemplateBox[{
                    RowBox[{
                    SubscriptBox["\"F\"", "1"], "\[InvisibleSpace]", 
                    TemplateBox[{"\"\[CapitalPsi]\"", "\"-\""}, "Superscript",
                     SyntaxForm -> SuperscriptBox]}]}, "Bra"], 
                    Wolfram`QuantumFramework`QuditName[{
                    Subscript["F", 1], 
                    Superscript["\[CapitalPsi]", "-"]}, "Dual" -> True]], 
                    "\[Rule]", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{"0", ",", 
                    FractionBox["1", "2"], ",", 
                    RowBox[{"-", 
                    FractionBox["1", "2"]}], ",", "0"}], "}"}], ",", 
                    RowBox[{"{", 
                    RowBox[{"0", ",", 
                    FractionBox["1", "2"], ",", 
                    RowBox[{"-", 
                    FractionBox["1", "2"]}], ",", "0"}], "}"}]}], "}"}]}], 
                    ",", 
                    RowBox[{
                    InterpretationBox[
                    TemplateBox[{
                    RowBox[{
                    SubscriptBox["\"F\"", "1"], "\[InvisibleSpace]", 
                    
                    TemplateBox[{"\"\[CapitalPsi]\"", "\"+\""}, "Superscript",
                     SyntaxForm -> SuperscriptBox]}]}, "Bra"], 
                    Wolfram`QuantumFramework`QuditName[{
                    Subscript["F", 1], 
                    Superscript["\[CapitalPsi]", "+"]}, "Dual" -> True]], 
                    "\[Rule]", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{"0", ",", 
                    FractionBox["1", "2"], ",", 
                    FractionBox["1", "2"], ",", "0"}], "}"}], ",", 
                    RowBox[{"{", 
                    RowBox[{"0", ",", 
                    FractionBox["1", "2"], ",", 
                    FractionBox["1", "2"], ",", "0"}], "}"}]}], "}"}]}], ",", 
                    
                    RowBox[{
                    InterpretationBox[
                    TemplateBox[{
                    RowBox[{
                    SubscriptBox["\"F\"", "2"], "\[InvisibleSpace]", 
                    
                    TemplateBox[{"\"\[CapitalPhi]\"", "\"-\""}, "Superscript",
                     SyntaxForm -> SuperscriptBox]}]}, "Bra"], 
                    Wolfram`QuantumFramework`QuditName[{
                    Subscript["F", 2], 
                    Superscript["\[CapitalPhi]", "-"]}, "Dual" -> True]], 
                    "\[Rule]", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{
                    FractionBox["1", "2"], ",", "0", ",", "0", ",", 
                    RowBox[{"-", 
                    FractionBox["1", "2"]}]}], "}"}], ",", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"-", 
                    FractionBox["1", "2"]}], ",", "0", ",", "0", ",", 
                    FractionBox["1", "2"]}], "}"}]}], "}"}]}], ",", 
                    RowBox[{
                    InterpretationBox[
                    TemplateBox[{
                    RowBox[{
                    SubscriptBox["\"F\"", "2"], "\[InvisibleSpace]", 
                    
                    TemplateBox[{"\"\[CapitalPhi]\"", "\"+\""}, "Superscript",
                     SyntaxForm -> SuperscriptBox]}]}, "Bra"], 
                    Wolfram`QuantumFramework`QuditName[{
                    Subscript["F", 2], 
                    Superscript["\[CapitalPhi]", "+"]}, "Dual" -> True]], 
                    "\[Rule]", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{
                    FractionBox["1", "2"], ",", "0", ",", "0", ",", 
                    FractionBox["1", "2"]}], "}"}], ",", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"-", 
                    FractionBox["1", "2"]}], ",", "0", ",", "0", ",", 
                    RowBox[{"-", 
                    FractionBox["1", "2"]}]}], "}"}]}], "}"}]}], ",", 
                    RowBox[{
                    InterpretationBox[
                    TemplateBox[{
                    RowBox[{
                    SubscriptBox["\"F\"", "2"], "\[InvisibleSpace]", 
                    
                    TemplateBox[{"\"\[CapitalPsi]\"", "\"-\""}, "Superscript",
                     SyntaxForm -> SuperscriptBox]}]}, "Bra"], 
                    Wolfram`QuantumFramework`QuditName[{
                    Subscript["F", 2], 
                    Superscript["\[CapitalPsi]", "-"]}, "Dual" -> True]], 
                    "\[Rule]", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{"0", ",", 
                    FractionBox["1", "2"], ",", 
                    RowBox[{"-", 
                    FractionBox["1", "2"]}], ",", "0"}], "}"}], ",", 
                    RowBox[{"{", 
                    RowBox[{"0", ",", 
                    RowBox[{"-", 
                    FractionBox["1", "2"]}], ",", 
                    FractionBox["1", "2"], ",", "0"}], "}"}]}], "}"}]}], ",", 
                    
                    RowBox[{
                    InterpretationBox[
                    TemplateBox[{
                    RowBox[{
                    SubscriptBox["\"F\"", "2"], "\[InvisibleSpace]", 
                    
                    TemplateBox[{"\"\[CapitalPsi]\"", "\"+\""}, "Superscript",
                     SyntaxForm -> SuperscriptBox]}]}, "Bra"], 
                    Wolfram`QuantumFramework`QuditName[{
                    Subscript["F", 2], 
                    Superscript["\[CapitalPsi]", "+"]}, "Dual" -> True]], 
                    "\[Rule]", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{"0", ",", 
                    FractionBox["1", "2"], ",", 
                    FractionBox["1", "2"], ",", "0"}], "}"}], ",", 
                    RowBox[{"{", 
                    RowBox[{"0", ",", 
                    RowBox[{"-", 
                    FractionBox["1", "2"]}], ",", 
                    RowBox[{"-", 
                    FractionBox["1", "2"]}], ",", "0"}], "}"}]}], "}"}]}]}], 
                    "\[RightAssociation]"}], 
                  Wolfram`QuantumFramework`QuditBasis[<|{
                    Wolfram`QuantumFramework`QuditName[
                    Subscript["F", 1], "Dual" -> True], 1} -> 
                    SparseArray[
                    Automatic, {2}, 0, {
                    1, {{0, 2}, {{1}, {2}}}, {
                    2^Rational[-1, 2], 2^Rational[-1, 2]}}], {
                    Wolfram`QuantumFramework`QuditName[
                    Subscript["F", 2], "Dual" -> True], 1} -> 
                    SparseArray[
                    Automatic, {2}, 0, {
                    1, {{0, 2}, {{1}, {2}}}, {
                    2^Rational[-1, 2], -2^Rational[-1, 2]}}], {
                    Wolfram`QuantumFramework`QuditName[
                    Superscript["\[CapitalPhi]", "-"], "Dual" -> True], 2} -> 
                    SparseArray[
                    Automatic, {4}, 0, {
                    1, {{0, 2}, {{1}, {4}}}, {
                    2^Rational[-1, 2], -2^Rational[-1, 2]}}], {
                    Wolfram`QuantumFramework`QuditName[
                    Superscript["\[CapitalPhi]", "+"], "Dual" -> True], 2} -> 
                    SparseArray[
                    Automatic, {4}, 0, {
                    1, {{0, 2}, {{1}, {4}}}, {
                    2^Rational[-1, 2], 2^Rational[-1, 2]}}], {
                    Wolfram`QuantumFramework`QuditName[
                    Superscript["\[CapitalPsi]", "-"], "Dual" -> True], 2} -> 
                    SparseArray[
                    Automatic, {4}, 0, {
                    1, {{0, 2}, {{2}, {3}}}, {
                    2^Rational[-1, 2], -2^Rational[-1, 2]}}], {
                    Wolfram`QuantumFramework`QuditName[
                    Superscript["\[CapitalPsi]", "+"], "Dual" -> True], 2} -> 
                    SparseArray[
                    Automatic, {4}, 0, {
                    1, {{0, 2}, {{2}, {3}}}, {
                    2^Rational[-1, 2], 2^Rational[-1, 2]}}]|>]], FontFamily -> 
                 Dynamic[
                   CurrentValue[{"StyleHints", "CodeFont"}]], 
                 ShowStringCharacters -> True]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key["Dual"]}, "Item", False], "Mouse"], 
              ImageSize -> {{60, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}]}, {
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover["ElementDimension", 
                  Style[
                  "ElementDimension", FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                If[
                  TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                    Key["ElementDimension"]}, 1]]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key["ElementDimension"]}, "RowHeader", False], "Mouse"], 
              ImageSize -> {{179.20000000000002`, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
             GrayLevel[0.95], Alignment -> {Left, Baseline}], 
            Item[
             Pane[
              Annotation[
               RawBoxes["8"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key["ElementDimension"]}, "Item", False], "Mouse"], 
              ImageSize -> {{34, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}]}, {
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover["ElementDimensions", 
                  Style[
                  "ElementDimensions", FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                If[
                  TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                    Key["ElementDimensions"]}, 1]]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key["ElementDimensions"]}, "RowHeader", False], "Mouse"], 
              ImageSize -> {{179.20000000000002`, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
             GrayLevel[0.95], Alignment -> {Left, Baseline}], 
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover[
                  Style[{2, 4}, ShowStringCharacters -> False], 
                  Style[
                   Style[{2, 4}, ShowStringCharacters -> False], FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                If[
                  TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                    Key["ElementDimensions"]}, 4]]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key["ElementDimensions"]}, "Item", False], "Mouse"], 
              ImageMargins -> {{5, 3}, {4, 5}}]]}, {
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover["Elements", 
                  Style[
                  "Elements", FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                If[
                  TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                    Key["Elements"]}, 1]]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key["Elements"]}, "RowHeader", False], "Mouse"], 
              ImageSize -> {{179.20000000000002`, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
             GrayLevel[0.95], Alignment -> {Left, Baseline}], 
            Item[
             Pane[
              Annotation[
               RawBoxes[
                StyleBox[
                 RowBox[{
                   TagBox["SparseArray", "SummaryHead"], "[", 
                   TemplateBox[{
                    GridBox[{{
                    GridBox[{{
                    RowBox[{
                    TagBox[
                    "\"Specified elements: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox["32", "SummaryItem"]}]}, {
                    RowBox[{
                    TagBox["\"Dimensions: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox[
                    RowBox[{"{", 
                    RowBox[{"8", ",", "2", ",", "4"}], "}"}], 
                    "SummaryItem"]}]}}, 
                    GridBoxAlignment -> {
                    "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, 
                    AutoDelete -> False, 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {
                    "Columns" -> {{2}}, "Rows" -> {{Automatic}}}, 
                    BaseStyle -> {
                    ShowStringCharacters -> False, NumberMarks -> False, 
                    PrintPrecision -> 3, ShowSyntaxStyles -> False}]}}, 
                    GridBoxAlignment -> {
                    "Columns" -> {{Left}}, "Rows" -> {{Top}}}, AutoDelete -> 
                    False, GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                    BaselinePosition -> {1, 1}]}, "SummaryPanel"], "]"}], 
                 FontFamily -> Dynamic[
                   CurrentValue[{"StyleHints", "CodeFont"}]], 
                 ShowStringCharacters -> True]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key["Elements"]}, "Item", False], "Mouse"], 
              ImageSize -> {{60, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}]}, {
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover["Matrix", 
                  Style[
                  "Matrix", FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                If[
                  TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                    Key["Matrix"]}, 1]]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key["Matrix"]}, "RowHeader", False], "Mouse"], 
              ImageSize -> {{179.20000000000002`, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
             GrayLevel[0.95], Alignment -> {Left, Baseline}], 
            Item[
             Pane[
              Annotation[
               RawBoxes[
                StyleBox[
                 RowBox[{
                   TagBox["SparseArray", "SummaryHead"], "[", 
                   TemplateBox[{
                    GridBox[{{
                    GridBox[{{
                    RowBox[{
                    TagBox[
                    "\"Specified elements: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox["32", "SummaryItem"]}]}, {
                    RowBox[{
                    TagBox["\"Dimensions: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox[
                    RowBox[{"{", 
                    RowBox[{"8", ",", "8"}], "}"}], "SummaryItem"]}]}}, 
                    GridBoxAlignment -> {
                    "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, 
                    AutoDelete -> False, 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {
                    "Columns" -> {{2}}, "Rows" -> {{Automatic}}}, 
                    BaseStyle -> {
                    ShowStringCharacters -> False, NumberMarks -> False, 
                    PrintPrecision -> 3, ShowSyntaxStyles -> False}]}}, 
                    GridBoxAlignment -> {
                    "Columns" -> {{Left}}, "Rows" -> {{Top}}}, AutoDelete -> 
                    False, GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                    BaselinePosition -> {1, 1}]}, "SummaryPanel"], "]"}], 
                 FontFamily -> Dynamic[
                   CurrentValue[{"StyleHints", "CodeFont"}]], 
                 ShowStringCharacters -> True]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key["Matrix"]}, "Item", False], "Mouse"], 
              ImageSize -> {{60, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}]}, {
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover["MatrixDimensions", 
                  Style[
                  "MatrixDimensions", FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                If[
                  TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                    Key["MatrixDimensions"]}, 1]]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key["MatrixDimensions"]}, "RowHeader", False], "Mouse"], 
              ImageSize -> {{179.20000000000002`, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
             GrayLevel[0.95], Alignment -> {Left, Baseline}], 
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover[
                  Style[{8, 8}, ShowStringCharacters -> False], 
                  Style[
                   Style[{8, 8}, ShowStringCharacters -> False], FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                If[
                  TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                    Key["MatrixDimensions"]}, 4]]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key["MatrixDimensions"]}, "Item", False], "Mouse"], 
              ImageMargins -> {{5, 3}, {4, 5}}]]}, {
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover["NameRank", 
                  Style[
                  "NameRank", FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                If[
                  TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                    Key["NameRank"]}, 1]]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key["NameRank"]}, "RowHeader", False], "Mouse"], 
              ImageSize -> {{179.20000000000002`, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
             GrayLevel[0.95], Alignment -> {Left, Baseline}], 
            Item[
             Pane[
              Annotation[
               RawBoxes["2"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key["NameRank"]}, "Item", False], "Mouse"], 
              ImageSize -> {{34, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}]}, {
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover["Names", 
                  Style[
                  "Names", FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                If[
                  TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                    Key["Names"]}, 1]]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key["Names"]}, "RowHeader", False], "Mouse"], 
              ImageSize -> {{179.20000000000002`, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
             GrayLevel[0.95], Alignment -> {Left, Baseline}], 
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover[
                  Style[
                   Row[{"\[ThinSpace]{ ", 
                    Subscript["\[Ellipsis]", 8], " }\[ThinSpace]"}], 
                   GrayLevel[0.5]], 
                  Style[
                   Style[
                    Row[{"\[ThinSpace]{ ", 
                    Subscript["\[Ellipsis]", 8], " }\[ThinSpace]"}], 
                    GrayLevel[0.5]], FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                If[
                  TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                    Key["Names"]}, 4]]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key["Names"]}, "Item", False], "Mouse"], 
              ImageMargins -> {{5, 3}, {4, 5}}], BaseStyle -> {
               GrayLevel[0.5]}]}, {
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover["NameTensor", 
                  Style[
                  "NameTensor", FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                If[
                  TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                    Key["NameTensor"]}, 1]]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key["NameTensor"]}, "RowHeader", False], "Mouse"], 
              ImageSize -> {{179.20000000000002`, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
             GrayLevel[0.95], Alignment -> {Left, Baseline}], 
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover[
                  Style[
                   Row[{"\[ThinSpace]{ ", 
                    Subscript["\[Ellipsis]", 2], " }\[ThinSpace]"}], 
                   GrayLevel[0.5]], 
                  Style[
                   Style[
                    Row[{"\[ThinSpace]{ ", 
                    Subscript["\[Ellipsis]", 2], " }\[ThinSpace]"}], 
                    GrayLevel[0.5]], FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                If[
                  TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                    Key["NameTensor"]}, 4]]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key["NameTensor"]}, "Item", False], "Mouse"], 
              ImageMargins -> {{5, 3}, {4, 5}}], BaseStyle -> {
               GrayLevel[0.5]}]}, {
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover["Qudits", 
                  Style[
                  "Qudits", FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                If[
                  TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                    Key["Qudits"]}, 1]]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key["Qudits"]}, "RowHeader", False], "Mouse"], 
              ImageSize -> {{179.20000000000002`, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
             GrayLevel[0.95], Alignment -> {Left, Baseline}], 
            Item[
             Pane[
              Annotation[
               RawBoxes["2"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key["Qudits"]}, "Item", False], "Mouse"], 
              ImageSize -> {{34, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}]}, {
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover["Rank", 
                  Style[
                  "Rank", FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                If[
                  TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                    Key["Rank"]}, 1]]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key["Rank"]}, "RowHeader", False], "Mouse"], 
              ImageSize -> {{179.20000000000002`, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
             GrayLevel[0.95], Alignment -> {Left, Baseline}], 
            Item[
             Pane[
              Annotation[
               RawBoxes["2"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key["Rank"]}, "Item", False], "Mouse"], 
              ImageSize -> {{34, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}]}, {
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover["Representations", 
                  Style[
                  "Representations", FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                If[
                  TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                    Key["Representations"]}, 1]]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key["Representations"]}, "RowHeader", False], "Mouse"], 
              ImageSize -> {{179.20000000000002`, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
             GrayLevel[0.95], Alignment -> {Left, Baseline}], 
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover[
                  Style[
                   Row[{"\[LeftAssociation] ", 
                    Subscript["\[Ellipsis]", 6], "\[RightAssociation]"}], 
                   GrayLevel[0.5]], 
                  Style[
                   Style[
                    Row[{"\[LeftAssociation] ", 
                    Subscript["\[Ellipsis]", 6], "\[RightAssociation]"}], 
                    GrayLevel[0.5]], FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                If[
                  TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                    Key["Representations"]}, 4]]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key["Representations"]}, "Item", False], "Mouse"], 
              ImageMargins -> {{5, 3}, {4, 5}}], BaseStyle -> {
               GrayLevel[0.5]}]}, {
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover["Reverse", 
                  Style[
                  "Reverse", FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                If[
                  TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                    Key["Reverse"]}, 1]]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key["Reverse"]}, "RowHeader", False], "Mouse"], 
              ImageSize -> {{179.20000000000002`, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
             GrayLevel[0.95], Alignment -> {Left, Baseline}], 
            Item[
             Pane[
              Annotation[
               RawBoxes[
                StyleBox[
                 InterpretationBox[
                  RowBox[{"\[LeftAssociation]", 
                    RowBox[{
                    RowBox[{
                    InterpretationBox[
                    TemplateBox[{
                    RowBox[{
                    
                    TemplateBox[{"\"\[CapitalPhi]\"", "\"-\""}, "Superscript",
                     SyntaxForm -> SuperscriptBox], "\[InvisibleSpace]", 
                    SubscriptBox["\"F\"", "1"]}]}, "Ket"], 
                    Wolfram`QuantumFramework`QuditName[{
                    Superscript["\[CapitalPhi]", "-"], 
                    Subscript["F", 1]}, "Dual" -> False]], "\[Rule]", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{
                    FractionBox["1", "2"], ",", 
                    FractionBox["1", "2"]}], "}"}], ",", 
                    RowBox[{"{", 
                    RowBox[{"0", ",", "0"}], "}"}], ",", 
                    RowBox[{"{", 
                    RowBox[{"0", ",", "0"}], "}"}], ",", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"-", 
                    FractionBox["1", "2"]}], ",", 
                    RowBox[{"-", 
                    FractionBox["1", "2"]}]}], "}"}]}], "}"}]}], ",", 
                    RowBox[{
                    InterpretationBox[
                    TemplateBox[{
                    RowBox[{
                    
                    TemplateBox[{"\"\[CapitalPhi]\"", "\"-\""}, "Superscript",
                     SyntaxForm -> SuperscriptBox], "\[InvisibleSpace]", 
                    SubscriptBox["\"F\"", "2"]}]}, "Ket"], 
                    Wolfram`QuantumFramework`QuditName[{
                    Superscript["\[CapitalPhi]", "-"], 
                    Subscript["F", 2]}, "Dual" -> False]], "\[Rule]", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{
                    FractionBox["1", "2"], ",", 
                    RowBox[{"-", 
                    FractionBox["1", "2"]}]}], "}"}], ",", 
                    RowBox[{"{", 
                    RowBox[{"0", ",", "0"}], "}"}], ",", 
                    RowBox[{"{", 
                    RowBox[{"0", ",", "0"}], "}"}], ",", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"-", 
                    FractionBox["1", "2"]}], ",", 
                    FractionBox["1", "2"]}], "}"}]}], "}"}]}], ",", 
                    RowBox[{
                    InterpretationBox[
                    TemplateBox[{
                    RowBox[{
                    
                    TemplateBox[{"\"\[CapitalPhi]\"", "\"+\""}, "Superscript",
                     SyntaxForm -> SuperscriptBox], "\[InvisibleSpace]", 
                    SubscriptBox["\"F\"", "1"]}]}, "Ket"], 
                    Wolfram`QuantumFramework`QuditName[{
                    Superscript["\[CapitalPhi]", "+"], 
                    Subscript["F", 1]}, "Dual" -> False]], "\[Rule]", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{
                    FractionBox["1", "2"], ",", 
                    FractionBox["1", "2"]}], "}"}], ",", 
                    RowBox[{"{", 
                    RowBox[{"0", ",", "0"}], "}"}], ",", 
                    RowBox[{"{", 
                    RowBox[{"0", ",", "0"}], "}"}], ",", 
                    RowBox[{"{", 
                    RowBox[{
                    FractionBox["1", "2"], ",", 
                    FractionBox["1", "2"]}], "}"}]}], "}"}]}], ",", 
                    RowBox[{
                    InterpretationBox[
                    TemplateBox[{
                    RowBox[{
                    
                    TemplateBox[{"\"\[CapitalPhi]\"", "\"+\""}, "Superscript",
                     SyntaxForm -> SuperscriptBox], "\[InvisibleSpace]", 
                    SubscriptBox["\"F\"", "2"]}]}, "Ket"], 
                    Wolfram`QuantumFramework`QuditName[{
                    Superscript["\[CapitalPhi]", "+"], 
                    Subscript["F", 2]}, "Dual" -> False]], "\[Rule]", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{
                    FractionBox["1", "2"], ",", 
                    RowBox[{"-", 
                    FractionBox["1", "2"]}]}], "}"}], ",", 
                    RowBox[{"{", 
                    RowBox[{"0", ",", "0"}], "}"}], ",", 
                    RowBox[{"{", 
                    RowBox[{"0", ",", "0"}], "}"}], ",", 
                    RowBox[{"{", 
                    RowBox[{
                    FractionBox["1", "2"], ",", 
                    RowBox[{"-", 
                    FractionBox["1", "2"]}]}], "}"}]}], "}"}]}], ",", 
                    RowBox[{
                    InterpretationBox[
                    TemplateBox[{
                    RowBox[{
                    
                    TemplateBox[{"\"\[CapitalPsi]\"", "\"-\""}, "Superscript",
                     SyntaxForm -> SuperscriptBox], "\[InvisibleSpace]", 
                    SubscriptBox["\"F\"", "1"]}]}, "Ket"], 
                    Wolfram`QuantumFramework`QuditName[{
                    Superscript["\[CapitalPsi]", "-"], 
                    Subscript["F", 1]}, "Dual" -> False]], "\[Rule]", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{"0", ",", "0"}], "}"}], ",", 
                    RowBox[{"{", 
                    RowBox[{
                    FractionBox["1", "2"], ",", 
                    FractionBox["1", "2"]}], "}"}], ",", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"-", 
                    FractionBox["1", "2"]}], ",", 
                    RowBox[{"-", 
                    FractionBox["1", "2"]}]}], "}"}], ",", 
                    RowBox[{"{", 
                    RowBox[{"0", ",", "0"}], "}"}]}], "}"}]}], ",", 
                    RowBox[{
                    InterpretationBox[
                    TemplateBox[{
                    RowBox[{
                    
                    TemplateBox[{"\"\[CapitalPsi]\"", "\"-\""}, "Superscript",
                     SyntaxForm -> SuperscriptBox], "\[InvisibleSpace]", 
                    SubscriptBox["\"F\"", "2"]}]}, "Ket"], 
                    Wolfram`QuantumFramework`QuditName[{
                    Superscript["\[CapitalPsi]", "-"], 
                    Subscript["F", 2]}, "Dual" -> False]], "\[Rule]", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{"0", ",", "0"}], "}"}], ",", 
                    RowBox[{"{", 
                    RowBox[{
                    FractionBox["1", "2"], ",", 
                    RowBox[{"-", 
                    FractionBox["1", "2"]}]}], "}"}], ",", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"-", 
                    FractionBox["1", "2"]}], ",", 
                    FractionBox["1", "2"]}], "}"}], ",", 
                    RowBox[{"{", 
                    RowBox[{"0", ",", "0"}], "}"}]}], "}"}]}], ",", 
                    RowBox[{
                    InterpretationBox[
                    TemplateBox[{
                    RowBox[{
                    
                    TemplateBox[{"\"\[CapitalPsi]\"", "\"+\""}, "Superscript",
                     SyntaxForm -> SuperscriptBox], "\[InvisibleSpace]", 
                    SubscriptBox["\"F\"", "1"]}]}, "Ket"], 
                    Wolfram`QuantumFramework`QuditName[{
                    Superscript["\[CapitalPsi]", "+"], 
                    Subscript["F", 1]}, "Dual" -> False]], "\[Rule]", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{"0", ",", "0"}], "}"}], ",", 
                    RowBox[{"{", 
                    RowBox[{
                    FractionBox["1", "2"], ",", 
                    FractionBox["1", "2"]}], "}"}], ",", 
                    RowBox[{"{", 
                    RowBox[{
                    FractionBox["1", "2"], ",", 
                    FractionBox["1", "2"]}], "}"}], ",", 
                    RowBox[{"{", 
                    RowBox[{"0", ",", "0"}], "}"}]}], "}"}]}], ",", 
                    RowBox[{
                    InterpretationBox[
                    TemplateBox[{
                    RowBox[{
                    
                    TemplateBox[{"\"\[CapitalPsi]\"", "\"+\""}, "Superscript",
                     SyntaxForm -> SuperscriptBox], "\[InvisibleSpace]", 
                    SubscriptBox["\"F\"", "2"]}]}, "Ket"], 
                    Wolfram`QuantumFramework`QuditName[{
                    Superscript["\[CapitalPsi]", "+"], 
                    Subscript["F", 2]}, "Dual" -> False]], "\[Rule]", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{"0", ",", "0"}], "}"}], ",", 
                    RowBox[{"{", 
                    RowBox[{
                    FractionBox["1", "2"], ",", 
                    RowBox[{"-", 
                    FractionBox["1", "2"]}]}], "}"}], ",", 
                    RowBox[{"{", 
                    RowBox[{
                    FractionBox["1", "2"], ",", 
                    RowBox[{"-", 
                    FractionBox["1", "2"]}]}], "}"}], ",", 
                    RowBox[{"{", 
                    RowBox[{"0", ",", "0"}], "}"}]}], "}"}]}]}], 
                    "\[RightAssociation]"}], 
                  Wolfram`QuantumFramework`QuditBasis[<|{
                    Wolfram`QuantumFramework`QuditName[
                    Superscript["\[CapitalPhi]", "-"], "Dual" -> False], 1} -> 
                    SparseArray[
                    Automatic, {4}, 0, {
                    1, {{0, 2}, {{1}, {4}}}, {
                    2^Rational[-1, 2], -2^Rational[-1, 2]}}], {
                    Wolfram`QuantumFramework`QuditName[
                    Superscript["\[CapitalPhi]", "+"], "Dual" -> False], 1} -> 
                    SparseArray[
                    Automatic, {4}, 0, {
                    1, {{0, 2}, {{1}, {4}}}, {
                    2^Rational[-1, 2], 2^Rational[-1, 2]}}], {
                    Wolfram`QuantumFramework`QuditName[
                    Superscript["\[CapitalPsi]", "-"], "Dual" -> False], 1} -> 
                    SparseArray[
                    Automatic, {4}, 0, {
                    1, {{0, 2}, {{2}, {3}}}, {
                    2^Rational[-1, 2], -2^Rational[-1, 2]}}], {
                    Wolfram`QuantumFramework`QuditName[
                    Superscript["\[CapitalPsi]", "+"], "Dual" -> False], 1} -> 
                    SparseArray[
                    Automatic, {4}, 0, {
                    1, {{0, 2}, {{2}, {3}}}, {
                    2^Rational[-1, 2], 2^Rational[-1, 2]}}], {
                    Wolfram`QuantumFramework`QuditName[
                    Subscript["F", 1], "Dual" -> False], 2} -> 
                    SparseArray[
                    Automatic, {2}, 0, {
                    1, {{0, 2}, {{1}, {2}}}, {
                    2^Rational[-1, 2], 2^Rational[-1, 2]}}], {
                    Wolfram`QuantumFramework`QuditName[
                    Subscript["F", 2], "Dual" -> False], 2} -> 
                    SparseArray[
                    Automatic, {2}, 0, {
                    1, {{0, 2}, {{1}, {2}}}, {
                    2^Rational[-1, 2], -2^Rational[-1, 2]}}]|>]], FontFamily -> 
                 Dynamic[
                   CurrentValue[{"StyleHints", "CodeFont"}]], 
                 ShowStringCharacters -> True]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key["Reverse"]}, "Item", False], "Mouse"], 
              ImageSize -> {{60, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}]}, {
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover["Size", 
                  Style[
                  "Size", FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                If[
                  TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                    Key["Size"]}, 1]]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key["Size"]}, "RowHeader", False], "Mouse"], 
              ImageSize -> {{179.20000000000002`, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
             GrayLevel[0.95], Alignment -> {Left, Baseline}], 
            Item[
             Pane[
              Annotation[
               RawBoxes["8"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key["Size"]}, "Item", False], "Mouse"], 
              ImageSize -> {{34, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}]}, {
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover["Tensor", 
                  Style[
                  "Tensor", FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                If[
                  TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                    Key["Tensor"]}, 1]]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key["Tensor"]}, "RowHeader", False], "Mouse"], 
              ImageSize -> {{179.20000000000002`, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
             GrayLevel[0.95], Alignment -> {Left, Baseline}], 
            Item[
             Pane[
              Annotation[
               RawBoxes[
                StyleBox[
                 RowBox[{
                   TagBox["SparseArray", "SummaryHead"], "[", 
                   TemplateBox[{
                    GridBox[{{
                    GridBox[{{
                    RowBox[{
                    TagBox[
                    "\"Specified elements: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox["32", "SummaryItem"]}]}, {
                    RowBox[{
                    TagBox["\"Dimensions: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox[
                    RowBox[{"{", 
                    RowBox[{"2", ",", "4", ",", "2", ",", "4"}], "}"}], 
                    "SummaryItem"]}]}}, 
                    GridBoxAlignment -> {
                    "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, 
                    AutoDelete -> False, 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {
                    "Columns" -> {{2}}, "Rows" -> {{Automatic}}}, 
                    BaseStyle -> {
                    ShowStringCharacters -> False, NumberMarks -> False, 
                    PrintPrecision -> 3, ShowSyntaxStyles -> False}]}}, 
                    GridBoxAlignment -> {
                    "Columns" -> {{Left}}, "Rows" -> {{Top}}}, AutoDelete -> 
                    False, GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                    BaselinePosition -> {1, 1}]}, "SummaryPanel"], "]"}], 
                 FontFamily -> Dynamic[
                   CurrentValue[{"StyleHints", "CodeFont"}]], 
                 ShowStringCharacters -> True]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key["Tensor"]}, "Item", False], "Mouse"], 
              ImageSize -> {{60, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}]}, {
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover["TensorDimensions", 
                  Style[
                  "TensorDimensions", FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                If[
                  TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                    Key["TensorDimensions"]}, 1]]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key["TensorDimensions"]}, "RowHeader", False], "Mouse"], 
              ImageSize -> {{179.20000000000002`, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
             GrayLevel[0.95], Alignment -> {Left, Baseline}], 
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover[
                  Style[{2, 4, 2, 4}, ShowStringCharacters -> False], 
                  Style[
                   Style[{2, 4, 2, 4}, ShowStringCharacters -> False], 
                   FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                If[
                  TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                    Key["TensorDimensions"]}, 4]]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key["TensorDimensions"]}, "Item", False], "Mouse"], 
              ImageMargins -> {{5, 3}, {4, 5}}]]}}, 
          BaseStyle -> {
           ContextMenu -> 
            Dynamic[TypeSystem`NestedGrid`PackagePrivate`$contextMenuTrigger; 
              Which[TypeSystem`NestedGrid`PackagePrivate`$lastOutputID =!= 
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                 TypeSystem`NestedGrid`PackagePrivate`$outputID$$], {}, 
                TypeSystem`NestedGrid`PackagePrivate`$contextMenuTrigger === 
                TypeSystem`NestedGrid`PackagePrivate`$lastContextMenuTrigger, 
                TypeSystem`NestedGrid`PackagePrivate`$lastContextMenu, True, 
                TypeSystem`NestedGrid`PackagePrivate`$lastContextMenuTrigger = 
                 TypeSystem`NestedGrid`PackagePrivate`$contextMenuTrigger; 
                TypeSystem`NestedGrid`PackagePrivate`$lastContextMenu = 
                 Block[{TypeSystem`NestedGrid`PackagePrivate`$globalScrollPos = \
{TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$}}, 
                   
                   With[{TypeSystem`NestedGrid`PackagePrivate`lastPath$ = 
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath, 
                    TypeSystem`NestedGrid`PackagePrivate`lastPathType$ = 
                    TypeSystem`NestedGrid`PackagePrivate`$lastPathType, 
                    TypeSystem`NestedGrid`PackagePrivate`isLeafHeader$ = 
                    TypeSystem`NestedGrid`PackagePrivate`$\
lastPathIsLeafHeader, TypeSystem`NestedGrid`PackagePrivate`headerHidden$ = And[
                    MatchQ[TypeSystem`NestedGrid`PackagePrivate`$lastPathType, 
                    Alternatives["RowHeader", "ColumnHeader"]], 
                    TypeSystem`NestedGrid`PackagePrivate`headerHiddenQ[
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath, 
                    TypeSystem`NestedGrid`PackagePrivate`$state$$]], 
                    TypeSystem`NestedGrid`PackagePrivate`allHidden$ = 
                    TypeSystem`NestedGrid`PackagePrivate`allHiddenQ[
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath, 
                    TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                    TypeSystem`NestedGrid`PackagePrivate`anyHidden$ = 
                    TypeSystem`NestedGrid`PackagePrivate`anyHiddenQ[
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath, 
                    TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                    TypeSystem`NestedGrid`PackagePrivate`sortDirection$ = 
                    TypeSystem`NestedGrid`PackagePrivate`columnSortDirection[
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath, 
                    TypeSystem`NestedGrid`PackagePrivate`$state$$[
                    "SortPaths"], 
                    TypeSystem`NestedGrid`PackagePrivate`$state$$[
                    "SortDirections"]], 
                    TypeSystem`NestedGrid`PackagePrivate`haveData$ = Not[
                    FailureQ[
                    TypeSystem`NestedGrid`PackagePrivate`datasetInitialData[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$]]], 
                    TypeSystem`NestedGrid`PackagePrivate`isKeyDummy$ = Not[
                    FreeQ[
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath, Keys]]}, 
                    Join[{
                    If[
                    Or[
                    Not[TypeSystem`NestedGrid`PackagePrivate`haveData$], 
                    Not[TypeSystem`NestedGrid`PackagePrivate`anyHidden$], 
                    TypeSystem`NestedGrid`PackagePrivate`isKeyDummy$], 
                    Nothing, 
                    MenuItem[
                    "Show " <> 
                    Which[TypeSystem`NestedGrid`PackagePrivate`lastPathType$ == 
                    "Item", "", 
                    TypeSystem`NestedGrid`PackagePrivate`lastPathType$ == 
                    "RowHeader", "Row", 
                    TypeSystem`NestedGrid`PackagePrivate`lastPathType$ == 
                    "ColumnHeader", "Column", True, ""], 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`updateHiddenItems[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][
                    TypeSystem`NestedGrid`PackagePrivate`lastPath$, 
                    "remove"]], MenuEvaluator -> Automatic]], 
                    If[
                    Or[
                    Not[TypeSystem`NestedGrid`PackagePrivate`haveData$], 
                    TypeSystem`NestedGrid`PackagePrivate`pathEmptyQ[
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath, 
                    TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                    TypeSystem`NestedGrid`PackagePrivate`isKeyDummy$, 
                    And[
                    TypeSystem`NestedGrid`PackagePrivate`allHidden$, 
                    TypeSystem`NestedGrid`PackagePrivate`headerHidden$]], 
                    Nothing, 
                    MenuItem[
                    "Hide " <> 
                    Which[TypeSystem`NestedGrid`PackagePrivate`lastPathType$ == 
                    "Item", "", 
                    TypeSystem`NestedGrid`PackagePrivate`lastPathType$ == 
                    "RowHeader", "Row", 
                    TypeSystem`NestedGrid`PackagePrivate`lastPathType$ == 
                    "ColumnHeader", "Column", True, ""], 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`updateHiddenItems[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][
                    TypeSystem`NestedGrid`PackagePrivate`lastPath$, "add"]], 
                    MenuEvaluator -> Automatic]], Delimiter}, 
                    If[
                    And[TypeSystem`NestedGrid`PackagePrivate`haveData$, 
                    MatchQ[TypeSystem`NestedGrid`PackagePrivate`lastPathType$, 
                    Alternatives["ColumnHeader", "KeyDummy"]], 
                    TypeSystem`NestedGrid`PackagePrivate`isLeafHeader$, 
                    Not[TypeSystem`NestedGrid`PackagePrivate`allHidden$]], {
                    If[
                    TypeSystem`NestedGrid`PackagePrivate`sortDirection$ =!= 
                    "Ascending", 
                    MenuItem["Sort", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`updateSort[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][
                    TypeSystem`NestedGrid`PackagePrivate`lastPath$, 
                    "Ascending"]], MenuEvaluator -> Automatic], Nothing], 
                    If[
                    TypeSystem`NestedGrid`PackagePrivate`sortDirection$ =!= 
                    "Descending", 
                    MenuItem["Reverse Sort", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`updateSort[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][
                    TypeSystem`NestedGrid`PackagePrivate`lastPath$, 
                    "Descending"]], MenuEvaluator -> Automatic], Nothing], 
                    If[TypeSystem`NestedGrid`PackagePrivate`sortDirection$ =!= 
                    None, 
                    MenuItem["Unsort", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`updateSort[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][
                    TypeSystem`NestedGrid`PackagePrivate`lastPath$, None]], 
                    MenuEvaluator -> Automatic], Nothing], Delimiter}, {}], {
                    MenuItem["Copy Position to Clipboard", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`toCurrentPosition[
                    TypeSystem`NestedGrid`PackagePrivate`copyClip]], 
                    MenuEvaluator -> Automatic], 
                    If[TypeSystem`NestedGrid`PackagePrivate`haveData$, 
                    MenuItem["Copy Data to Clipboard", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`toCurrentData[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`copyClip]], 
                    MenuEvaluator -> Automatic], Nothing], Delimiter, 
                    MenuItem["Paste Position in New Cell", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`toCurrentPosition[
                    TypeSystem`NestedGrid`PackagePrivate`cellPaste]], 
                    MenuEvaluator -> Automatic], 
                    If[TypeSystem`NestedGrid`PackagePrivate`haveData$, 
                    MenuItem["Paste Data in New Cell", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`toCurrentData[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`cellPaste]], 
                    MenuEvaluator -> Automatic], Nothing]}]]]]], FontFamily -> 
            "Source Sans Pro", FontSize -> 14, FontWeight -> Plain}, Dividers -> 
          All, FrameStyle -> GrayLevel[0.7490196078431373], 
          Spacings -> {0, 0}, Alignment -> Left, 
          BaseStyle -> {
           FontFamily -> "Source Sans Pro", FontSize -> 14, FontWeight -> 
            Plain}], LineBreakWithin -> False, ContextMenu -> {}, NumberMarks -> 
         False, ShowAutoStyles -> False]], 
      TypeSystem`NestedGrid`PackagePrivate`initialQ = True}, 
     Dynamic[
      TypeSystem`NestedGrid`PackagePrivate`setupViewPath[
      TypeSystem`NestedGrid`PackagePrivate`$path$$, If[
         Not[TypeSystem`NestedGrid`PackagePrivate`initialQ], 
         Module[{
          TypeSystem`NestedGrid`PackagePrivate`tmpGrid$ = $Failed, 
           TypeSystem`NestedGrid`PackagePrivate`tmpData$ = 
           TypeSystem`NestedGrid`PackagePrivate`datasetData[
            TypeSystem`NestedGrid`PackagePrivate`$state$$]}, 
          TypeSystem`NestedGrid`PackagePrivate`tmpGrid$ = If[
             FailureQ[TypeSystem`NestedGrid`PackagePrivate`tmpData$], 
             TypeSystem`NestedGrid`PackagePrivate`renderedGrid, 
             TypeSystem`NestedGrid`PackagePrivate`renderGrid[
             TypeSystem`NestedGrid`PackagePrivate`$state$$, 
              TypeSystem`NestedGrid`PackagePrivate`$path$$, 
              TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
              TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
              TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
              TypeSystem`NestedGrid`PackagePrivate`localHold[
              TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][
             TypeSystem`NestedGrid`PackagePrivate`tmpData$]]; If[
            Not[
             FailureQ[TypeSystem`NestedGrid`PackagePrivate`tmpGrid$]], 
            TypeSystem`NestedGrid`PackagePrivate`renderedGrid = 
            TypeSystem`NestedGrid`PackagePrivate`tmpGrid$]; Null]]; 
       TypeSystem`NestedGrid`PackagePrivate`initialQ = False; 
       TypeSystem`NestedGrid`PackagePrivate`$vPos$$; 
       TypeSystem`NestedGrid`PackagePrivate`$hPos$$; If[
         FailureQ[TypeSystem`NestedGrid`PackagePrivate`renderedGrid], 
         TypeSystem`SparseGrid[
          TypeSystem`H["(data no longer present)"]], 
         TypeSystem`NestedGrid`PackagePrivate`renderedGrid]], 
      TrackedSymbols :> {
       TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
        TypeSystem`NestedGrid`PackagePrivate`$hPos$$}], 
     DynamicModuleValues :> {}], 
    TypeSystem`NestedGrid`PackagePrivate`$topBar$$ = Dynamic[
     TypeSystem`NestedGrid`PackagePrivate`makeFramedBar[
      TypeSystem`PackageScope`SubViewPathbar[
      TypeSystem`NestedGrid`PackagePrivate`$path$$, 
       TypeSystem`NestedGrid`PackagePrivate`updateState[
       TypeSystem`NestedGrid`PackagePrivate`$state$$, 
        TypeSystem`NestedGrid`PackagePrivate`$path$$, 
        TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
        TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
        TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
        TypeSystem`NestedGrid`PackagePrivate`localHold[
        TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]]], 
     TrackedSymbols :> {TypeSystem`NestedGrid`PackagePrivate`$path$$}], 
    TypeSystem`NestedGrid`PackagePrivate`$bottomBar$$ = Style[
     Framed[
      Dynamic[
       Replace[
       TypeSystem`NestedGrid`PackagePrivate`mouseAnnotation$$, {
        TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
           TypeSystem`NestedGrid`PackagePrivate`localHold[
           TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][Null, 
           Blank[]] -> "", TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
           TypeSystem`NestedGrid`PackagePrivate`localHold[
           TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][
           Pattern[TypeSystem`NestedGrid`PackagePrivate`path$, 
            Blank[]], 
           Pattern[TypeSystem`NestedGrid`PackagePrivate`pathType$, 
            Blank[]], 
           Pattern[TypeSystem`NestedGrid`PackagePrivate`isLeafHeader$, 
            Blank[]]] :> (
          Increment[TypeSystem`NestedGrid`PackagePrivate`$contextMenuTrigger]; 
          TypeSystem`NestedGrid`PackagePrivate`$lastPath = 
           TypeSystem`NestedGrid`PackagePrivate`path$; 
          TypeSystem`NestedGrid`PackagePrivate`$lastPathType = 
           TypeSystem`NestedGrid`PackagePrivate`pathType$; 
          TypeSystem`NestedGrid`PackagePrivate`$lastPathIsLeafHeader = 
           TypeSystem`NestedGrid`PackagePrivate`isLeafHeader$; 
          TypeSystem`NestedGrid`PackagePrivate`$lastOutputID = 
           TypeSystem`NestedGrid`PackagePrivate`localHold[
            TypeSystem`NestedGrid`PackagePrivate`$outputID$$]; 
          TypeSystem`NestedGrid`PackagePrivate`makePathTrail[
           TypeSystem`NestedGrid`PackagePrivate`path$, 
            TypeSystem`NestedGrid`PackagePrivate`makePathElements]), Null :> 
         Spacer[10], Blank[] :> Spacer[10]}], 
       TrackedSymbols :> {
        TypeSystem`NestedGrid`PackagePrivate`mouseAnnotation$$}], FrameStyle -> 
      None, ImageMargins -> 0, FrameMargins -> 0, Alignment -> Top, 
      ImageSize -> {Automatic, 15}], FontSize -> 1], 
    TypeSystem`NestedGrid`PackagePrivate`mouseAnnotation$$ = Null}, 
    DynamicWrapperBox[
     DynamicBox[ToBoxes[
       Dataset`DatasetContent[
       2, "Path" -> Hold[TypeSystem`NestedGrid`PackagePrivate`$path$$], 
        "Grid" -> Hold[TypeSystem`NestedGrid`PackagePrivate`$grid$$], "State" -> 
        Hold[TypeSystem`NestedGrid`PackagePrivate`$state$$], "VPos" -> 
        Hold[TypeSystem`NestedGrid`PackagePrivate`$vPos$$], "HPos" -> 
        Hold[TypeSystem`NestedGrid`PackagePrivate`$hPos$$], "TopBar" -> 
        Hold[TypeSystem`NestedGrid`PackagePrivate`$topBar$$], "BottomBar" -> 
        Hold[TypeSystem`NestedGrid`PackagePrivate`$bottomBar$$], "OutputID" -> 
        Hold[
          TypeSystem`NestedGrid`PackagePrivate`localHold[
          TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]], StandardForm],
      ImageSizeCache->{688., {297.134033203125, 302.865966796875}},
      TrackedSymbols:>{
       TypeSystem`NestedGrid`PackagePrivate`$state$$, 
        TypeSystem`NestedGrid`PackagePrivate`$grid$$}], 
     TypeSystem`NestedGrid`PackagePrivate`mouseAnnotation$$ = 
     MouseAnnotation[],
     ImageSizeCache->{688., {297.134033203125, 302.865966796875}}],
    BaseStyle->{LineBreakWithin -> False},
    DynamicModuleValues:>{},
    Initialization:>(TypeSystem`NestedGrid`PackagePrivate`$outputID$$ = 
     CreateUUID[]),
    UnsavedVariables:>{TypeSystem`NestedGrid`PackagePrivate`$outputID$$}],
   Deploy,
   DefaultBaseStyle->"Deploy"],
  Dataset`InterpretDataset[1],
  Editable->False,
  SelectWithContents->True,
  Selectable->False]], "Output",
 CellChangeTimes->{{3.841075583926704*^9, 3.841075668939776*^9}, {
   3.84107570277337*^9, 3.841075735548373*^9}, 3.841077029007434*^9, 
   3.841078426112816*^9, 3.841078471227243*^9, 3.8410785442755947`*^9, 
   3.8410790782552443`*^9, 3.841088588209663*^9, 3.842904749222351*^9, {
   3.842904809687847*^9, 3.842904825269494*^9}, 3.843147062625929*^9, 
   3.8431476422865543`*^9, 3.858281710348568*^9, {3.858281952656513*^9, 
   3.858281963031947*^9}, 3.858285724115555*^9},
 CellLabel->
  "Out[204]=",ExpressionUUID->"d3294aa4-19bf-40a1-9c9f-fd32b3933faf"]
}, Open  ]],

Cell["\<\
Its underlying data consists of tensor representations for each qudit:\
\>", "Text",
 CellChangeTimes->{{3.8582818777884912`*^9, 
  3.858281938600779*^9}},ExpressionUUID->"8b06fbb1-fd16-4e67-9034-\
671a6f29e689"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"QuditBasis", "[", 
   RowBox[{"{", 
    RowBox[{"\"\<Fourier\>\"", ",", "\"\<Z\>\""}], "}"}], "]"}], "[", 
  "\"\<Representations\>\"", "]"}]], "Input",
 CellChangeTimes->{{3.858281862952372*^9, 3.8582818682973537`*^9}, {
  3.858281915320978*^9, 3.858281918186192*^9}},
 CellLabel->
  "In[205]:=",ExpressionUUID->"5075e7f3-ed77-4432-a734-c41229bf0200"],

Cell[BoxData[
 RowBox[{"\[LeftAssociation]", 
  RowBox[{
   RowBox[{
    RowBox[{"{", 
     RowBox[{
      InterpretationBox[
       TemplateBox[{
         RowBox[{
           SubscriptBox["\"F\"", "1"]}]},
        "Ket"],
       Wolfram`QuantumFramework`QuditName[
        Subscript["F", 1], "Dual" -> False]], ",", "1"}], "}"}], "\[Rule]", 
    InterpretationBox[
     RowBox[{
      TagBox["SparseArray",
       "SummaryHead"], "[", 
      DynamicModuleBox[{Typeset`open$$ = False, Typeset`embedState$$ = 
       "Ready"}, 
       TemplateBox[{
         PaneSelectorBox[{False -> GridBox[{{
               PaneBox[
                ButtonBox[
                 DynamicBox[
                  FEPrivate`FrontEndResource[
                  "FEBitmaps", "SummaryBoxOpener"]], 
                 ButtonFunction :> (Typeset`open$$ = True), Appearance -> 
                 None, BaseStyle -> {}, Evaluator -> Automatic, Method -> 
                 "Preemptive"], Alignment -> {Center, Center}, ImageSize -> 
                Dynamic[{
                  Automatic, 
                   3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                    Magnification])}]], 
               GraphicsBox[
                
                RasterBox[{{{0.772061, 0.92462, 0.998703}, {0.772061, 0.92462,
                  0.998703}}}, {{0, 0}, {2, 1}}, {0, 1}], AspectRatio -> 1, 
                Axes -> False, Frame -> False, FrameLabel -> {None, None}, 
                FrameStyle -> Directive[
                  Opacity[0.5], 
                  Thickness[Tiny], 
                  RGBColor[0.368417, 0.506779, 0.709798]], 
                FrameTicks -> {{None, None}, {None, None}}, GridLinesStyle -> 
                Directive[
                  GrayLevel[0.5, 0.4]], ImageSize -> 
                Dynamic[{
                  Automatic, 
                   3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                    Magnification])}], 
                Method -> {
                 "AxisPadding" -> Scaled[0.02], "DefaultBoundaryStyle" -> 
                  Automatic, 
                  "DefaultGraphicsInteraction" -> {
                   "Version" -> 1.2, "TrackMousePosition" -> {True, False}, 
                    "Effects" -> {
                    "Highlight" -> {"ratio" -> 2}, 
                    "HighlightPoint" -> {"ratio" -> 2}, 
                    "Droplines" -> {
                    "freeformCursorMode" -> True, 
                    "placement" -> {"x" -> "All", "y" -> "None"}}}}, 
                  "DefaultPlotStyle" -> Automatic, "DomainPadding" -> 
                  Scaled[0.02], "RangePadding" -> Scaled[0.05]}], 
               GridBox[{{
                  RowBox[{
                    TagBox[
                    "\"Specified elements: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox["2", "SummaryItem"]}]}, {
                  RowBox[{
                    TagBox["\"Dimensions: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox[
                    RowBox[{"{", "2", "}"}], "SummaryItem"]}]}}, 
                GridBoxAlignment -> {
                 "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, AutoDelete -> 
                False, GridBoxItemSize -> {
                 "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                GridBoxSpacings -> {
                 "Columns" -> {{2}}, "Rows" -> {{Automatic}}}, 
                BaseStyle -> {
                 ShowStringCharacters -> False, NumberMarks -> False, 
                  PrintPrecision -> 3, ShowSyntaxStyles -> False}]}}, 
             GridBoxAlignment -> {"Columns" -> {{Left}}, "Rows" -> {{Top}}}, 
             AutoDelete -> False, 
             GridBoxItemSize -> {
              "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
             BaselinePosition -> {1, 1}], True -> GridBox[{{
               PaneBox[
                ButtonBox[
                 DynamicBox[
                  FEPrivate`FrontEndResource[
                  "FEBitmaps", "SummaryBoxCloser"]], 
                 ButtonFunction :> (Typeset`open$$ = False), Appearance -> 
                 None, BaseStyle -> {}, Evaluator -> Automatic, Method -> 
                 "Preemptive"], Alignment -> {Center, Center}, ImageSize -> 
                Dynamic[{
                  Automatic, 
                   3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                    Magnification])}]], 
               GraphicsBox[
                
                RasterBox[{{{0.772061, 0.92462, 0.998703}, {0.772061, 0.92462,
                  0.998703}}}, {{0, 0}, {2, 1}}, {0, 1}], AspectRatio -> 1, 
                Axes -> False, Frame -> False, FrameLabel -> {None, None}, 
                FrameStyle -> Directive[
                  Opacity[0.5], 
                  Thickness[Tiny], 
                  RGBColor[0.368417, 0.506779, 0.709798]], 
                FrameTicks -> {{None, None}, {None, None}}, GridLinesStyle -> 
                Directive[
                  GrayLevel[0.5, 0.4]], ImageSize -> 
                Dynamic[{
                  Automatic, 
                   3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                    Magnification])}], 
                Method -> {
                 "AxisPadding" -> Scaled[0.02], "DefaultBoundaryStyle" -> 
                  Automatic, 
                  "DefaultGraphicsInteraction" -> {
                   "Version" -> 1.2, "TrackMousePosition" -> {True, False}, 
                    "Effects" -> {
                    "Highlight" -> {"ratio" -> 2}, 
                    "HighlightPoint" -> {"ratio" -> 2}, 
                    "Droplines" -> {
                    "freeformCursorMode" -> True, 
                    "placement" -> {"x" -> "All", "y" -> "None"}}}}, 
                  "DefaultPlotStyle" -> Automatic, "DomainPadding" -> 
                  Scaled[0.02], "RangePadding" -> Scaled[0.05]}], 
               GridBox[{{
                  RowBox[{
                    TagBox[
                    "\"Specified elements: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox["2", "SummaryItem"]}]}, {
                  RowBox[{
                    TagBox["\"Dimensions: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox[
                    RowBox[{"{", "2", "}"}], "SummaryItem"]}]}, {
                  RowBox[{
                    TagBox["\"Default: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox["0", "SummaryItem"]}]}, {
                  RowBox[{
                    TagBox["\"Density: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox["1.`", "SummaryItem"]}]}, {
                  RowBox[{
                    TagBox["\"Elements:\"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox["\"\"", "SummaryItem"]}]}, {
                  TagBox[
                   TagBox[
                    GridBox[{{
                    RowBox[{
                    RowBox[{"{", "1", "}"}], "\[Rule]", 
                    StyleBox[
                    PaneBox[
                    FractionBox["1", 
                    SqrtBox["2"]], ContentPadding -> False, FrameMargins -> 0,
                     StripOnInput -> True, BaselinePosition -> Baseline, 
                    ImageSize -> {{1, 300}, Automatic}], LineBreakWithin -> 
                    False]}]}, {
                    RowBox[{
                    RowBox[{"{", "2", "}"}], "\[Rule]", 
                    StyleBox[
                    PaneBox[
                    FractionBox["1", 
                    SqrtBox["2"]], ContentPadding -> False, FrameMargins -> 0,
                     StripOnInput -> True, BaselinePosition -> Baseline, 
                    ImageSize -> {{1, 300}, Automatic}], LineBreakWithin -> 
                    False]}]}}, GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], "SummaryItem"]}}, 
                GridBoxAlignment -> {
                 "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, AutoDelete -> 
                False, GridBoxItemSize -> {
                 "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                GridBoxSpacings -> {
                 "Columns" -> {{2}}, "Rows" -> {{Automatic}}}, 
                BaseStyle -> {
                 ShowStringCharacters -> False, NumberMarks -> False, 
                  PrintPrecision -> 3, ShowSyntaxStyles -> False}]}}, 
             GridBoxAlignment -> {"Columns" -> {{Left}}, "Rows" -> {{Top}}}, 
             AutoDelete -> False, 
             GridBoxItemSize -> {
              "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
             BaselinePosition -> {1, 1}]}, 
          Dynamic[Typeset`open$$], ImageSize -> Automatic]},
        "SummaryPanel"],
       DynamicModuleValues:>{}], "]"}],
     SparseArray[
     Automatic, {2}, 0, {
      1, {{0, 2}, {{1}, {2}}}, {2^Rational[-1, 2], 2^Rational[-1, 2]}}],
     Editable->False,
     SelectWithContents->True,
     Selectable->False]}], ",", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{
      InterpretationBox[
       TemplateBox[{
         RowBox[{
           SubscriptBox["\"F\"", "2"]}]},
        "Ket"],
       Wolfram`QuantumFramework`QuditName[
        Subscript["F", 2], "Dual" -> False]], ",", "1"}], "}"}], "\[Rule]", 
    InterpretationBox[
     RowBox[{
      TagBox["SparseArray",
       "SummaryHead"], "[", 
      DynamicModuleBox[{Typeset`open$$ = False, Typeset`embedState$$ = 
       "Ready"}, 
       TemplateBox[{
         PaneSelectorBox[{False -> GridBox[{{
               PaneBox[
                ButtonBox[
                 DynamicBox[
                  FEPrivate`FrontEndResource[
                  "FEBitmaps", "SummaryBoxOpener"]], 
                 ButtonFunction :> (Typeset`open$$ = True), Appearance -> 
                 None, BaseStyle -> {}, Evaluator -> Automatic, Method -> 
                 "Preemptive"], Alignment -> {Center, Center}, ImageSize -> 
                Dynamic[{
                  Automatic, 
                   3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                    Magnification])}]], 
               GraphicsBox[
                
                RasterBox[{{{0.772061, 0.92462, 0.998703}, {0.16791, 0., 
                 0.301671}}}, {{0, 0}, {2, 1}}, {0, 1}], AspectRatio -> 1, 
                Axes -> False, Frame -> False, FrameLabel -> {None, None}, 
                FrameStyle -> Directive[
                  Opacity[0.5], 
                  Thickness[Tiny], 
                  RGBColor[0.368417, 0.506779, 0.709798]], 
                FrameTicks -> {{None, None}, {None, None}}, GridLinesStyle -> 
                Directive[
                  GrayLevel[0.5, 0.4]], ImageSize -> 
                Dynamic[{
                  Automatic, 
                   3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                    Magnification])}], 
                Method -> {
                 "AxisPadding" -> Scaled[0.02], "DefaultBoundaryStyle" -> 
                  Automatic, 
                  "DefaultGraphicsInteraction" -> {
                   "Version" -> 1.2, "TrackMousePosition" -> {True, False}, 
                    "Effects" -> {
                    "Highlight" -> {"ratio" -> 2}, 
                    "HighlightPoint" -> {"ratio" -> 2}, 
                    "Droplines" -> {
                    "freeformCursorMode" -> True, 
                    "placement" -> {"x" -> "All", "y" -> "None"}}}}, 
                  "DefaultPlotStyle" -> Automatic, "DomainPadding" -> 
                  Scaled[0.02], "RangePadding" -> Scaled[0.05]}], 
               GridBox[{{
                  RowBox[{
                    TagBox[
                    "\"Specified elements: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox["2", "SummaryItem"]}]}, {
                  RowBox[{
                    TagBox["\"Dimensions: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox[
                    RowBox[{"{", "2", "}"}], "SummaryItem"]}]}}, 
                GridBoxAlignment -> {
                 "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, AutoDelete -> 
                False, GridBoxItemSize -> {
                 "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                GridBoxSpacings -> {
                 "Columns" -> {{2}}, "Rows" -> {{Automatic}}}, 
                BaseStyle -> {
                 ShowStringCharacters -> False, NumberMarks -> False, 
                  PrintPrecision -> 3, ShowSyntaxStyles -> False}]}}, 
             GridBoxAlignment -> {"Columns" -> {{Left}}, "Rows" -> {{Top}}}, 
             AutoDelete -> False, 
             GridBoxItemSize -> {
              "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
             BaselinePosition -> {1, 1}], True -> GridBox[{{
               PaneBox[
                ButtonBox[
                 DynamicBox[
                  FEPrivate`FrontEndResource[
                  "FEBitmaps", "SummaryBoxCloser"]], 
                 ButtonFunction :> (Typeset`open$$ = False), Appearance -> 
                 None, BaseStyle -> {}, Evaluator -> Automatic, Method -> 
                 "Preemptive"], Alignment -> {Center, Center}, ImageSize -> 
                Dynamic[{
                  Automatic, 
                   3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                    Magnification])}]], 
               GraphicsBox[
                
                RasterBox[{{{0.772061, 0.92462, 0.998703}, {0.16791, 0., 
                 0.301671}}}, {{0, 0}, {2, 1}}, {0, 1}], AspectRatio -> 1, 
                Axes -> False, Frame -> False, FrameLabel -> {None, None}, 
                FrameStyle -> Directive[
                  Opacity[0.5], 
                  Thickness[Tiny], 
                  RGBColor[0.368417, 0.506779, 0.709798]], 
                FrameTicks -> {{None, None}, {None, None}}, GridLinesStyle -> 
                Directive[
                  GrayLevel[0.5, 0.4]], ImageSize -> 
                Dynamic[{
                  Automatic, 
                   3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                    Magnification])}], 
                Method -> {
                 "AxisPadding" -> Scaled[0.02], "DefaultBoundaryStyle" -> 
                  Automatic, 
                  "DefaultGraphicsInteraction" -> {
                   "Version" -> 1.2, "TrackMousePosition" -> {True, False}, 
                    "Effects" -> {
                    "Highlight" -> {"ratio" -> 2}, 
                    "HighlightPoint" -> {"ratio" -> 2}, 
                    "Droplines" -> {
                    "freeformCursorMode" -> True, 
                    "placement" -> {"x" -> "All", "y" -> "None"}}}}, 
                  "DefaultPlotStyle" -> Automatic, "DomainPadding" -> 
                  Scaled[0.02], "RangePadding" -> Scaled[0.05]}], 
               GridBox[{{
                  RowBox[{
                    TagBox[
                    "\"Specified elements: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox["2", "SummaryItem"]}]}, {
                  RowBox[{
                    TagBox["\"Dimensions: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox[
                    RowBox[{"{", "2", "}"}], "SummaryItem"]}]}, {
                  RowBox[{
                    TagBox["\"Default: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox["0", "SummaryItem"]}]}, {
                  RowBox[{
                    TagBox["\"Density: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox["1.`", "SummaryItem"]}]}, {
                  RowBox[{
                    TagBox["\"Elements:\"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox["\"\"", "SummaryItem"]}]}, {
                  TagBox[
                   TagBox[
                    GridBox[{{
                    RowBox[{
                    RowBox[{"{", "1", "}"}], "\[Rule]", 
                    StyleBox[
                    PaneBox[
                    FractionBox["1", 
                    SqrtBox["2"]], ContentPadding -> False, FrameMargins -> 0,
                     StripOnInput -> True, BaselinePosition -> Baseline, 
                    ImageSize -> {{1, 300}, Automatic}], LineBreakWithin -> 
                    False]}]}, {
                    RowBox[{
                    RowBox[{"{", "2", "}"}], "\[Rule]", 
                    StyleBox[
                    PaneBox[
                    RowBox[{"-", 
                    FractionBox["1", 
                    SqrtBox["2"]]}], ContentPadding -> False, FrameMargins -> 
                    0, StripOnInput -> True, BaselinePosition -> Baseline, 
                    ImageSize -> {{1, 300}, Automatic}], LineBreakWithin -> 
                    False]}]}}, GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], "SummaryItem"]}}, 
                GridBoxAlignment -> {
                 "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, AutoDelete -> 
                False, GridBoxItemSize -> {
                 "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                GridBoxSpacings -> {
                 "Columns" -> {{2}}, "Rows" -> {{Automatic}}}, 
                BaseStyle -> {
                 ShowStringCharacters -> False, NumberMarks -> False, 
                  PrintPrecision -> 3, ShowSyntaxStyles -> False}]}}, 
             GridBoxAlignment -> {"Columns" -> {{Left}}, "Rows" -> {{Top}}}, 
             AutoDelete -> False, 
             GridBoxItemSize -> {
              "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
             BaselinePosition -> {1, 1}]}, 
          Dynamic[Typeset`open$$], ImageSize -> Automatic]},
        "SummaryPanel"],
       DynamicModuleValues:>{}], "]"}],
     SparseArray[
     Automatic, {2}, 0, {
      1, {{0, 2}, {{1}, {2}}}, {2^Rational[-1, 2], -2^Rational[-1, 2]}}],
     Editable->False,
     SelectWithContents->True,
     Selectable->False]}], ",", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{
      InterpretationBox[
       TemplateBox[{
         RowBox[{
           SubscriptBox["\"\[Psi]\"", 
            SubscriptBox["\"z\"", "\"-\""]]}]},
        "Ket"],
       Wolfram`QuantumFramework`QuditName[
        Subscript["\[Psi]", 
         Subscript["z", "-"]], "Dual" -> False]], ",", "2"}], "}"}], 
    "\[Rule]", 
    InterpretationBox[
     RowBox[{
      TagBox["SparseArray",
       "SummaryHead"], "[", 
      DynamicModuleBox[{Typeset`open$$ = False, Typeset`embedState$$ = 
       "Ready"}, 
       TemplateBox[{
         PaneSelectorBox[{False -> GridBox[{{
               PaneBox[
                ButtonBox[
                 DynamicBox[
                  FEPrivate`FrontEndResource[
                  "FEBitmaps", "SummaryBoxOpener"]], 
                 ButtonFunction :> (Typeset`open$$ = True), Appearance -> 
                 None, BaseStyle -> {}, Evaluator -> Automatic, Method -> 
                 "Preemptive"], Alignment -> {Center, Center}, ImageSize -> 
                Dynamic[{
                  Automatic, 
                   3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                    Magnification])}]], 
               GraphicsBox[
                
                RasterBox[{{{0.235431, 0.32765, 0.833291}, {0.772061, 0.92462,
                  0.998703}}}, {{0, 0}, {2, 1}}, {0, 1}], AspectRatio -> 1, 
                Axes -> False, Frame -> False, FrameLabel -> {None, None}, 
                FrameStyle -> Directive[
                  Opacity[0.5], 
                  Thickness[Tiny], 
                  RGBColor[0.368417, 0.506779, 0.709798]], 
                FrameTicks -> {{None, None}, {None, None}}, GridLinesStyle -> 
                Directive[
                  GrayLevel[0.5, 0.4]], ImageSize -> 
                Dynamic[{
                  Automatic, 
                   3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                    Magnification])}], 
                Method -> {
                 "AxisPadding" -> Scaled[0.02], "DefaultBoundaryStyle" -> 
                  Automatic, 
                  "DefaultGraphicsInteraction" -> {
                   "Version" -> 1.2, "TrackMousePosition" -> {True, False}, 
                    "Effects" -> {
                    "Highlight" -> {"ratio" -> 2}, 
                    "HighlightPoint" -> {"ratio" -> 2}, 
                    "Droplines" -> {
                    "freeformCursorMode" -> True, 
                    "placement" -> {"x" -> "All", "y" -> "None"}}}}, 
                  "DefaultPlotStyle" -> Automatic, "DomainPadding" -> 
                  Scaled[0.02], "RangePadding" -> Scaled[0.05]}], 
               GridBox[{{
                  RowBox[{
                    TagBox[
                    "\"Specified elements: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox["1", "SummaryItem"]}]}, {
                  RowBox[{
                    TagBox["\"Dimensions: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox[
                    RowBox[{"{", "2", "}"}], "SummaryItem"]}]}}, 
                GridBoxAlignment -> {
                 "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, AutoDelete -> 
                False, GridBoxItemSize -> {
                 "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                GridBoxSpacings -> {
                 "Columns" -> {{2}}, "Rows" -> {{Automatic}}}, 
                BaseStyle -> {
                 ShowStringCharacters -> False, NumberMarks -> False, 
                  PrintPrecision -> 3, ShowSyntaxStyles -> False}]}}, 
             GridBoxAlignment -> {"Columns" -> {{Left}}, "Rows" -> {{Top}}}, 
             AutoDelete -> False, 
             GridBoxItemSize -> {
              "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
             BaselinePosition -> {1, 1}], True -> GridBox[{{
               PaneBox[
                ButtonBox[
                 DynamicBox[
                  FEPrivate`FrontEndResource[
                  "FEBitmaps", "SummaryBoxCloser"]], 
                 ButtonFunction :> (Typeset`open$$ = False), Appearance -> 
                 None, BaseStyle -> {}, Evaluator -> Automatic, Method -> 
                 "Preemptive"], Alignment -> {Center, Center}, ImageSize -> 
                Dynamic[{
                  Automatic, 
                   3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                    Magnification])}]], 
               GraphicsBox[
                
                RasterBox[{{{0.235431, 0.32765, 0.833291}, {0.772061, 0.92462,
                  0.998703}}}, {{0, 0}, {2, 1}}, {0, 1}], AspectRatio -> 1, 
                Axes -> False, Frame -> False, FrameLabel -> {None, None}, 
                FrameStyle -> Directive[
                  Opacity[0.5], 
                  Thickness[Tiny], 
                  RGBColor[0.368417, 0.506779, 0.709798]], 
                FrameTicks -> {{None, None}, {None, None}}, GridLinesStyle -> 
                Directive[
                  GrayLevel[0.5, 0.4]], ImageSize -> 
                Dynamic[{
                  Automatic, 
                   3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                    Magnification])}], 
                Method -> {
                 "AxisPadding" -> Scaled[0.02], "DefaultBoundaryStyle" -> 
                  Automatic, 
                  "DefaultGraphicsInteraction" -> {
                   "Version" -> 1.2, "TrackMousePosition" -> {True, False}, 
                    "Effects" -> {
                    "Highlight" -> {"ratio" -> 2}, 
                    "HighlightPoint" -> {"ratio" -> 2}, 
                    "Droplines" -> {
                    "freeformCursorMode" -> True, 
                    "placement" -> {"x" -> "All", "y" -> "None"}}}}, 
                  "DefaultPlotStyle" -> Automatic, "DomainPadding" -> 
                  Scaled[0.02], "RangePadding" -> Scaled[0.05]}], 
               GridBox[{{
                  RowBox[{
                    TagBox[
                    "\"Specified elements: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox["1", "SummaryItem"]}]}, {
                  RowBox[{
                    TagBox["\"Dimensions: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox[
                    RowBox[{"{", "2", "}"}], "SummaryItem"]}]}, {
                  RowBox[{
                    TagBox["\"Default: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox["0", "SummaryItem"]}]}, {
                  RowBox[{
                    TagBox["\"Density: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox["0.5`", "SummaryItem"]}]}, {
                  RowBox[{
                    TagBox["\"Elements:\"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox["\"\"", "SummaryItem"]}]}, {
                  TagBox[
                   TagBox[
                    GridBox[{{
                    RowBox[{
                    RowBox[{"{", "2", "}"}], "\[Rule]", 
                    StyleBox[
                    PaneBox[
                    "1", ContentPadding -> False, FrameMargins -> 0, 
                    StripOnInput -> True, BaselinePosition -> Baseline, 
                    ImageSize -> {{1, 300}, Automatic}], LineBreakWithin -> 
                    False]}]}}, GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], "SummaryItem"]}}, 
                GridBoxAlignment -> {
                 "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, AutoDelete -> 
                False, GridBoxItemSize -> {
                 "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                GridBoxSpacings -> {
                 "Columns" -> {{2}}, "Rows" -> {{Automatic}}}, 
                BaseStyle -> {
                 ShowStringCharacters -> False, NumberMarks -> False, 
                  PrintPrecision -> 3, ShowSyntaxStyles -> False}]}}, 
             GridBoxAlignment -> {"Columns" -> {{Left}}, "Rows" -> {{Top}}}, 
             AutoDelete -> False, 
             GridBoxItemSize -> {
              "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
             BaselinePosition -> {1, 1}]}, 
          Dynamic[Typeset`open$$], ImageSize -> Automatic]},
        "SummaryPanel"],
       DynamicModuleValues:>{}], "]"}],
     SparseArray[Automatic, {2}, 0, {1, {{0, 1}, {{2}}}, {1}}],
     Editable->False,
     SelectWithContents->True,
     Selectable->False]}], ",", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{
      InterpretationBox[
       TemplateBox[{
         RowBox[{
           SubscriptBox["\"\[Psi]\"", 
            SubscriptBox["\"z\"", "\"+\""]]}]},
        "Ket"],
       Wolfram`QuantumFramework`QuditName[
        Subscript["\[Psi]", 
         Subscript["z", "+"]], "Dual" -> False]], ",", "2"}], "}"}], 
    "\[Rule]", 
    InterpretationBox[
     RowBox[{
      TagBox["SparseArray",
       "SummaryHead"], "[", 
      DynamicModuleBox[{Typeset`open$$ = False, Typeset`embedState$$ = 
       "Ready"}, 
       TemplateBox[{
         PaneSelectorBox[{False -> GridBox[{{
               PaneBox[
                ButtonBox[
                 DynamicBox[
                  FEPrivate`FrontEndResource[
                  "FEBitmaps", "SummaryBoxOpener"]], 
                 ButtonFunction :> (Typeset`open$$ = True), Appearance -> 
                 None, BaseStyle -> {}, Evaluator -> Automatic, Method -> 
                 "Preemptive"], Alignment -> {Center, Center}, ImageSize -> 
                Dynamic[{
                  Automatic, 
                   3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                    Magnification])}]], 
               GraphicsBox[
                
                RasterBox[{{{0.772061, 0.92462, 0.998703}, {0.235431, 0.32765,
                  0.833291}}}, {{0, 0}, {2, 1}}, {0, 1}], AspectRatio -> 1, 
                Axes -> False, Frame -> False, FrameLabel -> {None, None}, 
                FrameStyle -> Directive[
                  Opacity[0.5], 
                  Thickness[Tiny], 
                  RGBColor[0.368417, 0.506779, 0.709798]], 
                FrameTicks -> {{None, None}, {None, None}}, GridLinesStyle -> 
                Directive[
                  GrayLevel[0.5, 0.4]], ImageSize -> 
                Dynamic[{
                  Automatic, 
                   3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                    Magnification])}], 
                Method -> {
                 "AxisPadding" -> Scaled[0.02], "DefaultBoundaryStyle" -> 
                  Automatic, 
                  "DefaultGraphicsInteraction" -> {
                   "Version" -> 1.2, "TrackMousePosition" -> {True, False}, 
                    "Effects" -> {
                    "Highlight" -> {"ratio" -> 2}, 
                    "HighlightPoint" -> {"ratio" -> 2}, 
                    "Droplines" -> {
                    "freeformCursorMode" -> True, 
                    "placement" -> {"x" -> "All", "y" -> "None"}}}}, 
                  "DefaultPlotStyle" -> Automatic, "DomainPadding" -> 
                  Scaled[0.02], "RangePadding" -> Scaled[0.05]}], 
               GridBox[{{
                  RowBox[{
                    TagBox[
                    "\"Specified elements: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox["1", "SummaryItem"]}]}, {
                  RowBox[{
                    TagBox["\"Dimensions: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox[
                    RowBox[{"{", "2", "}"}], "SummaryItem"]}]}}, 
                GridBoxAlignment -> {
                 "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, AutoDelete -> 
                False, GridBoxItemSize -> {
                 "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                GridBoxSpacings -> {
                 "Columns" -> {{2}}, "Rows" -> {{Automatic}}}, 
                BaseStyle -> {
                 ShowStringCharacters -> False, NumberMarks -> False, 
                  PrintPrecision -> 3, ShowSyntaxStyles -> False}]}}, 
             GridBoxAlignment -> {"Columns" -> {{Left}}, "Rows" -> {{Top}}}, 
             AutoDelete -> False, 
             GridBoxItemSize -> {
              "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
             BaselinePosition -> {1, 1}], True -> GridBox[{{
               PaneBox[
                ButtonBox[
                 DynamicBox[
                  FEPrivate`FrontEndResource[
                  "FEBitmaps", "SummaryBoxCloser"]], 
                 ButtonFunction :> (Typeset`open$$ = False), Appearance -> 
                 None, BaseStyle -> {}, Evaluator -> Automatic, Method -> 
                 "Preemptive"], Alignment -> {Center, Center}, ImageSize -> 
                Dynamic[{
                  Automatic, 
                   3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                    Magnification])}]], 
               GraphicsBox[
                
                RasterBox[{{{0.772061, 0.92462, 0.998703}, {0.235431, 0.32765,
                  0.833291}}}, {{0, 0}, {2, 1}}, {0, 1}], AspectRatio -> 1, 
                Axes -> False, Frame -> False, FrameLabel -> {None, None}, 
                FrameStyle -> Directive[
                  Opacity[0.5], 
                  Thickness[Tiny], 
                  RGBColor[0.368417, 0.506779, 0.709798]], 
                FrameTicks -> {{None, None}, {None, None}}, GridLinesStyle -> 
                Directive[
                  GrayLevel[0.5, 0.4]], ImageSize -> 
                Dynamic[{
                  Automatic, 
                   3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                    Magnification])}], 
                Method -> {
                 "AxisPadding" -> Scaled[0.02], "DefaultBoundaryStyle" -> 
                  Automatic, 
                  "DefaultGraphicsInteraction" -> {
                   "Version" -> 1.2, "TrackMousePosition" -> {True, False}, 
                    "Effects" -> {
                    "Highlight" -> {"ratio" -> 2}, 
                    "HighlightPoint" -> {"ratio" -> 2}, 
                    "Droplines" -> {
                    "freeformCursorMode" -> True, 
                    "placement" -> {"x" -> "All", "y" -> "None"}}}}, 
                  "DefaultPlotStyle" -> Automatic, "DomainPadding" -> 
                  Scaled[0.02], "RangePadding" -> Scaled[0.05]}], 
               GridBox[{{
                  RowBox[{
                    TagBox[
                    "\"Specified elements: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox["1", "SummaryItem"]}]}, {
                  RowBox[{
                    TagBox["\"Dimensions: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox[
                    RowBox[{"{", "2", "}"}], "SummaryItem"]}]}, {
                  RowBox[{
                    TagBox["\"Default: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox["0", "SummaryItem"]}]}, {
                  RowBox[{
                    TagBox["\"Density: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox["0.5`", "SummaryItem"]}]}, {
                  RowBox[{
                    TagBox["\"Elements:\"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox["\"\"", "SummaryItem"]}]}, {
                  TagBox[
                   TagBox[
                    GridBox[{{
                    RowBox[{
                    RowBox[{"{", "1", "}"}], "\[Rule]", 
                    StyleBox[
                    PaneBox[
                    "1", ContentPadding -> False, FrameMargins -> 0, 
                    StripOnInput -> True, BaselinePosition -> Baseline, 
                    ImageSize -> {{1, 300}, Automatic}], LineBreakWithin -> 
                    False]}]}}, GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], "SummaryItem"]}}, 
                GridBoxAlignment -> {
                 "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, AutoDelete -> 
                False, GridBoxItemSize -> {
                 "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                GridBoxSpacings -> {
                 "Columns" -> {{2}}, "Rows" -> {{Automatic}}}, 
                BaseStyle -> {
                 ShowStringCharacters -> False, NumberMarks -> False, 
                  PrintPrecision -> 3, ShowSyntaxStyles -> False}]}}, 
             GridBoxAlignment -> {"Columns" -> {{Left}}, "Rows" -> {{Top}}}, 
             AutoDelete -> False, 
             GridBoxItemSize -> {
              "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
             BaselinePosition -> {1, 1}]}, 
          Dynamic[Typeset`open$$], ImageSize -> Automatic]},
        "SummaryPanel"],
       DynamicModuleValues:>{}], "]"}],
     SparseArray[Automatic, {2}, 0, {1, {{0, 1}, {{1}}}, {1}}],
     Editable->False,
     SelectWithContents->True,
     Selectable->False]}]}], "\[RightAssociation]"}]], "Output",
 CellChangeTimes->{3.858281868845334*^9, 3.858281918621306*^9, 
  3.858285724519438*^9},
 CellLabel->
  "Out[205]=",ExpressionUUID->"adea654a-6854-49d4-9501-4ad7bb31fd8c"]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["QuantumBasis", "Section",
 CellChangeTimes->{
  3.841079420375422*^9},ExpressionUUID->"6cdc18d7-d48b-44aa-b3ec-\
5d96a301cb02"],

Cell["\<\
QuantumBasis is a pair of Input and Output QuditBases + meta information \
(Picture, Label, ParameterSpec)\
\>", "Text",
 CellChangeTimes->{{3.841077055420268*^9, 3.841077069322199*^9}, {
  3.841079171550596*^9, 3.841079185336824*^9}, {3.858281994858904*^9, 
  3.858281999882287*^9}, {3.858283324692382*^9, 
  3.8582833254117947`*^9}},ExpressionUUID->"12ab0258-79f5-469b-afdf-\
0cc590d00acb"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"List", "@@", 
  RowBox[{"QuantumBasis", "[", 
   RowBox[{
    RowBox[{"QuditBasis", "@", "\"\<X\>\""}], ",", 
    RowBox[{"QuditBasis", "@", "\"\<Y\>\""}], ",", 
    RowBox[{"\"\<Label\>\"", "->", "\"\<XY\>\""}]}], "]"}]}]], "Input",
 CellChangeTimes->{{3.858283234643113*^9, 3.858283235678643*^9}, {
  3.85828337975882*^9, 3.858283456469593*^9}},
 CellLabel->
  "In[206]:=",ExpressionUUID->"58906b45-c260-48ad-a820-c60ceebfaa00"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"\[LeftAssociation]", 
   RowBox[{
    RowBox[{"\<\"Input\"\>", "\[Rule]", 
     InterpretationBox[
      RowBox[{"\[LeftAssociation]", 
       RowBox[{
        RowBox[{
         InterpretationBox[
          TemplateBox[{
            RowBox[{
              SubscriptBox["\"\[Psi]\"", 
               SubscriptBox["\"y\"", "\"-\""]]}]},
           "Bra"],
          Wolfram`QuantumFramework`QuditName[
           Subscript["\[Psi]", 
            Subscript["y", "-"]], "Dual" -> True]], "\[Rule]", 
         RowBox[{"{", 
          RowBox[{
           FractionBox["\[ImaginaryI]", 
            SqrtBox["2"]], ",", 
           FractionBox["1", 
            SqrtBox["2"]]}], "}"}]}], ",", 
        RowBox[{
         InterpretationBox[
          TemplateBox[{
            RowBox[{
              SubscriptBox["\"\[Psi]\"", 
               SubscriptBox["\"y\"", "\"+\""]]}]},
           "Bra"],
          Wolfram`QuantumFramework`QuditName[
           Subscript["\[Psi]", 
            Subscript["y", "+"]], "Dual" -> True]], "\[Rule]", 
         RowBox[{"{", 
          RowBox[{
           RowBox[{"-", 
            FractionBox["\[ImaginaryI]", 
             SqrtBox["2"]]}], ",", 
           FractionBox["1", 
            SqrtBox["2"]]}], "}"}]}]}], "\[RightAssociation]"}],
      Wolfram`QuantumFramework`QuditBasis[<|{
          Wolfram`QuantumFramework`QuditName[
           Subscript["\[Psi]", 
            Subscript["y", "-"]], "Dual" -> True], 1} -> 
        SparseArray[
         Automatic, {2}, 0, {
          1, {{0, 2}, {{1}, {2}}}, {
           Complex[0, 1] 2^Rational[-1, 2], 2^Rational[-1, 2]}}], {
          Wolfram`QuantumFramework`QuditName[
           Subscript["\[Psi]", 
            Subscript["y", "+"]], "Dual" -> True], 1} -> 
        SparseArray[
         Automatic, {2}, 0, {
          1, {{0, 2}, {{1}, {2}}}, {
           Complex[0, -1] 2^Rational[-1, 2], 2^Rational[-1, 2]}}]|>]]}], ",", 
    
    RowBox[{"\<\"Output\"\>", "\[Rule]", 
     InterpretationBox[
      RowBox[{"\[LeftAssociation]", 
       RowBox[{
        RowBox[{
         InterpretationBox[
          TemplateBox[{
            RowBox[{
              SubscriptBox["\"\[Psi]\"", 
               SubscriptBox["\"x\"", "\"-\""]]}]},
           "Ket"],
          Wolfram`QuantumFramework`QuditName[
           Subscript["\[Psi]", 
            Subscript["x", "-"]], "Dual" -> False]], "\[Rule]", 
         RowBox[{"{", 
          RowBox[{
           RowBox[{"-", 
            FractionBox["1", 
             SqrtBox["2"]]}], ",", 
           FractionBox["1", 
            SqrtBox["2"]]}], "}"}]}], ",", 
        RowBox[{
         InterpretationBox[
          TemplateBox[{
            RowBox[{
              SubscriptBox["\"\[Psi]\"", 
               SubscriptBox["\"x\"", "\"+\""]]}]},
           "Ket"],
          Wolfram`QuantumFramework`QuditName[
           Subscript["\[Psi]", 
            Subscript["x", "+"]], "Dual" -> False]], "\[Rule]", 
         RowBox[{"{", 
          RowBox[{
           FractionBox["1", 
            SqrtBox["2"]], ",", 
           FractionBox["1", 
            SqrtBox["2"]]}], "}"}]}]}], "\[RightAssociation]"}],
      Wolfram`QuantumFramework`QuditBasis[<|{
          Wolfram`QuantumFramework`QuditName[
           Subscript["\[Psi]", 
            Subscript["x", "-"]], "Dual" -> False], 1} -> 
        SparseArray[
         Automatic, {2}, 0, {
          1, {{0, 2}, {{1}, {2}}}, {-2^Rational[-1, 2], 2^Rational[-1, 2]}}], {
          Wolfram`QuantumFramework`QuditName[
           Subscript["\[Psi]", 
            Subscript["x", "+"]], "Dual" -> False], 1} -> 
        SparseArray[
         Automatic, {2}, 0, {
          1, {{0, 2}, {{1}, {2}}}, {
           2^Rational[-1, 2], 2^Rational[-1, 2]}}]|>]]}], ",", 
    RowBox[{"\<\"Picture\"\>", "\[Rule]", "\<\"Schr\[ODoubleDot]dinger\"\>"}],
     ",", 
    RowBox[{"\<\"Label\"\>", "\[Rule]", "\<\"XY\"\>"}], ",", 
    RowBox[{"\<\"ParameterSpec\"\>", "\[Rule]", 
     RowBox[{"{", "}"}]}]}], "\[RightAssociation]"}], "}"}]], "Output",
 CellChangeTimes->{
  3.858283236013982*^9, {3.85828338109735*^9, 3.858283457202827*^9}, 
   3.858285724800707*^9},
 CellLabel->
  "Out[206]=",ExpressionUUID->"22c5f97f-aefb-4124-a89d-c2488f3a19d9"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{"QuantumBasis", "[", "\"\<X\>\"", "]"}], "\[IndentingNewLine]", 
 RowBox[{"Dataset", "@", 
  RowBox[{"AssociationMap", "[", 
   RowBox[{"%", ",", 
    RowBox[{"%", "[", "\"\<Properties\>\"", "]"}]}], "]"}]}]}], "Input",
 CellChangeTimes->{{3.841077073835558*^9, 3.8410770836704197`*^9}, {
   3.8429048945984983`*^9, 3.842904907557129*^9}, 3.858282069997184*^9, 
   3.858283436363843*^9},
 CellLabel->
  "In[207]:=",ExpressionUUID->"31f9d612-8f2f-44df-99c4-9099d295165b"],

Cell[BoxData[
 InterpretationBox[
  RowBox[{
   TagBox["QuantumBasis",
    "SummaryHead"], "[", 
   DynamicModuleBox[{Typeset`open$$ = False, Typeset`embedState$$ = "Ready"}, 
    
    TemplateBox[{
      PaneSelectorBox[{False -> GridBox[{{
            PaneBox[
             ButtonBox[
              DynamicBox[
               FEPrivate`FrontEndResource["FEBitmaps", "SummaryBoxOpener"]], 
              ButtonFunction :> (Typeset`open$$ = True), Appearance -> None, 
              BaseStyle -> {}, Evaluator -> Automatic, Method -> 
              "Preemptive"], Alignment -> {Center, Center}, ImageSize -> 
             Dynamic[{
               Automatic, 
                3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                 Magnification])}]], 
            GraphicsBox[
             
             RasterBox[{{{1., 0.42, 0.}, {1., 0.42, 0.}}, {{0.260487, 0.356, 
              0.891569}, {1., 0.42, 0.}}}, {{0, 0}, {2, 2}}, {0, 1}], Frame -> 
             False, FrameLabel -> {None, None}, 
             FrameTicks -> {{None, None}, {None, None}}, GridLinesStyle -> 
             Directive[
               GrayLevel[0.5, 0.4]], ImageSize -> 
             Dynamic[{
               Automatic, 
                3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                 Magnification])}], 
             Method -> {
              "AxisPadding" -> Scaled[0.02], "DefaultBoundaryStyle" -> 
               Automatic, 
               "DefaultGraphicsInteraction" -> {
                "Version" -> 1.2, "TrackMousePosition" -> {True, False}, 
                 "Effects" -> {
                  "Highlight" -> {"ratio" -> 2}, 
                   "HighlightPoint" -> {"ratio" -> 2}, 
                   "Droplines" -> {
                    "freeformCursorMode" -> True, 
                    "placement" -> {"x" -> "All", "y" -> "None"}}}}, 
               "DefaultPlotStyle" -> Automatic, "DomainPadding" -> 
               Scaled[0.02], "RangePadding" -> Scaled[0.05]}], 
            GridBox[{{
               RowBox[{
                 TagBox["\"Picture: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox["\"Schr\[ODoubleDot]dinger\"", "SummaryItem"]}], 
               RowBox[{
                 TagBox["\"Rank: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox["1", "SummaryItem"]}]}, {
               RowBox[{
                 TagBox["\"Dimension: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox["2", "SummaryItem"]}], ""}}, 
             GridBoxAlignment -> {
              "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, AutoDelete -> 
             False, GridBoxItemSize -> {
              "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
             GridBoxSpacings -> {"Columns" -> {{2}}, "Rows" -> {{Automatic}}},
              BaseStyle -> {
              ShowStringCharacters -> False, NumberMarks -> False, 
               PrintPrecision -> 3, ShowSyntaxStyles -> False}]}}, 
          GridBoxAlignment -> {"Columns" -> {{Left}}, "Rows" -> {{Top}}}, 
          AutoDelete -> False, 
          GridBoxItemSize -> {
           "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
          BaselinePosition -> {1, 1}], True -> GridBox[{{
            PaneBox[
             ButtonBox[
              DynamicBox[
               FEPrivate`FrontEndResource["FEBitmaps", "SummaryBoxCloser"]], 
              ButtonFunction :> (Typeset`open$$ = False), Appearance -> None, 
              BaseStyle -> {}, Evaluator -> Automatic, Method -> 
              "Preemptive"], Alignment -> {Center, Center}, ImageSize -> 
             Dynamic[{
               Automatic, 
                3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                 Magnification])}]], 
            GraphicsBox[
             
             RasterBox[{{{1., 0.42, 0.}, {1., 0.42, 0.}}, {{0.260487, 0.356, 
              0.891569}, {1., 0.42, 0.}}}, {{0, 0}, {2, 2}}, {0, 1}], Frame -> 
             False, FrameLabel -> {None, None}, 
             FrameTicks -> {{None, None}, {None, None}}, GridLinesStyle -> 
             Directive[
               GrayLevel[0.5, 0.4]], ImageSize -> 
             Dynamic[{
               Automatic, 
                3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                 Magnification])}], 
             Method -> {
              "AxisPadding" -> Scaled[0.02], "DefaultBoundaryStyle" -> 
               Automatic, 
               "DefaultGraphicsInteraction" -> {
                "Version" -> 1.2, "TrackMousePosition" -> {True, False}, 
                 "Effects" -> {
                  "Highlight" -> {"ratio" -> 2}, 
                   "HighlightPoint" -> {"ratio" -> 2}, 
                   "Droplines" -> {
                    "freeformCursorMode" -> True, 
                    "placement" -> {"x" -> "All", "y" -> "None"}}}}, 
               "DefaultPlotStyle" -> Automatic, "DomainPadding" -> 
               Scaled[0.02], "RangePadding" -> Scaled[0.05]}], 
            GridBox[{{
               RowBox[{
                 TagBox["\"Picture: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox["\"Schr\[ODoubleDot]dinger\"", "SummaryItem"]}], 
               RowBox[{
                 TagBox["\"Rank: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox["1", "SummaryItem"]}]}, {
               RowBox[{
                 TagBox["\"Dimension: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox["2", "SummaryItem"]}], ""}, {
               RowBox[{
                 TagBox["\"Qudits: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox[
                  RowBox[{"{", 
                    RowBox[{"1", ",", "0"}], "}"}], "SummaryItem"]}], ""}, {
               RowBox[{
                 TagBox["\"Dimensions: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox[
                  RowBox[{"{", "2", "}"}], "SummaryItem"]}], ""}, {
               RowBox[{
                 TagBox["\"Element dimensions: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox[
                  RowBox[{"{", "2", "}"}], "SummaryItem"]}], ""}}, 
             GridBoxAlignment -> {
              "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, AutoDelete -> 
             False, GridBoxItemSize -> {
              "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
             GridBoxSpacings -> {"Columns" -> {{2}}, "Rows" -> {{Automatic}}},
              BaseStyle -> {
              ShowStringCharacters -> False, NumberMarks -> False, 
               PrintPrecision -> 3, ShowSyntaxStyles -> False}]}}, 
          GridBoxAlignment -> {"Columns" -> {{Left}}, "Rows" -> {{Top}}}, 
          AutoDelete -> False, 
          GridBoxItemSize -> {
           "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
          BaselinePosition -> {1, 1}]}, 
       Dynamic[Typeset`open$$], ImageSize -> Automatic]},
     "SummaryPanel"],
    DynamicModuleValues:>{}], "]"}],
  Wolfram`QuantumFramework`QuantumBasis[<|
   "Input" -> Wolfram`QuantumFramework`QuditBasis[<|{
         Wolfram`QuantumFramework`QuditName[\[FormalCapitalI], "Dual" -> 
          False], 1} -> 1|>], "Output" -> 
    Wolfram`QuantumFramework`QuditBasis[<|{
         Wolfram`QuantumFramework`QuditName[
          Subscript["\[Psi]", 
           Subscript["x", "-"]], "Dual" -> False], 1} -> 
       SparseArray[
        Automatic, {2}, 0, {
         1, {{0, 2}, {{1}, {2}}}, {-2^Rational[-1, 2], 2^Rational[-1, 2]}}], {
        
         Wolfram`QuantumFramework`QuditName[
          Subscript["\[Psi]", 
           Subscript["x", "+"]], "Dual" -> False], 1} -> 
       SparseArray[
        Automatic, {2}, 0, {
         1, {{0, 2}, {{1}, {2}}}, {2^Rational[-1, 2], 2^Rational[-1, 2]}}]|>],
     "Picture" -> "Schr\[ODoubleDot]dinger", "Label" -> "X", 
    "ParameterSpec" -> {}|>],
  Editable->False,
  SelectWithContents->True,
  Selectable->False]], "Output",
 CellChangeTimes->{{3.841077077691928*^9, 3.841077083979616*^9}, 
   3.841078427829645*^9, 3.84107847132156*^9, 3.8410785443757153`*^9, 
   3.8410790783342733`*^9, 3.841088588325914*^9, 3.842904833582313*^9, {
   3.8429048951789093`*^9, 3.842904908234733*^9}, 3.843147062927072*^9, 
   3.843147286895393*^9, 3.8431473271900063`*^9, 3.85828200411369*^9, 
   3.858282070528533*^9, 3.858285724849765*^9},
 CellLabel->
  "Out[207]=",ExpressionUUID->"edee4f20-f70c-46c1-900b-b0dacce5a49f"],

Cell[BoxData[
 TagBox[
  TagBox[
   DynamicModuleBox[{TypeSystem`NestedGrid`PackagePrivate`$state$$ = <|
    "InitialData" -> <|"Association" -> <|Wolfram`QuantumFramework`QuditName[
           Subscript["\[Psi]", 
            Subscript["x", "-"]], "Dual" -> False] -> 
         SparseArray[
          Automatic, {2}, 0, {
           1, {{0, 2}, {{1}, {2}}}, {-2^Rational[-1, 2], 2^Rational[-1, 2]}}],
          Wolfram`QuantumFramework`QuditName[
           Subscript["\[Psi]", 
            Subscript["x", "+"]], "Dual" -> False] -> 
         SparseArray[
          Automatic, {2}, 0, {
           1, {{0, 2}, {{1}, {2}}}, {
            2^Rational[-1, 2], 2^Rational[-1, 2]}}]|>, "ConjugateTranspose" -> 
       Wolfram`QuantumFramework`QuantumBasis[<|
         "Input" -> Wolfram`QuantumFramework`QuditBasis[<|{
               Wolfram`QuantumFramework`QuditName[
                Subscript["\[Psi]", 
                 Subscript["x", "-"]], "Dual" -> True], 1} -> 
             SparseArray[
              Automatic, {2}, 0, {
               1, {{0, 2}, {{1}, {2}}}, {-2^Rational[-1, 2], 2^
                 Rational[-1, 2]}}], {
               Wolfram`QuantumFramework`QuditName[
                Subscript["\[Psi]", 
                 Subscript["x", "+"]], "Dual" -> True], 1} -> 
             SparseArray[
              Automatic, {2}, 0, {
               1, {{0, 2}, {{1}, {2}}}, {
                2^Rational[-1, 2], 2^Rational[-1, 2]}}]|>], "Output" -> 
          Wolfram`QuantumFramework`QuditBasis[<|{
               
               Wolfram`QuantumFramework`QuditName[\[FormalCapitalI], "Dual" -> 
                False], 1} -> 1|>], "Picture" -> "Schr\[ODoubleDot]dinger", 
          "Label" -> Superscript["X", "\[Dagger]"], "ParameterSpec" -> {}|>], 
       "Diagram" -> Graphics[{
          GeometricTransformation[{
            Line[{{0, 
               Rational[1, 2]}, {1, 
               Rational[1, 2]}, {
               Rational[1, 2], 0}, {0, 
               Rational[1, 2]}}], {
             PointSize[
             0.2 Dynamic[
               3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                 Magnification])]], 
             Point[{{
                Rational[1, 2], 
                Rational[1, 2]}}], 
             Point[{}]}, {
             Arrowheads[
             0.002 Dynamic[
               3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                 Magnification])]], {
              Arrow[{{
                 Rational[1, 2], 
                 Rational[1, 2]}, {
                 Rational[1, 2], 
                 Rational[3, 5]}}]}, {}}}, {{{1, 0}, {0, 1}}, {0, 0}}], 
          Text[
           Style["X", {FontSize -> 24, FontFamily -> "Times"}], {
            Rational[1, 2], 
            Rational[1, 4]}]}], "Dimension" -> 2, "Dimensions" -> {2}, "Dual" -> 
       Wolfram`QuantumFramework`QuantumBasis[<|
         "Input" -> Wolfram`QuantumFramework`QuditBasis[<|{
               
               Wolfram`QuantumFramework`QuditName[\[FormalCapitalI], "Dual" -> 
                False], 1} -> 1|>], "Output" -> 
          Wolfram`QuantumFramework`QuditBasis[<|{
               Wolfram`QuantumFramework`QuditName[
                Subscript["\[Psi]", 
                 Subscript["x", "-"]], "Dual" -> True], 1} -> 
             SparseArray[
              Automatic, {2}, 0, {
               1, {{0, 2}, {{1}, {2}}}, {-2^Rational[-1, 2], 2^
                 Rational[-1, 2]}}], {
               Wolfram`QuantumFramework`QuditName[
                Subscript["\[Psi]", 
                 Subscript["x", "+"]], "Dual" -> True], 1} -> 
             SparseArray[
              Automatic, {2}, 0, {
               1, {{0, 2}, {{1}, {2}}}, {
                2^Rational[-1, 2], 2^Rational[-1, 2]}}]|>], "Picture" -> 
          "Schr\[ODoubleDot]dinger", "Label" -> "X", "ParameterSpec" -> {}|>],
        "ElementAssociation" -> <|Wolfram`QuantumFramework`QuditName[
           Subscript["\[Psi]", 
            Subscript["x", "-"]], "Dual" -> False] -> 
         SparseArray[
          Automatic, {2}, 0, {
           1, {{0, 2}, {{1}, {2}}}, {-2^Rational[-1, 2], 2^Rational[-1, 2]}}],
          Wolfram`QuantumFramework`QuditName[
           Subscript["\[Psi]", 
            Subscript["x", "+"]], "Dual" -> False] -> 
         SparseArray[
          Automatic, {2}, 0, {
           1, {{0, 2}, {{1}, {2}}}, {
            2^Rational[-1, 2], 2^Rational[-1, 2]}}]|>, "ElementDimension" -> 
       2, "ElementDimensions" -> {2}, "ElementNames" -> {
         Wolfram`QuantumFramework`QuditName[
          Subscript["\[Psi]", 
           Subscript["x", "-"]], "Dual" -> False], 
         Wolfram`QuantumFramework`QuditName[
          Subscript["\[Psi]", 
           Subscript["x", "+"]], "Dual" -> False]}, "Elements" -> 
       SparseArray[
        Automatic, {2, 2}, 0, {
         1, {{0, 2, 4}, {{1}, {2}, {1}, {2}}}, {-2^Rational[-1, 2], 2^
           Rational[-1, 2], 2^Rational[-1, 2], 2^Rational[-1, 2]}}], 
       "FinalParameters" -> {}, "HasInputQ" -> False, 
       "InitialParameters" -> {}, "Input" -> 
       Wolfram`QuantumFramework`QuditBasis[<|{
            
            Wolfram`QuantumFramework`QuditName[\[FormalCapitalI], "Dual" -> 
             False], 1} -> 1|>], "InputBasis" -> 
       Wolfram`QuantumFramework`QuantumBasis[<|
         "Input" -> Wolfram`QuantumFramework`QuditBasis[<|{
               
               Wolfram`QuantumFramework`QuditName[\[FormalCapitalI], "Dual" -> 
                False], 1} -> 1|>], "Output" -> 
          Wolfram`QuantumFramework`QuditBasis[<|{
               
               Wolfram`QuantumFramework`QuditName[\[FormalCapitalI], "Dual" -> 
                False], 1} -> 1|>], "Picture" -> "Schr\[ODoubleDot]dinger", 
          "Label" -> "X", "ParameterSpec" -> {}|>], "InputDimension" -> 1, 
       "InputDimensions" -> {1}, "InputElementDimensions" -> {}, 
       "InputElementNames" -> {
         Wolfram`QuantumFramework`QuditName[\[FormalCapitalI], "Dual" -> 
          False]}, "InputElements" -> 
       SparseArray[Automatic, {1}, 0, {1, {{0, 1}, {{1}}}, {1}}], 
       "InputMatrix" -> 
       SparseArray[Automatic, {1, 1}, 0, {1, {{0, 1}, {{1}}}, {1}}], 
       "InputNameDimension" -> 1, "InputNameDimensions" -> {1}, "InputQudits" -> 
       0, "InputRank" -> 0, "InputSize" -> 1, "InputTensor" -> 
       SparseArray[Automatic, {1}, 0, {1, {{0, 1}, {{1}}}, {1}}], "Label" -> 
       "X", "LabelHead" -> "X", "Matrix" -> 
       SparseArray[
        Automatic, {2, 2}, 0, {
         1, {{0, 2, 4}, {{1}, {2}, {1}, {2}}}, {-2^Rational[-1, 2], 2^
           Rational[-1, 2], 2^Rational[-1, 2], 2^Rational[-1, 2]}}], 
       "MatrixDimensions" -> {2, 2}, "MatrixElementDimensions" -> {2, 1}, 
       "MatrixNameDimensions" -> {2, 1}, "MatrixRepresentation" -> 
       SparseArray[
        Automatic, {2, 2}, 0, {
         1, {{0, 2, 4}, {{1}, {2}, {1}, {2}}}, {-2^Rational[-1, 2], 2^
           Rational[-1, 2], 2^Rational[-1, 2], 2^Rational[-1, 2]}}], 
       "NameDimensions" -> {2}, "Names" -> {
         Wolfram`QuantumFramework`QuditName[
          Subscript["\[Psi]", 
           Subscript["x", "-"]], "Dual" -> False], 
         Wolfram`QuantumFramework`QuditName[
          Subscript["\[Psi]", 
           Subscript["x", "+"]], "Dual" -> False]}, 
       "NormalElementNames" -> {{
          Wolfram`QuantumFramework`QuditName[
           Subscript["\[Psi]", 
            Subscript["x", "-"]], "Dual" -> False]}, {
          Wolfram`QuantumFramework`QuditName[
           Subscript["\[Psi]", 
            Subscript["x", "+"]], "Dual" -> False]}}, 
       "OrthogonalElements" -> {{-2^Rational[-1, 2], 2^Rational[-1, 2]}, {
         2^Rational[-1, 2], 2^Rational[-1, 2]}}, "Output" -> 
       Wolfram`QuantumFramework`QuditBasis[<|{
            Wolfram`QuantumFramework`QuditName[
             Subscript["\[Psi]", 
              Subscript["x", "-"]], "Dual" -> False], 1} -> 
          SparseArray[
           Automatic, {2}, 0, {
            1, {{0, 2}, {{1}, {2}}}, {-2^Rational[-1, 2], 2^
              Rational[-1, 2]}}], {
            Wolfram`QuantumFramework`QuditName[
             Subscript["\[Psi]", 
              Subscript["x", "+"]], "Dual" -> False], 1} -> 
          SparseArray[
           Automatic, {2}, 0, {
            1, {{0, 2}, {{1}, {2}}}, {
             2^Rational[-1, 2], 2^Rational[-1, 2]}}]|>], "OutputBasis" -> 
       Wolfram`QuantumFramework`QuantumBasis[<|
         "Input" -> Wolfram`QuantumFramework`QuditBasis[<|{
               
               Wolfram`QuantumFramework`QuditName[\[FormalCapitalI], "Dual" -> 
                False], 1} -> 1|>], "Output" -> 
          Wolfram`QuantumFramework`QuditBasis[<|{
               Wolfram`QuantumFramework`QuditName[
                Subscript["\[Psi]", 
                 Subscript["x", "-"]], "Dual" -> False], 1} -> 
             SparseArray[
              Automatic, {2}, 0, {
               1, {{0, 2}, {{1}, {2}}}, {-2^Rational[-1, 2], 2^
                 Rational[-1, 2]}}], {
               Wolfram`QuantumFramework`QuditName[
                Subscript["\[Psi]", 
                 Subscript["x", "+"]], "Dual" -> False], 1} -> 
             SparseArray[
              Automatic, {2}, 0, {
               1, {{0, 2}, {{1}, {2}}}, {
                2^Rational[-1, 2], 2^Rational[-1, 2]}}]|>], "Picture" -> 
          "Schr\[ODoubleDot]dinger", "Label" -> "X", "ParameterSpec" -> {}|>],
        "OutputDimension" -> 2, "OutputDimensions" -> {2}, 
       "OutputElementDimensions" -> {2}, "OutputElementNames" -> {
         Wolfram`QuantumFramework`QuditName[
          Subscript["\[Psi]", 
           Subscript["x", "-"]], "Dual" -> False], 
         Wolfram`QuantumFramework`QuditName[
          Subscript["\[Psi]", 
           Subscript["x", "+"]], "Dual" -> False]}, "OutputElements" -> 
       SparseArray[
        Automatic, {2, 2}, 0, {
         1, {{0, 2, 4}, {{1}, {2}, {1}, {2}}}, {-2^Rational[-1, 2], 2^
           Rational[-1, 2], 2^Rational[-1, 2], 2^Rational[-1, 2]}}], 
       "OutputMatrix" -> 
       SparseArray[
        Automatic, {2, 2}, 0, {
         1, {{0, 2, 4}, {{1}, {2}, {1}, {2}}}, {-2^Rational[-1, 2], 2^
           Rational[-1, 2], 2^Rational[-1, 2], 2^Rational[-1, 2]}}], 
       "OutputNameDimension" -> 2, "OutputNameDimensions" -> {2}, 
       "OutputQudits" -> 1, "OutputRank" -> 1, "OutputSize" -> 2, 
       "OutputTensor" -> 
       SparseArray[
        Automatic, {2, 2}, 0, {
         1, {{0, 2, 4}, {{1}, {2}, {1}, {2}}}, {-2^Rational[-1, 2], 2^
           Rational[-1, 2], 2^Rational[-1, 2], 2^Rational[-1, 2]}}], 
       "ParameterArity" -> 0, "Parameters" -> {}, "ParameterSpec" -> {}, 
       "Picture" -> "Schr\[ODoubleDot]dinger", 
       "Projectors" -> {
        SparseArray[
         Automatic, {2, 2}, 0, {
          1, {{0, 2, 4}, {{1}, {2}, {1}, {2}}}, {
           Rational[1, 2], Rational[-1, 2], Rational[-1, 2], Rational[
            1, 2]}}], SparseArray[
         Automatic, {2, 2}, 0, {
          1, {{0, 2, 4}, {{1}, {2}, {1}, {2}}}, {
           Rational[1, 2], Rational[1, 2], Rational[1, 2], Rational[1, 2]}}]},
        "PureEffects" -> {
         Wolfram`QuantumFramework`QuantumState[
          SparseArray[Automatic, {2}, 0, {1, {{0, 1}, {{1}}}, {1}}], 
          
          Wolfram`QuantumFramework`QuantumBasis[<|
           "Input" -> Wolfram`QuantumFramework`QuditBasis[<|{
                 
                 Wolfram`QuantumFramework`QuditName[\[FormalCapitalI], "Dual" -> 
                  False], 1} -> 1|>], "Output" -> 
            Wolfram`QuantumFramework`QuditBasis[<|{
                 Wolfram`QuantumFramework`QuditName[
                  Subscript["\[Psi]", 
                   Subscript["x", "-"]], "Dual" -> False], 1} -> 
               SparseArray[
                Automatic, {2}, 0, {
                 1, {{0, 2}, {{1}, {2}}}, {-2^Rational[-1, 2], 2^
                   Rational[-1, 2]}}], {
                 Wolfram`QuantumFramework`QuditName[
                  Subscript["\[Psi]", 
                   Subscript["x", "+"]], "Dual" -> False], 1} -> 
               SparseArray[
                Automatic, {2}, 0, {
                 1, {{0, 2}, {{1}, {2}}}, {
                  2^Rational[-1, 2], 2^Rational[-1, 2]}}]|>], "Picture" -> 
            "Schr\[ODoubleDot]dinger", "Label" -> "X", 
            "ParameterSpec" -> {}|>]]}, "PureMaps" -> {{
          Wolfram`QuantumFramework`QuantumState[
           SparseArray[Automatic, {2}, 0, {1, {{0, 1}, {{1}}}, {1}}], 
           
           Wolfram`QuantumFramework`QuantumBasis[<|
            "Input" -> Wolfram`QuantumFramework`QuditBasis[<|{
                  
                  Wolfram`QuantumFramework`QuditName[\[FormalCapitalI], 
                   "Dual" -> False], 1} -> 1|>], "Output" -> 
             Wolfram`QuantumFramework`QuditBasis[<|{
                  Wolfram`QuantumFramework`QuditName[
                   Subscript["\[Psi]", 
                    Subscript["x", "-"]], "Dual" -> False], 1} -> 
                SparseArray[
                 Automatic, {2}, 0, {
                  1, {{0, 2}, {{1}, {2}}}, {-2^Rational[-1, 2], 2^
                    Rational[-1, 2]}}], {
                  Wolfram`QuantumFramework`QuditName[
                   Subscript["\[Psi]", 
                    Subscript["x", "+"]], "Dual" -> False], 1} -> 
                SparseArray[
                 Automatic, {2}, 0, {
                  1, {{0, 2}, {{1}, {2}}}, {
                   2^Rational[-1, 2], 2^Rational[-1, 2]}}]|>], "Picture" -> 
             "Schr\[ODoubleDot]dinger", "Label" -> "X", 
             "ParameterSpec" -> {}|>]]}, {
          Wolfram`QuantumFramework`QuantumState[
           SparseArray[Automatic, {2}, 0, {1, {{0, 1}, {{2}}}, {1}}], 
           
           Wolfram`QuantumFramework`QuantumBasis[<|
            "Input" -> Wolfram`QuantumFramework`QuditBasis[<|{
                  
                  Wolfram`QuantumFramework`QuditName[\[FormalCapitalI], 
                   "Dual" -> False], 1} -> 1|>], "Output" -> 
             Wolfram`QuantumFramework`QuditBasis[<|{
                  Wolfram`QuantumFramework`QuditName[
                   Subscript["\[Psi]", 
                    Subscript["x", "-"]], "Dual" -> False], 1} -> 
                SparseArray[
                 Automatic, {2}, 0, {
                  1, {{0, 2}, {{1}, {2}}}, {-2^Rational[-1, 2], 2^
                    Rational[-1, 2]}}], {
                  Wolfram`QuantumFramework`QuditName[
                   Subscript["\[Psi]", 
                    Subscript["x", "+"]], "Dual" -> False], 1} -> 
                SparseArray[
                 Automatic, {2}, 0, {
                  1, {{0, 2}, {{1}, {2}}}, {
                   2^Rational[-1, 2], 2^Rational[-1, 2]}}]|>], "Picture" -> 
             "Schr\[ODoubleDot]dinger", "Label" -> "X", 
             "ParameterSpec" -> {}|>]]}}, "PureStates" -> {
         Wolfram`QuantumFramework`QuantumState[
          SparseArray[Automatic, {2}, 0, {1, {{0, 1}, {{1}}}, {1}}], 
          
          Wolfram`QuantumFramework`QuantumBasis[<|
           "Input" -> Wolfram`QuantumFramework`QuditBasis[<|{
                 
                 Wolfram`QuantumFramework`QuditName[\[FormalCapitalI], "Dual" -> 
                  False], 1} -> 1|>], "Output" -> 
            Wolfram`QuantumFramework`QuditBasis[<|{
                 Wolfram`QuantumFramework`QuditName[
                  Subscript["\[Psi]", 
                   Subscript["x", "-"]], "Dual" -> False], 1} -> 
               SparseArray[
                Automatic, {2}, 0, {
                 1, {{0, 2}, {{1}, {2}}}, {-2^Rational[-1, 2], 2^
                   Rational[-1, 2]}}], {
                 Wolfram`QuantumFramework`QuditName[
                  Subscript["\[Psi]", 
                   Subscript["x", "+"]], "Dual" -> False], 1} -> 
               SparseArray[
                Automatic, {2}, 0, {
                 1, {{0, 2}, {{1}, {2}}}, {
                  2^Rational[-1, 2], 2^Rational[-1, 2]}}]|>], "Picture" -> 
            "Schr\[ODoubleDot]dinger", "Label" -> "X", 
            "ParameterSpec" -> {}|>]], 
         Wolfram`QuantumFramework`QuantumState[
          SparseArray[Automatic, {2}, 0, {1, {{0, 1}, {{2}}}, {1}}], 
          
          Wolfram`QuantumFramework`QuantumBasis[<|
           "Input" -> Wolfram`QuantumFramework`QuditBasis[<|{
                 
                 Wolfram`QuantumFramework`QuditName[\[FormalCapitalI], "Dual" -> 
                  False], 1} -> 1|>], "Output" -> 
            Wolfram`QuantumFramework`QuditBasis[<|{
                 Wolfram`QuantumFramework`QuditName[
                  Subscript["\[Psi]", 
                   Subscript["x", "-"]], "Dual" -> False], 1} -> 
               SparseArray[
                Automatic, {2}, 0, {
                 1, {{0, 2}, {{1}, {2}}}, {-2^Rational[-1, 2], 2^
                   Rational[-1, 2]}}], {
                 Wolfram`QuantumFramework`QuditName[
                  Subscript["\[Psi]", 
                   Subscript["x", "+"]], "Dual" -> False], 1} -> 
               SparseArray[
                Automatic, {2}, 0, {
                 1, {{0, 2}, {{1}, {2}}}, {
                  2^Rational[-1, 2], 2^Rational[-1, 2]}}]|>], "Picture" -> 
            "Schr\[ODoubleDot]dinger", "Label" -> "X", 
            "ParameterSpec" -> {}|>]]}, "QuditBasis" -> 
       Wolfram`QuantumFramework`QuditBasis[<|{
            Wolfram`QuantumFramework`QuditName[
             Subscript["\[Psi]", 
              Subscript["x", "-"]], "Dual" -> False], 1} -> 
          SparseArray[
           Automatic, {2}, 0, {
            1, {{0, 2}, {{1}, {2}}}, {-2^Rational[-1, 2], 2^
              Rational[-1, 2]}}], {
            Wolfram`QuantumFramework`QuditName[
             Subscript["\[Psi]", 
              Subscript["x", "+"]], "Dual" -> False], 1} -> 
          SparseArray[
           Automatic, {2}, 0, {
            1, {{0, 2}, {{1}, {2}}}, {
             2^Rational[-1, 2], 2^Rational[-1, 2]}}]|>], "Qudits" -> 1, 
       "Rank" -> 1, "Size" -> 3, "Tensor" -> 
       SparseArray[
        Automatic, {2, 2}, 0, {
         1, {{0, 2, 4}, {{1}, {2}, {1}, {2}}}, {-2^Rational[-1, 2], 2^
           Rational[-1, 2], 2^Rational[-1, 2], 2^Rational[-1, 2]}}], 
       "TensorDimensions" -> {2, 2}, "TensorRepresentation" -> 
       SparseArray[
        Automatic, {2, 2}, 0, {
         1, {{0, 2, 4}, {{1}, {2}, {1}, {2}}}, {-2^Rational[-1, 2], 2^
           Rational[-1, 2], 2^Rational[-1, 2], 2^Rational[-1, 2]}}], 
       "Transpose" -> 
       Wolfram`QuantumFramework`QuantumBasis[<|
         "Input" -> Wolfram`QuantumFramework`QuditBasis[<|{
               Wolfram`QuantumFramework`QuditName[
                Subscript["\[Psi]", 
                 Subscript["x", "-"]], "Dual" -> False], 1} -> 
             SparseArray[
              Automatic, {2}, 0, {
               1, {{0, 2}, {{1}, {2}}}, {-2^Rational[-1, 2], 2^
                 Rational[-1, 2]}}], {
               Wolfram`QuantumFramework`QuditName[
                Subscript["\[Psi]", 
                 Subscript["x", "+"]], "Dual" -> False], 1} -> 
             SparseArray[
              Automatic, {2}, 0, {
               1, {{0, 2}, {{1}, {2}}}, {
                2^Rational[-1, 2], 2^Rational[-1, 2]}}]|>], "Output" -> 
          Wolfram`QuantumFramework`QuditBasis[<|{
               
               Wolfram`QuantumFramework`QuditName[\[FormalCapitalI], "Dual" -> 
                False], 1} -> 1|>], "Picture" -> "Schr\[ODoubleDot]dinger", 
          "Label" -> Superscript["X", "T"], "ParameterSpec" -> {}|>], "Type" -> 
       "Vector"|>, "AllowEmbedding" -> True, "InitialShape" -> 
     TypeSystem`PackageScope`Limited[
       TypeSystem`PackageScope`ColumnShape[
        TypeSystem`PackageScope`KeyValueShape[
         TypeSystem`PackageScope`AtomShape[224.00000000000003`], 
         TypeSystem`PackageScope`UnknownShape[False]]], 20, 
       DirectedInfinity[1], {}], "InitialType" -> TypeSystem`Assoc[
       TypeSystem`Atom[String], TypeSystem`AnyType, 70], "Meta" -> <||>, 
     "RowTarget" -> 20, "ColumnTarget" -> 10, "Shape" -> 
     TypeSystem`PackageScope`Limited[
       TypeSystem`PackageScope`ColumnShape[
        TypeSystem`PackageScope`KeyValueShape[
         TypeSystem`PackageScope`AtomShape[224.00000000000003`], 
         TypeSystem`PackageScope`UnknownShape[False]]], 20, 
       DirectedInfinity[1], {}], "Type" -> TypeSystem`Assoc[
       TypeSystem`Atom[String], TypeSystem`AnyType, 70], "Path" -> {}, 
     "DisplayedRowCount" -> 20, "DisplayedColumnCount" -> 1, "DataRowCount" -> 
     70, "DataColumnCount" -> 1, "SortPaths" -> {}, "SortDirections" -> {}, 
     "HiddenItemsMap" -> Null, "UpdateType" -> 1|>, 
    TypeSystem`NestedGrid`PackagePrivate`$outputID$$, 
    TypeSystem`NestedGrid`PackagePrivate`$path$$ = {}, 
    TypeSystem`NestedGrid`PackagePrivate`$vPos$$ = 1, 
    TypeSystem`NestedGrid`PackagePrivate`$hPos$$ = 1, 
    TypeSystem`NestedGrid`PackagePrivate`$grid$$ = 
    DynamicModule[{
     TypeSystem`NestedGrid`PackagePrivate`renderedGrid = Deploy[
        Style[
         Grid[{{
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover["Association", 
                  Style[
                  "Association", FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                If[
                  TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                    Key["Association"]}, 1]]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key["Association"]}, "RowHeader", False], "Mouse"], 
              ImageSize -> {{224.00000000000003`, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
             GrayLevel[0.95], Alignment -> {Left, Baseline}], 
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover[
                  Style[
                   Row[{"\[LeftAssociation] ", 
                    Subscript["\[Ellipsis]", 2], "\[RightAssociation]"}], 
                   GrayLevel[0.5]], 
                  Style[
                   Style[
                    Row[{"\[LeftAssociation] ", 
                    Subscript["\[Ellipsis]", 2], "\[RightAssociation]"}], 
                    GrayLevel[0.5]], FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                If[
                  TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                    Key["Association"]}, 4]]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key["Association"]}, "Item", False], "Mouse"], 
              ImageMargins -> {{5, 3}, {4, 5}}], BaseStyle -> {
               GrayLevel[0.5]}]}, {
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover["ConjugateTranspose", 
                  Style[
                  "ConjugateTranspose", FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                If[
                  TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                    Key["ConjugateTranspose"]}, 1]]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key["ConjugateTranspose"]}, "RowHeader", False], "Mouse"], 
              ImageSize -> {{224.00000000000003`, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
             GrayLevel[0.95], Alignment -> {Left, Baseline}], 
            Item[
             Pane[
              Annotation[
               RawBoxes[
                StyleBox[
                 RowBox[{
                   TagBox["QuantumBasis", "SummaryHead"], "[", 
                   TemplateBox[{
                    GridBox[{{
                    GridBox[{{
                    RowBox[{
                    TagBox["\"Picture: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox["\"Schr\[ODoubleDot]dinger\"", "SummaryItem"]}], 
                    RowBox[{
                    TagBox["\"Rank: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox["1", "SummaryItem"]}]}, {
                    RowBox[{
                    TagBox["\"Dimension: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox["2", "SummaryItem"]}], ""}}, 
                    GridBoxAlignment -> {
                    "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, 
                    AutoDelete -> False, 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {
                    "Columns" -> {{2}}, "Rows" -> {{Automatic}}}, 
                    BaseStyle -> {
                    ShowStringCharacters -> False, NumberMarks -> False, 
                    PrintPrecision -> 3, ShowSyntaxStyles -> False}]}}, 
                    GridBoxAlignment -> {
                    "Columns" -> {{Left}}, "Rows" -> {{Top}}}, AutoDelete -> 
                    False, GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                    BaselinePosition -> {1, 1}]}, "SummaryPanel"], "]"}], 
                 FontFamily -> Dynamic[
                   CurrentValue[{"StyleHints", "CodeFont"}]], 
                 ShowStringCharacters -> True]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key["ConjugateTranspose"]}, "Item", False], "Mouse"], 
              ImageSize -> {{60, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}]}, {
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover["Diagram", 
                  Style[
                  "Diagram", FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                If[
                  TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                    Key["Diagram"]}, 1]]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key["Diagram"]}, "RowHeader", False], "Mouse"], 
              ImageSize -> {{224.00000000000003`, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
             GrayLevel[0.95], Alignment -> {Left, Baseline}], 
            Item[
             Pane[
              Annotation[
               RawBoxes[
                GraphicsBox[{
                  GeometricTransformationBox[{
                    LineBox[
                    NCache[{{0, 
                    Rational[1, 2]}, {1, 
                    Rational[1, 2]}, {
                    Rational[1, 2], 0}, {0, 
                    Rational[1, 2]}}, {{0, 0.5}, {1, 0.5}, {0.5, 0}, {
                    0, 0.5}}]], {
                    PointSize[
                    0.2 Dynamic[
                    3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                    Magnification])]], 
                    PointBox[
                    NCache[{{
                    Rational[1, 2], 
                    Rational[1, 2]}}, {{0.5, 0.5}}]], 
                    PointBox[{}]}, {
                    Arrowheads[
                    0.002 Dynamic[
                    3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                    Magnification])]], {
                    ArrowBox[
                    NCache[{{
                    Rational[1, 2], 
                    Rational[1, 2]}, {
                    Rational[1, 2], 
                    Rational[3, 5]}}, {{0.5, 0.5}, {0.5, 0.6}}]]}, {}}}, {{{1,
                     0}, {0, 1}}, {0, 0}}], 
                  InsetBox[
                   FormBox[
                    StyleBox[
                    "\"X\"", {FontSize -> 24, FontFamily -> "Times"}, 
                    StripOnInput -> False], TraditionalForm], 
                   NCache[{
                    Rational[1, 2], 
                    Rational[1, 4]}, {0.5, 0.25}]]}, {
                 PlotRangeClipping -> True, Frame -> True, FrameStyle -> 
                  GrayLevel[0.85], Ticks -> None, FrameTicks -> None, Axes -> 
                  None, ImageSize -> 112}]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key["Diagram"]}, "Item", False], "Mouse"], 
              ImageSize -> {{60, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}]}, {
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover["Dimension", 
                  Style[
                  "Dimension", FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                If[
                  TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                    Key["Dimension"]}, 1]]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key["Dimension"]}, "RowHeader", False], "Mouse"], 
              ImageSize -> {{224.00000000000003`, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
             GrayLevel[0.95], Alignment -> {Left, Baseline}], 
            Item[
             Pane[
              Annotation[
               RawBoxes["2"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key["Dimension"]}, "Item", False], "Mouse"], 
              ImageSize -> {{34, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}]}, {
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover["Dimensions", 
                  Style[
                  "Dimensions", FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                If[
                  TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                    Key["Dimensions"]}, 1]]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key["Dimensions"]}, "RowHeader", False], "Mouse"], 
              ImageSize -> {{224.00000000000003`, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
             GrayLevel[0.95], Alignment -> {Left, Baseline}], 
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover[
                  Style[{2}, ShowStringCharacters -> False], 
                  Style[
                   Style[{2}, ShowStringCharacters -> False], FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                If[
                  TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                    Key["Dimensions"]}, 4]]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key["Dimensions"]}, "Item", False], "Mouse"], 
              ImageMargins -> {{5, 3}, {4, 5}}]]}, {
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover["Dual", 
                  Style[
                  "Dual", FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                If[
                  TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                    Key["Dual"]}, 1]]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key["Dual"]}, "RowHeader", False], "Mouse"], 
              ImageSize -> {{224.00000000000003`, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
             GrayLevel[0.95], Alignment -> {Left, Baseline}], 
            Item[
             Pane[
              Annotation[
               RawBoxes[
                StyleBox[
                 RowBox[{
                   TagBox["QuantumBasis", "SummaryHead"], "[", 
                   TemplateBox[{
                    GridBox[{{
                    GridBox[{{
                    RowBox[{
                    TagBox["\"Picture: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox["\"Schr\[ODoubleDot]dinger\"", "SummaryItem"]}], 
                    RowBox[{
                    TagBox["\"Rank: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox["1", "SummaryItem"]}]}, {
                    RowBox[{
                    TagBox["\"Dimension: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox["2", "SummaryItem"]}], ""}}, 
                    GridBoxAlignment -> {
                    "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, 
                    AutoDelete -> False, 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {
                    "Columns" -> {{2}}, "Rows" -> {{Automatic}}}, 
                    BaseStyle -> {
                    ShowStringCharacters -> False, NumberMarks -> False, 
                    PrintPrecision -> 3, ShowSyntaxStyles -> False}]}}, 
                    GridBoxAlignment -> {
                    "Columns" -> {{Left}}, "Rows" -> {{Top}}}, AutoDelete -> 
                    False, GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                    BaselinePosition -> {1, 1}]}, "SummaryPanel"], "]"}], 
                 FontFamily -> Dynamic[
                   CurrentValue[{"StyleHints", "CodeFont"}]], 
                 ShowStringCharacters -> True]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key["Dual"]}, "Item", False], "Mouse"], 
              ImageSize -> {{60, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}]}, {
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover["ElementAssociation", 
                  Style[
                  "ElementAssociation", FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                If[
                  TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                    Key["ElementAssociation"]}, 1]]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key["ElementAssociation"]}, "RowHeader", False], "Mouse"], 
              ImageSize -> {{224.00000000000003`, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
             GrayLevel[0.95], Alignment -> {Left, Baseline}], 
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover[
                  Style[
                   Row[{"\[LeftAssociation] ", 
                    Subscript["\[Ellipsis]", 2], "\[RightAssociation]"}], 
                   GrayLevel[0.5]], 
                  Style[
                   Style[
                    Row[{"\[LeftAssociation] ", 
                    Subscript["\[Ellipsis]", 2], "\[RightAssociation]"}], 
                    GrayLevel[0.5]], FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                If[
                  TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                    Key["ElementAssociation"]}, 4]]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key["ElementAssociation"]}, "Item", False], "Mouse"], 
              ImageMargins -> {{5, 3}, {4, 5}}], BaseStyle -> {
               GrayLevel[0.5]}]}, {
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover["ElementDimension", 
                  Style[
                  "ElementDimension", FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                If[
                  TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                    Key["ElementDimension"]}, 1]]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key["ElementDimension"]}, "RowHeader", False], "Mouse"], 
              ImageSize -> {{224.00000000000003`, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
             GrayLevel[0.95], Alignment -> {Left, Baseline}], 
            Item[
             Pane[
              Annotation[
               RawBoxes["2"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key["ElementDimension"]}, "Item", False], "Mouse"], 
              ImageSize -> {{34, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}]}, {
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover["ElementDimensions", 
                  Style[
                  "ElementDimensions", FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                If[
                  TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                    Key["ElementDimensions"]}, 1]]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key["ElementDimensions"]}, "RowHeader", False], "Mouse"], 
              ImageSize -> {{224.00000000000003`, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
             GrayLevel[0.95], Alignment -> {Left, Baseline}], 
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover[
                  Style[{2}, ShowStringCharacters -> False], 
                  Style[
                   Style[{2}, ShowStringCharacters -> False], FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                If[
                  TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                    Key["ElementDimensions"]}, 4]]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key["ElementDimensions"]}, "Item", False], "Mouse"], 
              ImageMargins -> {{5, 3}, {4, 5}}]]}, {
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover["ElementNames", 
                  Style[
                  "ElementNames", FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                If[
                  TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                    Key["ElementNames"]}, 1]]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key["ElementNames"]}, "RowHeader", False], "Mouse"], 
              ImageSize -> {{224.00000000000003`, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
             GrayLevel[0.95], Alignment -> {Left, Baseline}], 
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover[
                  Style[{
                    Wolfram`QuantumFramework`QuditName[
                    Subscript["\[Psi]", 
                    Subscript["x", "-"]], "Dual" -> False], 
                    Wolfram`QuantumFramework`QuditName[
                    Subscript["\[Psi]", 
                    Subscript["x", "+"]], "Dual" -> False]}, 
                   ShowStringCharacters -> False], 
                  Style[
                   Style[{
                    Wolfram`QuantumFramework`QuditName[
                    Subscript["\[Psi]", 
                    Subscript["x", "-"]], "Dual" -> False], 
                    Wolfram`QuantumFramework`QuditName[
                    Subscript["\[Psi]", 
                    Subscript["x", "+"]], "Dual" -> False]}, 
                    ShowStringCharacters -> False], FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                If[
                  TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                    Key["ElementNames"]}, 4]]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key["ElementNames"]}, "Item", False], "Mouse"], 
              ImageMargins -> {{5, 3}, {4, 5}}]]}, {
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover["Elements", 
                  Style[
                  "Elements", FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                If[
                  TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                    Key["Elements"]}, 1]]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key["Elements"]}, "RowHeader", False], "Mouse"], 
              ImageSize -> {{224.00000000000003`, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
             GrayLevel[0.95], Alignment -> {Left, Baseline}], 
            Item[
             Pane[
              Annotation[
               RawBoxes[
                StyleBox[
                 RowBox[{
                   TagBox["SparseArray", "SummaryHead"], "[", 
                   TemplateBox[{
                    GridBox[{{
                    GridBox[{{
                    RowBox[{
                    TagBox[
                    "\"Specified elements: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox["4", "SummaryItem"]}]}, {
                    RowBox[{
                    TagBox["\"Dimensions: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox[
                    RowBox[{"{", 
                    RowBox[{"2", ",", "2"}], "}"}], "SummaryItem"]}]}}, 
                    GridBoxAlignment -> {
                    "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, 
                    AutoDelete -> False, 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {
                    "Columns" -> {{2}}, "Rows" -> {{Automatic}}}, 
                    BaseStyle -> {
                    ShowStringCharacters -> False, NumberMarks -> False, 
                    PrintPrecision -> 3, ShowSyntaxStyles -> False}]}}, 
                    GridBoxAlignment -> {
                    "Columns" -> {{Left}}, "Rows" -> {{Top}}}, AutoDelete -> 
                    False, 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                    BaselinePosition -> {1, 1}]}, "SummaryPanel"], "]"}], 
                 FontFamily -> Dynamic[
                   CurrentValue[{"StyleHints", "CodeFont"}]], 
                 ShowStringCharacters -> True]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key["Elements"]}, "Item", False], "Mouse"], 
              ImageSize -> {{60, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}]}, {
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover["FinalParameters", 
                  Style[
                  "FinalParameters", FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                If[
                  TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                    Key["FinalParameters"]}, 1]]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key["FinalParameters"]}, "RowHeader", False], "Mouse"], 
              ImageSize -> {{224.00000000000003`, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
             GrayLevel[0.95], Alignment -> {Left, Baseline}], 
            Item[
             Pane[{}, ImageMargins -> {{5, 3}, {4, 5}}]]}, {
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover["HasInputQ", 
                  Style[
                  "HasInputQ", FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                If[
                  TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                    Key["HasInputQ"]}, 1]]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key["HasInputQ"]}, "RowHeader", False], "Mouse"], 
              ImageSize -> {{224.00000000000003`, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
             GrayLevel[0.95], Alignment -> {Left, Baseline}], 
            Item[
             Pane[
              Annotation[
               RawBoxes["False"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key["HasInputQ"]}, "Item", False], "Mouse"], 
              ImageSize -> {{60, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}]}, {
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover["InitialParameters", 
                  Style[
                  "InitialParameters", FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                If[
                  TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                    Key["InitialParameters"]}, 1]]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key["InitialParameters"]}, "RowHeader", False], "Mouse"], 
              ImageSize -> {{224.00000000000003`, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
             GrayLevel[0.95], Alignment -> {Left, Baseline}], 
            Item[
             Pane[{}, ImageMargins -> {{5, 3}, {4, 5}}]]}, {
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover["Input", 
                  Style[
                  "Input", FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                If[
                  TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                    Key["Input"]}, 1]]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key["Input"]}, "RowHeader", False], "Mouse"], 
              ImageSize -> {{224.00000000000003`, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
             GrayLevel[0.95], Alignment -> {Left, Baseline}], 
            Item[
             Pane[
              Annotation[
               RawBoxes[
                StyleBox[
                 InterpretationBox[
                  RowBox[{"\[LeftAssociation]", 
                    RowBox[{
                    InterpretationBox["\[ScriptOne]", 
                    
                    Wolfram`QuantumFramework`QuditName[\[FormalCapitalI], 
                    "Dual" -> False]], "\[Rule]", "1"}], 
                    "\[RightAssociation]"}], 
                  Wolfram`QuantumFramework`QuditBasis[<|{
                    
                    Wolfram`QuantumFramework`QuditName[\[FormalCapitalI], 
                    "Dual" -> False], 1} -> 1|>]], FontFamily -> Dynamic[
                   CurrentValue[{"StyleHints", "CodeFont"}]], 
                 ShowStringCharacters -> True]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key["Input"]}, "Item", False], "Mouse"], 
              ImageSize -> {{60, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}]}, {
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover["InputBasis", 
                  Style[
                  "InputBasis", FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                If[
                  TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                    Key["InputBasis"]}, 1]]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key["InputBasis"]}, "RowHeader", False], "Mouse"], 
              ImageSize -> {{224.00000000000003`, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
             GrayLevel[0.95], Alignment -> {Left, Baseline}], 
            Item[
             Pane[
              Annotation[
               RawBoxes[
                StyleBox[
                 RowBox[{
                   TagBox["QuantumBasis", "SummaryHead"], "[", 
                   TemplateBox[{
                    GridBox[{{
                    GridBox[{{
                    RowBox[{
                    TagBox["\"Picture: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox["\"Schr\[ODoubleDot]dinger\"", "SummaryItem"]}], 
                    RowBox[{
                    TagBox["\"Rank: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox["0", "SummaryItem"]}]}, {
                    RowBox[{
                    TagBox["\"Dimension: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox["1", "SummaryItem"]}], ""}}, 
                    GridBoxAlignment -> {
                    "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, 
                    AutoDelete -> False, 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {
                    "Columns" -> {{2}}, "Rows" -> {{Automatic}}}, 
                    BaseStyle -> {
                    ShowStringCharacters -> False, NumberMarks -> False, 
                    PrintPrecision -> 3, ShowSyntaxStyles -> False}]}}, 
                    GridBoxAlignment -> {
                    "Columns" -> {{Left}}, "Rows" -> {{Top}}}, AutoDelete -> 
                    False, GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                    BaselinePosition -> {1, 1}]}, "SummaryPanel"], "]"}], 
                 FontFamily -> Dynamic[
                   CurrentValue[{"StyleHints", "CodeFont"}]], 
                 ShowStringCharacters -> True]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key["InputBasis"]}, "Item", False], "Mouse"], 
              ImageSize -> {{60, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}]}, {
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover["InputDimension", 
                  Style[
                  "InputDimension", FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                If[
                  TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                    Key["InputDimension"]}, 1]]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key["InputDimension"]}, "RowHeader", False], "Mouse"], 
              ImageSize -> {{224.00000000000003`, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
             GrayLevel[0.95], Alignment -> {Left, Baseline}], 
            Item[
             Pane[
              Annotation[
               RawBoxes["1"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key["InputDimension"]}, "Item", False], "Mouse"], 
              ImageSize -> {{34, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}]}, {
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover["InputDimensions", 
                  Style[
                  "InputDimensions", FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                If[
                  TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                    Key["InputDimensions"]}, 1]]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key["InputDimensions"]}, "RowHeader", False], "Mouse"], 
              ImageSize -> {{224.00000000000003`, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
             GrayLevel[0.95], Alignment -> {Left, Baseline}], 
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover[
                  Style[{1}, ShowStringCharacters -> False], 
                  Style[
                   Style[{1}, ShowStringCharacters -> False], FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                If[
                  TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                    Key["InputDimensions"]}, 4]]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key["InputDimensions"]}, "Item", False], "Mouse"], 
              ImageMargins -> {{5, 3}, {4, 5}}]]}, {
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover["InputElementDimensions", 
                  Style[
                  "InputElementDimensions", FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                If[
                  TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                    Key["InputElementDimensions"]}, 1]]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key["InputElementDimensions"]}, "RowHeader", False], 
               "Mouse"], 
              ImageSize -> {{224.00000000000003`, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
             GrayLevel[0.95], Alignment -> {Left, Baseline}], 
            Item[
             Pane[{}, ImageMargins -> {{5, 3}, {4, 5}}]]}, {
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover["InputElementNames", 
                  Style[
                  "InputElementNames", FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                If[
                  TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                    Key["InputElementNames"]}, 1]]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key["InputElementNames"]}, "RowHeader", False], "Mouse"], 
              ImageSize -> {{224.00000000000003`, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
             GrayLevel[0.95], Alignment -> {Left, Baseline}], 
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover[
                  Style[{
                    
                    Wolfram`QuantumFramework`QuditName[\[FormalCapitalI], 
                    "Dual" -> False]}, ShowStringCharacters -> False], 
                  Style[
                   Style[{
                    
                    Wolfram`QuantumFramework`QuditName[\[FormalCapitalI], 
                    "Dual" -> False]}, ShowStringCharacters -> False], 
                   FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                If[
                  TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                    Key["InputElementNames"]}, 4]]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key["InputElementNames"]}, "Item", False], "Mouse"], 
              ImageMargins -> {{5, 3}, {4, 5}}]]}, {
            Item[
             Deploy[
              Pane[
               Row[{
                 Spacer[2], 
                 Style[
                  Row[{
                    Button[
                    MouseAppearance[
                    Mouseover[
                    Graphics[{{
                    EdgeForm[None], 
                    FaceForm[None], 
                    Rectangle[{0, 0}, {18, 18}, RoundingRadius -> 2]}, 
                    Rotate[
                    Translate[{
                    CapForm[Round], 
                    Line[{{0, 0}, {4, 5}, {8, 0}}], 
                    Line[{{0, 5}, {8, 5}}]}, {5, 6.5}], 0, {9, 9}]}, 
                    ImageSize -> (1 -> 1), ImagePadding -> {{0, 1}, {1, 0}}, 
                    BaselinePosition -> Scaled[0.35], BaseStyle -> 
                    RGBColor[
                    0.5372549019607843, 0.5372549019607843, 
                    0.5372549019607843]], 
                    Graphics[{{
                    EdgeForm[
                    RGBColor[
                    0.27450980392156865`, 0.5411764705882353, 
                    0.796078431372549]], 
                    FaceForm[None], 
                    Rectangle[{0, 0}, {18, 18}, RoundingRadius -> 2]}, 
                    Rotate[
                    Translate[{
                    CapForm[Round], 
                    RGBColor[
                    0.27450980392156865`, 0.5411764705882353, 
                    0.796078431372549], 
                    Line[{{0, 0}, {4, 5}, {8, 0}}], 
                    Line[{{0, 5}, {8, 5}}]}, {5, 6.5}], 0, {9, 9}]}, 
                    ImageSize -> (1 -> 1), ImagePadding -> {{0, 1}, {1, 0}}, 
                    BaselinePosition -> Scaled[0.35]]], "LinkHand"], 
                    If[
                    TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$ = 
                    Clip[TypeSystem`NestedGrid`PackagePrivate`$vPos$$ + (-20) 
                    If[True, 70, 1], {1, 70 - -20 + 1}]; 
                    TypeSystem`NestedGrid`PackagePrivate`updateState[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]], True][
                    TypeSystem`NestedGrid`PackagePrivate`$path$$]], 
                    Appearance -> None], 
                    Button[
                    MouseAppearance[
                    Mouseover[
                    Graphics[{{
                    EdgeForm[None], 
                    FaceForm[None], 
                    Rectangle[{0, 0}, {18, 18}, RoundingRadius -> 2]}, 
                    Rotate[
                    Translate[{
                    CapForm[Round], 
                    Line[{{0, 0}, {4, 5}, {8, 0}}]}, {5, 6.5}], 0, {9, 9}]}, 
                    ImageSize -> (1 -> 1), ImagePadding -> {{0, 1}, {1, 0}}, 
                    BaselinePosition -> Scaled[0.35], BaseStyle -> 
                    RGBColor[
                    0.5372549019607843, 0.5372549019607843, 
                    0.5372549019607843]], 
                    Graphics[{{
                    EdgeForm[
                    RGBColor[
                    0.27450980392156865`, 0.5411764705882353, 
                    0.796078431372549]], 
                    FaceForm[None], 
                    Rectangle[{0, 0}, {18, 18}, RoundingRadius -> 2]}, 
                    Rotate[
                    Translate[{
                    CapForm[Round], 
                    RGBColor[
                    0.27450980392156865`, 0.5411764705882353, 
                    0.796078431372549], 
                    Line[{{0, 0}, {4, 5}, {8, 0}}]}, {5, 6.5}], 0, {9, 9}]}, 
                    ImageSize -> (1 -> 1), ImagePadding -> {{0, 1}, {1, 0}}, 
                    BaselinePosition -> Scaled[0.35]]], "LinkHand"], 
                    If[
                    TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$ = 
                    Clip[TypeSystem`NestedGrid`PackagePrivate`$vPos$$ + (-20) 
                    If[False, 70, 1], {1, 70 - -20 + 1}]; 
                    TypeSystem`NestedGrid`PackagePrivate`updateState[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]], True][
                    TypeSystem`NestedGrid`PackagePrivate`$path$$]], 
                    Appearance -> None], " ", 
                    Style[
                    Mouseover[
                    Style[
                    Row[{"rows ", 1, "\[Dash]", 20, " of ", 
                    Style[70, FontWeight -> Bold]}], FontSize -> 
                    9.333333333333332, FontColor -> 
                    RGBColor[
                    0.5098039215686274, 0.5098039215686274, 
                    0.5098039215686274]], 
                    Style[
                    Row[{"rows ", 1, "\[Dash]", 20, " of ", 
                    Style[70, FontWeight -> Bold]}], FontSize -> 
                    9.333333333333332, FontColor -> 
                    RGBColor[
                    0.5098039215686274, 0.5098039215686274, 
                    0.5098039215686274]]], ContextMenu -> {
                    MenuItem["Hide", 
                    KernelExecute[
                    
                    TypeSystem`NestedGrid`PackagePrivate`adjustLimits[{
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]}, 
                    "Rows", 1, {}]], MenuEvaluator -> Automatic], 
                    MenuItem["Show up to 10 Rows", 
                    KernelExecute[
                    
                    TypeSystem`NestedGrid`PackagePrivate`adjustLimits[{
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]}, 
                    "Rows", 10, {}]], MenuEvaluator -> Automatic], 
                    MenuItem["Show up to 30 Rows", 
                    KernelExecute[
                    
                    TypeSystem`NestedGrid`PackagePrivate`adjustLimits[{
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]}, 
                    "Rows", 30, {}]], MenuEvaluator -> Automatic], 
                    MenuItem["Show up to 100 Rows", 
                    KernelExecute[
                    
                    TypeSystem`NestedGrid`PackagePrivate`adjustLimits[{
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]}, 
                    "Rows", 100, {}]], MenuEvaluator -> Automatic], 
                    MenuItem["Show All", 
                    KernelExecute[
                    
                    TypeSystem`NestedGrid`PackagePrivate`adjustLimits[{
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]}, 
                    "Rows", 100000000, {}]], MenuEvaluator -> Automatic]}], 
                    " ", 
                    Button[
                    MouseAppearance[
                    Mouseover[
                    Graphics[{{
                    EdgeForm[None], 
                    FaceForm[None], 
                    Rectangle[{0, 0}, {18, 18}, RoundingRadius -> 2]}, 
                    Rotate[
                    Translate[{
                    CapForm[Round], 
                    Line[{{0, 0}, {4, 5}, {8, 0}}]}, {5, 6.5}], 180 Degree, {
                    9, 9}]}, ImageSize -> (1 -> 1), 
                    ImagePadding -> {{0, 1}, {1, 0}}, BaselinePosition -> 
                    Scaled[0.35], BaseStyle -> 
                    RGBColor[
                    0.5372549019607843, 0.5372549019607843, 
                    0.5372549019607843]], 
                    Graphics[{{
                    EdgeForm[
                    RGBColor[
                    0.27450980392156865`, 0.5411764705882353, 
                    0.796078431372549]], 
                    FaceForm[None], 
                    Rectangle[{0, 0}, {18, 18}, RoundingRadius -> 2]}, 
                    Rotate[
                    Translate[{
                    CapForm[Round], 
                    RGBColor[
                    0.27450980392156865`, 0.5411764705882353, 
                    0.796078431372549], 
                    Line[{{0, 0}, {4, 5}, {8, 0}}]}, {5, 6.5}], 180 Degree, {
                    9, 9}]}, ImageSize -> (1 -> 1), 
                    ImagePadding -> {{0, 1}, {1, 0}}, BaselinePosition -> 
                    Scaled[0.35]]], "LinkHand"], 
                    If[
                    TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$ = 
                    Clip[TypeSystem`NestedGrid`PackagePrivate`$vPos$$ + 
                    20 If[False, 70, 1], {1, 70 - 20 + 1}]; 
                    TypeSystem`NestedGrid`PackagePrivate`updateState[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]], True][
                    TypeSystem`NestedGrid`PackagePrivate`$path$$]], 
                    Appearance -> None], 
                    Button[
                    MouseAppearance[
                    Mouseover[
                    Graphics[{{
                    EdgeForm[None], 
                    FaceForm[None], 
                    Rectangle[{0, 0}, {18, 18}, RoundingRadius -> 2]}, 
                    Rotate[
                    Translate[{
                    CapForm[Round], 
                    Line[{{0, 0}, {4, 5}, {8, 0}}], 
                    Line[{{0, 5}, {8, 5}}]}, {5, 6.5}], 180 Degree, {9, 9}]}, 
                    ImageSize -> (1 -> 1), ImagePadding -> {{0, 1}, {1, 0}}, 
                    BaselinePosition -> Scaled[0.35], BaseStyle -> 
                    RGBColor[
                    0.5372549019607843, 0.5372549019607843, 
                    0.5372549019607843]], 
                    Graphics[{{
                    EdgeForm[
                    RGBColor[
                    0.27450980392156865`, 0.5411764705882353, 
                    0.796078431372549]], 
                    FaceForm[None], 
                    Rectangle[{0, 0}, {18, 18}, RoundingRadius -> 2]}, 
                    Rotate[
                    Translate[{
                    CapForm[Round], 
                    RGBColor[
                    0.27450980392156865`, 0.5411764705882353, 
                    0.796078431372549], 
                    Line[{{0, 0}, {4, 5}, {8, 0}}], 
                    Line[{{0, 5}, {8, 5}}]}, {5, 6.5}], 180 Degree, {9, 9}]}, 
                    ImageSize -> (1 -> 1), ImagePadding -> {{0, 1}, {1, 0}}, 
                    BaselinePosition -> Scaled[0.35]]], "LinkHand"], 
                    If[
                    TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$ = 
                    Clip[TypeSystem`NestedGrid`PackagePrivate`$vPos$$ + 
                    20 If[True, 70, 1], {1, 70 - 20 + 1}]; 
                    TypeSystem`NestedGrid`PackagePrivate`updateState[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]], True][
                    TypeSystem`NestedGrid`PackagePrivate`$path$$]], 
                    Appearance -> None]}], ContextMenu -> {}]}], 
               ImageMargins -> {{0, -1}, {-1, 1}}]], Background -> 
             RGBColor[
              0.9764705882352941, 0.9764705882352941, 0.9764705882352941], 
             Alignment -> {Left, Top}], SpanFromLeft}}, 
          BaseStyle -> {
           ContextMenu -> 
            Dynamic[TypeSystem`NestedGrid`PackagePrivate`$contextMenuTrigger; 
              Which[TypeSystem`NestedGrid`PackagePrivate`$lastOutputID =!= 
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                 TypeSystem`NestedGrid`PackagePrivate`$outputID$$], {}, 
                TypeSystem`NestedGrid`PackagePrivate`$contextMenuTrigger === 
                TypeSystem`NestedGrid`PackagePrivate`$lastContextMenuTrigger, 
                TypeSystem`NestedGrid`PackagePrivate`$lastContextMenu, True, 
                TypeSystem`NestedGrid`PackagePrivate`$lastContextMenuTrigger = 
                 TypeSystem`NestedGrid`PackagePrivate`$contextMenuTrigger; 
                TypeSystem`NestedGrid`PackagePrivate`$lastContextMenu = 
                 Block[{TypeSystem`NestedGrid`PackagePrivate`$globalScrollPos = \
{TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$}}, 
                   
                   With[{TypeSystem`NestedGrid`PackagePrivate`lastPath$ = 
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath, 
                    TypeSystem`NestedGrid`PackagePrivate`lastPathType$ = 
                    TypeSystem`NestedGrid`PackagePrivate`$lastPathType, 
                    TypeSystem`NestedGrid`PackagePrivate`isLeafHeader$ = 
                    TypeSystem`NestedGrid`PackagePrivate`$\
lastPathIsLeafHeader, TypeSystem`NestedGrid`PackagePrivate`headerHidden$ = And[
                    MatchQ[TypeSystem`NestedGrid`PackagePrivate`$lastPathType, 
                    Alternatives["RowHeader", "ColumnHeader"]], 
                    TypeSystem`NestedGrid`PackagePrivate`headerHiddenQ[
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath, 
                    TypeSystem`NestedGrid`PackagePrivate`$state$$]], 
                    TypeSystem`NestedGrid`PackagePrivate`allHidden$ = 
                    TypeSystem`NestedGrid`PackagePrivate`allHiddenQ[
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath, 
                    TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                    TypeSystem`NestedGrid`PackagePrivate`anyHidden$ = 
                    TypeSystem`NestedGrid`PackagePrivate`anyHiddenQ[
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath, 
                    TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                    TypeSystem`NestedGrid`PackagePrivate`sortDirection$ = 
                    TypeSystem`NestedGrid`PackagePrivate`columnSortDirection[
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath, 
                    TypeSystem`NestedGrid`PackagePrivate`$state$$[
                    "SortPaths"], 
                    TypeSystem`NestedGrid`PackagePrivate`$state$$[
                    "SortDirections"]], 
                    TypeSystem`NestedGrid`PackagePrivate`haveData$ = Not[
                    FailureQ[
                    TypeSystem`NestedGrid`PackagePrivate`datasetInitialData[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$]]], 
                    TypeSystem`NestedGrid`PackagePrivate`isKeyDummy$ = Not[
                    FreeQ[
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath, Keys]]}, 
                    Join[{
                    If[
                    Or[
                    Not[TypeSystem`NestedGrid`PackagePrivate`haveData$], 
                    Not[TypeSystem`NestedGrid`PackagePrivate`anyHidden$], 
                    TypeSystem`NestedGrid`PackagePrivate`isKeyDummy$], 
                    Nothing, 
                    MenuItem[
                    "Show " <> 
                    Which[TypeSystem`NestedGrid`PackagePrivate`lastPathType$ == 
                    "Item", "", 
                    TypeSystem`NestedGrid`PackagePrivate`lastPathType$ == 
                    "RowHeader", "Row", 
                    TypeSystem`NestedGrid`PackagePrivate`lastPathType$ == 
                    "ColumnHeader", "Column", True, ""], 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`updateHiddenItems[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][
                    TypeSystem`NestedGrid`PackagePrivate`lastPath$, 
                    "remove"]], MenuEvaluator -> Automatic]], 
                    If[
                    Or[
                    Not[TypeSystem`NestedGrid`PackagePrivate`haveData$], 
                    TypeSystem`NestedGrid`PackagePrivate`pathEmptyQ[
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath, 
                    TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                    TypeSystem`NestedGrid`PackagePrivate`isKeyDummy$, 
                    And[
                    TypeSystem`NestedGrid`PackagePrivate`allHidden$, 
                    TypeSystem`NestedGrid`PackagePrivate`headerHidden$]], 
                    Nothing, 
                    MenuItem[
                    "Hide " <> 
                    Which[TypeSystem`NestedGrid`PackagePrivate`lastPathType$ == 
                    "Item", "", 
                    TypeSystem`NestedGrid`PackagePrivate`lastPathType$ == 
                    "RowHeader", "Row", 
                    TypeSystem`NestedGrid`PackagePrivate`lastPathType$ == 
                    "ColumnHeader", "Column", True, ""], 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`updateHiddenItems[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][
                    TypeSystem`NestedGrid`PackagePrivate`lastPath$, "add"]], 
                    MenuEvaluator -> Automatic]], Delimiter}, 
                    If[
                    And[TypeSystem`NestedGrid`PackagePrivate`haveData$, 
                    MatchQ[TypeSystem`NestedGrid`PackagePrivate`lastPathType$, 
                    Alternatives["ColumnHeader", "KeyDummy"]], 
                    TypeSystem`NestedGrid`PackagePrivate`isLeafHeader$, 
                    Not[TypeSystem`NestedGrid`PackagePrivate`allHidden$]], {
                    If[
                    TypeSystem`NestedGrid`PackagePrivate`sortDirection$ =!= 
                    "Ascending", 
                    MenuItem["Sort", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`updateSort[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][
                    TypeSystem`NestedGrid`PackagePrivate`lastPath$, 
                    "Ascending"]], MenuEvaluator -> Automatic], Nothing], 
                    If[
                    TypeSystem`NestedGrid`PackagePrivate`sortDirection$ =!= 
                    "Descending", 
                    MenuItem["Reverse Sort", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`updateSort[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][
                    TypeSystem`NestedGrid`PackagePrivate`lastPath$, 
                    "Descending"]], MenuEvaluator -> Automatic], Nothing], 
                    If[TypeSystem`NestedGrid`PackagePrivate`sortDirection$ =!= 
                    None, 
                    MenuItem["Unsort", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`updateSort[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][
                    TypeSystem`NestedGrid`PackagePrivate`lastPath$, None]], 
                    MenuEvaluator -> Automatic], Nothing], Delimiter}, {}], {
                    MenuItem["Copy Position to Clipboard", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`toCurrentPosition[
                    TypeSystem`NestedGrid`PackagePrivate`copyClip]], 
                    MenuEvaluator -> Automatic], 
                    If[TypeSystem`NestedGrid`PackagePrivate`haveData$, 
                    MenuItem["Copy Data to Clipboard", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`toCurrentData[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`copyClip]], 
                    MenuEvaluator -> Automatic], Nothing], Delimiter, 
                    MenuItem["Paste Position in New Cell", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`toCurrentPosition[
                    TypeSystem`NestedGrid`PackagePrivate`cellPaste]], 
                    MenuEvaluator -> Automatic], 
                    If[TypeSystem`NestedGrid`PackagePrivate`haveData$, 
                    MenuItem["Paste Data in New Cell", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`toCurrentData[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`cellPaste]], 
                    MenuEvaluator -> Automatic], Nothing]}]]]]], FontFamily -> 
            "Source Sans Pro", FontSize -> 14, FontWeight -> Plain}, Dividers -> 
          All, FrameStyle -> GrayLevel[0.7490196078431373], 
          Spacings -> {0, 0}, Alignment -> Left, 
          BaseStyle -> {
           FontFamily -> "Source Sans Pro", FontSize -> 14, FontWeight -> 
            Plain}], LineBreakWithin -> False, ContextMenu -> {}, NumberMarks -> 
         False, ShowAutoStyles -> False]], 
      TypeSystem`NestedGrid`PackagePrivate`initialQ = True}, 
     Dynamic[
      TypeSystem`NestedGrid`PackagePrivate`setupViewPath[
      TypeSystem`NestedGrid`PackagePrivate`$path$$, If[
         Not[TypeSystem`NestedGrid`PackagePrivate`initialQ], 
         Module[{
          TypeSystem`NestedGrid`PackagePrivate`tmpGrid$ = $Failed, 
           TypeSystem`NestedGrid`PackagePrivate`tmpData$ = 
           TypeSystem`NestedGrid`PackagePrivate`datasetData[
            TypeSystem`NestedGrid`PackagePrivate`$state$$]}, 
          TypeSystem`NestedGrid`PackagePrivate`tmpGrid$ = If[
             FailureQ[TypeSystem`NestedGrid`PackagePrivate`tmpData$], 
             TypeSystem`NestedGrid`PackagePrivate`renderedGrid, 
             TypeSystem`NestedGrid`PackagePrivate`renderGrid[
             TypeSystem`NestedGrid`PackagePrivate`$state$$, 
              TypeSystem`NestedGrid`PackagePrivate`$path$$, 
              TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
              TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
              TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
              TypeSystem`NestedGrid`PackagePrivate`localHold[
              TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][
             TypeSystem`NestedGrid`PackagePrivate`tmpData$]]; If[
            Not[
             FailureQ[TypeSystem`NestedGrid`PackagePrivate`tmpGrid$]], 
            TypeSystem`NestedGrid`PackagePrivate`renderedGrid = 
            TypeSystem`NestedGrid`PackagePrivate`tmpGrid$]; Null]]; 
       TypeSystem`NestedGrid`PackagePrivate`initialQ = False; 
       TypeSystem`NestedGrid`PackagePrivate`$vPos$$; 
       TypeSystem`NestedGrid`PackagePrivate`$hPos$$; If[
         FailureQ[TypeSystem`NestedGrid`PackagePrivate`renderedGrid], 
         TypeSystem`SparseGrid[
          TypeSystem`H["(data no longer present)"]], 
         TypeSystem`NestedGrid`PackagePrivate`renderedGrid]], 
      TrackedSymbols :> {
       TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
        TypeSystem`NestedGrid`PackagePrivate`$hPos$$}], 
     DynamicModuleValues :> {}], 
    TypeSystem`NestedGrid`PackagePrivate`$topBar$$ = Dynamic[
     TypeSystem`NestedGrid`PackagePrivate`makeFramedBar[
      TypeSystem`PackageScope`SubViewPathbar[
      TypeSystem`NestedGrid`PackagePrivate`$path$$, 
       TypeSystem`NestedGrid`PackagePrivate`updateState[
       TypeSystem`NestedGrid`PackagePrivate`$state$$, 
        TypeSystem`NestedGrid`PackagePrivate`$path$$, 
        TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
        TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
        TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
        TypeSystem`NestedGrid`PackagePrivate`localHold[
        TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]]], 
     TrackedSymbols :> {TypeSystem`NestedGrid`PackagePrivate`$path$$}], 
    TypeSystem`NestedGrid`PackagePrivate`$bottomBar$$ = Style[
     Framed[
      Dynamic[
       Replace[
       TypeSystem`NestedGrid`PackagePrivate`mouseAnnotation$$, {
        TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
           TypeSystem`NestedGrid`PackagePrivate`localHold[
           TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][Null, 
           Blank[]] -> "", TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
           TypeSystem`NestedGrid`PackagePrivate`localHold[
           TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][
           Pattern[TypeSystem`NestedGrid`PackagePrivate`path$, 
            Blank[]], 
           Pattern[TypeSystem`NestedGrid`PackagePrivate`pathType$, 
            Blank[]], 
           Pattern[TypeSystem`NestedGrid`PackagePrivate`isLeafHeader$, 
            Blank[]]] :> (
          Increment[TypeSystem`NestedGrid`PackagePrivate`$contextMenuTrigger]; 
          TypeSystem`NestedGrid`PackagePrivate`$lastPath = 
           TypeSystem`NestedGrid`PackagePrivate`path$; 
          TypeSystem`NestedGrid`PackagePrivate`$lastPathType = 
           TypeSystem`NestedGrid`PackagePrivate`pathType$; 
          TypeSystem`NestedGrid`PackagePrivate`$lastPathIsLeafHeader = 
           TypeSystem`NestedGrid`PackagePrivate`isLeafHeader$; 
          TypeSystem`NestedGrid`PackagePrivate`$lastOutputID = 
           TypeSystem`NestedGrid`PackagePrivate`localHold[
            TypeSystem`NestedGrid`PackagePrivate`$outputID$$]; 
          TypeSystem`NestedGrid`PackagePrivate`makePathTrail[
           TypeSystem`NestedGrid`PackagePrivate`path$, 
            TypeSystem`NestedGrid`PackagePrivate`makePathElements]), Null :> 
         Spacer[10], Blank[] :> Spacer[10]}], 
       TrackedSymbols :> {
        TypeSystem`NestedGrid`PackagePrivate`mouseAnnotation$$}], FrameStyle -> 
      None, ImageMargins -> 0, FrameMargins -> 0, Alignment -> Top, 
      ImageSize -> {Automatic, 15}], FontSize -> 1], 
    TypeSystem`NestedGrid`PackagePrivate`mouseAnnotation$$ = 
    TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
    "0760c8cc-ece5-4122-b049-4db9f9464d49"][{
      Key["Input"]}, "Item", False]}, 
    DynamicWrapperBox[
     DynamicBox[ToBoxes[
       Dataset`DatasetContent[
       2, "Path" -> Hold[TypeSystem`NestedGrid`PackagePrivate`$path$$], 
        "Grid" -> Hold[TypeSystem`NestedGrid`PackagePrivate`$grid$$], "State" -> 
        Hold[TypeSystem`NestedGrid`PackagePrivate`$state$$], "VPos" -> 
        Hold[TypeSystem`NestedGrid`PackagePrivate`$vPos$$], "HPos" -> 
        Hold[TypeSystem`NestedGrid`PackagePrivate`$hPos$$], "TopBar" -> 
        Hold[TypeSystem`NestedGrid`PackagePrivate`$topBar$$], "BottomBar" -> 
        Hold[TypeSystem`NestedGrid`PackagePrivate`$bottomBar$$], "OutputID" -> 
        Hold[
          TypeSystem`NestedGrid`PackagePrivate`localHold[
          TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]], StandardForm],
      ImageSizeCache->{567., {373.634033203125, 379.365966796875}},
      TrackedSymbols:>{
       TypeSystem`NestedGrid`PackagePrivate`$state$$, 
        TypeSystem`NestedGrid`PackagePrivate`$grid$$}], 
     TypeSystem`NestedGrid`PackagePrivate`mouseAnnotation$$ = 
     MouseAnnotation[],
     ImageSizeCache->{567., {373.634033203125, 379.365966796875}}],
    BaseStyle->{LineBreakWithin -> False},
    DynamicModuleValues:>{},
    Initialization:>(TypeSystem`NestedGrid`PackagePrivate`$outputID$$ = 
     CreateUUID[]),
    UnsavedVariables:>{TypeSystem`NestedGrid`PackagePrivate`$outputID$$}],
   Deploy,
   DefaultBaseStyle->"Deploy"],
  Dataset`InterpretDataset[1],
  Editable->False,
  SelectWithContents->True,
  Selectable->False]], "Output",
 CellChangeTimes->{{3.841077077691928*^9, 3.841077083979616*^9}, 
   3.841078427829645*^9, 3.84107847132156*^9, 3.8410785443757153`*^9, 
   3.8410790783342733`*^9, 3.841088588325914*^9, 3.842904833582313*^9, {
   3.8429048951789093`*^9, 3.842904908234733*^9}, 3.843147062927072*^9, 
   3.843147286895393*^9, 3.8431473271900063`*^9, 3.85828200411369*^9, 
   3.858282070528533*^9, 3.858285724993862*^9},
 CellLabel->
  "Out[208]=",ExpressionUUID->"27c27dc5-0217-47aa-a955-0b7764ddd232"]
}, Open  ]],

Cell["QuantumBasis can be used for any quantum map:", "Text",
 CellChangeTimes->{{3.8582846740610743`*^9, 3.8582846816611347`*^9}, {
  3.8582847395525837`*^9, 
  3.858284761225671*^9}},ExpressionUUID->"7de9f940-bf5f-412d-ad64-\
d0720df01df5"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"QuantumBasis", "[", 
   RowBox[{
    RowBox[{"QuditBasis", "@", "\"\<X\>\""}], ",", 
    RowBox[{"QuditBasis", "[", 
     RowBox[{"{", 
      RowBox[{"\"\<Y\>\"", ",", "\"\<Z\>\""}], "}"}], "]"}], ",", 
    RowBox[{"\"\<Label\>\"", "->", "\"\<quantum map\>\""}]}], "]"}], "[", 
  "\"\<Diagram\>\"", "]"}]], "Input",
 CellChangeTimes->{{3.8582846447832336`*^9, 3.858284669396928*^9}},
 CellLabel->
  "In[209]:=",ExpressionUUID->"20e0fb4d-e1b5-470e-a3b1-b5a3cb5305ed"],

Cell[BoxData[
 GraphicsBox[{
   GeometricTransformationBox[{
     LineBox[{{0, 0}, {2, 0}, {2, 1}, {0, 1}, {0, 0}}], 
     {PointSize[
      0.2 Dynamic[
        3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
          Magnification])]], PointBox[{{1, 1}}], 
      PointBox[NCache[{{Rational[2, 3], 0}, {Rational[4, 3], 0}}, {{
         0.6666666666666666, 0}, {1.3333333333333333`, 0}}]]}, 
     {Arrowheads[
      0.002 Dynamic[
        3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
          Magnification])]], 
      ArrowBox[NCache[{{1, 1}, {1, Rational[6, 5]}}, {{1, 1}, {1, 1.2}}]], {
       ArrowBox[
        NCache[{{Rational[2, 3], Rational[-1, 5]}, {Rational[2, 3], 0}}, {{
          0.6666666666666666, -0.2}, {0.6666666666666666, 0}}]], 
       ArrowBox[
        NCache[{{Rational[4, 3], Rational[-1, 5]}, {Rational[4, 3], 0}}, {{
          1.3333333333333333`, -0.2}, {1.3333333333333333`, 0}}]]}}}, {{{1, 
     0}, {0, 1}}, {0, 0}}], InsetBox[
    StyleBox["\<\"quantum map\"\>",
     StripOnInput->False,
     FontFamily->"Times",
     FontSize->24], NCache[{1, Rational[1, 2]}, {1, 0.5}]]}]], "Output",
 CellChangeTimes->{{3.858284651905633*^9, 3.858284669665227*^9}, 
   3.858285725418104*^9},
 CellLabel->
  "Out[209]=",ExpressionUUID->"d4317739-9743-4e90-b125-65bec63e3def"]
}, Open  ]],

Cell["Empty basis can\[CloseCurlyQuote]t be used to construct anything:", \
"Text",
 CellChangeTimes->{{3.858285619662304*^9, 3.858285632501822*^9}, {
  3.8582856901084414`*^9, 
  3.858285690277923*^9}},ExpressionUUID->"e7767944-4b85-40ce-878c-\
66fada96b03f"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"QuantumBasis", "[", "0", "]"}], "[", "\"\<Association\>\"", 
  "]"}]], "Input",
 CellChangeTimes->{{3.858285594897498*^9, 3.8582855949873867`*^9}},
 CellLabel->
  "In[210]:=",ExpressionUUID->"b7087cb8-8b21-4407-b492-7b951ff6eaf6"],

Cell[BoxData[
 RowBox[{"\[LeftAssociation]", "\[RightAssociation]"}]], "Output",
 CellChangeTimes->{3.858285595378366*^9, 3.858285725607766*^9},
 CellLabel->
  "Out[210]=",ExpressionUUID->"7df52b91-3822-4824-90d0-a0b2a101d168"]
}, Open  ]],

Cell["One dimensional basis can represent a number:", "Text",
 CellChangeTimes->{{3.858285634852887*^9, 
  3.8582856628069553`*^9}},ExpressionUUID->"6a4a1ce9-5f82-4166-92b7-\
91c8025531ce"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"QuantumBasis", "[", "1", "]"}], "[", "\"\<Association\>\"", 
  "]"}]], "Input",
 CellChangeTimes->{{3.8582855345000973`*^9, 3.8582855915659237`*^9}},
 CellLabel->
  "In[211]:=",ExpressionUUID->"a87ad644-70be-483b-af73-4a01d7d04761"],

Cell[BoxData[
 RowBox[{"\[LeftAssociation]", 
  RowBox[{
   InterpretationBox["\[ScriptOne]",
    Wolfram`QuantumFramework`QuditName[\[FormalCapitalI], "Dual" -> False]], 
   "\[Rule]", "1"}], "\[RightAssociation]"}]], "Output",
 CellChangeTimes->{{3.858285535751997*^9, 3.8582855918447742`*^9}, 
   3.858285725637239*^9},
 CellLabel->
  "Out[211]=",ExpressionUUID->"9113c70f-0cda-40b8-aca0-d9a193d21a5f"]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["QuantumState", "Section",
 CellChangeTimes->{{3.841079415554228*^9, 
  3.8410794167073927`*^9}},ExpressionUUID->"f0153f13-e177-40a2-b070-\
bf3ebe94767f"],

Cell["\<\
QuantumState is a QuantumBasis with amplitudes (or a density matrix).\
\>", "Text",
 CellChangeTimes->{{3.8410760483643*^9, 3.841076076750966*^9}, {
   3.8410791984174633`*^9, 3.84107922358619*^9}, 3.858282029991127*^9, {
   3.858282150204809*^9, 3.858282177291895*^9}, {3.8582831386784067`*^9, 
   3.8582831387632236`*^9}},ExpressionUUID->"fd029149-7f8d-4cc2-8f07-\
403a58b12305"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"List", "@@", 
  RowBox[{"QuantumState", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"1", ",", "2"}], "}"}], ",", 
    RowBox[{"QuantumBasis", "[", "\"\<Y\>\"", "]"}]}], "]"}]}]], "Input",
 CellChangeTimes->{3.858283220220976*^9},
 CellLabel->
  "In[212]:=",ExpressionUUID->"12411776-6d6d-4ebc-b2ae-39e598fc1574"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   InterpretationBox[
    RowBox[{
     TagBox["SparseArray",
      "SummaryHead"], "[", 
     DynamicModuleBox[{Typeset`open$$ = False, Typeset`embedState$$ = 
      "Ready"}, 
      TemplateBox[{
        PaneSelectorBox[{False -> GridBox[{{
              PaneBox[
               ButtonBox[
                DynamicBox[
                 FEPrivate`FrontEndResource["FEBitmaps", "SummaryBoxOpener"]],
                 ButtonFunction :> (Typeset`open$$ = True), Appearance -> 
                None, BaseStyle -> {}, Evaluator -> Automatic, Method -> 
                "Preemptive"], Alignment -> {Center, Center}, ImageSize -> 
               Dynamic[{
                 Automatic, 
                  3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                   Magnification])}]], 
              GraphicsBox[
               
               RasterBox[{{{0.282325, 0.661868, 0.973082}, {0.772061, 0.92462,
                 0.998703}}}, {{0, 0}, {2, 1}}, {0, 1}], AspectRatio -> 1, 
               Axes -> False, Frame -> False, FrameLabel -> {None, None}, 
               FrameStyle -> Directive[
                 Opacity[0.5], 
                 Thickness[Tiny], 
                 RGBColor[0.368417, 0.506779, 0.709798]], 
               FrameTicks -> {{None, None}, {None, None}}, GridLinesStyle -> 
               Directive[
                 GrayLevel[0.5, 0.4]], ImageSize -> 
               Dynamic[{
                 Automatic, 
                  3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                   Magnification])}], 
               Method -> {
                "AxisPadding" -> Scaled[0.02], "DefaultBoundaryStyle" -> 
                 Automatic, 
                 "DefaultGraphicsInteraction" -> {
                  "Version" -> 1.2, "TrackMousePosition" -> {True, False}, 
                   "Effects" -> {
                    "Highlight" -> {"ratio" -> 2}, 
                    "HighlightPoint" -> {"ratio" -> 2}, 
                    "Droplines" -> {
                    "freeformCursorMode" -> True, 
                    "placement" -> {"x" -> "All", "y" -> "None"}}}}, 
                 "DefaultPlotStyle" -> Automatic, "DomainPadding" -> 
                 Scaled[0.02], "RangePadding" -> Scaled[0.05]}], 
              GridBox[{{
                 RowBox[{
                   TagBox[
                   "\"Specified elements: \"", "SummaryItemAnnotation"], 
                   "\[InvisibleSpace]", 
                   TagBox["2", "SummaryItem"]}]}, {
                 RowBox[{
                   TagBox["\"Dimensions: \"", "SummaryItemAnnotation"], 
                   "\[InvisibleSpace]", 
                   TagBox[
                    RowBox[{"{", "2", "}"}], "SummaryItem"]}]}}, 
               GridBoxAlignment -> {
                "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, AutoDelete -> 
               False, GridBoxItemSize -> {
                "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
               GridBoxSpacings -> {
                "Columns" -> {{2}}, "Rows" -> {{Automatic}}}, 
               BaseStyle -> {
                ShowStringCharacters -> False, NumberMarks -> False, 
                 PrintPrecision -> 3, ShowSyntaxStyles -> False}]}}, 
            GridBoxAlignment -> {"Columns" -> {{Left}}, "Rows" -> {{Top}}}, 
            AutoDelete -> False, 
            GridBoxItemSize -> {
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
            BaselinePosition -> {1, 1}], True -> GridBox[{{
              PaneBox[
               ButtonBox[
                DynamicBox[
                 FEPrivate`FrontEndResource["FEBitmaps", "SummaryBoxCloser"]],
                 ButtonFunction :> (Typeset`open$$ = False), Appearance -> 
                None, BaseStyle -> {}, Evaluator -> Automatic, Method -> 
                "Preemptive"], Alignment -> {Center, Center}, ImageSize -> 
               Dynamic[{
                 Automatic, 
                  3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                   Magnification])}]], 
              GraphicsBox[
               
               RasterBox[{{{0.282325, 0.661868, 0.973082}, {0.772061, 0.92462,
                 0.998703}}}, {{0, 0}, {2, 1}}, {0, 1}], AspectRatio -> 1, 
               Axes -> False, Frame -> False, FrameLabel -> {None, None}, 
               FrameStyle -> Directive[
                 Opacity[0.5], 
                 Thickness[Tiny], 
                 RGBColor[0.368417, 0.506779, 0.709798]], 
               FrameTicks -> {{None, None}, {None, None}}, GridLinesStyle -> 
               Directive[
                 GrayLevel[0.5, 0.4]], ImageSize -> 
               Dynamic[{
                 Automatic, 
                  3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                   Magnification])}], 
               Method -> {
                "AxisPadding" -> Scaled[0.02], "DefaultBoundaryStyle" -> 
                 Automatic, 
                 "DefaultGraphicsInteraction" -> {
                  "Version" -> 1.2, "TrackMousePosition" -> {True, False}, 
                   "Effects" -> {
                    "Highlight" -> {"ratio" -> 2}, 
                    "HighlightPoint" -> {"ratio" -> 2}, 
                    "Droplines" -> {
                    "freeformCursorMode" -> True, 
                    "placement" -> {"x" -> "All", "y" -> "None"}}}}, 
                 "DefaultPlotStyle" -> Automatic, "DomainPadding" -> 
                 Scaled[0.02], "RangePadding" -> Scaled[0.05]}], 
              GridBox[{{
                 RowBox[{
                   TagBox[
                   "\"Specified elements: \"", "SummaryItemAnnotation"], 
                   "\[InvisibleSpace]", 
                   TagBox["2", "SummaryItem"]}]}, {
                 RowBox[{
                   TagBox["\"Dimensions: \"", "SummaryItemAnnotation"], 
                   "\[InvisibleSpace]", 
                   TagBox[
                    RowBox[{"{", "2", "}"}], "SummaryItem"]}]}, {
                 RowBox[{
                   TagBox["\"Default: \"", "SummaryItemAnnotation"], 
                   "\[InvisibleSpace]", 
                   TagBox["0", "SummaryItem"]}]}, {
                 RowBox[{
                   TagBox["\"Density: \"", "SummaryItemAnnotation"], 
                   "\[InvisibleSpace]", 
                   TagBox["1.`", "SummaryItem"]}]}, {
                 RowBox[{
                   TagBox["\"Elements:\"", "SummaryItemAnnotation"], 
                   "\[InvisibleSpace]", 
                   TagBox["\"\"", "SummaryItem"]}]}, {
                 TagBox[
                  TagBox[
                   GridBox[{{
                    RowBox[{
                    RowBox[{"{", "1", "}"}], "\[Rule]", 
                    StyleBox[
                    PaneBox[
                    "1", ContentPadding -> False, FrameMargins -> 0, 
                    StripOnInput -> True, BaselinePosition -> Baseline, 
                    ImageSize -> {{1, 300}, Automatic}], LineBreakWithin -> 
                    False]}]}, {
                    RowBox[{
                    RowBox[{"{", "2", "}"}], "\[Rule]", 
                    StyleBox[
                    PaneBox[
                    "2", ContentPadding -> False, FrameMargins -> 0, 
                    StripOnInput -> True, BaselinePosition -> Baseline, 
                    ImageSize -> {{1, 300}, Automatic}], LineBreakWithin -> 
                    False]}]}}, GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                   "Column"], "SummaryItem"]}}, 
               GridBoxAlignment -> {
                "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, AutoDelete -> 
               False, GridBoxItemSize -> {
                "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
               GridBoxSpacings -> {
                "Columns" -> {{2}}, "Rows" -> {{Automatic}}}, 
               BaseStyle -> {
                ShowStringCharacters -> False, NumberMarks -> False, 
                 PrintPrecision -> 3, ShowSyntaxStyles -> False}]}}, 
            GridBoxAlignment -> {"Columns" -> {{Left}}, "Rows" -> {{Top}}}, 
            AutoDelete -> False, 
            GridBoxItemSize -> {
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
            BaselinePosition -> {1, 1}]}, 
         Dynamic[Typeset`open$$], ImageSize -> Automatic]},
       "SummaryPanel"],
      DynamicModuleValues:>{}], "]"}],
    SparseArray[Automatic, {2}, 0, {1, {{0, 2}, {{1}, {2}}}, {1, 2}}],
    Editable->False,
    SelectWithContents->True,
    Selectable->False], ",", 
   InterpretationBox[
    RowBox[{
     TagBox["QuantumBasis",
      "SummaryHead"], "[", 
     DynamicModuleBox[{Typeset`open$$ = False, Typeset`embedState$$ = 
      "Ready"}, 
      TemplateBox[{
        PaneSelectorBox[{False -> GridBox[{{
              PaneBox[
               ButtonBox[
                DynamicBox[
                 FEPrivate`FrontEndResource["FEBitmaps", "SummaryBoxOpener"]],
                 ButtonFunction :> (Typeset`open$$ = True), Appearance -> 
                None, BaseStyle -> {}, Evaluator -> Automatic, Method -> 
                "Preemptive"], Alignment -> {Center, Center}, ImageSize -> 
               Dynamic[{
                 Automatic, 
                  3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                   Magnification])}]], 
              GraphicsBox[
               
               RasterBox[{{{1., 0.42, 0.}, {1., 0.42, 0.}}, {{1., 1., 1.}, {
                1., 1., 1.}}}, {{0, 0}, {2, 2}}, {0, 1}], Frame -> False, 
               FrameLabel -> {None, None}, 
               FrameTicks -> {{None, None}, {None, None}}, GridLinesStyle -> 
               Directive[
                 GrayLevel[0.5, 0.4]], ImageSize -> 
               Dynamic[{
                 Automatic, 
                  3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                   Magnification])}], 
               Method -> {
                "AxisPadding" -> Scaled[0.02], "DefaultBoundaryStyle" -> 
                 Automatic, 
                 "DefaultGraphicsInteraction" -> {
                  "Version" -> 1.2, "TrackMousePosition" -> {True, False}, 
                   "Effects" -> {
                    "Highlight" -> {"ratio" -> 2}, 
                    "HighlightPoint" -> {"ratio" -> 2}, 
                    "Droplines" -> {
                    "freeformCursorMode" -> True, 
                    "placement" -> {"x" -> "All", "y" -> "None"}}}}, 
                 "DefaultPlotStyle" -> Automatic, "DomainPadding" -> 
                 Scaled[0.02], "RangePadding" -> Scaled[0.05]}], 
              GridBox[{{
                 RowBox[{
                   TagBox["\"Picture: \"", "SummaryItemAnnotation"], 
                   "\[InvisibleSpace]", 
                   TagBox["\"Schr\[ODoubleDot]dinger\"", "SummaryItem"]}], 
                 RowBox[{
                   TagBox["\"Rank: \"", "SummaryItemAnnotation"], 
                   "\[InvisibleSpace]", 
                   TagBox["1", "SummaryItem"]}]}, {
                 RowBox[{
                   TagBox["\"Dimension: \"", "SummaryItemAnnotation"], 
                   "\[InvisibleSpace]", 
                   TagBox["2", "SummaryItem"]}], ""}}, 
               GridBoxAlignment -> {
                "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, AutoDelete -> 
               False, GridBoxItemSize -> {
                "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
               GridBoxSpacings -> {
                "Columns" -> {{2}}, "Rows" -> {{Automatic}}}, 
               BaseStyle -> {
                ShowStringCharacters -> False, NumberMarks -> False, 
                 PrintPrecision -> 3, ShowSyntaxStyles -> False}]}}, 
            GridBoxAlignment -> {"Columns" -> {{Left}}, "Rows" -> {{Top}}}, 
            AutoDelete -> False, 
            GridBoxItemSize -> {
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
            BaselinePosition -> {1, 1}], True -> GridBox[{{
              PaneBox[
               ButtonBox[
                DynamicBox[
                 FEPrivate`FrontEndResource["FEBitmaps", "SummaryBoxCloser"]],
                 ButtonFunction :> (Typeset`open$$ = False), Appearance -> 
                None, BaseStyle -> {}, Evaluator -> Automatic, Method -> 
                "Preemptive"], Alignment -> {Center, Center}, ImageSize -> 
               Dynamic[{
                 Automatic, 
                  3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                   Magnification])}]], 
              GraphicsBox[
               
               RasterBox[{{{1., 0.42, 0.}, {1., 0.42, 0.}}, {{1., 1., 1.}, {
                1., 1., 1.}}}, {{0, 0}, {2, 2}}, {0, 1}], Frame -> False, 
               FrameLabel -> {None, None}, 
               FrameTicks -> {{None, None}, {None, None}}, GridLinesStyle -> 
               Directive[
                 GrayLevel[0.5, 0.4]], ImageSize -> 
               Dynamic[{
                 Automatic, 
                  3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                   Magnification])}], 
               Method -> {
                "AxisPadding" -> Scaled[0.02], "DefaultBoundaryStyle" -> 
                 Automatic, 
                 "DefaultGraphicsInteraction" -> {
                  "Version" -> 1.2, "TrackMousePosition" -> {True, False}, 
                   "Effects" -> {
                    "Highlight" -> {"ratio" -> 2}, 
                    "HighlightPoint" -> {"ratio" -> 2}, 
                    "Droplines" -> {
                    "freeformCursorMode" -> True, 
                    "placement" -> {"x" -> "All", "y" -> "None"}}}}, 
                 "DefaultPlotStyle" -> Automatic, "DomainPadding" -> 
                 Scaled[0.02], "RangePadding" -> Scaled[0.05]}], 
              GridBox[{{
                 RowBox[{
                   TagBox["\"Picture: \"", "SummaryItemAnnotation"], 
                   "\[InvisibleSpace]", 
                   TagBox["\"Schr\[ODoubleDot]dinger\"", "SummaryItem"]}], 
                 RowBox[{
                   TagBox["\"Rank: \"", "SummaryItemAnnotation"], 
                   "\[InvisibleSpace]", 
                   TagBox["1", "SummaryItem"]}]}, {
                 RowBox[{
                   TagBox["\"Dimension: \"", "SummaryItemAnnotation"], 
                   "\[InvisibleSpace]", 
                   TagBox["2", "SummaryItem"]}], ""}, {
                 RowBox[{
                   TagBox["\"Qudits: \"", "SummaryItemAnnotation"], 
                   "\[InvisibleSpace]", 
                   TagBox[
                    RowBox[{"{", 
                    RowBox[{"1", ",", "0"}], "}"}], "SummaryItem"]}], ""}, {
                 RowBox[{
                   TagBox["\"Dimensions: \"", "SummaryItemAnnotation"], 
                   "\[InvisibleSpace]", 
                   TagBox[
                    RowBox[{"{", "2", "}"}], "SummaryItem"]}], ""}, {
                 RowBox[{
                   TagBox[
                   "\"Element dimensions: \"", "SummaryItemAnnotation"], 
                   "\[InvisibleSpace]", 
                   TagBox[
                    RowBox[{"{", "2", "}"}], "SummaryItem"]}], ""}}, 
               GridBoxAlignment -> {
                "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, AutoDelete -> 
               False, GridBoxItemSize -> {
                "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
               GridBoxSpacings -> {
                "Columns" -> {{2}}, "Rows" -> {{Automatic}}}, 
               BaseStyle -> {
                ShowStringCharacters -> False, NumberMarks -> False, 
                 PrintPrecision -> 3, ShowSyntaxStyles -> False}]}}, 
            GridBoxAlignment -> {"Columns" -> {{Left}}, "Rows" -> {{Top}}}, 
            AutoDelete -> False, 
            GridBoxItemSize -> {
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
            BaselinePosition -> {1, 1}]}, 
         Dynamic[Typeset`open$$], ImageSize -> Automatic]},
       "SummaryPanel"],
      DynamicModuleValues:>{}], "]"}],
    Wolfram`QuantumFramework`QuantumBasis[<|
     "Input" -> Wolfram`QuantumFramework`QuditBasis[<|{
           
           Wolfram`QuantumFramework`QuditName[\[FormalCapitalI], "Dual" -> 
            False], 1} -> 1|>], "Output" -> 
      Wolfram`QuantumFramework`QuditBasis[<|{
           Wolfram`QuantumFramework`QuditName[
            Subscript["\[Psi]", 
             Subscript["y", "-"]], "Dual" -> False], 1} -> 
         SparseArray[
          Automatic, {2}, 0, {
           1, {{0, 2}, {{1}, {2}}}, {
            Complex[0, 1] 2^Rational[-1, 2], 2^Rational[-1, 2]}}], {
           Wolfram`QuantumFramework`QuditName[
            Subscript["\[Psi]", 
             Subscript["y", "+"]], "Dual" -> False], 1} -> 
         SparseArray[
          Automatic, {2}, 0, {
           1, {{0, 2}, {{1}, {2}}}, {
            Complex[0, -1] 2^Rational[-1, 2], 2^Rational[-1, 2]}}]|>], 
      "Picture" -> "Schr\[ODoubleDot]dinger", "Label" -> "Y", 
      "ParameterSpec" -> {}|>],
    Editable->False,
    SelectWithContents->True,
    Selectable->False]}], "}"}]], "Output",
 CellChangeTimes->{3.858283220817017*^9, 3.8582857256838417`*^9},
 CellLabel->
  "Out[212]=",ExpressionUUID->"b440d24c-6a75-4f55-8118-bc518af54537"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{"QuantumState", "[", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{"1", ",", "2"}], "}"}], ",", 
   RowBox[{"QuantumBasis", "[", "\"\<Y\>\"", "]"}]}], 
  "]"}], "\[IndentingNewLine]", 
 RowBox[{"Dataset", "@", 
  RowBox[{"AssociationMap", "[", 
   RowBox[{"%", ",", 
    RowBox[{"%", "[", "\"\<Properties\>\"", "]"}]}], "]"}]}]}], "Input",
 CellChangeTimes->{{3.841076077824029*^9, 3.841076143956826*^9}, {
  3.841076390769063*^9, 3.841076392761084*^9}, {3.841076503658045*^9, 
  3.841076504112322*^9}, {3.841077140957314*^9, 3.8410771429233513`*^9}, {
  3.858282077627542*^9, 3.858282083058608*^9}},
 CellLabel->
  "In[213]:=",ExpressionUUID->"131466f4-367a-421f-96c3-6f465788af8a"],

Cell[BoxData[
 InterpretationBox[
  RowBox[{
   TagBox["QuantumState",
    "SummaryHead"], "[", 
   DynamicModuleBox[{Typeset`open$$ = False, Typeset`embedState$$ = "Ready"}, 
    
    TemplateBox[{
      PaneSelectorBox[{False -> GridBox[{{
            PaneBox[
             ButtonBox[
              DynamicBox[
               FEPrivate`FrontEndResource["FEBitmaps", "SummaryBoxOpener"]], 
              ButtonFunction :> (Typeset`open$$ = True), Appearance -> None, 
              BaseStyle -> {}, Evaluator -> Automatic, Method -> 
              "Preemptive"], Alignment -> {Center, Center}, ImageSize -> 
             Dynamic[{
               Automatic, 
                3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                 Magnification])}]], 
            GraphicsBox[
             
             RasterBox[{{{1., 1., 1.}, {1., 0.42, 0.}}, {{0.9169269362290782, 
              0.8045326388165552, 0.498957344678712}, {1., 1., 1.}}}, {{0, 
              0}, {2, 2}}, {0, 1}], Frame -> False, 
             FrameLabel -> {None, None}, 
             FrameTicks -> {{None, None}, {None, None}}, GridLinesStyle -> 
             Directive[
               GrayLevel[0.5, 0.4]], ImageSize -> 
             Dynamic[{
               Automatic, 
                3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                 Magnification])}], 
             Method -> {
              "AxisPadding" -> Scaled[0.02], "DefaultBoundaryStyle" -> 
               Automatic, 
               "DefaultGraphicsInteraction" -> {
                "Version" -> 1.2, "TrackMousePosition" -> {True, False}, 
                 "Effects" -> {
                  "Highlight" -> {"ratio" -> 2}, 
                   "HighlightPoint" -> {"ratio" -> 2}, 
                   "Droplines" -> {
                    "freeformCursorMode" -> True, 
                    "placement" -> {"x" -> "All", "y" -> "None"}}}}, 
               "DefaultPlotStyle" -> Automatic, "DomainPadding" -> 
               Scaled[0.02], "RangePadding" -> Scaled[0.05]}], 
            GridBox[{{
               RowBox[{
                 TagBox["\"StateType: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox["\"Vector\"", "SummaryItem"]}], 
               RowBox[{
                 TagBox["\"Qudits: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox["1", "SummaryItem"]}]}, {
               RowBox[{
                 TagBox["\"Type: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox["\"Pure\"", "SummaryItem"]}], 
               RowBox[{
                 TagBox["\"Dimension: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox["2", "SummaryItem"]}]}, {
               RowBox[{
                 TagBox["\"Picture: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox["\"Schr\[ODoubleDot]dinger\"", "SummaryItem"]}], ""}},
              GridBoxAlignment -> {
              "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, AutoDelete -> 
             False, GridBoxItemSize -> {
              "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
             GridBoxSpacings -> {"Columns" -> {{2}}, "Rows" -> {{Automatic}}},
              BaseStyle -> {
              ShowStringCharacters -> False, NumberMarks -> False, 
               PrintPrecision -> 3, ShowSyntaxStyles -> False}]}}, 
          GridBoxAlignment -> {"Columns" -> {{Left}}, "Rows" -> {{Top}}}, 
          AutoDelete -> False, 
          GridBoxItemSize -> {
           "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
          BaselinePosition -> {1, 1}], True -> GridBox[{{
            PaneBox[
             ButtonBox[
              DynamicBox[
               FEPrivate`FrontEndResource["FEBitmaps", "SummaryBoxCloser"]], 
              ButtonFunction :> (Typeset`open$$ = False), Appearance -> None, 
              BaseStyle -> {}, Evaluator -> Automatic, Method -> 
              "Preemptive"], Alignment -> {Center, Center}, ImageSize -> 
             Dynamic[{
               Automatic, 
                3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                 Magnification])}]], 
            GraphicsBox[
             
             RasterBox[{{{1., 1., 1.}, {1., 0.42, 0.}}, {{0.9169269362290782, 
              0.8045326388165552, 0.498957344678712}, {1., 1., 1.}}}, {{0, 
              0}, {2, 2}}, {0, 1}], Frame -> False, 
             FrameLabel -> {None, None}, 
             FrameTicks -> {{None, None}, {None, None}}, GridLinesStyle -> 
             Directive[
               GrayLevel[0.5, 0.4]], ImageSize -> 
             Dynamic[{
               Automatic, 
                3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                 Magnification])}], 
             Method -> {
              "AxisPadding" -> Scaled[0.02], "DefaultBoundaryStyle" -> 
               Automatic, 
               "DefaultGraphicsInteraction" -> {
                "Version" -> 1.2, "TrackMousePosition" -> {True, False}, 
                 "Effects" -> {
                  "Highlight" -> {"ratio" -> 2}, 
                   "HighlightPoint" -> {"ratio" -> 2}, 
                   "Droplines" -> {
                    "freeformCursorMode" -> True, 
                    "placement" -> {"x" -> "All", "y" -> "None"}}}}, 
               "DefaultPlotStyle" -> Automatic, "DomainPadding" -> 
               Scaled[0.02], "RangePadding" -> Scaled[0.05]}], 
            GridBox[{{
               RowBox[{
                 TagBox["\"StateType: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox["\"Vector\"", "SummaryItem"]}], 
               RowBox[{
                 TagBox["\"Qudits: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox["1", "SummaryItem"]}]}, {
               RowBox[{
                 TagBox["\"Type: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox["\"Pure\"", "SummaryItem"]}], 
               RowBox[{
                 TagBox["\"Dimension: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox["2", "SummaryItem"]}]}, {
               RowBox[{
                 TagBox["\"Picture: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox["\"Schr\[ODoubleDot]dinger\"", "SummaryItem"]}], ""}, {
               RowBox[{
                 TagBox["\"Purity: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox["1.`", "SummaryItem"]}], ""}, {
               RowBox[{
                 TagBox["\"Von Neumann Entropy: \"", "SummaryItemAnnotation"],
                  "\[InvisibleSpace]", 
                 TagBox[
                  
                  TemplateBox[{"0.`", "\"b\"", "bits", "\"Bits\""}, 
                   "Quantity", SyntaxForm -> Mod], "SummaryItem"]}], ""}, {
               RowBox[{
                 TagBox["\"Dimensions: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox[
                  RowBox[{"{", "2", "}"}], "SummaryItem"]}], ""}, {
               RowBox[{
                 TagBox["\"ParameterArity: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox["0", "SummaryItem"]}], 
               RowBox[{
                 TagBox["\"Parameters: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox[
                  RowBox[{"{", "}"}], "SummaryItem"]}]}}, 
             GridBoxAlignment -> {
              "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, AutoDelete -> 
             False, GridBoxItemSize -> {
              "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
             GridBoxSpacings -> {"Columns" -> {{2}}, "Rows" -> {{Automatic}}},
              BaseStyle -> {
              ShowStringCharacters -> False, NumberMarks -> False, 
               PrintPrecision -> 3, ShowSyntaxStyles -> False}]}}, 
          GridBoxAlignment -> {"Columns" -> {{Left}}, "Rows" -> {{Top}}}, 
          AutoDelete -> False, 
          GridBoxItemSize -> {
           "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
          BaselinePosition -> {1, 1}]}, 
       Dynamic[Typeset`open$$], ImageSize -> Automatic]},
     "SummaryPanel"],
    DynamicModuleValues:>{}], "]"}],
  Wolfram`QuantumFramework`QuantumState[
   SparseArray[Automatic, {2}, 0, {1, {{0, 2}, {{1}, {2}}}, {1, 2}}], 
   Wolfram`QuantumFramework`QuantumBasis[<|
    "Input" -> Wolfram`QuantumFramework`QuditBasis[<|{
          
          Wolfram`QuantumFramework`QuditName[\[FormalCapitalI], "Dual" -> 
           False], 1} -> 1|>], "Output" -> 
     Wolfram`QuantumFramework`QuditBasis[<|{
          Wolfram`QuantumFramework`QuditName[
           Subscript["\[Psi]", 
            Subscript["y", "-"]], "Dual" -> False], 1} -> 
        SparseArray[
         Automatic, {2}, 0, {
          1, {{0, 2}, {{1}, {2}}}, {
           Complex[0, 1] 2^Rational[-1, 2], 2^Rational[-1, 2]}}], {
          Wolfram`QuantumFramework`QuditName[
           Subscript["\[Psi]", 
            Subscript["y", "+"]], "Dual" -> False], 1} -> 
        SparseArray[
         Automatic, {2}, 0, {
          1, {{0, 2}, {{1}, {2}}}, {
           Complex[0, -1] 2^Rational[-1, 2], 2^Rational[-1, 2]}}]|>], 
     "Picture" -> "Schr\[ODoubleDot]dinger", "Label" -> "Y", 
     "ParameterSpec" -> {}|>]],
  Editable->False,
  SelectWithContents->True,
  Selectable->False]], "Output",
 CellChangeTimes->{{3.841076084351177*^9, 3.841076144251052*^9}, 
   3.8410763931248913`*^9, 3.841076504810568*^9, 3.841076559537348*^9, 
   3.841077048790271*^9, 3.8410771432241707`*^9, 3.8410784302177773`*^9, 
   3.841078471539156*^9, 3.8410785445769587`*^9, 3.84107907852172*^9, 
   3.841088588560381*^9, 3.8429048529094353`*^9, 3.8431470633247547`*^9, 
   3.843147233800486*^9, 3.843147330350346*^9, 3.85828203229874*^9, 
   3.8582820837222853`*^9, 3.858285725855528*^9},
 CellLabel->
  "Out[213]=",ExpressionUUID->"e90b8728-4596-4841-a9ef-22fa47faf960"],

Cell[BoxData[
 TagBox[
  TagBox[
   DynamicModuleBox[{TypeSystem`NestedGrid`PackagePrivate`$state$$ = <|
    "InitialData" -> <|"Amplitudes" -> <|Wolfram`QuantumFramework`QuditName[
           Subscript["\[Psi]", 
            Subscript["y", "-"]], "Dual" -> False] -> 1, 
         Wolfram`QuantumFramework`QuditName[
           Subscript["\[Psi]", 
            Subscript["y", "+"]], "Dual" -> False] -> 2|>, 
       "Association" -> <|Wolfram`QuantumFramework`QuditName[
           Subscript["\[Psi]", 
            Subscript["y", "-"]], "Dual" -> False] -> 
         SparseArray[
          Automatic, {2}, 0, {
           1, {{0, 2}, {{1}, {2}}}, {
            Complex[0, 1] 2^Rational[-1, 2], 2^Rational[-1, 2]}}], 
         Wolfram`QuantumFramework`QuditName[
           Subscript["\[Psi]", 
            Subscript["y", "+"]], "Dual" -> False] -> 
         SparseArray[
          Automatic, {2}, 0, {
           1, {{0, 2}, {{1}, {2}}}, {
            Complex[0, -1] 2^Rational[-1, 2], 2^Rational[-1, 2]}}]|>, "Basis" -> 
       Wolfram`QuantumFramework`QuantumBasis[<|
         "Input" -> Wolfram`QuantumFramework`QuditBasis[<|{
               
               Wolfram`QuantumFramework`QuditName[\[FormalCapitalI], "Dual" -> 
                False], 1} -> 1|>], "Output" -> 
          Wolfram`QuantumFramework`QuditBasis[<|{
               Wolfram`QuantumFramework`QuditName[
                Subscript["\[Psi]", 
                 Subscript["y", "-"]], "Dual" -> False], 1} -> 
             SparseArray[
              Automatic, {2}, 0, {
               1, {{0, 2}, {{1}, {2}}}, {
                Complex[0, 1] 2^Rational[-1, 2], 2^Rational[-1, 2]}}], {
               Wolfram`QuantumFramework`QuditName[
                Subscript["\[Psi]", 
                 Subscript["y", "+"]], "Dual" -> False], 1} -> 
             SparseArray[
              Automatic, {2}, 0, {
               1, {{0, 2}, {{1}, {2}}}, {
                Complex[0, -1] 2^Rational[-1, 2], 2^Rational[-1, 2]}}]|>], 
          "Picture" -> "Schr\[ODoubleDot]dinger", "Label" -> "Y", 
          "ParameterSpec" -> {}|>], "BlochCartesianCoordinates" -> {0, 
         Sin[2 ArcCos[10^Rational[-1, 2]]], 
         Cos[2 ArcCos[10^Rational[-1, 2]]]}, "BlochPlot" -> 
       Graphics3D[{{{{{}, {}, 
             Annotation[{
               AbsoluteThickness[2], 
               GrayLevel[0], 
               Thickness[Tiny], 
               Line[CompressedData["
1:eJxN2Xc4V+//B3CjQkNWJZKUtCRJSuu2SlY0UEJGipKREpGMrGxvtIxSycrM
HrcZZe/svd/eJ9n7d77X9fuc+7z/cV2P61znfZz7db/u5+t6CxiYXzNioKOj
U6Ono2PE/6av/e+Dgdn8jdX9J50u0P3/Z53ERt5l3N+ktUztotwB/3lGxiPT
v7hbBv+Qaww0JzxM++h0B+4X3p4QZUl4Rnhmr0pKIe6OMYXPIwNfEn5itCkq
HHfPjr2b3ue4EP5gsarOCve9Fk6bur67Ey5dJ1mxAXc+p4+V1wP9CL/DX/6u
ZBUD3uZNtdJFAYQf8VgKf457O92UsXoOhXAhygeVmhUMOI8rpT/6/oZws82i
F3iXMSBxccsN9YAIwktMFEreL2GgJnEqdHfpR8Kb5iqdOHBn2sBl51v4ifDB
Y+8+jy1gwJYixqif/ZlwuQEdt/Nz+Pe60nv9jvtGeLqfD/boLwZOwsU8W59E
wr/kLKxZYBgYvalRVSaXRLhab6miKQ0DN7R2/6wuQn6y/IW/EhUDX9+paNfm
JxN+7HtDf/wwBqDUp4Lw9FTCtao9xhc7MKAT4v5W5WsG4RfciiZ+FmLg9LYY
OT4HiK63W3jwDWJA5tC04DJDAeGKGpYNDnkY+Niyn3PwEvLTAeHGHFkYYLnh
OxBdjVztYkdaZSIGlg+OnJ3tLCS8K77WyvcDBgYubSkNWSomnJ9vuETJFL8+
SbHpvlg54XydJx72/KMB19y8ixsv1hLO4x6+dSh5AmQ8KxbPbW0hfHffBa0r
66hAKG53zWVqF+F9v7eqncwaBQNDrbdKmfsJT2ZU9LMXHgYCTLH0iuxDhOsu
pW8pYhgAi1ZlJ+PmR1A9p8juXfTpAfHbR6rfGIwTbkUZst0q2Abc1OGsw8kJ
wiVGnY21BOuBibNJ90IijfBQ+gGr8vX1oCtll+HzH8jH/eWZxIbrgPWpKoWp
TOT/TB4NzMXUAd/QzLPVhciH3jQqqx6rA93y+ygHG5Dv3/rW4YRkLWBZqRMw
m0bum9AFtwRVAom40ISTxzHCZY/oGI6qV4LuilT/AnHkV+gBXf6OSuBMv5gm
exr57Tsthtc+VIDM2nc/xQDyCRUj50ORvwH96/MjqcrIp9VhZHhCOaBRuZ9I
3yPdf05ikq24BNw+Zq70ioIccDkH3XMtAZMKkUdYQpCzB85ez5AvAZepdK5u
b5ELvDxooFhZDCY4+z8+CEPe4+CpebqpCMw4bn30Jwp5AUekh9RQAfipGNiu
kIn8eJzp2/qN2UCcnzHIsQm5/cOHTA6+WeCI8ZkQzhbk2tlGd/ZxZIEMCh9D
xB/Sc3I3S2nvzARJzy22RbQj9/BOZXp9IB0UHDLdI9eLnDlk53tMJgX8kCh3
EBhHntT16aX8z2Tg0uo+dYaKPD+1++AHhWSw/e9IpfIEcmWna+cl1JJAiox3
/C0MuQqXqvaL7HjQ6hPFzT2F3CFo0cho4gu42hT85MACcmNrSo5Z12fgva5X
rZHsR1QcHtdEgs7oFnGbReQvBE/ZPUj+CI7R2Dm/LiHfoeYorzD2FqxEXxWk
rCCP7da5x1kZAq4IOEjOk7yAnX1Py/cgsJwlrH5jFXnWpYclKpb+QMI6LmKS
5BqKEfmMUd5gzVa1WmwN+XU25nFDEw/wXZeP8SHJG7yD6gR6XoKv5xcdCkhO
mdA7WXDvGZg7N1naSXLT7RfYk9oeAdkDfRz/SH7wpltiQs0tEKtYZrRCcpXE
XQxcwlJw2jYsf43kF47bSPSs3IXBm+/yLZD8d7ZVidb8YxjXtct5lOT+PJq8
BZZ2cFmtklpL8k+HYrt9Z5zg7GVbnUSSv26c+HZazA0mih5tfEXysZ2iEh1m
r2H37JTaVZLHtNVMrn8SAD9bzGrXkN7nqnc43yz1HSy6yVB4h7Qu1bUXrAU2
hcLwerMHE8vIWRn//ZU7FA79LkbzPCb5OVb+2UyxT1BpgdVfj1QPJr1a8TFm
X+GTPI6GunnkM3n5zpqD3+HRT2aD6/+R1vddY9jG6QQYN2fAvm4S+TUmRlct
+iSon2Inv0Cq82LIeH1uazLExC83lJP2xfDuINVZ4VRYrcT7eHkEeftt8fcj
RhlQNUiDN70T+RnfU7p9/Rlw/NHjY1IdyL+uOig362fCcIq9XVEbcpHzNcLx
OlkwJaA+N5HUHzZBm4jN6jnwtv4xTLgO+Yiz5ANXGQiplqfMUoqQ+21jpUGv
Ypi5aLRtIgI5R59ZwpOrFfCnx+az0rLIpcZj95oFVcBM3qf7g0h9+OW73Pg7
LRXw40VR7q6zyN3Xe6Ud1qmE/E79PJqkPv/qrb2jrnEV7HyVnNopiPyoeflp
4Rc1MM5zTuTCOuQ/8wdUJ2rqoFNIf8qNXHS+jJ6JGErsa4JF6/vs93Eg/1U9
1giDOuFtrp79VnpUwvU1+/9ZCfXBWnePW1VaY4TbnPN+xGI/CG+dmhrgyxgm
vHEg19pQegRunmWqsegeIPxvmWBRa9MY7LxmdMjFrJdwxoV2WvggFdrXyged
cGgnPKRrB7aiQ4NtQ8qfykUaCY//ENOoY0iDG1tMx66xIrfU/LolzZgG3WsX
bVsmGtC+PlFipWBFgxzjNgE18ci/H/UeYvGgQY+HdFH2h5GP9dbxjSTSoJ6V
0+t6PBf855GlARxsCzSYM7ohJ2Ebyjlens8/aa7QIOB6XXVgtAbVT3SrZgg9
BoU6hFlGo5BnpgtKLLBg8F21l43aXuRYScSbGzwYvLq9TCGNuxrdR2gDVU8S
g6ZVfKrDjJVofxVUXim3wODuzbYHHzeWEW4nHHM4zwqDZy4/U0sNRv60bE0s
1hqDLdY73tM0kDdNn/hpao/Bp8mZtddbf6Jz81xtH8Udgx1tR5zaOksJX6xa
u20Sil9/uuzj0CDKh1CZmyZcgMHMhqHbNQMor7KcnNomVITBlwk9VdvvId/t
UaqxowSDWZLZ5hrD+YQH2BgK9JVh0PavRGH+aB7hl6eeVXHXYFD27BjrKVoO
4VN+XPwbOzAYJZEw1zuD8vO5D/voFjEM1jVvvrdKh/L50Mq3j3//YnCmxyyT
kxnlfKa8iLDuSQwy7x45vY81AZ2Drhvio6Yw+JtNf1CYJx7laqYBrtZZDB52
dLaePB5N+KDiIUrgHAZdm+l8G06h+aLmj5Kp3DwGy1/ScyedjyLcxdVRJGAB
X98njY9vKXwhfKfJE1r1EgZForfWWOmheWe/rSFQWsaguHLFJr3KcMIVSljH
IO6fbPt461pCCZe5KKwcuILfJ+cIQwTtLeEph00Z/+J+zL66bHkhBOWEWEau
S6sYLPPNY1VfH0x4y/yIVDvu64Dl2iwvmu90eTh1eNYw+HOnwXGXK74oV9ur
1OPnGdwUfU+Q3eg1Oo/aX390wn2R36LsrZ0bymPlsCwGd5HlNRbeQGe0L6L7
5H/jPkInlnH86gvCOzLG9/Tjvo7eQVPI4SnKCYxN16Zxz3zf9u2IxkPCb5m/
78RzADxZdUiEWU+T8IUUyUI8B0D7M1OHxJIB/M8rtVJWFv73vX+ZElVDDQlP
KVtPoeLOrMItfuaTJeHbj51yasF9SPTqrctPbAkff69Uno176zUO8ejPjoR/
H1UwDsG9l61U6qDPK8Idaw+mSuA+7bgQx63nTfhu5T26S/j7VzmYG1ws6E94
juUxg0zc1Y35Fqx3BhJu+rn5KS/ueViFUi1DCOG8T+2rXPE6OVN6iVmqKYzw
kIs3Zbfgrjhhr1zxK4JwDsE1Dh+8DsdfS9sd6P5I+DrHwwVPFzFYIPm+Orwh
kvDIG6Xq43j9l79g9lPPjSK80dcm8D6+vyRrdXcneicQXrx/U9EdfD9+HWy1
rP2QSHj67svTV/D9O8M/ZP5EPYnwrp5ZfY4J/P+lTFId7iYTfnVG+OHREQz6
s7nMaTqnEk6NtXT9gfeHYz+5pudzMwhXlInpZYEYLD46xWy9vYDwyXgZ4f5c
DO4PtFaqv4X8tso6j9RsDJqINk4dCkP+r8TmqWQ63pdOXzlcsa+Q8GDdNcm2
eLxvCLXyNogWEc781Y3O4i0Gz20tdh5RKCH8ougBOGmMwVrOPee+PisnPOCX
WOSQEQZ9GW4JNKchHzZjbWgwwN9/E9M83TRyx6NnBd5oY9BisfGcnMUvwnVO
LbwqVMUgY3af7Uvj34TfzIvdFSWO9/MfIU9yNCsJd/sa8OrHPA3KKCXEm3PX
Ei7jKsq16wEN3jiQInhpsAHVv7ZBul8NFa77HREj3tZO+M9Naps9c8ZgkK1o
WnFIL+GsR2q0pPVGoLD/55vaOQOEi8fairIZD0JRH/Z+oV/DhC/4cjC6KPZB
ll8azg3SY4RreFkr/KJ2wuMXpXdpKFAJf1v0vgWeaIYD+5ST5RhphBfNADXe
7c1QPjdoKocZ+a+I1XuW803wRcCegSOsyGMP//DaktcEy7rTf89wI2/3zLHf
cKkJrvqLex4XQR4cckmTXrMR1h9ljpfXRE5z119TeVoPqyK2Ugc/I4+u+lyd
r1AFr0ca3IkTwlCdnGge3sRUBaV/iW4IPIx8tLwtSa2kEt6nMhSYiyBXya8O
L7xQCV+PyxuzSSCPVuRgkD1RAfutZkyH5JCX8K/GNvL8gt4mytoDesh/psnu
zh4ogWybwXqBQOSvvoUY7v1UAkffbNs5EoQ87tXjglc6JVB9xU4g6g3yF+Nn
WU83F0NKavNmpjDkbAIp3LfLiuA+b5PT2t+Qj9tJ9X+OLoAiVulS17ORSy3k
NvvXZMIzvFNe5q3ID41o5p5Ry4Qymz+ozbchr77z3a+rNgOem2nfY9uBfP2B
Ageu+nT4WDm2z6Ab+aXDegvnGn/A/V+tepsHkGfFNp4NbUmCnJDTWYqG3K7b
c2RKMwlOnH3XooAh5x0Yo/NLSoQcVV9OKP1F3rsf6ytN/g6/7FRdPfkPud+6
Q7EdqTEw/O69lrgZ5Ese1TuH0j/B+3mtD7iXkMsGuRSKZnyEU9LLrJEkj/ZS
saWZRUCuNL/0fcvIradUbk2af4AnBzy3bl1BHsJjL2Ns8Q5eaE8rsCH5Q4pZ
3R+LN5DxVOeTNpLf3fahO9qSAldc8gddV5FnTqrrsjwOgIFfVSJrSP5x83fG
igFfGO/trM++hpzysIBiN/gaXqtW3qdE8oQUM9P9Q25QbTVs2J7kyedlfH4N
OUPJRJOEKJLXxPmM11W/gI8e412S5N+pHEostU/hjj+XZftIns+vZ2Ed+RCe
MFdhnyZ5/wRzeZSCJvQvTehdIfmiWYmMoqE0qL7/4Mcayff/cjF/pnEX6PW+
9Fwgea4Lb9imw4+Bd+5fvXGSV9XKLzQffA4eORecaSJ58KHgoSpOJzCRPb09
g+QvrjRirzg8gXdYbLMByVvLN/q3sPsAn6vS2cIk118/Zx3g4Q8mvO59pJHe
v/Bu1X817kHgwPvQJ1ok/y2WaLTJLRT4MgxfqCfVyT7xA3+d7cLBQwO6MF2S
1/bWBtme/ghaSnNV+kn19jyMZ6DzaCSgqw/51rSI3CDm+EUL7ijwvMxRSnce
+Tu2F+bu1O9gU0re4bVJ5P4Jc7bUoQRwy55WwkbyAGr8TsXeRDDXafODh7SP
BsRPcs2NJYHvdh5BO0j7cT7Mw8akOwVYp9vfSRtFriz66NqjsnSQ6Mqq60Ta
7z7goJmGXAaYGPB5xN2FfKeQ9LRkYQbwtZlu/kbqG5+Lo8qw7Exw/l9bZiKp
/ww5y8txJmSDjNGjxYYNyP9kT+rzU/IBj+7sZZ1S5Kyc6s/yjhSDEB6/4+8+
I8/hOh63ZFYMFqXSM5g/kfzabgPxlGKwBcipmocjtzoAtgSfLgGuVLc0gXek
52l6epH9YimQ1G2w4vVFDj3Xxw5ol4GDV0VMDK2RU4vXGK3cKwAXI/1lJSlS
X7ogocXSVwfqq14Hpmahc+pDXtqO5zdbwcjw+52nDSYIL18LcE926AHadyZO
1DwcJzxG1bju9kw/aDEsETBgHCWcLymyL6NnCFhf3KhYdWcI7a9inXsxUaOA
Ke/og1yBfpQzz30eVWscB26Ps0uL33QTvsvweXCP1wQ4lnEju4zyB9UV5ewV
kVEaWOn6U7bHF+UW/+TWFzITNLBFZnXayxx539AePtVJGrh7fwfflBryoevp
UVcXaOBMFpd9GifyOPaM30vMGOidWfPZLlaDcsXQtFO/EAa8dyXKMl6qIvyy
/XGzRW0MMB34ohBqjPJYX0dmBY8eBngvrbj4HkYe3FJvf8IQAxuk40KeU1Gu
a6fLalYxwYDwwSInKQvkljv8bwg9xcDGpRvcrs/KCP/h/OWPkRcGOqDnm9VX
pShXGB27z5OCgQ/W2tF8oSivTr8cL3T5gYHc9XoifBrIJy3prfrTMVA5WvFw
Bxvy5KWbTa45GODccNZg2QXl4WveIu4aJRjwfFIitK0ln3C1PT2bDzRioGFk
u3WwVTbqPxId9jNNGJBhtXm2NpSFnqeSTjK7BQNYDkbR10Ku4xFOEWrHAN+C
/y9W6UzCK4/UFL/uxcBV+j1/2FnTCdfWaohypGKg3jR8S08UmhcC7++LSJ3A
gOSflvbuncjpvO50dNAwsM+lyarNG80d/UnighyTGDB05tByGkTzi2iXYA/T
DAbKn4v8jbOPJbxRijJLxX0P+01/fYMYwle2maqWz2LAi4HxydbL0YTHx9wo
05/H19dwo646J5qbSrJMf/EvYcA6JliIEvOJcBthV2o67rMPzJW5/NBcZvlA
Tk1uGQPt/j8q94yGEx7av6VVegUDdfLvwmYc3hP+r/X3SjLuDF7clAaFtyiP
sQcZcK9iwO7ge4FYLjQ/XjKtGy/DvUc2Ils2NoBw6a1sbPh5D+4KKZ5lG/Ml
nH8Gs1LDXWzKINjv5WvCD1Tq7HDDXV6Ks2PDNjfU384qLCbjXtc0fP9ZrBM6
l/u+7GrEXZCje2/py+doHW/fc8DncZAV9dSAEovm8X8SbvxLuJ8KffQyM1af
8P9+Zxc87vO/39nz//P/A0flwpM=
                "]]}, 
              "Charting`Private`Tag$432144#1"], 
             Annotation[{
               AbsoluteThickness[2], 
               GrayLevel[0], 
               Thickness[Tiny], 
               Line[CompressedData["
1:eJxN2Xc8Vf8fB3BSoSGrEklKNCSVlNYHkaxooISMBiUjEpFCpGwXRXYlKzN7
fMwoe2fvfd1DVvbv/P74ns+5fz4f53Huuefz/rw/r/fj8uubXr+/jo6OTpWe
jo6BDn3S1/7/wcBc/qbq/lMOF//z9eKbeJZx/5DWMr2bchf85xkZT4wncTf3
/yHT6GtKeIjW0ZkO3C9+PCnKnPCc8Mxe5ZRC3F/HFL6I9H1F+MnRpqhQ3N91
7NsclONE+KPFqjoL3PeZOWzu+v6WcKk6iYqNuPM6hFfe8PUi/C5feWDJKgbc
TZtqpYp8CD/iuhT6Avd2umlDtRwK4YKUT8o1KxhwHFdMf/L9A+EmW0Qv8ixj
QFx26001nzDCS4zkS4KWMFCTOB28pzSc8Kb5Sgd23Bk3ctp6FkYQPngs8PPY
AgZsKCcY9LI/Ey4zoO1yYR7/Xmd6t99x3whP9/LAnkxi4BRczLPxSCT8S87C
mhmGgdFb6lVlMkmEq/aWKhjTMHBTc8/P6iLkp8pfeitSMfA1UFmrNj+Z8GPf
G/rjhzEAJSMKQtNTCdesdh1f7MCAdsDbj8pfMwi/6FI08bMQA2e2x8jw2kN0
ve3Co28QA9KHZgSW1xUQrqBu3mCfh4HwlgMcg5eRn/EJNWTPwgDzTc+B6Grk
qrIdaZWJGFg+OHJurrOQ8K74WgvPTxgYuLy1NGCpmHA+3uESRWP8+iSFpocn
ygnn7Tz5uOcvDTjn5slukq0lnPtt6Lah5AmQ8bxYLLe1hfA9fRc1r66nAsG4
PTVXqF2E9/3epnoqaxQMDLXeLmXqJzyZQcHLTngY8DPG0iuwDRGus5S+tWjd
AFi0KDsV928E1XPKpX2LHj0gfsdI9Qf9ccItKEM22wTagIsanLM/NUG4+Kij
oaZAPTByNOpeSKQRHkw/YFG+oR50pew2ePED+bi3HOOJ4TpgdbpKfjoT+V+j
JwPzMXXAMzjzXHUh8qEPjUoqx+pAt9x+ysEG5Ae2fbQ/KVELmFfq+E1mkHsm
dMGtfpVAPC444dRxjPBLR7QNRtUqQXdFqneBGPKr9IAuf2clcKRfTLt0Bvmd
uy0G1z9VgMzawJ8nAPIJ5fuOhyJ/A/r3F0ZSlZDPqMHI0IRyQKNyWUo9IN1/
XnyKtbgE3DlmqviGghxwOvo9cC4BU/KRR5gDkLP5zt3IkCsBV6h0zi4fkfO/
OqivUFkMJjj6wx+FIO+xf6dxpqkIzL7e9uRPFPIC9khXyaEC8FPBt10+E/nx
OOOP9ZuygRgfg9/rJuR2jx8z2ntmgSOGZwM4WpBrZd+/u589C2RQeNeF/SE9
J1ezpNauTJD0wmx7WDtyV/dUxvdC6aDgkPFemV7kTAG7gjDpFPBDvNyefxx5
UlfEK7mfycCp9e30WSry/NTug5/kk8GOyZFKpQnkSg7XL4irJoEUaff42xhy
ZU4VrZfZ8aDVI4qLaxq5vd/i/fsTX8C1Jn9LoQXkhlaUHJOuz8B9fa9qI9mP
KNs/rYkEndEtYtaLyF8KnLZ9lBwOjtHYOL4uId+p+lpOfuwjWIm+JkBZQR7b
rf2AozIAXOW3l/hH8gI2tr0t3/3Acpaw2s1V5FmXH5com3sDcau4sCmSqyuE
5TNEuYM1G5XqE2vIb7AyjRsYuYLvOrwMj0ne4O5Xx9/zCny9sGhfQHLKhO6p
ggfPwfz5qdJOkhvvuMiW1PYEXBLqY/9L8oO3XBITam6DWIWy+yskV07cvY5T
WBLO2ITkr5H84nFr8Z6Ve9B/yz3eBZL/zrYo0fz3FMZ17XYcJbk3twZPgbkt
XFatpNaSPOJQbLfnrAOcu2KjnUjy940T386ccIGJokcb35B8bJeoeIfJe9g9
N616jeQxbTVTGyx94GezOa0a0vtcdQ/lnaMGwqJb6wrvktaluvaiFf/mYBha
b/JoYhk5C8PfSZlDodBLNpr7KcnPs/DNZZ6IgIoLLN66pHow6tWMjzH5Ci3z
2Bvq/iGfzct31Bj8Do9GmAxu+Eta38DGkE0zCTBuXp9t/RTy64wMzpr0SVAv
xVZugVTnxZDhxvy2ZIiJXWkoJ+2L4T1+KnPCqbBakefp8gjy9jtiQSP3M6CK
nzpPeifys56ndfr6M+D4k6fHJDuQf121V2rWy4ShFDvbojbkIhdqhOO1s2CK
T31uIqk/bIbWYVvUcuAdvWOYcB3yEUeJR87SEFLNT5ukFCH32s5Cg27FMHPx
/vaJMOTsfSYJltcq4E/XLeekLiGXHI/dZ+JXATN5nh3wI/XhV4G58XdbKmC4
rChX1znkbze4pR3WroR8Dv3cGqQ+/+aj3WsdwyrY+SY5tVMA+VHT8jPCL2tg
3Lt5kYvrkf/MH1CZqKmDDgH9KTdz0fkyejZsKLGvCRZt6LPbz478V/VYI/Tr
hHc4ew5Y6FIJ19Po/2sh2Adr37rertIcI9z6vPsTZrtBePv09ABvxjDhjQO5
VgZSI3DLHGONWfcA4ZNlAkWtTWOw8/r9Q04mvYQzLLTTQgep0K5Wzu+kfTvh
AV07sRVtGmwbUoooF2kkPP5TTKO2AQ1uajEeu86C3Fzj69Y0Qxp8W7to0zLR
gPb1yRILeQsaZB+39qmJR/79qPsQsysNuj6mi7I7jHyst453JJEGdS0c3tfj
ueA/jyz1YWddoMGc0Y05CdtRznF79yJCY4UGAef7KqHRGlQ/0a0aAfQYFOwQ
Zh6NQp6ZLiC+wIzBwGo3a9V9yLGSsA83uTF4bUeZfBpXNbqP4EaqrgQGjat4
VYYZKtH+Kqi8Wm6GwT1bbA4+bSwj3FY45nCeBQbPXnmumuqP/FnZ2olYKwy2
WO0Moqkjb5o5+dPYDoPPkjNrb7T+ROfm+do+ylsMdrQdcWjrLCV8sWrtjlEw
fv2ZsvChQZQPoRIXTbgAg5kNQ3dqBlBeZT41vV2wCIOvEnqqdjxAvse1VH1n
CQazJLJN1YfzCfexNuDvK8OgzaR4Yf5oHuFXpp9XcdVg8NK5MZbTtBzCp704
+TZ1YDBKPGG+dxbl5/Of9tMtYhisa97yYJUO5fOhlW/hk5MYnO0xyeRgQjmf
MS8spHsKg0x7Rs7sZ0lA56DzxvioaQz+ZtUbFOaOR7macYCzdQ6Dh187Wk0d
jyZ8UOEQxXceg87NdJ4Np9F8UfNH0VjmHwbLX9FzJV2IItzJ+bWIzwK+vpaN
T2/LfyF8l5ElrXoJgyLR22osdNG8c8DGACguY1BMqWKzbmUo4fIlLGMQ9wib
Pp66lmDCpWWFlXxX8PvkHFkXRvtIeMphY4ZJ3I/ZVZctLwSgnBDLwHl5FYNl
nnksahv8CW/5NyLZjvt6YL42x4PmOx1uDm3uNQz+3KV/3OmqJ8rVdsr1+HkG
N0c/EGC7/x6dR+3vwx1wX+QzK/to64LyWDksi8FdZHmNmcfXEe2L6D6537iP
0J3IOH7tJeEdGeN7+3FfT2+vIWj/DOUEhqbrM7hnBrV9O6L+mPDbpkGdeA6A
p6oOiTDpahC+kCJRiOcAaHd2+tCJZAD/80rNlJWF/3/vJGOiSrAB4SllGyhU
3JmUucTORpgTvuPYaYcW3IdEr92+YmlD+HiQYnk27q3X2cWiP78m/PuovGEA
7r2spZIHPd4Q/rr2YKo47jOvF+K4dN0J36O0V2cJf//KB3P9iwW8Cc8xP6af
ibuaIe+C1S5fwo0/Nz/jwT0Pq1CsXRdAOM8zuypnvE7Oll5mkmwKITxA9tal
rbgrTNgpVfwKI5xdYI3dA6/D8fdStkLd4YSvf3244NkiBgskgqpDGyIJj7xZ
qjaO13/5SyYvtdwowhs9rX0f4vtLolZnT6J7AuHFBzYX3cX349fBVvPaT4mE
p++5MnMV37+zfEOmlmpJhHf1zOmxT+C/lzJFtb+XTPi1WeHHR0cw6M3qNK/h
mEo4Ndbc+QfeH4795Jz5l5tBuIJ0TC8zxGDx0Wkmqx0FhE/FSwv352LwgK+V
Yv1t5HeU17umZmPQSLRx+lAI8r8l1s8k0vG+dObq4Yr9hYT766xJtMXjfUOw
ladBtIhwpq8udGYfMXh+W7HjiHwJ4bKiQnDKEIO1HHvPf31eTrjPrxORQ/cx
6LnuNn9zGvJhE5aGBn38/Tcx/qObQf766Dn+D1oYNFtsPC9j9otw7dMLbwpV
MMiQ3WfzyvA34bfyYndHieH9/EeAZY5GJeEuX33e/PhHg9KKCfGmXLWESzuL
cu5+RIM3hVIELg82oPrX0k/3qqHC9b/DYsTa2gn/uVl1y7ucMehnI5pWHNBL
OMuRGk0p3REo7P35llbOAOFisTairIaDUNSDrV/w1zDhC57sDE4KfZD5l7pj
g9QY4epuVvK/qJ3wuKzUbnV5KuEfi4Ja4MlmOLBfKVmGgUZ40SxQ5dnRDOVy
/aZzmJD/Clt9YP6vCb702TtwhAV57OEfblvzmmBZd/rvWS7k7e9y7DZeboKr
3mLvjosg9w+4rEGv0QjrjzLFy2kgp73VW1N+Vg+rwrZRBz8jj676XJ0vXwVv
ROrfjRPEUJ2cbB7ezFgFpX6JbvQ9jHy0vC1JtaQSPqSuKzAVQa6cXx1aeLES
vh+XM2QVRx6twL7u0skK2G8xazwkg7yEbzW2kfsXdDdS0hrQRf4z7dKe7IES
yLoFbOD3Rf7mW4DBvogSOPph+64RP+Rxb54WvNEugWortvxRH5C/HD/Hcqa5
GFJSm7cwhiBn5U/hulNWBPe7G53R+oZ83Fay/3N0ARSxSJe8kY1cciG32bsm
E57lmXYzbUV+aEQj96xqJpTe8kn1Xxvy6rvfvbpqM+D52fa9Nh3INwgV2HPW
p8OnSrF9+t3ILx/WXTjf+AMe+GrR2zyAPCu28VxwSxLkgByOkjTktt3vRqY1
kuDEucAWeQw5z8AYnVdSImSv+nJScRJ57wGsrzT5O/yyS2X11F/kXusPxXak
xsDQew9a4maRL7lW7xpKj4AP81ofcS0hv+TnVCiaEQ6npZZZIkke7aZsQzMJ
g5xpXun7l5FbTSvfnjL9BE8NvNu2bQV5ALedtKFZILzYnlZgTfLHFJO6P2Yf
IMPpTss2kt/b/qk72pwCV5zyB51XkWdOqekwP/WBvl+VI2tIHr7lO0PFgCeM
d3fUY1tDTnlcQLEdfA+vVyvtVyR5QoqJ8YEhF6i6GjJsR/LkC9Iev4YcoUSi
UUIUyWviPMbrql/CJ0/xLkny71R2RebaZ3DnnyuX+kiez6drZhX5GJ40VWab
IXn/BFN5lLwG9C5N6F0h+aJJibSCgRSofvjoxxrJD/xyMn2ufg/o9r56t0Dy
XCeekM2HnwL33EndcZJX1cotNB98AZ44FpxtIrn/If+hKg4HMJE9syOD5C+v
NmJv2N8B95DYZn2St5Zv8m5h8wAe16SyhUmut2HeysfVG0y4PQinkd6/8B6V
vzVv/YBQULClJsl/n0i8v9klGHiuG75YT6qT/WJCk462oeCxPl2IDslre2v9
bM6Eg5bSXOV+Ur29COEe6DwaCejqA741LSLXjzkua8YVBV6UvZbU+Yc8kPWl
6Vvqd7A5Je/w2hRy74R5G+pQArhtRythJbkPNX6XQm8imO+0/sFN2kcDYqc4
58eSwHdbV7+dpP34L8TV2qg7BVil291NG0WuJPrk+pOydJDozKLjQNrvHuCg
ibpMBpgY8HjC1YV8l6DUjERhBvC0nmn+Ruobn4ujyrDsTHDhb1tmIqn/DDnK
yXAkZIOM0aPFBg3I/2RP6fFR8gG3ztwV7VLkLBxqz/OOFIMAbq/jgZ+R53Ae
j1syKQaLkukZTBEkv75HXyylGGwFMiqmocgthMBW/zMlwJnqksYfSHqepmey
bLKlQEKnwYLHEzl8tyF2QKsMHLwmYmRghZxavMZg8bYCcDLQX1GUJPWli+Ka
zH11oL7qvW9qFjqnPuWl7XxxqxWMDAftOqM/QXj5ms/bZPseoHV34mTN43HC
Y1QM6+7M9oMWgxJ+fYZRwnmTIvsyeoaAlewmhaq7Q2h/FWs/iIkaBYx5Rx/l
8vejnHn+86hq4zhweZpdWvyhm/DdBi/8e9wmwLGMm9lllD+orijnroqM0sBK
15+yvZ4ot3gnt76UnqCBrdKrM26myPuG9vKqTNHAvYc7eadVkQ/dSI+6tkAD
Z7M47dI4kMexZfxeYsJA7+yax44TNShXDM049AtiwH134iWGy1WEX7E7brKo
hQFGoS/ywYYoj/V1ZFZw62KA5/KKk+dh5P4t9XYnDTCwUSou4AUV5bp2uqxm
ZSMMCB8scpA0Q26+0/um4DMMbFq6yeX8vIzwH45f/tx3w0AHfPdh9U0pyhX3
jz3kTsHAJyutaN5glFdnXo0XOv3AQO4GXRFedeRT5vQW/ekYqByteLyTFXny
0q0m5xwMcGw8p7/shPLwdXeRt+olGHhnWSK4vSWfcNW9PVuEGjHQMLLDyt8i
G/Uf8Q672SYMSLNYP18bykLPU0knkd2CASwHo+hpItd2DaUItmOAd8H7F4tU
JuGVR2qK3/di4Br93j9sLOmEa2k2RL2mYqDeOHRrTxSaF3wf7g9LncCAxJ+W
9u5dyOnc7nZ00DCw36nJos0dzR39SWIC7FMYMHBk13QYRPOLaJdAD+MsBspf
iEzG2cUS3ihJmaPivpftlreefgzhK9uNVcrnMOC2jsFy25VowuNjbpbp/cPX
12CTjhoHmptKsox/8S1hwCrGX5ASE0G4tbAzNR33uUemSpxeaC4zfySjKrOM
gXbvH5V7R0MJD+7f2iq1goE6ucCQWfsgwv+2/l5Jxn2dGxelQf4jymNsfvpc
qxiwPRjEH8uJ5sfLxnXjZbj3XArLvhTrQ7jUNlZW/LwH9wQVzrGOeRLON4tZ
qOJ+Ylrf3+vVe8KFKrV3uuAuJ8nRsXG7C+pv5+QXk3Gvaxp++DzWAZ3LfV92
N+IuwN69r/TVC7SOdx7Y4/M4yIp6pk+JRfP4X3EXviXcTwc/eZUZq0f4f/+z
Cxz3+P//7Pn/A0LzwpM=
                "]]}, "Charting`Private`Tag$432144#2"], 
             Annotation[{
               AbsoluteThickness[2], 
               GrayLevel[0], 
               Thickness[Tiny], 
               Line[CompressedData["
1:eJxd2Xk0VV/0AHBSoUGmSqTyJU2SkGg6SMkUDSghQ4rMkYhkiJTZQyVTKpky
Zh6OMZThmTNknj3vJlOU/G5r/X733PV7/1jrs9567zn3nL332VvAyPqyyRoG
BgYNRgYGJvxvzuq/FwYY/ve1ULKhYeiY+5m1Uhv4/pD8RXbH7E7KTZCba2nx
g+S2YZ8UWkOsQZTu4bkekp95KSHGmvoA5A2oZZaR3C2x7GFcyGMgMdEWH03y
Zz3/bYwo9AR3l+ub7Ej+n437xt6PT4Fck8zX9STnd4+tuxISCG7urnlV+Re5
n3UbVa48GBzy+R39kOTdDLOmmoUUIEx5rda4gtxjSiXH8uMLYLVJ7AzfH+RS
5zZf1QyOAZVmSpURv5E3ps1G7qqKBW2Lde6cJGdez+0cUPYGjBx59XZyCbkT
RZzJsOAtUBjW8z69SPpeL0bfL8kfQE6gP2b5A/kxuFzs5J8G3hUurdpgyCeu
adVXK6QDjYEqZQs68qs6uz43lKeDYzWPglRoyN+/UtOllmSAIx9bhlLGkEPZ
N6XROVlAp8FnarkHuV7405dq73PBGe/y6c9lyKW3Jirwu0Kg47x09wNELn9g
TujPmlKgrGXb4lqMPLZjL9fI+VIgHRxtypmPnPVqwHBCQynQONeTXZeG/M/+
8ZML38tAbwrVLuA18uHzm6vCf1eA3fxjlSoWpPenK7fdEa8B/N8lzPt/0gn3
Kio+t+EcFfA+jd4ymjFNeO6DCsmizg6wa/CMzsW1NMKFk3c1XqD1gsEvWzSO
5U+g7x3tvF7FMgQymJQDXUTGCBdgTmJU5hgF+r9zNpevGSZ82a76WPKvcSCR
efa/Zf9+wlO2jTe8MJoCdpRRpy1CXYR7a8IF12PTQGrCw1RHqJlwMw+zvqU0
OohkHLarWYe8N3On8cNPdDAVpMgsPtZEuMPxeqXZPDr4aWY5vJiIPCAy72RD
GR2MvmhVVT+CvE9RkLK/hQ72bnnpKiFDRc9lpUnAao4OAlJ74ebQOrT/kyNT
jx3FwNlDesYTmsj7vmYFlUpi4CIjYCjZjtyDcTn7rDQGbtzsML78+ivhedRX
n8UBBqbVTDwOxH0hnPH56fEsVQzMacK46NQawuk0Hnu52/jnL0rNsFdUEn7j
iLXKEwoGALdH6G0v5DNKcYdYwzHAEbJwJVcR+QUag5f3SwwIPN5vpFxXQfg0
11Ds3SgM9Ls+05ZuKyd83m2L5bd4DJRyxvnIjpYS/lk5pFspDwNHky1eNm8o
IFxyN1OoWxsGXMzNmV0D8gk/ZHoinKsDA7oFJjcFOZHnUvjXxHzDfydPu6zu
jjzC0x/abI3pxoCPXxbz8305hJcesNijMIABlvAdEZh8JuGfpGpcBaYwkN77
5rHi5wzCPTufzp7Az39JVt/+10rIt/0Yr1OdxoCq++XTUhrphGfK+6Vcx+OL
Gre67qOCFMI7/eN5eGYx4Bq6bGIy/Y7wS21h9vvwuGbqQCm06n2L4u3aAY3W
f35IzfVeYxzh3xM6JB2XMfBI6Ljz3YxYwo/QObje43Fzu4abotLkS8JXEi4J
UfC4nNSnd5urLpzwiwKuMr9wL+Xg2NPxMRTFgXwRzat4fM8/b16pZhuE9q1D
cswM7lrKMSVM8X6ErzqpN4jj+eMKO8uUsZkP4R/1+ZnMcW/xC20S6H+M4ufp
ZddS3CnTBsdKbz8gfPHUTNV33C22neFI77Ik/Oy+Qc6fuO+/5p2W2nid8CTl
apMV3NXSdq7hFpGF/+dzTlEl//LumaOOUv0rtwgP23SLfwn3LwV2lTq/7hGe
3LvTYwL3IF5tvlJbZ8L/aNTRqLi/OZDUFzDvTvjCBSe9NNyft05/kBb3JjxN
7HDrE9wnd4hJ9Vg9J7xvYVbjEu6JXY0z6+yDCX9rs6DbiK/nX79o/gXaK8LL
r60pu4k/lwbqGQeBjZGERzdb3Z3G8ygb088fCgeiCQ88l8B7D/dTbLsX8sTf
EK6yxBZkgO8HswGdlESr94TbF3O2NP3CwHxxiYf2yEfCD7+xGln3E3++r1qj
NsylovVZNOJYO4OBy8xMXjqM6YQbZjorLuH7vAIyXVnckkE4JnmhpQY/F2O7
QtUXRLIIb1Dhu/dnHAPdNyQjxk1yCVcP1eLL+Y6BEwHH9QeHkE9Z3jsii+fR
939dVdsN89A6UFycy7swIHq6USRFL5/wzODmojQ8PmyEjjGbNAsJv2F4BBNp
wsC4h8xdL3lIOM32uFVmOQYCt7LRoW8F4XnLJlunYzDAOWiVan/pK+GffTad
lDuLAdmppP+sQpHn8d3fG4rH4cevilJudiCPPSfG03sSA0/X+WYf1KsjfLf7
EK82HuefvHRx0zetJ/z7k4ys70IYOGxdIy3yqBGt/7NF0TNrMfC5ZFh9urGJ
cPfwocyrRXQwcSJmNG2wDe2fdYMugpx0UNsw2QpDv6N14O7fa2dAA4baQz/t
hAcJpz71uV6vMwkcT/lZsrqMEH79+Owwf+4YaB0ucjCWGyd80wJzo03fMPhR
LVTe2TaJfv9lkwOeVgOAaambHj1CI9yFqhgq4doNwnu3Yyt6dMK7RlXf1Ii2
gpTXia16xsg3dFhMXmZrBbba7zdnmyJ/Sl126phuAWckKu2U7JBzTjkGN6a0
gI+H/UZZfZD7mDPEuxxsAZMDTfzjacgN7NyfN+P1QVxVMCf7EvLCifWFqVup
wPfZwzfaK8gB9/P6fRONYDyhUzucESNcuEeEdSK+EeTlCEktsSJ/1eDrqPFf
I8AqY15c5UV+aVu1UjZPAxgXXk8zkEFuUc+vPsZUBy6X1l2ssUG+a5PT/nut
1cBZJPFgsR3yExceaGSFVYP71aviSQ7IOxy2R9C1qkHbnMRnCxfk9zPyqFc6
PwPdU9RBylPkPV2H3Lu+V4Hl+tUbZpGk90tXx46OVACoykMXKUWe1zJ6o3EY
AtZjs1uFy5E/Tu2v33Ybgl0+VVrbK5HnyxRYa42VgGBHY4HBauROP6TKSiaK
wYXZB/U8jcjPnpxkO04vBLOB3Ls39CCPl0pdHJjPBadeCzIsY8ib2jfd/suQ
DkZXPsT++IF8vt8qj4slDTAXx0T1zSBn2TUuLciWCpK81qfEzyL/wm44IsKb
AqSZh7k7F5AfdPNwmDmaAEaUD1BCFpF7tTMEtBz/ABq/qVgo/EJe85iRJ/10
PPD0chMNXiI9X/vWe9eV3oEdZvb0ht/IRRO2NNoZxIK9TsZA5Q9ySdWvGw3q
ooFSJdskJPkbp0G+po5IIH9ORDVkhfQ5hYfWxNBfgsyDFkw/SH7EpaH6z1I4
eJTExH3+L/LqgGI2zXVhoOPXuGw3ydcC29UFvmCgz8ulx7uK/PMOo6OeFwOA
lIta8yWSb0y4LcRh8hywdT+PdSf58m6b6pfO3oCjBlYnklz0zyorX4gHwBIG
Fb+QfJxBPPfopUegJ3dqzxDJ1zK6agu73gcUprbLcyTPi+j6cEjLHFy3jvi+
QvJj9QdEWQy0wVKmTNkqyV1OzB4QzwCwTidzZYn8vT+Y09QjjWFm9ToKjeQs
ajySJ97Ywm1Hjrt3kHxU7NL1C/ZOcCpCpaaA5J2XOSUT3rrBjxNKpuEkH2Cv
kt3v/wS6UfdnSZF8zm0pmcfAD+5S3aP/m7T+avuLwiqEgmCh7RGjPJJrmvIv
OewIgRZv2+/zkbwY+6pCXRMO+e671HuR9smJqvMssm1RMPzctbObSa487aL6
tTYGcgqtcvqT9uHUcznnfX2xcK3bwdL7y8hLZSIaolviYNzVKs0p0v6vecQS
qFkUD1sDHEPukM6XDFV/V5pfKqzYu7H8Juk8vh/ptKW+ToM5uy7MXSSd3/nd
o9b2mumwt3/BkHOa9P9SZmiutzLgpXkR88PjyIPYPRe1PbIgLcnW6xMpPhz5
zD33qygXKssnDrBC5BWHZ1kctpXCmRR5kaEi5HtDHFSar5fCG2prfbIKkJuJ
tc4eiCqFPysd78vkkOKS9MWDXwXLYJj+qkxXCiluCHfytYiVQ5b33gw2L5Gf
2lLhMa5UCc+J7YMzpsipXHtOvX9QA4NrxeNGTZAHrLku0J5dA8es2FpajEjr
38b8i2GuBrodPinwQhe5zXLrKQWbWqh3fOlJmTpypoJBp8emX+C14qSd8ZKk
eP4p3L5Quw56vw9+8ukXymvyKqkp1jxUKO8lxr3zLvKr+zKFzo+0wG26RjmB
jSiPr/0SkyjZ1Q0/b9TY9KwQ5f1QJ7HsivAByHaoUUfOANUJIkFvr+kWDkPJ
JCcxdlNUV4j5cwwJ147BpQBOJk9lVIew1mp5tMhNQi1fB6VaGqpbjp6T26ml
RIMvyyM6oEQ74cOCqhkKTHRYPg80+LYhVywKnS1kocPamL+3bX+huuhR8J7h
Q3ipl3Twk+/mYuTVfTlf5nnosPtZocv688j/Bkk+OypKh2Hh57UZtVsJbz7M
kqKoTYf0p4aravebCa+P2UIbeUuHCfVvG0qUUF13Jc7oZrIwBlkk2sc2MiOX
qxVbH3IQgxM1Xekalag+vENbU2otikG1kobosjPIn08pmrJLYTBBmXPNWQlU
Zw7ZzVuMKmCwcvffpFbeWsL9zFR1hw0w+Dn77K6C4UrC2TeBdQIhGHzyIdz4
vzfIJ15s3TEeisHkJ/dKn+gh11xxFoh/gcFHUyfZpNtRnUzJat/EHIVBdoFM
nhvV5YQL+plJ637A4JSz7NDbhFIU/+1yZK/g5012qag9qBHV8yf4Zn2tOzF4
YFy76IQGcvlNrzV+dWGw4ebHwF4quhecmu/e44Sf/3X7Sl25m3MIv6eaNGjU
h8HzBw2WTrV+Quf9vd1A+zAG85NaT0Z2oPsLF+TykKVj0Lnv2fisNvLpk686
lPA4xTc8yRCYnobqzPp3Eip4XBvYiw1WZaB707sd6n+P/cRg4NoDST1ZiYRH
37rdkTyPwd8+DTtGc9C97E5x510ePP6eDfUsE8uNJXxW7g9bHO4JvmpOdKsY
wrmzA3ME8TjuMKt2fcb6Ncp3w8+2bMHzfTivi7ypDbo/nunOLnXE3Zxi1fTN
5gWKD8e/23fhfmvr674EWwrhK54lI154Xsmb0dRnvYfupyHv1eLw+ymM3fSR
6etwAOEpfh6GHHg+o5iXUpxH0D33coOqoAruqZlWFntH0b1Y42/UmAvuGafl
/WtHPVC+SDNLjce9Mdl/qqnhEeGW9/AoiftHGqcKK/U+4du/XTg7iHvJbgMb
hzhzwiWs1Tj+1QdD0yw18UraKF9UpQ78qw+WrSrllY3lwP95w527n/7VB3tr
Pa0faN0i3GDg8bN/9UGRJ1/UxoP3CPcr+mEwhXs9VXGpff9Dwi09Sk+04R52
IGy0nsud8OmCuW25uD+62Io94XyGPicqqd0I986aDUEdHP6E+1+SKxDB3XDd
okOwD+q3TPvejqXj6y+yS/1n41PUn9kXEWmvg/sX8TSTjd6RhAesGTvTjO8T
Qcl9Pzycowk3N2KI0sedOkANdZJG/aKOqiK1IXy/PYziHf5+GPWXGJrDP7Th
dYBR4tFzNjzxhD+sdpPVx+vdV+yPrJ/SPhK+MbP44CpeBwSlLjrRRlMJv+5C
r2THPZiWskN5II3wxe+On3jxczQseYx7cRL1zT46+4Rux8/jrygfR7M+1Jdz
yHG5mT2BQVUxy8uW1aiPl+bFpu+On3d/sN9KSyEXrduwvyVPLwZ3CMvNyZQh
D3Cca/+Ax423FfHVWAHqE57+2ZWXhsefUQ9FBa5U1IfMnThcYdyCwW8FM4a7
KSWE8+ovXNCrwiAbl+aD4kOo/xnOG3j01VsMFnIfTf5thXxZNieX5Q3ul3cZ
SWYi3wwU1K2jMWi3D2wOk0b9VS+ad7bAK/z3tN0/x3GuinAZ/RY7vgAMwmfr
koZ1qwnff0nUzBi/B9IqVpnsnqL+MDcT4wUVWTwunZHSYR1E/erm+uchWfl0
+Lo4e/vDa52Ej49F7JA2moY1q8FPM1xRv1335rREo/kUTFQ3bboxP4T2j3Gl
gBHTBORPjxvM7R9Fz+vcBuX6m6Nwb4Xe7cR41P9nLj58t0hgCK499XZCo3WK
cO97BVUVL/rgTuOHYf2+aL5wJPdqQTXlGwyinLwoOoHmESu936r3BFBhUEbn
I/lp5Jvl/875WlPh4OgefvUZ5LfubOef1aDC0Ss58ZeWkJ/I53bJ5qLCZI7c
L79Z0BxkYH7Vf5t4IywfnXMfEibNv3amnWU6Xw8vuBy1WtYlzaf2vVOKNK2F
gz15X3kNkPOdX/EMOFgLwzqaXSSMka+XSw5/SKuB3Qz57WpmyEX2l7vL2tRA
2+1BV4XvI9/w+yqP14Nq+Mnj3TcTX+Q98NmLv0+qIIvJkTu8mchfO+gm8EeW
wbnHU2Wen5AXrTMQ5dcqgzO2jHZDOcjrJr6ab2cvgxm/r7V5FSLnWn/S6I9n
KbzsJ/pUq5I0T7SvFN7aUQI19vRv2teKvGV8m0OYXQEUlOpxmW8jzbPYHB+s
jubDuToGmYIO5FghRjHUyYd6PtEU4W7S/HEpqJZNLg/WHWqseD6A/BLjnm8c
bDlQV6cl3o00j2u2iN7cH58BQ+4IxmRNI5f51tHdtyMDMvje7OkhzfUEPdvs
uvzS4VC6pBDnDHJjD04d95FUKNYr1M88j7zmoeiPZJck2CpLWaCRfA/HtSBD
o0S4stVCvWYBue8aJvstFxJgSuLVasNfpOdrvEFfkyseVuZb1O4mzTcdEsOE
KYlvoKOIFy2H5At3rVW5A2Oh7V0FDQXS/LQ76FPdnoloGDm0uVOONG9tUnwV
Ne8aAX92flnJIPkaXx5Ki9JLOMURasRDmts6748QSOIOh+ctmqaqSd5/Nqbg
bFIwlNvCzs5BmgvfElY+yT4ZAHfPY3YaJBefNQoLfPwc7qvT2+5NckVZrp71
W72h3Uml5QySN7WN3XmQ5A6XB9/tbCW5EGfff1WPH8KQG7ddaSTPj79vREmy
hT+lvHf/JvnxSMvHeUmG8P/P2YWO+v+bs5f8D9e0wpM=
                "]]}, 
              "Charting`Private`Tag$432144#3"]}}, {}}, {
           Opacity[0.4], 
           Sphere[{0, 0, 0}], 
           GrayLevel[0], 
           Thickness[Large], 
           Opacity[1.], 
           Line[{{0, 1, 0}, {0, -1, 0}}], 
           Line[{{0, 0, 1}, {0, 0, -1}}], 
           Line[{{1, 0, 0}, {-1, 0, 0}}], 
           Text[
            Ket[0], {0, 0, 1.3}], 
           Text[
            Ket[1], {0, 0, -1.3}], 
           Text[
            Ket["R"], {0, 1.3, 0}], 
           Text[
            Ket["L"], {0, -1.3, 0}], 
           Text[
            Ket["+"], {1.3, 0, 0}], 
           Text[
            Ket["-"], {-1.3, 0, 0}]}, {
           RGBColor[1, 0, 0], 
           Arrowheads[0.05], 
           Arrow[
            Tube[{{0, 0, 0}, {0, 
               Sin[2 ArcCos[10^Rational[-1, 2]]], 
               Cos[2 ArcCos[10^Rational[-1, 2]]]}}, 0.03], {0, -0.01}]}}, {
         PlotRange -> All, ViewPoint -> {1, 1, 1}, DisplayFunction -> 
          Identity, PlotRangePadding -> {{0, 0}, {0, 0}, {0, 0}}, 
          ImagePadding -> Automatic, DisplayFunction -> Identity, Boxed -> 
          False, DisplayFunction :> Identity, FaceGridsStyle -> Automatic, 
          ImageSize -> Medium, 
          Method -> {
           "DefaultGraphicsInteraction" -> {
             "Version" -> 1.2, "TrackMousePosition" -> {True, False}, 
              "Effects" -> {
               "Highlight" -> {"ratio" -> 2}, 
                "HighlightPoint" -> {"ratio" -> 2}, 
                "Droplines" -> {
                 "freeformCursorMode" -> True, 
                  "placement" -> {"x" -> "All", "y" -> "None"}}}}}, 
          PlotRange -> {{-1.7, 1.7}, {-1.7, 1.7}, {-1.7, 1.7}}, 
          PlotRangePadding -> {Automatic, Automatic, Automatic}, 
          Ticks -> {Automatic, Automatic, Automatic}}], 
       "BlochSphericalCoordinates" -> {
        1, 2 ArcCos[10^Rational[-1, 2]], Rational[1, 2] Pi}, "Computational" -> 
       Wolfram`QuantumFramework`QuantumState[
         SparseArray[
         Automatic, {2}, 0, {
          1, {{0, 2}, {{1}, {2}}}, {
           Complex[0, -1] 2^Rational[-1, 2], 3 2^Rational[-1, 2]}}], 
         Wolfram`QuantumFramework`QuantumBasis[<|
          "Input" -> Wolfram`QuantumFramework`QuditBasis[<|{
                
                Wolfram`QuantumFramework`QuditName[\[FormalCapitalI], "Dual" -> 
                 False], 1} -> 1|>], "Output" -> 
           Wolfram`QuantumFramework`QuditBasis[<|{
                Wolfram`QuantumFramework`QuditName[0, "Dual" -> False], 1} -> 
              SparseArray[Automatic, {2}, 0, {1, {{0, 1}, {{1}}}, {1}}], {
                Wolfram`QuantumFramework`QuditName[1, "Dual" -> False], 1} -> 
              SparseArray[Automatic, {2}, 0, {1, {{0, 1}, {{2}}}, {1}}]|>], 
           "Picture" -> "Schr\[ODoubleDot]dinger", "Label" -> "Computational",
            "ParameterSpec" -> {}|>]], "ConjugateTranspose" -> 
       Wolfram`QuantumFramework`QuantumState[
         SparseArray[Automatic, {2}, 0, {1, {{0, 2}, {{1}, {2}}}, {1, 2}}], 
         Wolfram`QuantumFramework`QuantumBasis[<|
          "Input" -> Wolfram`QuantumFramework`QuditBasis[<|{
                Wolfram`QuantumFramework`QuditName[
                 Subscript["\[Psi]", 
                  Subscript["y", "-"]], "Dual" -> True], 1} -> 
              SparseArray[
               Automatic, {2}, 0, {
                1, {{0, 2}, {{1}, {2}}}, {
                 Complex[0, 1] 2^Rational[-1, 2], 2^Rational[-1, 2]}}], {
                Wolfram`QuantumFramework`QuditName[
                 Subscript["\[Psi]", 
                  Subscript["y", "+"]], "Dual" -> True], 1} -> 
              SparseArray[
               Automatic, {2}, 0, {
                1, {{0, 2}, {{1}, {2}}}, {
                 Complex[0, -1] 2^Rational[-1, 2], 2^Rational[-1, 2]}}]|>], 
           "Output" -> Wolfram`QuantumFramework`QuditBasis[<|{
                
                Wolfram`QuantumFramework`QuditName[\[FormalCapitalI], "Dual" -> 
                 False], 1} -> 1|>], "Picture" -> "Schr\[ODoubleDot]dinger", 
           "Label" -> Superscript["Y", "\[Dagger]"], 
           "ParameterSpec" -> {}|>]], "DensityMatrix" -> 
       SparseArray[
        Automatic, {2, 2}, 0, {
         1, {{0, 2, 4}, {{1}, {2}, {1}, {2}}}, {1, 2, 2, 4}}], "Diagram" -> 
       Graphics[{
          GeometricTransformation[{
            Line[{{0, 
               Rational[1, 2]}, {1, 
               Rational[1, 2]}, {
               Rational[1, 2], 0}, {0, 
               Rational[1, 2]}}], {
             PointSize[
             0.2 Dynamic[
               3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                 Magnification])]], 
             Point[{{
                Rational[1, 2], 
                Rational[1, 2]}}], 
             Point[{}]}, {
             Arrowheads[
             0.002 Dynamic[
               3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                 Magnification])]], {
              Arrow[{{
                 Rational[1, 2], 
                 Rational[1, 2]}, {
                 Rational[1, 2], 
                 Rational[3, 5]}}]}, {}}}, {{{1, 0}, {0, 1}}, {0, 0}}], 
          Text[
           Style["Y", {FontSize -> 24, FontFamily -> "Times"}], {
            Rational[1, 2], 
            Rational[1, 4]}]}], "Dimension" -> 2, "Dimensions" -> {2}, "Dual" -> 
       Wolfram`QuantumFramework`QuantumState[
         SparseArray[Automatic, {2}, 0, {1, {{0, 2}, {{1}, {2}}}, {1, 2}}], 
         Wolfram`QuantumFramework`QuantumBasis[<|
          "Input" -> Wolfram`QuantumFramework`QuditBasis[<|{
                
                Wolfram`QuantumFramework`QuditName[\[FormalCapitalI], "Dual" -> 
                 False], 1} -> 1|>], "Output" -> 
           Wolfram`QuantumFramework`QuditBasis[<|{
                Wolfram`QuantumFramework`QuditName[
                 Subscript["\[Psi]", 
                  Subscript["y", "-"]], "Dual" -> True], 1} -> 
              SparseArray[
               Automatic, {2}, 0, {
                1, {{0, 2}, {{1}, {2}}}, {
                 Complex[0, 1] 2^Rational[-1, 2], 2^Rational[-1, 2]}}], {
                Wolfram`QuantumFramework`QuditName[
                 Subscript["\[Psi]", 
                  Subscript["y", "+"]], "Dual" -> True], 1} -> 
              SparseArray[
               Automatic, {2}, 0, {
                1, {{0, 2}, {{1}, {2}}}, {
                 Complex[0, -1] 2^Rational[-1, 2], 2^Rational[-1, 2]}}]|>], 
           "Picture" -> "Schr\[ODoubleDot]dinger", "Label" -> "Y", 
           "ParameterSpec" -> {}|>]], "Eigenstates" -> {
         Wolfram`QuantumFramework`QuantumState[
          SparseArray[Automatic, {2}, 0, {1, {{0, 2}, {{1}, {2}}}, {1, 2}}], 
          
          Wolfram`QuantumFramework`QuantumBasis[<|
           "Input" -> Wolfram`QuantumFramework`QuditBasis[<|{
                 
                 Wolfram`QuantumFramework`QuditName[\[FormalCapitalI], "Dual" -> 
                  False], 1} -> 1|>], "Output" -> 
            Wolfram`QuantumFramework`QuditBasis[<|{
                 Wolfram`QuantumFramework`QuditName[
                  Subscript["\[Psi]", 
                   Subscript["y", "-"]], "Dual" -> False], 1} -> 
               SparseArray[
                Automatic, {2}, 0, {
                 1, {{0, 2}, {{1}, {2}}}, {
                  Complex[0, 1] 2^Rational[-1, 2], 2^Rational[-1, 2]}}], {
                 Wolfram`QuantumFramework`QuditName[
                  Subscript["\[Psi]", 
                   Subscript["y", "+"]], "Dual" -> False], 1} -> 
               SparseArray[
                Automatic, {2}, 0, {
                 1, {{0, 2}, {{1}, {2}}}, {
                  Complex[0, -1] 2^Rational[-1, 2], 2^Rational[-1, 2]}}]|>], 
            "Picture" -> "Schr\[ODoubleDot]dinger", "Label" -> "Y", 
            "ParameterSpec" -> {}|>]], 
         Wolfram`QuantumFramework`QuantumState[
          SparseArray[Automatic, {2}, 0, {1, {{0, 2}, {{1}, {2}}}, {-2, 1}}], 
          
          
          Wolfram`QuantumFramework`QuantumBasis[<|
           "Input" -> Wolfram`QuantumFramework`QuditBasis[<|{
                 
                 Wolfram`QuantumFramework`QuditName[\[FormalCapitalI], "Dual" -> 
                  False], 1} -> 1|>], "Output" -> 
            Wolfram`QuantumFramework`QuditBasis[<|{
                 Wolfram`QuantumFramework`QuditName[
                  Subscript["\[Psi]", 
                   Subscript["y", "-"]], "Dual" -> False], 1} -> 
               SparseArray[
                Automatic, {2}, 0, {
                 1, {{0, 2}, {{1}, {2}}}, {
                  Complex[0, 1] 2^Rational[-1, 2], 2^Rational[-1, 2]}}], {
                 Wolfram`QuantumFramework`QuditName[
                  Subscript["\[Psi]", 
                   Subscript["y", "+"]], "Dual" -> False], 1} -> 
               SparseArray[
                Automatic, {2}, 0, {
                 1, {{0, 2}, {{1}, {2}}}, {
                  Complex[0, -1] 2^Rational[-1, 2], 2^Rational[-1, 2]}}]|>], 
            "Picture" -> "Schr\[ODoubleDot]dinger", "Label" -> "Y", 
            "ParameterSpec" -> {}|>]]}, "Eigenvalues" -> {5, 0}, 
       "Eigenvectors" -> {{1, 2}, {-2, 1}}, 
       "ElementAssociation" -> <|Wolfram`QuantumFramework`QuditName[
           Subscript["\[Psi]", 
            Subscript["y", "-"]], "Dual" -> False] -> 
         SparseArray[
          Automatic, {2}, 0, {
           1, {{0, 2}, {{1}, {2}}}, {
            Complex[0, 1] 2^Rational[-1, 2], 2^Rational[-1, 2]}}], 
         Wolfram`QuantumFramework`QuditName[
           Subscript["\[Psi]", 
            Subscript["y", "+"]], "Dual" -> False] -> 
         SparseArray[
          Automatic, {2}, 0, {
           1, {{0, 2}, {{1}, {2}}}, {
            Complex[0, -1] 2^Rational[-1, 2], 2^Rational[-1, 2]}}]|>, 
       "ElementDimension" -> 2, "ElementDimensions" -> {2}, "ElementNames" -> {
         Wolfram`QuantumFramework`QuditName[
          Subscript["\[Psi]", 
           Subscript["y", "-"]], "Dual" -> False], 
         Wolfram`QuantumFramework`QuditName[
          Subscript["\[Psi]", 
           Subscript["y", "+"]], "Dual" -> False]}, "Elements" -> 
       SparseArray[
        Automatic, {2, 2}, 0, {
         1, {{0, 2, 4}, {{1}, {2}, {1}, {2}}}, {
          Complex[0, 1] 2^Rational[-1, 2], 2^Rational[-1, 2], Complex[0, -1] 
           2^Rational[-1, 2], 2^Rational[-1, 2]}}], "Entropy" -> 
       Quantity[0, "Bits"], "FinalParameters" -> {}, "Formula" -> 
       Wolfram`QuantumFramework`QuditName[
          Subscript["\[Psi]", 
           Subscript["y", "-"]], "Dual" -> False] + 
        2 Wolfram`QuantumFramework`QuditName[
           Subscript["\[Psi]", 
            Subscript["y", "+"]], "Dual" -> False], "HasInputQ" -> False, 
       "InitialParameters" -> {}, "Input" -> 
       Wolfram`QuantumFramework`QuditBasis[<|{
            
            Wolfram`QuantumFramework`QuditName[\[FormalCapitalI], "Dual" -> 
             False], 1} -> 1|>], "InputBasis" -> 
       Wolfram`QuantumFramework`QuantumBasis[<|
         "Input" -> Wolfram`QuantumFramework`QuditBasis[<|{
               
               Wolfram`QuantumFramework`QuditName[\[FormalCapitalI], "Dual" -> 
                False], 1} -> 1|>], "Output" -> 
          Wolfram`QuantumFramework`QuditBasis[<|{
               
               Wolfram`QuantumFramework`QuditName[\[FormalCapitalI], "Dual" -> 
                False], 1} -> 1|>], "Picture" -> "Schr\[ODoubleDot]dinger", 
          "Label" -> "Y", "ParameterSpec" -> {}|>], "InputDimension" -> 1, 
       "InputDimensions" -> {1}, "InputElementDimensions" -> {}, 
       "InputElementNames" -> {
         Wolfram`QuantumFramework`QuditName[\[FormalCapitalI], "Dual" -> 
          False]}, "InputElements" -> 
       SparseArray[Automatic, {1}, 0, {1, {{0, 1}, {{1}}}, {1}}], 
       "InputMatrix" -> 
       SparseArray[Automatic, {1, 1}, 0, {1, {{0, 1}, {{1}}}, {1}}], 
       "InputNameDimension" -> 1, "InputNameDimensions" -> {1}, "InputQudits" -> 
       0, "InputRank" -> 0, "InputSize" -> 1, "InputTensor" -> 
       SparseArray[Automatic, {1}, 0, {1, {{0, 1}, {{1}}}, {1}}], "Label" -> 
       "Y", "LabelHead" -> "Y", "Matrix" -> 
       SparseArray[
        Automatic, {2, 1}, 0, {
         1, {{0, 1, 2}, {{1}, {1}}}, {
          Complex[0, -1] 2^Rational[-1, 2], 3 2^Rational[-1, 2]}}], 
       "MatrixDimensions" -> {2, 2}, "MatrixElementDimensions" -> {2, 1}, 
       "MatrixNameDimensions" -> {2, 1}, "MatrixRepresentation" -> 
       SparseArray[
        Automatic, {2, 2}, 0, {
         1, {{0, 2, 4}, {{1}, {2}, {1}, {2}}}, {
          Rational[1, 2], Complex[0, Rational[-3, 2]], Complex[
           0, Rational[3, 2]], Rational[9, 2]}}], "Mixed" -> 
       Wolfram`QuantumFramework`QuantumState[
         SparseArray[Automatic, {2}, 0, {1, {{0, 2}, {{1}, {2}}}, {1, 2}}], 
         Wolfram`QuantumFramework`QuantumBasis[<|
          "Input" -> Wolfram`QuantumFramework`QuditBasis[<|{
                
                Wolfram`QuantumFramework`QuditName[\[FormalCapitalI], "Dual" -> 
                 False], 1} -> 1|>], "Output" -> 
           Wolfram`QuantumFramework`QuditBasis[<|{
                Wolfram`QuantumFramework`QuditName[
                 Subscript["\[Psi]", 
                  Subscript["y", "-"]], "Dual" -> False], 1} -> 
              SparseArray[
               Automatic, {2}, 0, {
                1, {{0, 2}, {{1}, {2}}}, {
                 Complex[0, 1] 2^Rational[-1, 2], 2^Rational[-1, 2]}}], {
                Wolfram`QuantumFramework`QuditName[
                 Subscript["\[Psi]", 
                  Subscript["y", "+"]], "Dual" -> False], 1} -> 
              SparseArray[
               Automatic, {2}, 0, {
                1, {{0, 2}, {{1}, {2}}}, {
                 Complex[0, -1] 2^Rational[-1, 2], 2^Rational[-1, 2]}}]|>], 
           "Picture" -> "Schr\[ODoubleDot]dinger", "Label" -> "Y", 
           "ParameterSpec" -> {}|>]], "MixedStateQ" -> False, 
       "NameDimensions" -> {2}, "Names" -> {
         Wolfram`QuantumFramework`QuditName[
          Subscript["\[Psi]", 
           Subscript["y", "-"]], "Dual" -> False], 
         Wolfram`QuantumFramework`QuditName[
          Subscript["\[Psi]", 
           Subscript["y", "+"]], "Dual" -> False]}, "Norm" -> 
       5^Rational[1, 2], "NormalElementNames" -> {{
          Wolfram`QuantumFramework`QuditName[
           Subscript["\[Psi]", 
            Subscript["y", "-"]], "Dual" -> False]}, {
          Wolfram`QuantumFramework`QuditName[
           Subscript["\[Psi]", 
            Subscript["y", "+"]], "Dual" -> False]}}, 
       "NormalizedAmplitudes" -> <|Wolfram`QuantumFramework`QuditName[
           Subscript["\[Psi]", 
            Subscript["y", "-"]], "Dual" -> False] -> 5^Rational[-1, 2], 
         Wolfram`QuantumFramework`QuditName[
           Subscript["\[Psi]", 
            Subscript["y", "+"]], "Dual" -> False] -> 2 5^Rational[-1, 2]|>, 
       "NormalizedDensityMatrix" -> 
       SparseArray[
        Automatic, {2, 2}, 0, {
         1, {{0, 2, 4}, {{1}, {2}, {1}, {2}}}, {
          Rational[1, 5], Rational[2, 5], Rational[2, 5], Rational[4, 5]}}], 
       "NormalizedOperator" -> <|Wolfram`QuantumFramework`QuditName[
           Wolfram`QuantumFramework`QuditName[
            Subscript["\[Psi]", 
             Subscript["y", "-"]], "Dual" -> False], 
           Wolfram`QuantumFramework`QuditName[
            Subscript["\[Psi]", 
             Subscript["y", "-"]], "Dual" -> True]] -> Rational[1, 5], 
         Wolfram`QuantumFramework`QuditName[
           Wolfram`QuantumFramework`QuditName[
            Subscript["\[Psi]", 
             Subscript["y", "-"]], "Dual" -> False], 
           Wolfram`QuantumFramework`QuditName[
            Subscript["\[Psi]", 
             Subscript["y", "+"]], "Dual" -> True]] -> Rational[2, 5], 
         Wolfram`QuantumFramework`QuditName[
           Wolfram`QuantumFramework`QuditName[
            Subscript["\[Psi]", 
             Subscript["y", "+"]], "Dual" -> False], 
           Wolfram`QuantumFramework`QuditName[
            Subscript["\[Psi]", 
             Subscript["y", "-"]], "Dual" -> True]] -> Rational[2, 5], 
         Wolfram`QuantumFramework`QuditName[
           Wolfram`QuantumFramework`QuditName[
            Subscript["\[Psi]", 
             Subscript["y", "+"]], "Dual" -> False], 
           Wolfram`QuantumFramework`QuditName[
            Subscript["\[Psi]", 
             Subscript["y", "+"]], "Dual" -> True]] -> Rational[4, 5]|>, 
       "NormalizedProjector" -> Wolfram`QuantumFramework`QuantumState[
         SparseArray[Automatic, {4}, 0, {1, {{0, 4}, {{1}, {2}, {3}, {4}}}, {
            Rational[1, 5], 
            Rational[2, 5], 
            Rational[2, 5], 
            Rational[4, 5]}}], 
         Wolfram`QuantumFramework`QuantumBasis[<|
          "Input" -> Wolfram`QuantumFramework`QuditBasis[<|{
                Wolfram`QuantumFramework`QuditName[
                 Subscript["\[Psi]", 
                  Subscript["y", "-"]], "Dual" -> True], 1} -> 
              SparseArray[
               Automatic, {2}, 0, {
                1, {{0, 2}, {{1}, {2}}}, {
                 Complex[0, 1] 2^Rational[-1, 2], 2^Rational[-1, 2]}}], {
                Wolfram`QuantumFramework`QuditName[
                 Subscript["\[Psi]", 
                  Subscript["y", "+"]], "Dual" -> True], 1} -> 
              SparseArray[
               Automatic, {2}, 0, {
                1, {{0, 2}, {{1}, {2}}}, {
                 Complex[0, -1] 2^Rational[-1, 2], 2^Rational[-1, 2]}}]|>], 
           "Output" -> Wolfram`QuantumFramework`QuditBasis[<|{
                Wolfram`QuantumFramework`QuditName[
                 Subscript["\[Psi]", 
                  Subscript["y", "-"]], "Dual" -> False], 1} -> 
              SparseArray[
               Automatic, {2}, 0, {
                1, {{0, 2}, {{1}, {2}}}, {
                 Complex[0, 1] 2^Rational[-1, 2], 2^Rational[-1, 2]}}], {
                Wolfram`QuantumFramework`QuditName[
                 Subscript["\[Psi]", 
                  Subscript["y", "+"]], "Dual" -> False], 1} -> 
              SparseArray[
               Automatic, {2}, 0, {
                1, {{0, 2}, {{1}, {2}}}, {
                 Complex[0, -1] 2^Rational[-1, 2], 2^Rational[-1, 2]}}]|>], 
           "Picture" -> "Schr\[ODoubleDot]dinger", "Label" -> "Y", 
           "ParameterSpec" -> {}|>]], "NormalizedQ" -> False, 
       "NormalizedState" -> Wolfram`QuantumFramework`QuantumState[
         SparseArray[
         Automatic, {2}, 0, {
          1, {{0, 2}, {{1}, {2}}}, {5^Rational[-1, 2], 2 5^Rational[-1, 2]}}], 
         Wolfram`QuantumFramework`QuantumBasis[<|
          "Input" -> Wolfram`QuantumFramework`QuditBasis[<|{
                
                Wolfram`QuantumFramework`QuditName[\[FormalCapitalI], "Dual" -> 
                 False], 1} -> 1|>], "Output" -> 
           Wolfram`QuantumFramework`QuditBasis[<|{
                Wolfram`QuantumFramework`QuditName[
                 Subscript["\[Psi]", 
                  Subscript["y", "-"]], "Dual" -> False], 1} -> 
              SparseArray[
               Automatic, {2}, 0, {
                1, {{0, 2}, {{1}, {2}}}, {
                 Complex[0, 1] 2^Rational[-1, 2], 2^Rational[-1, 2]}}], {
                Wolfram`QuantumFramework`QuditName[
                 Subscript["\[Psi]", 
                  Subscript["y", "+"]], "Dual" -> False], 1} -> 
              SparseArray[
               Automatic, {2}, 0, {
                1, {{0, 2}, {{1}, {2}}}, {
                 Complex[0, -1] 2^Rational[-1, 2], 2^Rational[-1, 2]}}]|>], 
           "Picture" -> "Schr\[ODoubleDot]dinger", "Label" -> "Y", 
           "ParameterSpec" -> {}|>]], "NormalizedStateVector" -> 
       SparseArray[
        Automatic, {2}, 0, {
         1, {{0, 2}, {{1}, {2}}}, {5^Rational[-1, 2], 2 5^Rational[-1, 2]}}], 
       "Operator" -> Wolfram`QuantumFramework`QuantumOperator[
         Wolfram`QuantumFramework`QuantumState[
          SparseArray[
          Automatic, {4}, 0, {
           1, {{0, 4}, {{1}, {2}, {3}, {4}}}, {1, 2, 2, 4}}], 
          
          Wolfram`QuantumFramework`QuantumBasis[<|
           "Input" -> Wolfram`QuantumFramework`QuditBasis[<|{
                 Wolfram`QuantumFramework`QuditName[
                  Subscript["\[Psi]", 
                   Subscript["y", "-"]], "Dual" -> True], 1} -> 
               SparseArray[
                Automatic, {2}, 0, {
                 1, {{0, 2}, {{1}, {2}}}, {
                  Complex[0, 1] 2^Rational[-1, 2], 2^Rational[-1, 2]}}], {
                 Wolfram`QuantumFramework`QuditName[
                  Subscript["\[Psi]", 
                   Subscript["y", "+"]], "Dual" -> True], 1} -> 
               SparseArray[
                Automatic, {2}, 0, {
                 1, {{0, 2}, {{1}, {2}}}, {
                  Complex[0, -1] 2^Rational[-1, 2], 2^Rational[-1, 2]}}]|>], 
            "Output" -> Wolfram`QuantumFramework`QuditBasis[<|{
                 Wolfram`QuantumFramework`QuditName[
                  Subscript["\[Psi]", 
                   Subscript["y", "-"]], "Dual" -> False], 1} -> 
               SparseArray[
                Automatic, {2}, 0, {
                 1, {{0, 2}, {{1}, {2}}}, {
                  Complex[0, 1] 2^Rational[-1, 2], 2^Rational[-1, 2]}}], {
                 Wolfram`QuantumFramework`QuditName[
                  Subscript["\[Psi]", 
                   Subscript["y", "+"]], "Dual" -> False], 1} -> 
               SparseArray[
                Automatic, {2}, 0, {
                 1, {{0, 2}, {{1}, {2}}}, {
                  Complex[0, -1] 2^Rational[-1, 2], 2^Rational[-1, 2]}}]|>], 
            "Picture" -> "Schr\[ODoubleDot]dinger", "Label" -> "Y", 
            "ParameterSpec" -> {}|>]], {{1}, {1}}], 
       "OrthogonalElements" -> {{
         Complex[0, 1] 2^Rational[-1, 2], 2^Rational[-1, 2]}, {
         Complex[0, -1] 2^Rational[-1, 2], 2^Rational[-1, 2]}}, "Output" -> 
       Wolfram`QuantumFramework`QuditBasis[<|{
            Wolfram`QuantumFramework`QuditName[
             Subscript["\[Psi]", 
              Subscript["y", "-"]], "Dual" -> False], 1} -> 
          SparseArray[
           Automatic, {2}, 0, {
            1, {{0, 2}, {{1}, {2}}}, {
             Complex[0, 1] 2^Rational[-1, 2], 2^Rational[-1, 2]}}], {
            Wolfram`QuantumFramework`QuditName[
             Subscript["\[Psi]", 
              Subscript["y", "+"]], "Dual" -> False], 1} -> 
          SparseArray[
           Automatic, {2}, 0, {
            1, {{0, 2}, {{1}, {2}}}, {
             Complex[0, -1] 2^Rational[-1, 2], 2^Rational[-1, 2]}}]|>], 
       "OutputBasis" -> 
       Wolfram`QuantumFramework`QuantumBasis[<|
         "Input" -> Wolfram`QuantumFramework`QuditBasis[<|{
               
               Wolfram`QuantumFramework`QuditName[\[FormalCapitalI], "Dual" -> 
                False], 1} -> 1|>], "Output" -> 
          Wolfram`QuantumFramework`QuditBasis[<|{
               Wolfram`QuantumFramework`QuditName[
                Subscript["\[Psi]", 
                 Subscript["y", "-"]], "Dual" -> False], 1} -> 
             SparseArray[
              Automatic, {2}, 0, {
               1, {{0, 2}, {{1}, {2}}}, {
                Complex[0, 1] 2^Rational[-1, 2], 2^Rational[-1, 2]}}], {
               Wolfram`QuantumFramework`QuditName[
                Subscript["\[Psi]", 
                 Subscript["y", "+"]], "Dual" -> False], 1} -> 
             SparseArray[
              Automatic, {2}, 0, {
               1, {{0, 2}, {{1}, {2}}}, {
                Complex[0, -1] 2^Rational[-1, 2], 2^Rational[-1, 2]}}]|>], 
          "Picture" -> "Schr\[ODoubleDot]dinger", "Label" -> "Y", 
          "ParameterSpec" -> {}|>], "OutputDimension" -> 2, 
       "OutputDimensions" -> {2}, "OutputElementDimensions" -> {2}, 
       "OutputElementNames" -> {
         Wolfram`QuantumFramework`QuditName[
          Subscript["\[Psi]", 
           Subscript["y", "-"]], "Dual" -> False], 
         Wolfram`QuantumFramework`QuditName[
          Subscript["\[Psi]", 
           Subscript["y", "+"]], "Dual" -> False]}, "OutputElements" -> 
       SparseArray[
        Automatic, {2, 2}, 0, {
         1, {{0, 2, 4}, {{1}, {2}, {1}, {2}}}, {
          Complex[0, 1] 2^Rational[-1, 2], 2^Rational[-1, 2], Complex[0, -1] 
           2^Rational[-1, 2], 2^Rational[-1, 2]}}], "OutputMatrix" -> 
       SparseArray[
        Automatic, {2, 2}, 0, {
         1, {{0, 2, 4}, {{1}, {2}, {1}, {2}}}, {
          Complex[0, 1] 2^Rational[-1, 2], Complex[0, -1] 2^Rational[-1, 2], 
           2^Rational[-1, 2], 2^Rational[-1, 2]}}], "OutputNameDimension" -> 
       2, "OutputNameDimensions" -> {2}, "OutputQudits" -> 1, "OutputRank" -> 
       1, "OutputSize" -> 2, "OutputTensor" -> 
       SparseArray[
        Automatic, {2, 2}, 0, {
         1, {{0, 2, 4}, {{1}, {2}, {1}, {2}}}, {
          Complex[0, 1] 2^Rational[-1, 2], Complex[0, -1] 2^Rational[-1, 2], 
           2^Rational[-1, 2], 2^Rational[-1, 2]}}], "ParameterArity" -> 0, 
       "Parameters" -> {}, "ParameterSpec" -> {}, "Picture" -> 
       "Schr\[ODoubleDot]dinger", "Probabilities" -> 
       SparseArray[Automatic, {2}, 0, {1, {{0, 2}, {{1}, {2}}}, {
           Rational[1, 5], 
           Rational[4, 5]}}], "Projector" -> 
       Wolfram`QuantumFramework`QuantumState[
         SparseArray[
         Automatic, {4}, 0, {
          1, {{0, 4}, {{1}, {2}, {3}, {4}}}, {1, 2, 2, 4}}], 
         Wolfram`QuantumFramework`QuantumBasis[<|
          "Input" -> Wolfram`QuantumFramework`QuditBasis[<|{
                Wolfram`QuantumFramework`QuditName[
                 Subscript["\[Psi]", 
                  Subscript["y", "-"]], "Dual" -> True], 1} -> 
              SparseArray[
               Automatic, {2}, 0, {
                1, {{0, 2}, {{1}, {2}}}, {
                 Complex[0, 1] 2^Rational[-1, 2], 2^Rational[-1, 2]}}], {
                Wolfram`QuantumFramework`QuditName[
                 Subscript["\[Psi]", 
                  Subscript["y", "+"]], "Dual" -> True], 1} -> 
              SparseArray[
               Automatic, {2}, 0, {
                1, {{0, 2}, {{1}, {2}}}, {
                 Complex[0, -1] 2^Rational[-1, 2], 2^Rational[-1, 2]}}]|>], 
           "Output" -> Wolfram`QuantumFramework`QuditBasis[<|{
                Wolfram`QuantumFramework`QuditName[
                 Subscript["\[Psi]", 
                  Subscript["y", "-"]], "Dual" -> False], 1} -> 
              SparseArray[
               Automatic, {2}, 0, {
                1, {{0, 2}, {{1}, {2}}}, {
                 Complex[0, 1] 2^Rational[-1, 2], 2^Rational[-1, 2]}}], {
                Wolfram`QuantumFramework`QuditName[
                 Subscript["\[Psi]", 
                  Subscript["y", "+"]], "Dual" -> False], 1} -> 
              SparseArray[
               Automatic, {2}, 0, {
                1, {{0, 2}, {{1}, {2}}}, {
                 Complex[0, -1] 2^Rational[-1, 2], 2^Rational[-1, 2]}}]|>], 
           "Picture" -> "Schr\[ODoubleDot]dinger", "Label" -> "Y", 
           "ParameterSpec" -> {}|>]], 
       "Projectors" -> {
        SparseArray[
         Automatic, {2, 2}, 0, {
          1, {{0, 2, 4}, {{1}, {2}, {1}, {2}}}, {
           Rational[1, 2], Complex[0, Rational[1, 2]], Complex[
            0, Rational[-1, 2]], Rational[1, 2]}}], SparseArray[
         Automatic, {2, 2}, 0, {
          1, {{0, 2, 4}, {{1}, {2}, {1}, {2}}}, {
           Rational[1, 2], Complex[0, Rational[-1, 2]], Complex[
            0, Rational[1, 2]], Rational[1, 2]}}]}, "Pure" -> 
       Wolfram`QuantumFramework`QuantumState[
         SparseArray[Automatic, {2}, 0, {1, {{0, 2}, {{1}, {2}}}, {1, 2}}], 
         Wolfram`QuantumFramework`QuantumBasis[<|
          "Input" -> Wolfram`QuantumFramework`QuditBasis[<|{
                
                Wolfram`QuantumFramework`QuditName[\[FormalCapitalI], "Dual" -> 
                 False], 1} -> 1|>], "Output" -> 
           Wolfram`QuantumFramework`QuditBasis[<|{
                Wolfram`QuantumFramework`QuditName[
                 Subscript["\[Psi]", 
                  Subscript["y", "-"]], "Dual" -> False], 1} -> 
              SparseArray[
               Automatic, {2}, 0, {
                1, {{0, 2}, {{1}, {2}}}, {
                 Complex[0, 1] 2^Rational[-1, 2], 2^Rational[-1, 2]}}], {
                Wolfram`QuantumFramework`QuditName[
                 Subscript["\[Psi]", 
                  Subscript["y", "+"]], "Dual" -> False], 1} -> 
              SparseArray[
               Automatic, {2}, 0, {
                1, {{0, 2}, {{1}, {2}}}, {
                 Complex[0, -1] 2^Rational[-1, 2], 2^Rational[-1, 2]}}]|>], 
           "Picture" -> "Schr\[ODoubleDot]dinger", "Label" -> "Y", 
           "ParameterSpec" -> {}|>]], "PureEffects" -> {
         Wolfram`QuantumFramework`QuantumState[
          SparseArray[Automatic, {2}, 0, {1, {{0, 1}, {{1}}}, {1}}], 
          
          Wolfram`QuantumFramework`QuantumBasis[<|
           "Input" -> Wolfram`QuantumFramework`QuditBasis[<|{
                 
                 Wolfram`QuantumFramework`QuditName[\[FormalCapitalI], "Dual" -> 
                  False], 1} -> 1|>], "Output" -> 
            Wolfram`QuantumFramework`QuditBasis[<|{
                 Wolfram`QuantumFramework`QuditName[
                  Subscript["\[Psi]", 
                   Subscript["y", "-"]], "Dual" -> False], 1} -> 
               SparseArray[
                Automatic, {2}, 0, {
                 1, {{0, 2}, {{1}, {2}}}, {
                  Complex[0, 1] 2^Rational[-1, 2], 2^Rational[-1, 2]}}], {
                 Wolfram`QuantumFramework`QuditName[
                  Subscript["\[Psi]", 
                   Subscript["y", "+"]], "Dual" -> False], 1} -> 
               SparseArray[
                Automatic, {2}, 0, {
                 1, {{0, 2}, {{1}, {2}}}, {
                  Complex[0, -1] 2^Rational[-1, 2], 2^Rational[-1, 2]}}]|>], 
            "Picture" -> "Schr\[ODoubleDot]dinger", "Label" -> "Y", 
            "ParameterSpec" -> {}|>]]}, "PureMaps" -> {{
          Wolfram`QuantumFramework`QuantumState[
           SparseArray[Automatic, {2}, 0, {1, {{0, 1}, {{1}}}, {1}}], 
           
           Wolfram`QuantumFramework`QuantumBasis[<|
            "Input" -> Wolfram`QuantumFramework`QuditBasis[<|{
                  
                  Wolfram`QuantumFramework`QuditName[\[FormalCapitalI], 
                   "Dual" -> False], 1} -> 1|>], "Output" -> 
             Wolfram`QuantumFramework`QuditBasis[<|{
                  Wolfram`QuantumFramework`QuditName[
                   Subscript["\[Psi]", 
                    Subscript["y", "-"]], "Dual" -> False], 1} -> 
                SparseArray[
                 Automatic, {2}, 0, {
                  1, {{0, 2}, {{1}, {2}}}, {
                   Complex[0, 1] 2^Rational[-1, 2], 2^Rational[-1, 2]}}], {
                  Wolfram`QuantumFramework`QuditName[
                   Subscript["\[Psi]", 
                    Subscript["y", "+"]], "Dual" -> False], 1} -> 
                SparseArray[
                 Automatic, {2}, 0, {
                  1, {{0, 2}, {{1}, {2}}}, {
                   Complex[0, -1] 2^Rational[-1, 2], 2^Rational[-1, 2]}}]|>], 
             "Picture" -> "Schr\[ODoubleDot]dinger", "Label" -> "Y", 
             "ParameterSpec" -> {}|>]]}, {
          Wolfram`QuantumFramework`QuantumState[
           SparseArray[Automatic, {2}, 0, {1, {{0, 1}, {{2}}}, {1}}], 
           
           Wolfram`QuantumFramework`QuantumBasis[<|
            "Input" -> Wolfram`QuantumFramework`QuditBasis[<|{
                  
                  Wolfram`QuantumFramework`QuditName[\[FormalCapitalI], 
                   "Dual" -> False], 1} -> 1|>], "Output" -> 
             Wolfram`QuantumFramework`QuditBasis[<|{
                  Wolfram`QuantumFramework`QuditName[
                   Subscript["\[Psi]", 
                    Subscript["y", "-"]], "Dual" -> False], 1} -> 
                SparseArray[
                 Automatic, {2}, 0, {
                  1, {{0, 2}, {{1}, {2}}}, {
                   Complex[0, 1] 2^Rational[-1, 2], 2^Rational[-1, 2]}}], {
                  Wolfram`QuantumFramework`QuditName[
                   Subscript["\[Psi]", 
                    Subscript["y", "+"]], "Dual" -> False], 1} -> 
                SparseArray[
                 Automatic, {2}, 0, {
                  1, {{0, 2}, {{1}, {2}}}, {
                   Complex[0, -1] 2^Rational[-1, 2], 2^Rational[-1, 2]}}]|>], 
             "Picture" -> "Schr\[ODoubleDot]dinger", "Label" -> "Y", 
             "ParameterSpec" -> {}|>]]}}, "PureStateQ" -> True, "PureStates" -> {
         Wolfram`QuantumFramework`QuantumState[
          SparseArray[Automatic, {2}, 0, {1, {{0, 1}, {{1}}}, {1}}], 
          
          Wolfram`QuantumFramework`QuantumBasis[<|
           "Input" -> Wolfram`QuantumFramework`QuditBasis[<|{
                 
                 Wolfram`QuantumFramework`QuditName[\[FormalCapitalI], "Dual" -> 
                  False], 1} -> 1|>], "Output" -> 
            Wolfram`QuantumFramework`QuditBasis[<|{
                 Wolfram`QuantumFramework`QuditName[
                  Subscript["\[Psi]", 
                   Subscript["y", "-"]], "Dual" -> False], 1} -> 
               SparseArray[
                Automatic, {2}, 0, {
                 1, {{0, 2}, {{1}, {2}}}, {
                  Complex[0, 1] 2^Rational[-1, 2], 2^Rational[-1, 2]}}], {
                 Wolfram`QuantumFramework`QuditName[
                  Subscript["\[Psi]", 
                   Subscript["y", "+"]], "Dual" -> False], 1} -> 
               SparseArray[
                Automatic, {2}, 0, {
                 1, {{0, 2}, {{1}, {2}}}, {
                  Complex[0, -1] 2^Rational[-1, 2], 2^Rational[-1, 2]}}]|>], 
            "Picture" -> "Schr\[ODoubleDot]dinger", "Label" -> "Y", 
            "ParameterSpec" -> {}|>]], 
         Wolfram`QuantumFramework`QuantumState[
          SparseArray[Automatic, {2}, 0, {1, {{0, 1}, {{2}}}, {1}}], 
          
          Wolfram`QuantumFramework`QuantumBasis[<|
           "Input" -> Wolfram`QuantumFramework`QuditBasis[<|{
                 
                 Wolfram`QuantumFramework`QuditName[\[FormalCapitalI], "Dual" -> 
                  False], 1} -> 1|>], "Output" -> 
            Wolfram`QuantumFramework`QuditBasis[<|{
                 Wolfram`QuantumFramework`QuditName[
                  Subscript["\[Psi]", 
                   Subscript["y", "-"]], "Dual" -> False], 1} -> 
               SparseArray[
                Automatic, {2}, 0, {
                 1, {{0, 2}, {{1}, {2}}}, {
                  Complex[0, 1] 2^Rational[-1, 2], 2^Rational[-1, 2]}}], {
                 Wolfram`QuantumFramework`QuditName[
                  Subscript["\[Psi]", 
                   Subscript["y", "+"]], "Dual" -> False], 1} -> 
               SparseArray[
                Automatic, {2}, 0, {
                 1, {{0, 2}, {{1}, {2}}}, {
                  Complex[0, -1] 2^Rational[-1, 2], 2^Rational[-1, 2]}}]|>], 
            "Picture" -> "Schr\[ODoubleDot]dinger", "Label" -> "Y", 
            "ParameterSpec" -> {}|>]]}, "Purity" -> 1, "QuditBasis" -> 
       Wolfram`QuantumFramework`QuditBasis[<|{
            Wolfram`QuantumFramework`QuditName[
             Subscript["\[Psi]", 
              Subscript["y", "-"]], "Dual" -> False], 1} -> 
          SparseArray[
           Automatic, {2}, 0, {
            1, {{0, 2}, {{1}, {2}}}, {
             Complex[0, 1] 2^Rational[-1, 2], 2^Rational[-1, 2]}}], {
            Wolfram`QuantumFramework`QuditName[
             Subscript["\[Psi]", 
              Subscript["y", "+"]], "Dual" -> False], 1} -> 
          SparseArray[
           Automatic, {2}, 0, {
            1, {{0, 2}, {{1}, {2}}}, {
             Complex[0, -1] 2^Rational[-1, 2], 2^Rational[-1, 2]}}]|>], 
       "Qudits" -> 1, "Rank" -> 1, "SchmidtBasis" -> 
       Wolfram`QuantumFramework`QuantumState[
         SparseArray[
         Automatic, {2}, 0, {1, {{0, 1}, {{1}}}, {5^Rational[1, 2]}}], 
         Wolfram`QuantumFramework`QuantumBasis[<|
          "Input" -> Wolfram`QuantumFramework`QuditBasis[<|{
                Wolfram`QuantumFramework`QuditName[
                 Subscript["v", 1], "Dual" -> False], 1} -> 
              SparseArray[Automatic, {1}, 0, {1, {{0, 1}, {{1}}}, {1}}]|>], 
           "Output" -> Wolfram`QuantumFramework`QuditBasis[<|{
                Wolfram`QuantumFramework`QuditName[
                 Subscript["u", 1], "Dual" -> False], 1} -> 
              SparseArray[
               Automatic, {2}, 0, {
                1, {{0, 2}, {{1}, {2}}}, {
                 Complex[0, -1] 10^Rational[-1, 2], 3 10^Rational[-1, 2]}}], {
               
                Wolfram`QuantumFramework`QuditName[
                 Subscript["u", 2], "Dual" -> False], 1} -> 
              SparseArray[
               Automatic, {2}, 0, {
                1, {{0, 2}, {{1}, {2}}}, {
                 Complex[0, 3] 10^Rational[-1, 2], 10^Rational[-1, 2]}}]|>], 
           "Picture" -> "Schr\[ODoubleDot]dinger", "Label" -> "Computational",
            "ParameterSpec" -> {}|>]], "Size" -> 3, "SpectralBasis" -> 
       Wolfram`QuantumFramework`QuantumState[
         SparseArray[Automatic, {2}, 0, {1, {{0, 1}, {{1}}}, {5}}], 
         Wolfram`QuantumFramework`QuantumBasis[<|
          "Input" -> Wolfram`QuantumFramework`QuditBasis[<|{
                
                Wolfram`QuantumFramework`QuditName[\[FormalCapitalI], "Dual" -> 
                 False], 1} -> 1|>], "Output" -> 
           Wolfram`QuantumFramework`QuditBasis[<|{
                Wolfram`QuantumFramework`QuditName[
                 Subscript["s", 1], "Dual" -> False], 1} -> 
              SparseArray[
               Automatic, {2}, 0, {1, {{0, 2}, {{1}, {2}}}, {1, 2}}], {
                Wolfram`QuantumFramework`QuditName[
                 Subscript["s", 2], "Dual" -> False], 1} -> 
              SparseArray[
               Automatic, {2}, 0, {1, {{0, 2}, {{1}, {2}}}, {-2, 1}}]|>], 
           "Picture" -> "Schr\[ODoubleDot]dinger", "Label" -> None, 
           "ParameterSpec" -> {}|>]], "State" -> 
       SparseArray[Automatic, {2}, 0, {1, {{0, 2}, {{1}, {2}}}, {1, 2}}], 
       "StateMatrix" -> 
       SparseArray[
        Automatic, {2, 1}, 0, {1, {{0, 1, 2}, {{1}, {1}}}, {1, 2}}], 
       "StateTensor" -> 
       SparseArray[Automatic, {2}, 0, {1, {{0, 2}, {{1}, {2}}}, {1, 2}}], 
       "StateType" -> "Vector", "StateVector" -> 
       SparseArray[Automatic, {2}, 0, {1, {{0, 2}, {{1}, {2}}}, {1, 2}}], 
       "Tensor" -> 
       SparseArray[
        Automatic, {2}, 0, {
         1, {{0, 2}, {{1}, {2}}}, {
          Complex[0, -1] 2^Rational[-1, 2], 3 2^Rational[-1, 2]}}], 
       "TensorDimensions" -> {2, 2}, "TensorRepresentation" -> 
       SparseArray[
        Automatic, {2}, 0, {
         1, {{0, 2}, {{1}, {2}}}, {
          Complex[0, -1] 2^Rational[-1, 2], 3 2^Rational[-1, 2]}}], 
       "Transpose" -> Wolfram`QuantumFramework`QuantumState[
         SparseArray[Automatic, {2}, 0, {1, {{0, 2}, {{1}, {2}}}, {1, 2}}], 
         Wolfram`QuantumFramework`QuantumBasis[<|
          "Input" -> Wolfram`QuantumFramework`QuditBasis[<|{
                Wolfram`QuantumFramework`QuditName[
                 Subscript["\[Psi]", 
                  Subscript["y", "-"]], "Dual" -> False], 1} -> 
              SparseArray[
               Automatic, {2}, 0, {
                1, {{0, 2}, {{1}, {2}}}, {
                 Complex[0, 1] 2^Rational[-1, 2], 2^Rational[-1, 2]}}], {
                Wolfram`QuantumFramework`QuditName[
                 Subscript["\[Psi]", 
                  Subscript["y", "+"]], "Dual" -> False], 1} -> 
              SparseArray[
               Automatic, {2}, 0, {
                1, {{0, 2}, {{1}, {2}}}, {
                 Complex[0, -1] 2^Rational[-1, 2], 2^Rational[-1, 2]}}]|>], 
           "Output" -> Wolfram`QuantumFramework`QuditBasis[<|{
                
                Wolfram`QuantumFramework`QuditName[\[FormalCapitalI], "Dual" -> 
                 False], 1} -> 1|>], "Picture" -> "Schr\[ODoubleDot]dinger", 
           "Label" -> Superscript["Y", "T"], "ParameterSpec" -> {}|>]], 
       "Type" -> "Pure", "VonNeumannEntropy" -> Quantity[0, "Bits"], 
       "Weights" -> 
       SparseArray[Automatic, {2}, 0, {1, {{0, 2}, {{1}, {2}}}, {1, 4}}]|>, 
     "AllowEmbedding" -> True, "InitialShape" -> 
     TypeSystem`PackageScope`Limited[
       TypeSystem`PackageScope`ColumnShape[
        TypeSystem`PackageScope`KeyValueShape[
         TypeSystem`PackageScope`AtomShape[280.], 
         TypeSystem`PackageScope`UnknownShape[False]]], 20, 
       DirectedInfinity[1], {}], "InitialType" -> TypeSystem`Assoc[
       TypeSystem`Atom[String], TypeSystem`AnyType, 107], "Meta" -> <||>, 
     "RowTarget" -> 20, "ColumnTarget" -> 10, "Shape" -> 
     TypeSystem`PackageScope`Limited[
       TypeSystem`PackageScope`ColumnShape[
        TypeSystem`PackageScope`KeyValueShape[
         TypeSystem`PackageScope`AtomShape[280.], 
         TypeSystem`PackageScope`UnknownShape[False]]], 20, 
       DirectedInfinity[1], {}], "Type" -> TypeSystem`Assoc[
       TypeSystem`Atom[String], TypeSystem`AnyType, 107], "Path" -> {}, 
     "DisplayedRowCount" -> 20, "DisplayedColumnCount" -> 1, "DataRowCount" -> 
     107, "DataColumnCount" -> 1, "SortPaths" -> {}, "SortDirections" -> {}, 
     "HiddenItemsMap" -> Null, "UpdateType" -> 1|>, 
    TypeSystem`NestedGrid`PackagePrivate`$outputID$$, 
    TypeSystem`NestedGrid`PackagePrivate`$path$$ = {}, 
    TypeSystem`NestedGrid`PackagePrivate`$vPos$$ = 1, 
    TypeSystem`NestedGrid`PackagePrivate`$hPos$$ = 1, 
    TypeSystem`NestedGrid`PackagePrivate`$grid$$ = 
    DynamicModule[{
     TypeSystem`NestedGrid`PackagePrivate`renderedGrid = Deploy[
        Style[
         Grid[{{
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover["Amplitudes", 
                  Style[
                  "Amplitudes", FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                If[
                  TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                    Key["Amplitudes"]}, 1]]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key["Amplitudes"]}, "RowHeader", False], "Mouse"], 
              ImageSize -> {{280., Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
             GrayLevel[0.95], Alignment -> {Left, Baseline}], 
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover[
                  Style[<|Wolfram`QuantumFramework`QuditName[
                    Subscript["\[Psi]", 
                    Subscript["y", "-"]], "Dual" -> False] -> 1, 
                    Wolfram`QuantumFramework`QuditName[
                    Subscript["\[Psi]", 
                    Subscript["y", "+"]], "Dual" -> False] -> 2|>, 
                   ShowStringCharacters -> False], 
                  Style[
                   Style[<|Wolfram`QuantumFramework`QuditName[
                    Subscript["\[Psi]", 
                    Subscript["y", "-"]], "Dual" -> False] -> 1, 
                    Wolfram`QuantumFramework`QuditName[
                    Subscript["\[Psi]", 
                    Subscript["y", "+"]], "Dual" -> False] -> 2|>, 
                    ShowStringCharacters -> False], FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                If[
                  TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                    Key["Amplitudes"]}, 4]]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key["Amplitudes"]}, "Item", False], "Mouse"], 
              ImageMargins -> {{5, 3}, {4, 5}}]]}, {
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover["Association", 
                  Style[
                  "Association", FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                If[
                  TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                    Key["Association"]}, 1]]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key["Association"]}, "RowHeader", False], "Mouse"], 
              ImageSize -> {{280., Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
             GrayLevel[0.95], Alignment -> {Left, Baseline}], 
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover[
                  Style[
                   Row[{"\[LeftAssociation] ", 
                    Subscript["\[Ellipsis]", 2], "\[RightAssociation]"}], 
                   GrayLevel[0.5]], 
                  Style[
                   Style[
                    Row[{"\[LeftAssociation] ", 
                    Subscript["\[Ellipsis]", 2], "\[RightAssociation]"}], 
                    GrayLevel[0.5]], FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                If[
                  TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                    Key["Association"]}, 4]]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key["Association"]}, "Item", False], "Mouse"], 
              ImageMargins -> {{5, 3}, {4, 5}}], BaseStyle -> {
               GrayLevel[0.5]}]}, {
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover["Basis", 
                  Style[
                  "Basis", FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                If[
                  TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                    Key["Basis"]}, 1]]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key["Basis"]}, "RowHeader", False], "Mouse"], 
              ImageSize -> {{280., Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
             GrayLevel[0.95], Alignment -> {Left, Baseline}], 
            Item[
             Pane[
              Annotation[
               RawBoxes[
                StyleBox[
                 RowBox[{
                   TagBox["QuantumBasis", "SummaryHead"], "[", 
                   TemplateBox[{
                    GridBox[{{
                    GridBox[{{
                    RowBox[{
                    TagBox["\"Picture: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox["\"Schr\[ODoubleDot]dinger\"", "SummaryItem"]}], 
                    RowBox[{
                    TagBox["\"Rank: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox["1", "SummaryItem"]}]}, {
                    RowBox[{
                    TagBox["\"Dimension: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox["2", "SummaryItem"]}], ""}}, 
                    GridBoxAlignment -> {
                    "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, 
                    AutoDelete -> False, 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {
                    "Columns" -> {{2}}, "Rows" -> {{Automatic}}}, 
                    BaseStyle -> {
                    ShowStringCharacters -> False, NumberMarks -> False, 
                    PrintPrecision -> 3, ShowSyntaxStyles -> False}]}}, 
                    GridBoxAlignment -> {
                    "Columns" -> {{Left}}, "Rows" -> {{Top}}}, AutoDelete -> 
                    False, 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                    BaselinePosition -> {1, 1}]}, "SummaryPanel"], "]"}], 
                 FontFamily -> Dynamic[
                   CurrentValue[{"StyleHints", "CodeFont"}]], 
                 ShowStringCharacters -> True]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key["Basis"]}, "Item", False], "Mouse"], 
              ImageSize -> {{60, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}]}, {
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover["BlochCartesianCoordinates", 
                  Style[
                  "BlochCartesianCoordinates", FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                If[
                  TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                    Key["BlochCartesianCoordinates"]}, 1]]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key["BlochCartesianCoordinates"]}, "RowHeader", False], 
               "Mouse"], ImageSize -> {{280., Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
             GrayLevel[0.95], Alignment -> {Left, Baseline}], 
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover[
                  Style[{0, 
                    Sin[2 ArcCos[10^Rational[-1, 2]]], 
                    Cos[2 ArcCos[10^Rational[-1, 2]]]}, ShowStringCharacters -> 
                   False], 
                  Style[
                   Style[{0, 
                    Sin[2 ArcCos[10^Rational[-1, 2]]], 
                    Cos[2 ArcCos[10^Rational[-1, 2]]]}, ShowStringCharacters -> 
                    False], FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                If[
                  TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                    Key["BlochCartesianCoordinates"]}, 4]]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key["BlochCartesianCoordinates"]}, "Item", False], "Mouse"], 
              ImageMargins -> {{5, 3}, {4, 5}}]]}, {
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover["BlochPlot", 
                  Style[
                  "BlochPlot", FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                If[
                  TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                    Key["BlochPlot"]}, 1]]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key["BlochPlot"]}, "RowHeader", False], "Mouse"], 
              ImageSize -> {{280., Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
             GrayLevel[0.95], Alignment -> {Left, Baseline}], 
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover[
                  Style["\[Ellipsis]", 
                   GrayLevel[0.5]], 
                  Style[
                   Style["\[Ellipsis]", 
                    GrayLevel[0.5]], FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                If[
                  TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                    Key["BlochPlot"]}, 4]]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key["BlochPlot"]}, "Item", False], "Mouse"], 
              ImageMargins -> {{5, 3}, {4, 5}}], BaseStyle -> {
               GrayLevel[0.5], Bold}]}, {
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover["BlochSphericalCoordinates", 
                  Style[
                  "BlochSphericalCoordinates", FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                If[
                  TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                    Key["BlochSphericalCoordinates"]}, 1]]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key["BlochSphericalCoordinates"]}, "RowHeader", False], 
               "Mouse"], ImageSize -> {{280., Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
             GrayLevel[0.95], Alignment -> {Left, Baseline}], 
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover[
                  
                  Style[{1, 2 ArcCos[10^Rational[-1, 2]], Rational[1, 2] Pi}, 
                   ShowStringCharacters -> False], 
                  Style[
                   
                   Style[{1, 2 ArcCos[10^Rational[-1, 2]], Rational[1, 2] Pi},
                     ShowStringCharacters -> False], FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                If[
                  TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                    Key["BlochSphericalCoordinates"]}, 4]]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key["BlochSphericalCoordinates"]}, "Item", False], "Mouse"], 
              ImageMargins -> {{5, 3}, {4, 5}}]]}, {
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover["Computational", 
                  Style[
                  "Computational", FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                If[
                  TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                    Key["Computational"]}, 1]]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key["Computational"]}, "RowHeader", False], "Mouse"], 
              ImageSize -> {{280., Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
             GrayLevel[0.95], Alignment -> {Left, Baseline}], 
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover[
                  Style["\[Ellipsis]", 
                   GrayLevel[0.5]], 
                  Style[
                   Style["\[Ellipsis]", 
                    GrayLevel[0.5]], FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                If[
                  TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                    Key["Computational"]}, 4]]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key["Computational"]}, "Item", False], "Mouse"], 
              ImageMargins -> {{5, 3}, {4, 5}}], BaseStyle -> {
               GrayLevel[0.5], Bold}]}, {
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover["ConjugateTranspose", 
                  Style[
                  "ConjugateTranspose", FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                If[
                  TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                    Key["ConjugateTranspose"]}, 1]]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key["ConjugateTranspose"]}, "RowHeader", False], "Mouse"], 
              ImageSize -> {{280., Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
             GrayLevel[0.95], Alignment -> {Left, Baseline}], 
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover[
                  Style["\[Ellipsis]", 
                   GrayLevel[0.5]], 
                  Style[
                   Style["\[Ellipsis]", 
                    GrayLevel[0.5]], FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                If[
                  TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                    Key["ConjugateTranspose"]}, 4]]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key["ConjugateTranspose"]}, "Item", False], "Mouse"], 
              ImageMargins -> {{5, 3}, {4, 5}}], BaseStyle -> {
               GrayLevel[0.5], Bold}]}, {
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover["DensityMatrix", 
                  Style[
                  "DensityMatrix", FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                If[
                  TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                    Key["DensityMatrix"]}, 1]]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key["DensityMatrix"]}, "RowHeader", False], "Mouse"], 
              ImageSize -> {{280., Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
             GrayLevel[0.95], Alignment -> {Left, Baseline}], 
            Item[
             Pane[
              Annotation[
               RawBoxes[
                StyleBox[
                 RowBox[{
                   TagBox["SparseArray", "SummaryHead"], "[", 
                   TemplateBox[{
                    GridBox[{{
                    GridBox[{{
                    RowBox[{
                    TagBox[
                    "\"Specified elements: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox["4", "SummaryItem"]}]}, {
                    RowBox[{
                    TagBox["\"Dimensions: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox[
                    RowBox[{"{", 
                    RowBox[{"2", ",", "2"}], "}"}], "SummaryItem"]}]}}, 
                    GridBoxAlignment -> {
                    "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, 
                    AutoDelete -> False, 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {
                    "Columns" -> {{2}}, "Rows" -> {{Automatic}}}, 
                    BaseStyle -> {
                    ShowStringCharacters -> False, NumberMarks -> False, 
                    PrintPrecision -> 3, ShowSyntaxStyles -> False}]}}, 
                    GridBoxAlignment -> {
                    "Columns" -> {{Left}}, "Rows" -> {{Top}}}, AutoDelete -> 
                    False, GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                    BaselinePosition -> {1, 1}]}, "SummaryPanel"], "]"}], 
                 FontFamily -> Dynamic[
                   CurrentValue[{"StyleHints", "CodeFont"}]], 
                 ShowStringCharacters -> True]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key["DensityMatrix"]}, "Item", False], "Mouse"], 
              ImageSize -> {{60, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}]}, {
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover["Diagram", 
                  Style[
                  "Diagram", FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                If[
                  TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                    Key["Diagram"]}, 1]]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key["Diagram"]}, "RowHeader", False], "Mouse"], 
              ImageSize -> {{280., Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
             GrayLevel[0.95], Alignment -> {Left, Baseline}], 
            Item[
             Pane[
              Annotation[
               RawBoxes[
                GraphicsBox[{
                  GeometricTransformationBox[{
                    LineBox[
                    NCache[{{0, 
                    Rational[1, 2]}, {1, 
                    Rational[1, 2]}, {
                    Rational[1, 2], 0}, {0, 
                    Rational[1, 2]}}, {{0, 0.5}, {1, 0.5}, {0.5, 0}, {
                    0, 0.5}}]], {
                    PointSize[
                    0.2 Dynamic[
                    3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                    Magnification])]], 
                    PointBox[
                    NCache[{{
                    Rational[1, 2], 
                    Rational[1, 2]}}, {{0.5, 0.5}}]], 
                    PointBox[{}]}, {
                    Arrowheads[
                    0.002 Dynamic[
                    3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                    Magnification])]], {
                    ArrowBox[
                    NCache[{{
                    Rational[1, 2], 
                    Rational[1, 2]}, {
                    Rational[1, 2], 
                    Rational[3, 5]}}, {{0.5, 0.5}, {0.5, 0.6}}]]}, {}}}, {{{1,
                     0}, {0, 1}}, {0, 0}}], 
                  InsetBox[
                   FormBox[
                    StyleBox[
                    "\"Y\"", {FontSize -> 24, FontFamily -> "Times"}, 
                    StripOnInput -> False], TraditionalForm], 
                   NCache[{
                    Rational[1, 2], 
                    Rational[1, 4]}, {0.5, 0.25}]]}, {
                 PlotRangeClipping -> True, Frame -> True, FrameStyle -> 
                  GrayLevel[0.85], Ticks -> None, FrameTicks -> None, Axes -> 
                  None, ImageSize -> 112}]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key["Diagram"]}, "Item", False], "Mouse"], 
              ImageSize -> {{60, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}]}, {
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover["Dimension", 
                  Style[
                  "Dimension", FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                If[
                  TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                    Key["Dimension"]}, 1]]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key["Dimension"]}, "RowHeader", False], "Mouse"], 
              ImageSize -> {{280., Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
             GrayLevel[0.95], Alignment -> {Left, Baseline}], 
            Item[
             Pane[
              Annotation[
               RawBoxes["2"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key["Dimension"]}, "Item", False], "Mouse"], 
              ImageSize -> {{34, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}]}, {
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover["Dimensions", 
                  Style[
                  "Dimensions", FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                If[
                  TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                    Key["Dimensions"]}, 1]]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key["Dimensions"]}, "RowHeader", False], "Mouse"], 
              ImageSize -> {{280., Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
             GrayLevel[0.95], Alignment -> {Left, Baseline}], 
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover[
                  Style[{2}, ShowStringCharacters -> False], 
                  Style[
                   Style[{2}, ShowStringCharacters -> False], FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                If[
                  TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                    Key["Dimensions"]}, 4]]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key["Dimensions"]}, "Item", False], "Mouse"], 
              ImageMargins -> {{5, 3}, {4, 5}}]]}, {
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover["Dual", 
                  Style[
                  "Dual", FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                If[
                  TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                    Key["Dual"]}, 1]]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key["Dual"]}, "RowHeader", False], "Mouse"], 
              ImageSize -> {{280., Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
             GrayLevel[0.95], Alignment -> {Left, Baseline}], 
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover[
                  Style["\[Ellipsis]", 
                   GrayLevel[0.5]], 
                  Style[
                   Style["\[Ellipsis]", 
                    GrayLevel[0.5]], FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                If[
                  TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                    Key["Dual"]}, 4]]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key["Dual"]}, "Item", False], "Mouse"], 
              ImageMargins -> {{5, 3}, {4, 5}}], BaseStyle -> {
               GrayLevel[0.5], Bold}]}, {
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover["Eigenstates", 
                  Style[
                  "Eigenstates", FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                If[
                  TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                    Key["Eigenstates"]}, 1]]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key["Eigenstates"]}, "RowHeader", False], "Mouse"], 
              ImageSize -> {{280., Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
             GrayLevel[0.95], Alignment -> {Left, Baseline}], 
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover[
                  Style[
                   Row[{"\[ThinSpace]{ ", 
                    Subscript["\[Ellipsis]", 2], " }\[ThinSpace]"}], 
                   GrayLevel[0.5]], 
                  Style[
                   Style[
                    Row[{"\[ThinSpace]{ ", 
                    Subscript["\[Ellipsis]", 2], " }\[ThinSpace]"}], 
                    GrayLevel[0.5]], FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                If[
                  TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                    Key["Eigenstates"]}, 4]]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key["Eigenstates"]}, "Item", False], "Mouse"], 
              ImageMargins -> {{5, 3}, {4, 5}}], BaseStyle -> {
               GrayLevel[0.5]}]}, {
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover["Eigenvalues", 
                  Style[
                  "Eigenvalues", FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                If[
                  TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                    Key["Eigenvalues"]}, 1]]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key["Eigenvalues"]}, "RowHeader", False], "Mouse"], 
              ImageSize -> {{280., Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
             GrayLevel[0.95], Alignment -> {Left, Baseline}], 
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover[
                  Style[{5, 0}, ShowStringCharacters -> False], 
                  Style[
                   Style[{5, 0}, ShowStringCharacters -> False], FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                If[
                  TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                    Key["Eigenvalues"]}, 4]]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key["Eigenvalues"]}, "Item", False], "Mouse"], 
              ImageMargins -> {{5, 3}, {4, 5}}]]}, {
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover["Eigenvectors", 
                  Style[
                  "Eigenvectors", FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                If[
                  TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                    Key["Eigenvectors"]}, 1]]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key["Eigenvectors"]}, "RowHeader", False], "Mouse"], 
              ImageSize -> {{280., Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
             GrayLevel[0.95], Alignment -> {Left, Baseline}], 
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover[
                  Style[{{1, 2}, {-2, 1}}, ShowStringCharacters -> False], 
                  Style[
                   Style[{{1, 2}, {-2, 1}}, ShowStringCharacters -> False], 
                   FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                If[
                  TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                    Key["Eigenvectors"]}, 4]]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key["Eigenvectors"]}, "Item", False], "Mouse"], 
              ImageMargins -> {{5, 3}, {4, 5}}]]}, {
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover["ElementAssociation", 
                  Style[
                  "ElementAssociation", FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                If[
                  TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                    Key["ElementAssociation"]}, 1]]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key["ElementAssociation"]}, "RowHeader", False], "Mouse"], 
              ImageSize -> {{280., Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
             GrayLevel[0.95], Alignment -> {Left, Baseline}], 
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover[
                  Style[
                   Row[{"\[LeftAssociation] ", 
                    Subscript["\[Ellipsis]", 2], "\[RightAssociation]"}], 
                   GrayLevel[0.5]], 
                  Style[
                   Style[
                    Row[{"\[LeftAssociation] ", 
                    Subscript["\[Ellipsis]", 2], "\[RightAssociation]"}], 
                    GrayLevel[0.5]], FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                If[
                  TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                    Key["ElementAssociation"]}, 4]]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key["ElementAssociation"]}, "Item", False], "Mouse"], 
              ImageMargins -> {{5, 3}, {4, 5}}], BaseStyle -> {
               GrayLevel[0.5]}]}, {
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover["ElementDimension", 
                  Style[
                  "ElementDimension", FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                If[
                  TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                    Key["ElementDimension"]}, 1]]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key["ElementDimension"]}, "RowHeader", False], "Mouse"], 
              ImageSize -> {{280., Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
             GrayLevel[0.95], Alignment -> {Left, Baseline}], 
            Item[
             Pane[
              Annotation[
               RawBoxes["2"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key["ElementDimension"]}, "Item", False], "Mouse"], 
              ImageSize -> {{34, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}]}, {
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover["ElementDimensions", 
                  Style[
                  "ElementDimensions", FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                If[
                  TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                    Key["ElementDimensions"]}, 1]]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key["ElementDimensions"]}, "RowHeader", False], "Mouse"], 
              ImageSize -> {{280., Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
             GrayLevel[0.95], Alignment -> {Left, Baseline}], 
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover[
                  Style[{2}, ShowStringCharacters -> False], 
                  Style[
                   Style[{2}, ShowStringCharacters -> False], FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                If[
                  TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                    Key["ElementDimensions"]}, 4]]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key["ElementDimensions"]}, "Item", False], "Mouse"], 
              ImageMargins -> {{5, 3}, {4, 5}}]]}, {
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover["ElementNames", 
                  Style[
                  "ElementNames", FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                If[
                  TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                    Key["ElementNames"]}, 1]]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key["ElementNames"]}, "RowHeader", False], "Mouse"], 
              ImageSize -> {{280., Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
             GrayLevel[0.95], Alignment -> {Left, Baseline}], 
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover[
                  Style[{
                    Wolfram`QuantumFramework`QuditName[
                    Subscript["\[Psi]", 
                    Subscript["y", "-"]], "Dual" -> False], 
                    Wolfram`QuantumFramework`QuditName[
                    Subscript["\[Psi]", 
                    Subscript["y", "+"]], "Dual" -> False]}, 
                   ShowStringCharacters -> False], 
                  Style[
                   Style[{
                    Wolfram`QuantumFramework`QuditName[
                    Subscript["\[Psi]", 
                    Subscript["y", "-"]], "Dual" -> False], 
                    Wolfram`QuantumFramework`QuditName[
                    Subscript["\[Psi]", 
                    Subscript["y", "+"]], "Dual" -> False]}, 
                    ShowStringCharacters -> False], FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                If[
                  TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                    Key["ElementNames"]}, 4]]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key["ElementNames"]}, "Item", False], "Mouse"], 
              ImageMargins -> {{5, 3}, {4, 5}}]]}, {
            Item[
             Deploy[
              Pane[
               Row[{
                 Spacer[2], 
                 Style[
                  Row[{
                    Button[
                    MouseAppearance[
                    Mouseover[
                    Graphics[{{
                    EdgeForm[None], 
                    FaceForm[None], 
                    Rectangle[{0, 0}, {18, 18}, RoundingRadius -> 2]}, 
                    Rotate[
                    Translate[{
                    CapForm[Round], 
                    Line[{{0, 0}, {4, 5}, {8, 0}}], 
                    Line[{{0, 5}, {8, 5}}]}, {5, 6.5}], 0, {9, 9}]}, 
                    ImageSize -> (1 -> 1), ImagePadding -> {{0, 1}, {1, 0}}, 
                    BaselinePosition -> Scaled[0.35], BaseStyle -> 
                    RGBColor[
                    0.5372549019607843, 0.5372549019607843, 
                    0.5372549019607843]], 
                    Graphics[{{
                    EdgeForm[
                    RGBColor[
                    0.27450980392156865`, 0.5411764705882353, 
                    0.796078431372549]], 
                    FaceForm[None], 
                    Rectangle[{0, 0}, {18, 18}, RoundingRadius -> 2]}, 
                    Rotate[
                    Translate[{
                    CapForm[Round], 
                    RGBColor[
                    0.27450980392156865`, 0.5411764705882353, 
                    0.796078431372549], 
                    Line[{{0, 0}, {4, 5}, {8, 0}}], 
                    Line[{{0, 5}, {8, 5}}]}, {5, 6.5}], 0, {9, 9}]}, 
                    ImageSize -> (1 -> 1), ImagePadding -> {{0, 1}, {1, 0}}, 
                    BaselinePosition -> Scaled[0.35]]], "LinkHand"], 
                    If[
                    TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$ = 
                    Clip[TypeSystem`NestedGrid`PackagePrivate`$vPos$$ + (-20) 
                    If[True, 107, 1], {1, 107 - -20 + 1}]; 
                    TypeSystem`NestedGrid`PackagePrivate`updateState[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]], True][
                    TypeSystem`NestedGrid`PackagePrivate`$path$$]], 
                    Appearance -> None], 
                    Button[
                    MouseAppearance[
                    Mouseover[
                    Graphics[{{
                    EdgeForm[None], 
                    FaceForm[None], 
                    Rectangle[{0, 0}, {18, 18}, RoundingRadius -> 2]}, 
                    Rotate[
                    Translate[{
                    CapForm[Round], 
                    Line[{{0, 0}, {4, 5}, {8, 0}}]}, {5, 6.5}], 0, {9, 9}]}, 
                    ImageSize -> (1 -> 1), ImagePadding -> {{0, 1}, {1, 0}}, 
                    BaselinePosition -> Scaled[0.35], BaseStyle -> 
                    RGBColor[
                    0.5372549019607843, 0.5372549019607843, 
                    0.5372549019607843]], 
                    Graphics[{{
                    EdgeForm[
                    RGBColor[
                    0.27450980392156865`, 0.5411764705882353, 
                    0.796078431372549]], 
                    FaceForm[None], 
                    Rectangle[{0, 0}, {18, 18}, RoundingRadius -> 2]}, 
                    Rotate[
                    Translate[{
                    CapForm[Round], 
                    RGBColor[
                    0.27450980392156865`, 0.5411764705882353, 
                    0.796078431372549], 
                    Line[{{0, 0}, {4, 5}, {8, 0}}]}, {5, 6.5}], 0, {9, 9}]}, 
                    ImageSize -> (1 -> 1), ImagePadding -> {{0, 1}, {1, 0}}, 
                    BaselinePosition -> Scaled[0.35]]], "LinkHand"], 
                    If[
                    TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$ = 
                    Clip[TypeSystem`NestedGrid`PackagePrivate`$vPos$$ + (-20) 
                    If[False, 107, 1], {1, 107 - -20 + 1}]; 
                    TypeSystem`NestedGrid`PackagePrivate`updateState[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]], True][
                    TypeSystem`NestedGrid`PackagePrivate`$path$$]], 
                    Appearance -> None], " ", 
                    Style[
                    Mouseover[
                    Style[
                    Row[{"rows ", 1, "\[Dash]", 20, " of ", 
                    Style[107, FontWeight -> Bold]}], FontSize -> 
                    9.333333333333332, FontColor -> 
                    RGBColor[
                    0.5098039215686274, 0.5098039215686274, 
                    0.5098039215686274]], 
                    Style[
                    Row[{"rows ", 1, "\[Dash]", 20, " of ", 
                    Style[107, FontWeight -> Bold]}], FontSize -> 
                    9.333333333333332, FontColor -> 
                    RGBColor[
                    0.5098039215686274, 0.5098039215686274, 
                    0.5098039215686274]]], ContextMenu -> {
                    MenuItem["Hide", 
                    KernelExecute[
                    
                    TypeSystem`NestedGrid`PackagePrivate`adjustLimits[{
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]}, 
                    "Rows", 1, {}]], MenuEvaluator -> Automatic], 
                    MenuItem["Show up to 10 Rows", 
                    KernelExecute[
                    
                    TypeSystem`NestedGrid`PackagePrivate`adjustLimits[{
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]}, 
                    "Rows", 10, {}]], MenuEvaluator -> Automatic], 
                    MenuItem["Show up to 30 Rows", 
                    KernelExecute[
                    
                    TypeSystem`NestedGrid`PackagePrivate`adjustLimits[{
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]}, 
                    "Rows", 30, {}]], MenuEvaluator -> Automatic], 
                    MenuItem["Show up to 100 Rows", 
                    KernelExecute[
                    
                    TypeSystem`NestedGrid`PackagePrivate`adjustLimits[{
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]}, 
                    "Rows", 100, {}]], MenuEvaluator -> Automatic], 
                    MenuItem["Show All", 
                    KernelExecute[
                    
                    TypeSystem`NestedGrid`PackagePrivate`adjustLimits[{
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]}, 
                    "Rows", 100000000, {}]], MenuEvaluator -> Automatic]}], 
                    " ", 
                    Button[
                    MouseAppearance[
                    Mouseover[
                    Graphics[{{
                    EdgeForm[None], 
                    FaceForm[None], 
                    Rectangle[{0, 0}, {18, 18}, RoundingRadius -> 2]}, 
                    Rotate[
                    Translate[{
                    CapForm[Round], 
                    Line[{{0, 0}, {4, 5}, {8, 0}}]}, {5, 6.5}], 180 Degree, {
                    9, 9}]}, ImageSize -> (1 -> 1), 
                    ImagePadding -> {{0, 1}, {1, 0}}, BaselinePosition -> 
                    Scaled[0.35], BaseStyle -> 
                    RGBColor[
                    0.5372549019607843, 0.5372549019607843, 
                    0.5372549019607843]], 
                    Graphics[{{
                    EdgeForm[
                    RGBColor[
                    0.27450980392156865`, 0.5411764705882353, 
                    0.796078431372549]], 
                    FaceForm[None], 
                    Rectangle[{0, 0}, {18, 18}, RoundingRadius -> 2]}, 
                    Rotate[
                    Translate[{
                    CapForm[Round], 
                    RGBColor[
                    0.27450980392156865`, 0.5411764705882353, 
                    0.796078431372549], 
                    Line[{{0, 0}, {4, 5}, {8, 0}}]}, {5, 6.5}], 180 Degree, {
                    9, 9}]}, ImageSize -> (1 -> 1), 
                    ImagePadding -> {{0, 1}, {1, 0}}, BaselinePosition -> 
                    Scaled[0.35]]], "LinkHand"], 
                    If[
                    TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$ = 
                    Clip[TypeSystem`NestedGrid`PackagePrivate`$vPos$$ + 
                    20 If[False, 107, 1], {1, 107 - 20 + 1}]; 
                    TypeSystem`NestedGrid`PackagePrivate`updateState[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]], True][
                    TypeSystem`NestedGrid`PackagePrivate`$path$$]], 
                    Appearance -> None], 
                    Button[
                    MouseAppearance[
                    Mouseover[
                    Graphics[{{
                    EdgeForm[None], 
                    FaceForm[None], 
                    Rectangle[{0, 0}, {18, 18}, RoundingRadius -> 2]}, 
                    Rotate[
                    Translate[{
                    CapForm[Round], 
                    Line[{{0, 0}, {4, 5}, {8, 0}}], 
                    Line[{{0, 5}, {8, 5}}]}, {5, 6.5}], 180 Degree, {9, 9}]}, 
                    ImageSize -> (1 -> 1), ImagePadding -> {{0, 1}, {1, 0}}, 
                    BaselinePosition -> Scaled[0.35], BaseStyle -> 
                    RGBColor[
                    0.5372549019607843, 0.5372549019607843, 
                    0.5372549019607843]], 
                    Graphics[{{
                    EdgeForm[
                    RGBColor[
                    0.27450980392156865`, 0.5411764705882353, 
                    0.796078431372549]], 
                    FaceForm[None], 
                    Rectangle[{0, 0}, {18, 18}, RoundingRadius -> 2]}, 
                    Rotate[
                    Translate[{
                    CapForm[Round], 
                    RGBColor[
                    0.27450980392156865`, 0.5411764705882353, 
                    0.796078431372549], 
                    Line[{{0, 0}, {4, 5}, {8, 0}}], 
                    Line[{{0, 5}, {8, 5}}]}, {5, 6.5}], 180 Degree, {9, 9}]}, 
                    ImageSize -> (1 -> 1), ImagePadding -> {{0, 1}, {1, 0}}, 
                    BaselinePosition -> Scaled[0.35]]], "LinkHand"], 
                    If[
                    TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$ = 
                    Clip[TypeSystem`NestedGrid`PackagePrivate`$vPos$$ + 
                    20 If[True, 107, 1], {1, 107 - 20 + 1}]; 
                    TypeSystem`NestedGrid`PackagePrivate`updateState[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]], True][
                    TypeSystem`NestedGrid`PackagePrivate`$path$$]], 
                    Appearance -> None]}], ContextMenu -> {}]}], 
               ImageMargins -> {{0, -1}, {-1, 1}}]], Background -> 
             RGBColor[
              0.9764705882352941, 0.9764705882352941, 0.9764705882352941], 
             Alignment -> {Left, Top}], SpanFromLeft}}, 
          BaseStyle -> {
           ContextMenu -> 
            Dynamic[TypeSystem`NestedGrid`PackagePrivate`$contextMenuTrigger; 
              Which[TypeSystem`NestedGrid`PackagePrivate`$lastOutputID =!= 
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                 TypeSystem`NestedGrid`PackagePrivate`$outputID$$], {}, 
                TypeSystem`NestedGrid`PackagePrivate`$contextMenuTrigger === 
                TypeSystem`NestedGrid`PackagePrivate`$lastContextMenuTrigger, 
                TypeSystem`NestedGrid`PackagePrivate`$lastContextMenu, True, 
                TypeSystem`NestedGrid`PackagePrivate`$lastContextMenuTrigger = 
                 TypeSystem`NestedGrid`PackagePrivate`$contextMenuTrigger; 
                TypeSystem`NestedGrid`PackagePrivate`$lastContextMenu = 
                 Block[{TypeSystem`NestedGrid`PackagePrivate`$globalScrollPos = \
{TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$}}, 
                   
                   With[{TypeSystem`NestedGrid`PackagePrivate`lastPath$ = 
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath, 
                    TypeSystem`NestedGrid`PackagePrivate`lastPathType$ = 
                    TypeSystem`NestedGrid`PackagePrivate`$lastPathType, 
                    TypeSystem`NestedGrid`PackagePrivate`isLeafHeader$ = 
                    TypeSystem`NestedGrid`PackagePrivate`$\
lastPathIsLeafHeader, TypeSystem`NestedGrid`PackagePrivate`headerHidden$ = And[
                    MatchQ[TypeSystem`NestedGrid`PackagePrivate`$lastPathType, 
                    Alternatives["RowHeader", "ColumnHeader"]], 
                    TypeSystem`NestedGrid`PackagePrivate`headerHiddenQ[
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath, 
                    TypeSystem`NestedGrid`PackagePrivate`$state$$]], 
                    TypeSystem`NestedGrid`PackagePrivate`allHidden$ = 
                    TypeSystem`NestedGrid`PackagePrivate`allHiddenQ[
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath, 
                    TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                    TypeSystem`NestedGrid`PackagePrivate`anyHidden$ = 
                    TypeSystem`NestedGrid`PackagePrivate`anyHiddenQ[
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath, 
                    TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                    TypeSystem`NestedGrid`PackagePrivate`sortDirection$ = 
                    TypeSystem`NestedGrid`PackagePrivate`columnSortDirection[
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath, 
                    TypeSystem`NestedGrid`PackagePrivate`$state$$[
                    "SortPaths"], 
                    TypeSystem`NestedGrid`PackagePrivate`$state$$[
                    "SortDirections"]], 
                    TypeSystem`NestedGrid`PackagePrivate`haveData$ = Not[
                    FailureQ[
                    TypeSystem`NestedGrid`PackagePrivate`datasetInitialData[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$]]], 
                    TypeSystem`NestedGrid`PackagePrivate`isKeyDummy$ = Not[
                    FreeQ[
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath, Keys]]}, 
                    Join[{
                    If[
                    Or[
                    Not[TypeSystem`NestedGrid`PackagePrivate`haveData$], 
                    Not[TypeSystem`NestedGrid`PackagePrivate`anyHidden$], 
                    TypeSystem`NestedGrid`PackagePrivate`isKeyDummy$], 
                    Nothing, 
                    MenuItem[
                    "Show " <> 
                    Which[TypeSystem`NestedGrid`PackagePrivate`lastPathType$ == 
                    "Item", "", 
                    TypeSystem`NestedGrid`PackagePrivate`lastPathType$ == 
                    "RowHeader", "Row", 
                    TypeSystem`NestedGrid`PackagePrivate`lastPathType$ == 
                    "ColumnHeader", "Column", True, ""], 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`updateHiddenItems[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][
                    TypeSystem`NestedGrid`PackagePrivate`lastPath$, 
                    "remove"]], MenuEvaluator -> Automatic]], 
                    If[
                    Or[
                    Not[TypeSystem`NestedGrid`PackagePrivate`haveData$], 
                    TypeSystem`NestedGrid`PackagePrivate`pathEmptyQ[
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath, 
                    TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                    TypeSystem`NestedGrid`PackagePrivate`isKeyDummy$, 
                    And[
                    TypeSystem`NestedGrid`PackagePrivate`allHidden$, 
                    TypeSystem`NestedGrid`PackagePrivate`headerHidden$]], 
                    Nothing, 
                    MenuItem[
                    "Hide " <> 
                    Which[TypeSystem`NestedGrid`PackagePrivate`lastPathType$ == 
                    "Item", "", 
                    TypeSystem`NestedGrid`PackagePrivate`lastPathType$ == 
                    "RowHeader", "Row", 
                    TypeSystem`NestedGrid`PackagePrivate`lastPathType$ == 
                    "ColumnHeader", "Column", True, ""], 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`updateHiddenItems[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][
                    TypeSystem`NestedGrid`PackagePrivate`lastPath$, "add"]], 
                    MenuEvaluator -> Automatic]], Delimiter}, 
                    If[
                    And[TypeSystem`NestedGrid`PackagePrivate`haveData$, 
                    MatchQ[TypeSystem`NestedGrid`PackagePrivate`lastPathType$, 
                    Alternatives["ColumnHeader", "KeyDummy"]], 
                    TypeSystem`NestedGrid`PackagePrivate`isLeafHeader$, 
                    Not[TypeSystem`NestedGrid`PackagePrivate`allHidden$]], {
                    If[
                    TypeSystem`NestedGrid`PackagePrivate`sortDirection$ =!= 
                    "Ascending", 
                    MenuItem["Sort", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`updateSort[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][
                    TypeSystem`NestedGrid`PackagePrivate`lastPath$, 
                    "Ascending"]], MenuEvaluator -> Automatic], Nothing], 
                    If[
                    TypeSystem`NestedGrid`PackagePrivate`sortDirection$ =!= 
                    "Descending", 
                    MenuItem["Reverse Sort", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`updateSort[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][
                    TypeSystem`NestedGrid`PackagePrivate`lastPath$, 
                    "Descending"]], MenuEvaluator -> Automatic], Nothing], 
                    If[
                    TypeSystem`NestedGrid`PackagePrivate`sortDirection$ =!= 
                    None, 
                    MenuItem["Unsort", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`updateSort[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][
                    TypeSystem`NestedGrid`PackagePrivate`lastPath$, None]], 
                    MenuEvaluator -> Automatic], Nothing], Delimiter}, {}], {
                    MenuItem["Copy Position to Clipboard", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`toCurrentPosition[
                    TypeSystem`NestedGrid`PackagePrivate`copyClip]], 
                    MenuEvaluator -> Automatic], 
                    If[TypeSystem`NestedGrid`PackagePrivate`haveData$, 
                    MenuItem["Copy Data to Clipboard", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`toCurrentData[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`copyClip]], 
                    MenuEvaluator -> Automatic], Nothing], Delimiter, 
                    MenuItem["Paste Position in New Cell", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`toCurrentPosition[
                    TypeSystem`NestedGrid`PackagePrivate`cellPaste]], 
                    MenuEvaluator -> Automatic], 
                    If[TypeSystem`NestedGrid`PackagePrivate`haveData$, 
                    MenuItem["Paste Data in New Cell", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`toCurrentData[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`cellPaste]], 
                    MenuEvaluator -> Automatic], Nothing]}]]]]], FontFamily -> 
            "Source Sans Pro", FontSize -> 14, FontWeight -> Plain}, Dividers -> 
          All, FrameStyle -> GrayLevel[0.7490196078431373], 
          Spacings -> {0, 0}, Alignment -> Left, 
          BaseStyle -> {
           FontFamily -> "Source Sans Pro", FontSize -> 14, FontWeight -> 
            Plain}], LineBreakWithin -> False, ContextMenu -> {}, NumberMarks -> 
         False, ShowAutoStyles -> False]], 
      TypeSystem`NestedGrid`PackagePrivate`initialQ = True}, 
     Dynamic[
      TypeSystem`NestedGrid`PackagePrivate`setupViewPath[
      TypeSystem`NestedGrid`PackagePrivate`$path$$, If[
         Not[TypeSystem`NestedGrid`PackagePrivate`initialQ], 
         Module[{
          TypeSystem`NestedGrid`PackagePrivate`tmpGrid$ = $Failed, 
           TypeSystem`NestedGrid`PackagePrivate`tmpData$ = 
           TypeSystem`NestedGrid`PackagePrivate`datasetData[
            TypeSystem`NestedGrid`PackagePrivate`$state$$]}, 
          TypeSystem`NestedGrid`PackagePrivate`tmpGrid$ = If[
             FailureQ[TypeSystem`NestedGrid`PackagePrivate`tmpData$], 
             TypeSystem`NestedGrid`PackagePrivate`renderedGrid, 
             TypeSystem`NestedGrid`PackagePrivate`renderGrid[
             TypeSystem`NestedGrid`PackagePrivate`$state$$, 
              TypeSystem`NestedGrid`PackagePrivate`$path$$, 
              TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
              TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
              TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
              TypeSystem`NestedGrid`PackagePrivate`localHold[
              TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][
             TypeSystem`NestedGrid`PackagePrivate`tmpData$]]; If[
            Not[
             FailureQ[TypeSystem`NestedGrid`PackagePrivate`tmpGrid$]], 
            TypeSystem`NestedGrid`PackagePrivate`renderedGrid = 
            TypeSystem`NestedGrid`PackagePrivate`tmpGrid$]; Null]]; 
       TypeSystem`NestedGrid`PackagePrivate`initialQ = False; 
       TypeSystem`NestedGrid`PackagePrivate`$vPos$$; 
       TypeSystem`NestedGrid`PackagePrivate`$hPos$$; If[
         FailureQ[TypeSystem`NestedGrid`PackagePrivate`renderedGrid], 
         TypeSystem`SparseGrid[
          TypeSystem`H["(data no longer present)"]], 
         TypeSystem`NestedGrid`PackagePrivate`renderedGrid]], 
      TrackedSymbols :> {
       TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
        TypeSystem`NestedGrid`PackagePrivate`$hPos$$}], 
     DynamicModuleValues :> {}], 
    TypeSystem`NestedGrid`PackagePrivate`$topBar$$ = Dynamic[
     TypeSystem`NestedGrid`PackagePrivate`makeFramedBar[
      TypeSystem`PackageScope`SubViewPathbar[
      TypeSystem`NestedGrid`PackagePrivate`$path$$, 
       TypeSystem`NestedGrid`PackagePrivate`updateState[
       TypeSystem`NestedGrid`PackagePrivate`$state$$, 
        TypeSystem`NestedGrid`PackagePrivate`$path$$, 
        TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
        TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
        TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
        TypeSystem`NestedGrid`PackagePrivate`localHold[
        TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]]], 
     TrackedSymbols :> {TypeSystem`NestedGrid`PackagePrivate`$path$$}], 
    TypeSystem`NestedGrid`PackagePrivate`$bottomBar$$ = Style[
     Framed[
      Dynamic[
       Replace[
       TypeSystem`NestedGrid`PackagePrivate`mouseAnnotation$$, {
        TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
           TypeSystem`NestedGrid`PackagePrivate`localHold[
           TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][Null, 
           Blank[]] -> "", TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
           TypeSystem`NestedGrid`PackagePrivate`localHold[
           TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][
           Pattern[TypeSystem`NestedGrid`PackagePrivate`path$, 
            Blank[]], 
           Pattern[TypeSystem`NestedGrid`PackagePrivate`pathType$, 
            Blank[]], 
           Pattern[TypeSystem`NestedGrid`PackagePrivate`isLeafHeader$, 
            Blank[]]] :> (
          Increment[TypeSystem`NestedGrid`PackagePrivate`$contextMenuTrigger]; 
          TypeSystem`NestedGrid`PackagePrivate`$lastPath = 
           TypeSystem`NestedGrid`PackagePrivate`path$; 
          TypeSystem`NestedGrid`PackagePrivate`$lastPathType = 
           TypeSystem`NestedGrid`PackagePrivate`pathType$; 
          TypeSystem`NestedGrid`PackagePrivate`$lastPathIsLeafHeader = 
           TypeSystem`NestedGrid`PackagePrivate`isLeafHeader$; 
          TypeSystem`NestedGrid`PackagePrivate`$lastOutputID = 
           TypeSystem`NestedGrid`PackagePrivate`localHold[
            TypeSystem`NestedGrid`PackagePrivate`$outputID$$]; 
          TypeSystem`NestedGrid`PackagePrivate`makePathTrail[
           TypeSystem`NestedGrid`PackagePrivate`path$, 
            TypeSystem`NestedGrid`PackagePrivate`makePathElements]), Null :> 
         Spacer[10], Blank[] :> Spacer[10]}], 
       TrackedSymbols :> {
        TypeSystem`NestedGrid`PackagePrivate`mouseAnnotation$$}], FrameStyle -> 
      None, ImageMargins -> 0, FrameMargins -> 0, Alignment -> Top, 
      ImageSize -> {Automatic, 15}], FontSize -> 1], 
    TypeSystem`NestedGrid`PackagePrivate`mouseAnnotation$$ = Null}, 
    DynamicWrapperBox[
     DynamicBox[ToBoxes[
       Dataset`DatasetContent[
       2, "Path" -> Hold[TypeSystem`NestedGrid`PackagePrivate`$path$$], 
        "Grid" -> Hold[TypeSystem`NestedGrid`PackagePrivate`$grid$$], "State" -> 
        Hold[TypeSystem`NestedGrid`PackagePrivate`$state$$], "VPos" -> 
        Hold[TypeSystem`NestedGrid`PackagePrivate`$vPos$$], "HPos" -> 
        Hold[TypeSystem`NestedGrid`PackagePrivate`$hPos$$], "TopBar" -> 
        Hold[TypeSystem`NestedGrid`PackagePrivate`$topBar$$], "BottomBar" -> 
        Hold[TypeSystem`NestedGrid`PackagePrivate`$bottomBar$$], "OutputID" -> 
        Hold[
          TypeSystem`NestedGrid`PackagePrivate`localHold[
          TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]], StandardForm],
      ImageSizeCache->{620., {354.134033203125, 359.865966796875}},
      TrackedSymbols:>{
       TypeSystem`NestedGrid`PackagePrivate`$state$$, 
        TypeSystem`NestedGrid`PackagePrivate`$grid$$}], 
     TypeSystem`NestedGrid`PackagePrivate`mouseAnnotation$$ = 
     MouseAnnotation[],
     ImageSizeCache->{620., {354.134033203125, 359.865966796875}}],
    BaseStyle->{LineBreakWithin -> False},
    DynamicModuleValues:>{},
    Initialization:>(TypeSystem`NestedGrid`PackagePrivate`$outputID$$ = 
     CreateUUID[]),
    UnsavedVariables:>{TypeSystem`NestedGrid`PackagePrivate`$outputID$$}],
   Deploy,
   DefaultBaseStyle->"Deploy"],
  Dataset`InterpretDataset[1],
  Editable->False,
  SelectWithContents->True,
  Selectable->False]], "Output",
 CellChangeTimes->{{3.841076084351177*^9, 3.841076144251052*^9}, 
   3.8410763931248913`*^9, 3.841076504810568*^9, 3.841076559537348*^9, 
   3.841077048790271*^9, 3.8410771432241707`*^9, 3.8410784302177773`*^9, 
   3.841078471539156*^9, 3.8410785445769587`*^9, 3.84107907852172*^9, 
   3.841088588560381*^9, 3.8429048529094353`*^9, 3.8431470633247547`*^9, 
   3.843147233800486*^9, 3.843147330350346*^9, 3.85828203229874*^9, 
   3.8582820837222853`*^9, 3.858285726050911*^9},
 CellLabel->
  "Out[214]=",ExpressionUUID->"1bd134be-4f2a-407d-bf8b-19b40344ce75"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"List", "@@", 
  RowBox[{"QuantumState", "[", 
   RowBox[{"\"\<RandomMixed\>\"", ",", 
    RowBox[{"QuantumBasis", "[", "\"\<Y\>\"", "]"}]}], "]"}]}]], "Input",
 CellChangeTimes->{{3.858283352647791*^9, 3.8582833539432297`*^9}},
 CellLabel->
  "In[215]:=",ExpressionUUID->"d78efb31-15e6-4ff2-93d1-27175c8268bb"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   InterpretationBox[
    RowBox[{
     TagBox["SparseArray",
      "SummaryHead"], "[", 
     DynamicModuleBox[{Typeset`open$$ = False, Typeset`embedState$$ = 
      "Ready"}, 
      TemplateBox[{
        PaneSelectorBox[{False -> GridBox[{{
              PaneBox[
               ButtonBox[
                DynamicBox[
                 FEPrivate`FrontEndResource["FEBitmaps", "SummaryBoxOpener"]],
                 ButtonFunction :> (Typeset`open$$ = True), Appearance -> 
                None, BaseStyle -> {}, Evaluator -> Automatic, Method -> 
                "Preemptive"], Alignment -> {Center, Center}, ImageSize -> 
               Dynamic[{
                 Automatic, 
                  3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                   Magnification])}]], 
              GraphicsBox[
               
               RasterBox[{{{0.3037082805365019, 0.05983439408294927, 
                0.5973629326825849}, {0.772061, 0.92462, 0.998703}}, {{
                0.3814935372084579, 0.7150736689493865, 0.9782700954061329}, {
                0.3037082805365019, 0.05983439408294927, 
                0.5973629326825849}}}, {{0, 0}, {2, 2}}, {0, 1}], AspectRatio -> 
               1, Axes -> False, Frame -> False, FrameLabel -> {None, None}, 
               FrameStyle -> Directive[
                 Opacity[0.5], 
                 Thickness[Tiny], 
                 RGBColor[0.368417, 0.506779, 0.709798]], 
               FrameTicks -> {{None, None}, {None, None}}, GridLinesStyle -> 
               Directive[
                 GrayLevel[0.5, 0.4]], ImageSize -> 
               Dynamic[{
                 Automatic, 
                  3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                   Magnification])}], 
               Method -> {
                "AxisPadding" -> Scaled[0.02], "DefaultBoundaryStyle" -> 
                 Automatic, 
                 "DefaultGraphicsInteraction" -> {
                  "Version" -> 1.2, "TrackMousePosition" -> {True, False}, 
                   "Effects" -> {
                    "Highlight" -> {"ratio" -> 2}, 
                    "HighlightPoint" -> {"ratio" -> 2}, 
                    "Droplines" -> {
                    "freeformCursorMode" -> True, 
                    "placement" -> {"x" -> "All", "y" -> "None"}}}}, 
                 "DefaultPlotStyle" -> Automatic, "DomainPadding" -> 
                 Scaled[0.02], "RangePadding" -> Scaled[0.05]}], 
              GridBox[{{
                 RowBox[{
                   TagBox[
                   "\"Specified elements: \"", "SummaryItemAnnotation"], 
                   "\[InvisibleSpace]", 
                   TagBox["4", "SummaryItem"]}]}, {
                 RowBox[{
                   TagBox["\"Dimensions: \"", "SummaryItemAnnotation"], 
                   "\[InvisibleSpace]", 
                   TagBox[
                    RowBox[{"{", 
                    RowBox[{"2", ",", "2"}], "}"}], "SummaryItem"]}]}}, 
               GridBoxAlignment -> {
                "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, AutoDelete -> 
               False, GridBoxItemSize -> {
                "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
               GridBoxSpacings -> {
                "Columns" -> {{2}}, "Rows" -> {{Automatic}}}, 
               BaseStyle -> {
                ShowStringCharacters -> False, NumberMarks -> False, 
                 PrintPrecision -> 3, ShowSyntaxStyles -> False}]}}, 
            GridBoxAlignment -> {"Columns" -> {{Left}}, "Rows" -> {{Top}}}, 
            AutoDelete -> False, 
            GridBoxItemSize -> {
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
            BaselinePosition -> {1, 1}], True -> GridBox[{{
              PaneBox[
               ButtonBox[
                DynamicBox[
                 FEPrivate`FrontEndResource["FEBitmaps", "SummaryBoxCloser"]],
                 ButtonFunction :> (Typeset`open$$ = False), Appearance -> 
                None, BaseStyle -> {}, Evaluator -> Automatic, Method -> 
                "Preemptive"], Alignment -> {Center, Center}, ImageSize -> 
               Dynamic[{
                 Automatic, 
                  3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                   Magnification])}]], 
              GraphicsBox[
               
               RasterBox[{{{0.3037082805365019, 0.05983439408294927, 
                0.5973629326825849}, {0.772061, 0.92462, 0.998703}}, {{
                0.3814935372084579, 0.7150736689493865, 0.9782700954061329}, {
                0.3037082805365019, 0.05983439408294927, 
                0.5973629326825849}}}, {{0, 0}, {2, 2}}, {0, 1}], AspectRatio -> 
               1, Axes -> False, Frame -> False, FrameLabel -> {None, None}, 
               FrameStyle -> Directive[
                 Opacity[0.5], 
                 Thickness[Tiny], 
                 RGBColor[0.368417, 0.506779, 0.709798]], 
               FrameTicks -> {{None, None}, {None, None}}, GridLinesStyle -> 
               Directive[
                 GrayLevel[0.5, 0.4]], ImageSize -> 
               Dynamic[{
                 Automatic, 
                  3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                   Magnification])}], 
               Method -> {
                "AxisPadding" -> Scaled[0.02], "DefaultBoundaryStyle" -> 
                 Automatic, 
                 "DefaultGraphicsInteraction" -> {
                  "Version" -> 1.2, "TrackMousePosition" -> {True, False}, 
                   "Effects" -> {
                    "Highlight" -> {"ratio" -> 2}, 
                    "HighlightPoint" -> {"ratio" -> 2}, 
                    "Droplines" -> {
                    "freeformCursorMode" -> True, 
                    "placement" -> {"x" -> "All", "y" -> "None"}}}}, 
                 "DefaultPlotStyle" -> Automatic, "DomainPadding" -> 
                 Scaled[0.02], "RangePadding" -> Scaled[0.05]}], 
              GridBox[{{
                 RowBox[{
                   TagBox[
                   "\"Specified elements: \"", "SummaryItemAnnotation"], 
                   "\[InvisibleSpace]", 
                   TagBox["4", "SummaryItem"]}]}, {
                 RowBox[{
                   TagBox["\"Dimensions: \"", "SummaryItemAnnotation"], 
                   "\[InvisibleSpace]", 
                   TagBox[
                    RowBox[{"{", 
                    RowBox[{"2", ",", "2"}], "}"}], "SummaryItem"]}]}, {
                 RowBox[{
                   TagBox["\"Default: \"", "SummaryItemAnnotation"], 
                   "\[InvisibleSpace]", 
                   TagBox[
                    RowBox[{
                    RowBox[{"0.`", "\[VeryThinSpace]"}], "+", 
                    RowBox[{"0.`", " ", "\[ImaginaryI]"}]}], 
                    "SummaryItem"]}]}, {
                 RowBox[{
                   TagBox["\"Density: \"", "SummaryItemAnnotation"], 
                   "\[InvisibleSpace]", 
                   TagBox["1.`", "SummaryItem"]}]}, {
                 RowBox[{
                   TagBox["\"Elements:\"", "SummaryItemAnnotation"], 
                   "\[InvisibleSpace]", 
                   TagBox["\"\"", "SummaryItem"]}]}, {
                 TagBox[
                  TagBox[
                   GridBox[{{
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{"1", ",", "1"}], "}"}], "\[Rule]", 
                    StyleBox[
                    PaneBox[
                    RowBox[{
                    RowBox[{"1.091212072719939`", "\[VeryThinSpace]"}], "+", 
                    RowBox[{"0.`", " ", "\[ImaginaryI]"}]}], ContentPadding -> 
                    False, FrameMargins -> 0, StripOnInput -> True, 
                    BaselinePosition -> Baseline, 
                    ImageSize -> {{1, 300}, Automatic}], LineBreakWithin -> 
                    False]}]}, {
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{"1", ",", "2"}], "}"}], "\[Rule]", 
                    StyleBox[
                    PaneBox[
                    RowBox[{
                    RowBox[{"-", "0.7993314526491121`"}], "+", 
                    RowBox[{"0.5611038349014295`", " ", "\[ImaginaryI]"}]}], 
                    ContentPadding -> False, FrameMargins -> 0, StripOnInput -> 
                    True, BaselinePosition -> Baseline, 
                    ImageSize -> {{1, 300}, Automatic}], LineBreakWithin -> 
                    False]}]}, {
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{"2", ",", "1"}], "}"}], "\[Rule]", 
                    StyleBox[
                    PaneBox[
                    RowBox[{
                    RowBox[{"-", "0.7993314526491121`"}], "-", 
                    RowBox[{"0.5611038349014295`", " ", "\[ImaginaryI]"}]}], 
                    ContentPadding -> False, FrameMargins -> 0, StripOnInput -> 
                    True, BaselinePosition -> Baseline, 
                    ImageSize -> {{1, 300}, Automatic}], LineBreakWithin -> 
                    False]}]}, {
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{"2", ",", "2"}], "}"}], "\[Rule]", 
                    StyleBox[
                    PaneBox[
                    RowBox[{
                    RowBox[{"1.5510530968563474`", "\[VeryThinSpace]"}], "+", 
                    
                    RowBox[{"0.`", " ", "\[ImaginaryI]"}]}], ContentPadding -> 
                    False, FrameMargins -> 0, StripOnInput -> True, 
                    BaselinePosition -> Baseline, 
                    ImageSize -> {{1, 300}, Automatic}], LineBreakWithin -> 
                    False]}]}}, GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                   "Column"], "SummaryItem"]}}, 
               GridBoxAlignment -> {
                "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, AutoDelete -> 
               False, GridBoxItemSize -> {
                "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
               GridBoxSpacings -> {
                "Columns" -> {{2}}, "Rows" -> {{Automatic}}}, 
               BaseStyle -> {
                ShowStringCharacters -> False, NumberMarks -> False, 
                 PrintPrecision -> 3, ShowSyntaxStyles -> False}]}}, 
            GridBoxAlignment -> {"Columns" -> {{Left}}, "Rows" -> {{Top}}}, 
            AutoDelete -> False, 
            GridBoxItemSize -> {
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
            BaselinePosition -> {1, 1}]}, 
         Dynamic[Typeset`open$$], ImageSize -> Automatic]},
       "SummaryPanel"],
      DynamicModuleValues:>{}], "]"}],
    SparseArray[
    Automatic, {2, 2}, Complex[0., 0.], {
     1, {{0, 2, 4}, {{1}, {2}, {1}, {2}}}, {Complex[1.091212072719939, 0.], 
      Complex[-0.7993314526491121, 0.5611038349014295], 
      Complex[-0.7993314526491121, -0.5611038349014295], Complex[
      1.5510530968563474`, 0.]}}],
    Editable->False,
    SelectWithContents->True,
    Selectable->False], ",", 
   InterpretationBox[
    RowBox[{
     TagBox["QuantumBasis",
      "SummaryHead"], "[", 
     DynamicModuleBox[{Typeset`open$$ = False, Typeset`embedState$$ = 
      "Ready"}, 
      TemplateBox[{
        PaneSelectorBox[{False -> GridBox[{{
              PaneBox[
               ButtonBox[
                DynamicBox[
                 FEPrivate`FrontEndResource["FEBitmaps", "SummaryBoxOpener"]],
                 ButtonFunction :> (Typeset`open$$ = True), Appearance -> 
                None, BaseStyle -> {}, Evaluator -> Automatic, Method -> 
                "Preemptive"], Alignment -> {Center, Center}, ImageSize -> 
               Dynamic[{
                 Automatic, 
                  3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                   Magnification])}]], 
              GraphicsBox[
               
               RasterBox[{{{1., 0.42, 0.}, {1., 0.42, 0.}}, {{1., 1., 1.}, {
                1., 1., 1.}}}, {{0, 0}, {2, 2}}, {0, 1}], Frame -> False, 
               FrameLabel -> {None, None}, 
               FrameTicks -> {{None, None}, {None, None}}, GridLinesStyle -> 
               Directive[
                 GrayLevel[0.5, 0.4]], ImageSize -> 
               Dynamic[{
                 Automatic, 
                  3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                   Magnification])}], 
               Method -> {
                "AxisPadding" -> Scaled[0.02], "DefaultBoundaryStyle" -> 
                 Automatic, 
                 "DefaultGraphicsInteraction" -> {
                  "Version" -> 1.2, "TrackMousePosition" -> {True, False}, 
                   "Effects" -> {
                    "Highlight" -> {"ratio" -> 2}, 
                    "HighlightPoint" -> {"ratio" -> 2}, 
                    "Droplines" -> {
                    "freeformCursorMode" -> True, 
                    "placement" -> {"x" -> "All", "y" -> "None"}}}}, 
                 "DefaultPlotStyle" -> Automatic, "DomainPadding" -> 
                 Scaled[0.02], "RangePadding" -> Scaled[0.05]}], 
              GridBox[{{
                 RowBox[{
                   TagBox["\"Picture: \"", "SummaryItemAnnotation"], 
                   "\[InvisibleSpace]", 
                   TagBox["\"Schr\[ODoubleDot]dinger\"", "SummaryItem"]}], 
                 RowBox[{
                   TagBox["\"Rank: \"", "SummaryItemAnnotation"], 
                   "\[InvisibleSpace]", 
                   TagBox["1", "SummaryItem"]}]}, {
                 RowBox[{
                   TagBox["\"Dimension: \"", "SummaryItemAnnotation"], 
                   "\[InvisibleSpace]", 
                   TagBox["2", "SummaryItem"]}], ""}}, 
               GridBoxAlignment -> {
                "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, AutoDelete -> 
               False, GridBoxItemSize -> {
                "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
               GridBoxSpacings -> {
                "Columns" -> {{2}}, "Rows" -> {{Automatic}}}, 
               BaseStyle -> {
                ShowStringCharacters -> False, NumberMarks -> False, 
                 PrintPrecision -> 3, ShowSyntaxStyles -> False}]}}, 
            GridBoxAlignment -> {"Columns" -> {{Left}}, "Rows" -> {{Top}}}, 
            AutoDelete -> False, 
            GridBoxItemSize -> {
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
            BaselinePosition -> {1, 1}], True -> GridBox[{{
              PaneBox[
               ButtonBox[
                DynamicBox[
                 FEPrivate`FrontEndResource["FEBitmaps", "SummaryBoxCloser"]],
                 ButtonFunction :> (Typeset`open$$ = False), Appearance -> 
                None, BaseStyle -> {}, Evaluator -> Automatic, Method -> 
                "Preemptive"], Alignment -> {Center, Center}, ImageSize -> 
               Dynamic[{
                 Automatic, 
                  3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                   Magnification])}]], 
              GraphicsBox[
               
               RasterBox[{{{1., 0.42, 0.}, {1., 0.42, 0.}}, {{1., 1., 1.}, {
                1., 1., 1.}}}, {{0, 0}, {2, 2}}, {0, 1}], Frame -> False, 
               FrameLabel -> {None, None}, 
               FrameTicks -> {{None, None}, {None, None}}, GridLinesStyle -> 
               Directive[
                 GrayLevel[0.5, 0.4]], ImageSize -> 
               Dynamic[{
                 Automatic, 
                  3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                   Magnification])}], 
               Method -> {
                "AxisPadding" -> Scaled[0.02], "DefaultBoundaryStyle" -> 
                 Automatic, 
                 "DefaultGraphicsInteraction" -> {
                  "Version" -> 1.2, "TrackMousePosition" -> {True, False}, 
                   "Effects" -> {
                    "Highlight" -> {"ratio" -> 2}, 
                    "HighlightPoint" -> {"ratio" -> 2}, 
                    "Droplines" -> {
                    "freeformCursorMode" -> True, 
                    "placement" -> {"x" -> "All", "y" -> "None"}}}}, 
                 "DefaultPlotStyle" -> Automatic, "DomainPadding" -> 
                 Scaled[0.02], "RangePadding" -> Scaled[0.05]}], 
              GridBox[{{
                 RowBox[{
                   TagBox["\"Picture: \"", "SummaryItemAnnotation"], 
                   "\[InvisibleSpace]", 
                   TagBox["\"Schr\[ODoubleDot]dinger\"", "SummaryItem"]}], 
                 RowBox[{
                   TagBox["\"Rank: \"", "SummaryItemAnnotation"], 
                   "\[InvisibleSpace]", 
                   TagBox["1", "SummaryItem"]}]}, {
                 RowBox[{
                   TagBox["\"Dimension: \"", "SummaryItemAnnotation"], 
                   "\[InvisibleSpace]", 
                   TagBox["2", "SummaryItem"]}], ""}, {
                 RowBox[{
                   TagBox["\"Qudits: \"", "SummaryItemAnnotation"], 
                   "\[InvisibleSpace]", 
                   TagBox[
                    RowBox[{"{", 
                    RowBox[{"1", ",", "0"}], "}"}], "SummaryItem"]}], ""}, {
                 RowBox[{
                   TagBox["\"Dimensions: \"", "SummaryItemAnnotation"], 
                   "\[InvisibleSpace]", 
                   TagBox[
                    RowBox[{"{", "2", "}"}], "SummaryItem"]}], ""}, {
                 RowBox[{
                   TagBox[
                   "\"Element dimensions: \"", "SummaryItemAnnotation"], 
                   "\[InvisibleSpace]", 
                   TagBox[
                    RowBox[{"{", "2", "}"}], "SummaryItem"]}], ""}}, 
               GridBoxAlignment -> {
                "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, AutoDelete -> 
               False, GridBoxItemSize -> {
                "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
               GridBoxSpacings -> {
                "Columns" -> {{2}}, "Rows" -> {{Automatic}}}, 
               BaseStyle -> {
                ShowStringCharacters -> False, NumberMarks -> False, 
                 PrintPrecision -> 3, ShowSyntaxStyles -> False}]}}, 
            GridBoxAlignment -> {"Columns" -> {{Left}}, "Rows" -> {{Top}}}, 
            AutoDelete -> False, 
            GridBoxItemSize -> {
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
            BaselinePosition -> {1, 1}]}, 
         Dynamic[Typeset`open$$], ImageSize -> Automatic]},
       "SummaryPanel"],
      DynamicModuleValues:>{}], "]"}],
    Wolfram`QuantumFramework`QuantumBasis[<|
     "Input" -> Wolfram`QuantumFramework`QuditBasis[<|{
           
           Wolfram`QuantumFramework`QuditName[\[FormalCapitalI], "Dual" -> 
            False], 1} -> 1|>], "Output" -> 
      Wolfram`QuantumFramework`QuditBasis[<|{
           Wolfram`QuantumFramework`QuditName[
            Subscript["\[Psi]", 
             Subscript["y", "-"]], "Dual" -> False], 1} -> 
         SparseArray[
          Automatic, {2}, 0, {
           1, {{0, 2}, {{1}, {2}}}, {
            Complex[0, 1] 2^Rational[-1, 2], 2^Rational[-1, 2]}}], {
           Wolfram`QuantumFramework`QuditName[
            Subscript["\[Psi]", 
             Subscript["y", "+"]], "Dual" -> False], 1} -> 
         SparseArray[
          Automatic, {2}, 0, {
           1, {{0, 2}, {{1}, {2}}}, {
            Complex[0, -1] 2^Rational[-1, 2], 2^Rational[-1, 2]}}]|>], 
      "Picture" -> "Schr\[ODoubleDot]dinger", "Label" -> "Y", 
      "ParameterSpec" -> {}|>],
    Editable->False,
    SelectWithContents->True,
    Selectable->False]}], "}"}]], "Output",
 CellChangeTimes->{3.858283354418668*^9, 3.8582857264035797`*^9},
 CellLabel->
  "Out[215]=",ExpressionUUID->"aaf5a950-ac9f-4959-bdaa-2b3a42703480"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{"QuantumState", "[", 
  RowBox[{"\"\<RandomMixed\>\"", ",", 
   RowBox[{"QuantumBasis", "[", "\"\<Y\>\"", "]"}]}], 
  "]"}], "\[IndentingNewLine]", 
 RowBox[{"Dataset", "@", 
  RowBox[{"AssociationMap", "[", 
   RowBox[{"%", ",", 
    RowBox[{"%", "[", "\"\<Properties\>\"", "]"}]}], "]"}]}]}], "Input",
 CellChangeTimes->{{3.85828210147057*^9, 3.8582821128293667`*^9}},
 CellLabel->
  "In[216]:=",ExpressionUUID->"d355cb10-2138-4fd0-b4d6-0a7b3c121971"],

Cell[BoxData[
 InterpretationBox[
  RowBox[{
   TagBox["QuantumState",
    "SummaryHead"], "[", 
   DynamicModuleBox[{Typeset`open$$ = False, Typeset`embedState$$ = "Ready"}, 
    
    TemplateBox[{
      PaneSelectorBox[{False -> GridBox[{{
            PaneBox[
             ButtonBox[
              DynamicBox[
               FEPrivate`FrontEndResource["FEBitmaps", "SummaryBoxOpener"]], 
              ButtonFunction :> (Typeset`open$$ = True), Appearance -> None, 
              BaseStyle -> {}, Evaluator -> Automatic, Method -> 
              "Preemptive"], Alignment -> {Center, Center}, ImageSize -> 
             Dynamic[{
               Automatic, 
                3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                 Magnification])}]], 
            GraphicsBox[
             
             RasterBox[{{{0.9175946587518022, 0.8070557904917814, 
              0.5055202796977454}, {1., 0.42, 0.}}, {{0.8889480362873071, 
              0.5303161571455945, 0.005528966557874922}, {0.9175946587518022, 
              0.8070557904917814, 0.5055202796977454}}}, {{0, 0}, {2, 2}}, {0,
               1}], Frame -> False, FrameLabel -> {None, None}, 
             FrameTicks -> {{None, None}, {None, None}}, GridLinesStyle -> 
             Directive[
               GrayLevel[0.5, 0.4]], ImageSize -> 
             Dynamic[{
               Automatic, 
                3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                 Magnification])}], 
             Method -> {
              "AxisPadding" -> Scaled[0.02], "DefaultBoundaryStyle" -> 
               Automatic, 
               "DefaultGraphicsInteraction" -> {
                "Version" -> 1.2, "TrackMousePosition" -> {True, False}, 
                 "Effects" -> {
                  "Highlight" -> {"ratio" -> 2}, 
                   "HighlightPoint" -> {"ratio" -> 2}, 
                   "Droplines" -> {
                    "freeformCursorMode" -> True, 
                    "placement" -> {"x" -> "All", "y" -> "None"}}}}, 
               "DefaultPlotStyle" -> Automatic, "DomainPadding" -> 
               Scaled[0.02], "RangePadding" -> Scaled[0.05]}], 
            GridBox[{{
               RowBox[{
                 TagBox["\"StateType: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox["\"Matrix\"", "SummaryItem"]}], 
               RowBox[{
                 TagBox["\"Qudits: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox["1", "SummaryItem"]}]}, {
               RowBox[{
                 TagBox["\"Type: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox["\"Mixed\"", "SummaryItem"]}], 
               RowBox[{
                 TagBox["\"Dimension: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox["2", "SummaryItem"]}]}, {
               RowBox[{
                 TagBox["\"Picture: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox["\"Schr\[ODoubleDot]dinger\"", "SummaryItem"]}], ""}},
              GridBoxAlignment -> {
              "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, AutoDelete -> 
             False, GridBoxItemSize -> {
              "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
             GridBoxSpacings -> {"Columns" -> {{2}}, "Rows" -> {{Automatic}}},
              BaseStyle -> {
              ShowStringCharacters -> False, NumberMarks -> False, 
               PrintPrecision -> 3, ShowSyntaxStyles -> False}]}}, 
          GridBoxAlignment -> {"Columns" -> {{Left}}, "Rows" -> {{Top}}}, 
          AutoDelete -> False, 
          GridBoxItemSize -> {
           "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
          BaselinePosition -> {1, 1}], True -> GridBox[{{
            PaneBox[
             ButtonBox[
              DynamicBox[
               FEPrivate`FrontEndResource["FEBitmaps", "SummaryBoxCloser"]], 
              ButtonFunction :> (Typeset`open$$ = False), Appearance -> None, 
              BaseStyle -> {}, Evaluator -> Automatic, Method -> 
              "Preemptive"], Alignment -> {Center, Center}, ImageSize -> 
             Dynamic[{
               Automatic, 
                3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                 Magnification])}]], 
            GraphicsBox[
             
             RasterBox[{{{0.9175946587518022, 0.8070557904917814, 
              0.5055202796977454}, {1., 0.42, 0.}}, {{0.8889480362873071, 
              0.5303161571455945, 0.005528966557874922}, {0.9175946587518022, 
              0.8070557904917814, 0.5055202796977454}}}, {{0, 0}, {2, 2}}, {0,
               1}], Frame -> False, FrameLabel -> {None, None}, 
             FrameTicks -> {{None, None}, {None, None}}, GridLinesStyle -> 
             Directive[
               GrayLevel[0.5, 0.4]], ImageSize -> 
             Dynamic[{
               Automatic, 
                3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                 Magnification])}], 
             Method -> {
              "AxisPadding" -> Scaled[0.02], "DefaultBoundaryStyle" -> 
               Automatic, 
               "DefaultGraphicsInteraction" -> {
                "Version" -> 1.2, "TrackMousePosition" -> {True, False}, 
                 "Effects" -> {
                  "Highlight" -> {"ratio" -> 2}, 
                   "HighlightPoint" -> {"ratio" -> 2}, 
                   "Droplines" -> {
                    "freeformCursorMode" -> True, 
                    "placement" -> {"x" -> "All", "y" -> "None"}}}}, 
               "DefaultPlotStyle" -> Automatic, "DomainPadding" -> 
               Scaled[0.02], "RangePadding" -> Scaled[0.05]}], 
            GridBox[{{
               RowBox[{
                 TagBox["\"StateType: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox["\"Matrix\"", "SummaryItem"]}], 
               RowBox[{
                 TagBox["\"Qudits: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox["1", "SummaryItem"]}]}, {
               RowBox[{
                 TagBox["\"Type: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox["\"Mixed\"", "SummaryItem"]}], 
               RowBox[{
                 TagBox["\"Dimension: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox["2", "SummaryItem"]}]}, {
               RowBox[{
                 TagBox["\"Picture: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox["\"Schr\[ODoubleDot]dinger\"", "SummaryItem"]}], ""}, {
               RowBox[{
                 TagBox["\"Purity: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox["0.5915193049202377`", "SummaryItem"]}], ""}, {
               RowBox[{
                 TagBox["\"Von Neumann Entropy: \"", "SummaryItemAnnotation"],
                  "\[InvisibleSpace]", 
                 TagBox[
                  
                  TemplateBox[{
                   "0.8636100627467463`", "\"b\"", "bits", "\"Bits\""}, 
                   "Quantity", SyntaxForm -> Mod], "SummaryItem"]}], ""}, {
               RowBox[{
                 TagBox["\"Dimensions: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox[
                  RowBox[{"{", "2", "}"}], "SummaryItem"]}], ""}, {
               RowBox[{
                 TagBox["\"ParameterArity: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox["0", "SummaryItem"]}], 
               RowBox[{
                 TagBox["\"Parameters: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox[
                  RowBox[{"{", "}"}], "SummaryItem"]}]}}, 
             GridBoxAlignment -> {
              "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, AutoDelete -> 
             False, GridBoxItemSize -> {
              "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
             GridBoxSpacings -> {"Columns" -> {{2}}, "Rows" -> {{Automatic}}},
              BaseStyle -> {
              ShowStringCharacters -> False, NumberMarks -> False, 
               PrintPrecision -> 3, ShowSyntaxStyles -> False}]}}, 
          GridBoxAlignment -> {"Columns" -> {{Left}}, "Rows" -> {{Top}}}, 
          AutoDelete -> False, 
          GridBoxItemSize -> {
           "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
          BaselinePosition -> {1, 1}]}, 
       Dynamic[Typeset`open$$], ImageSize -> Automatic]},
     "SummaryPanel"],
    DynamicModuleValues:>{}], "]"}],
  Wolfram`QuantumFramework`QuantumState[
  SparseArray[
   Automatic, {2, 2}, Complex[0., 0.], {
    1, {{0, 2, 4}, {{1}, {2}, {1}, {2}}}, {Complex[1.600751578490696, 0.], 
     Complex[0.13531640679361223`, -0.36884746424712844`], Complex[
     0.13531640679361223`, 0.36884746424712844`], Complex[0.8844653244350991, 
     0.]}}], 
   Wolfram`QuantumFramework`QuantumBasis[<|
    "Input" -> Wolfram`QuantumFramework`QuditBasis[<|{
          
          Wolfram`QuantumFramework`QuditName[\[FormalCapitalI], "Dual" -> 
           False], 1} -> 1|>], "Output" -> 
     Wolfram`QuantumFramework`QuditBasis[<|{
          Wolfram`QuantumFramework`QuditName[
           Subscript["\[Psi]", 
            Subscript["y", "-"]], "Dual" -> False], 1} -> 
        SparseArray[
         Automatic, {2}, 0, {
          1, {{0, 2}, {{1}, {2}}}, {
           Complex[0, 1] 2^Rational[-1, 2], 2^Rational[-1, 2]}}], {
          Wolfram`QuantumFramework`QuditName[
           Subscript["\[Psi]", 
            Subscript["y", "+"]], "Dual" -> False], 1} -> 
        SparseArray[
         Automatic, {2}, 0, {
          1, {{0, 2}, {{1}, {2}}}, {
           Complex[0, -1] 2^Rational[-1, 2], 2^Rational[-1, 2]}}]|>], 
     "Picture" -> "Schr\[ODoubleDot]dinger", "Label" -> "Y", 
     "ParameterSpec" -> {}|>]],
  Editable->False,
  SelectWithContents->True,
  Selectable->False]], "Output",
 CellChangeTimes->{{3.858282106430892*^9, 3.8582821133267517`*^9}, 
   3.858285726569119*^9},
 CellLabel->
  "Out[216]=",ExpressionUUID->"a54d09e1-3d90-4799-bde8-0027ab2d927f"],

Cell[BoxData[
 TagBox[
  TagBox[
   DynamicModuleBox[{TypeSystem`NestedGrid`PackagePrivate`$state$$ = <|
    "InitialData" -> <|"Amplitudes" -> <|Wolfram`QuantumFramework`QuditName[{
            Subscript["\[Psi]", 
             Subscript["y", "-"]], 
            Subscript["\[Psi]", 
             Subscript["y", "-"]]}, "Dual" -> False] -> 1.600751578490696, 
         Wolfram`QuantumFramework`QuditName[{
            Subscript["\[Psi]", 
             Subscript["y", "-"]], 
            Subscript["\[Psi]", 
             Subscript["y", "+"]]}, "Dual" -> False] -> 
         Complex[0.13531640679361223`, -0.36884746424712844`], 
         Wolfram`QuantumFramework`QuditName[{
            Subscript["\[Psi]", 
             Subscript["y", "+"]], 
            Subscript["\[Psi]", 
             Subscript["y", "-"]]}, "Dual" -> False] -> 
         Complex[0.13531640679361223`, 0.36884746424712844`], 
         Wolfram`QuantumFramework`QuditName[{
            Subscript["\[Psi]", 
             Subscript["y", "+"]], 
            Subscript["\[Psi]", 
             Subscript["y", "+"]]}, "Dual" -> False] -> 0.8844653244350991|>, 
       "Association" -> <|Wolfram`QuantumFramework`QuditName[
           Subscript["\[Psi]", 
            Subscript["y", "-"]], "Dual" -> False] -> 
         SparseArray[
          Automatic, {2}, 0, {
           1, {{0, 2}, {{1}, {2}}}, {
            Complex[0, 1] 2^Rational[-1, 2], 2^Rational[-1, 2]}}], 
         Wolfram`QuantumFramework`QuditName[
           Subscript["\[Psi]", 
            Subscript["y", "+"]], "Dual" -> False] -> 
         SparseArray[
          Automatic, {2}, 0, {
           1, {{0, 2}, {{1}, {2}}}, {
            Complex[0, -1] 2^Rational[-1, 2], 2^Rational[-1, 2]}}]|>, "Basis" -> 
       Wolfram`QuantumFramework`QuantumBasis[<|
         "Input" -> Wolfram`QuantumFramework`QuditBasis[<|{
               
               Wolfram`QuantumFramework`QuditName[\[FormalCapitalI], "Dual" -> 
                False], 1} -> 1|>], "Output" -> 
          Wolfram`QuantumFramework`QuditBasis[<|{
               Wolfram`QuantumFramework`QuditName[
                Subscript["\[Psi]", 
                 Subscript["y", "-"]], "Dual" -> False], 1} -> 
             SparseArray[
              Automatic, {2}, 0, {
               1, {{0, 2}, {{1}, {2}}}, {
                Complex[0, 1] 2^Rational[-1, 2], 2^Rational[-1, 2]}}], {
               Wolfram`QuantumFramework`QuditName[
                Subscript["\[Psi]", 
                 Subscript["y", "+"]], "Dual" -> False], 1} -> 
             SparseArray[
              Automatic, {2}, 0, {
               1, {{0, 2}, {{1}, {2}}}, {
                Complex[0, -1] 2^Rational[-1, 2], 2^Rational[-1, 2]}}]|>], 
          "Picture" -> "Schr\[ODoubleDot]dinger", "Label" -> "Y", 
          "ParameterSpec" -> {}|>], 
       "BlochCartesianCoordinates" -> {
        0.2968332171030157, -0.2882188082707501, 
         Complex[-0.10889705975708364`, 0.]}, "BlochPlot" -> 
       Graphics3D[{{{{{}, {}, 
             Annotation[{
               AbsoluteThickness[2], 
               GrayLevel[0], 
               Thickness[Tiny], 
               Line[CompressedData["
1:eJxN2Xc4V+//B3CjQkNWJZKUtCRJSuu2SlY0UEJGipKREpGMrGxvtIxSycrM
HrcZZe/svd/eJ9n7d77X9fuc+7z/cV2P61znfZz7db/u5+t6CxiYXzNioKOj
U6Ono2PE/6av/e+Dgdn8jdX9J50u0P3/Z53ERt5l3N+ktUztotwB/3lGxiPT
v7hbBv+Qaww0JzxM++h0B+4X3p4QZUl4Rnhmr0pKIe6OMYXPIwNfEn5itCkq
HHfPjr2b3ue4EP5gsarOCve9Fk6bur67Ey5dJ1mxAXc+p4+V1wP9CL/DX/6u
ZBUD3uZNtdJFAYQf8VgKf457O92UsXoOhXAhygeVmhUMOI8rpT/6/oZws82i
F3iXMSBxccsN9YAIwktMFEreL2GgJnEqdHfpR8Kb5iqdOHBn2sBl51v4ifDB
Y+8+jy1gwJYixqif/ZlwuQEdt/Nz+Pe60nv9jvtGeLqfD/boLwZOwsU8W59E
wr/kLKxZYBgYvalRVSaXRLhab6miKQ0DN7R2/6wuQn6y/IW/EhUDX9+paNfm
JxN+7HtDf/wwBqDUp4Lw9FTCtao9xhc7MKAT4v5W5WsG4RfciiZ+FmLg9LYY
OT4HiK63W3jwDWJA5tC04DJDAeGKGpYNDnkY+Niyn3PwEvLTAeHGHFkYYLnh
OxBdjVztYkdaZSIGlg+OnJ3tLCS8K77WyvcDBgYubSkNWSomnJ9vuETJFL8+
SbHpvlg54XydJx72/KMB19y8ixsv1hLO4x6+dSh5AmQ8KxbPbW0hfHffBa0r
66hAKG53zWVqF+F9v7eqncwaBQNDrbdKmfsJT2ZU9LMXHgYCTLH0iuxDhOsu
pW8pYhgAi1ZlJ+PmR1A9p8juXfTpAfHbR6rfGIwTbkUZst0q2Abc1OGsw8kJ
wiVGnY21BOuBibNJ90IijfBQ+gGr8vX1oCtll+HzH8jH/eWZxIbrgPWpKoWp
TOT/TB4NzMXUAd/QzLPVhciH3jQqqx6rA93y+ygHG5Dv3/rW4YRkLWBZqRMw
m0bum9AFtwRVAom40ISTxzHCZY/oGI6qV4LuilT/AnHkV+gBXf6OSuBMv5gm
exr57Tsthtc+VIDM2nc/xQDyCRUj50ORvwH96/MjqcrIp9VhZHhCOaBRuZ9I
3yPdf05ikq24BNw+Zq70ioIccDkH3XMtAZMKkUdYQpCzB85ez5AvAZepdK5u
b5ELvDxooFhZDCY4+z8+CEPe4+CpebqpCMw4bn30Jwp5AUekh9RQAfipGNiu
kIn8eJzp2/qN2UCcnzHIsQm5/cOHTA6+WeCI8ZkQzhbk2tlGd/ZxZIEMCh9D
xB/Sc3I3S2nvzARJzy22RbQj9/BOZXp9IB0UHDLdI9eLnDlk53tMJgX8kCh3
EBhHntT16aX8z2Tg0uo+dYaKPD+1++AHhWSw/e9IpfIEcmWna+cl1JJAiox3
/C0MuQqXqvaL7HjQ6hPFzT2F3CFo0cho4gu42hT85MACcmNrSo5Z12fgva5X
rZHsR1QcHtdEgs7oFnGbReQvBE/ZPUj+CI7R2Dm/LiHfoeYorzD2FqxEXxWk
rCCP7da5x1kZAq4IOEjOk7yAnX1Py/cgsJwlrH5jFXnWpYclKpb+QMI6LmKS
5BqKEfmMUd5gzVa1WmwN+XU25nFDEw/wXZeP8SHJG7yD6gR6XoKv5xcdCkhO
mdA7WXDvGZg7N1naSXLT7RfYk9oeAdkDfRz/SH7wpltiQs0tEKtYZrRCcpXE
XQxcwlJw2jYsf43kF47bSPSs3IXBm+/yLZD8d7ZVidb8YxjXtct5lOT+PJq8
BZZ2cFmtklpL8k+HYrt9Z5zg7GVbnUSSv26c+HZazA0mih5tfEXysZ2iEh1m
r2H37JTaVZLHtNVMrn8SAD9bzGrXkN7nqnc43yz1HSy6yVB4h7Qu1bUXrAU2
hcLwerMHE8vIWRn//ZU7FA79LkbzPCb5OVb+2UyxT1BpgdVfj1QPJr1a8TFm
X+GTPI6GunnkM3n5zpqD3+HRT2aD6/+R1vddY9jG6QQYN2fAvm4S+TUmRlct
+iSon2Inv0Cq82LIeH1uazLExC83lJP2xfDuINVZ4VRYrcT7eHkEeftt8fcj
RhlQNUiDN70T+RnfU7p9/Rlw/NHjY1IdyL+uOig362fCcIq9XVEbcpHzNcLx
OlkwJaA+N5HUHzZBm4jN6jnwtv4xTLgO+Yiz5ANXGQiplqfMUoqQ+21jpUGv
Ypi5aLRtIgI5R59ZwpOrFfCnx+az0rLIpcZj95oFVcBM3qf7g0h9+OW73Pg7
LRXw40VR7q6zyN3Xe6Ud1qmE/E79PJqkPv/qrb2jrnEV7HyVnNopiPyoeflp
4Rc1MM5zTuTCOuQ/8wdUJ2rqoFNIf8qNXHS+jJ6JGErsa4JF6/vs93Eg/1U9
1giDOuFtrp79VnpUwvU1+/9ZCfXBWnePW1VaY4TbnPN+xGI/CG+dmhrgyxgm
vHEg19pQegRunmWqsegeIPxvmWBRa9MY7LxmdMjFrJdwxoV2WvggFdrXyged
cGgnPKRrB7aiQ4NtQ8qfykUaCY//ENOoY0iDG1tMx66xIrfU/LolzZgG3WsX
bVsmGtC+PlFipWBFgxzjNgE18ci/H/UeYvGgQY+HdFH2h5GP9dbxjSTSoJ6V
0+t6PBf855GlARxsCzSYM7ohJ2Ebyjlens8/aa7QIOB6XXVgtAbVT3SrZgg9
BoU6hFlGo5BnpgtKLLBg8F21l43aXuRYScSbGzwYvLq9TCGNuxrdR2gDVU8S
g6ZVfKrDjJVofxVUXim3wODuzbYHHzeWEW4nHHM4zwqDZy4/U0sNRv60bE0s
1hqDLdY73tM0kDdNn/hpao/Bp8mZtddbf6Jz81xtH8Udgx1tR5zaOksJX6xa
u20Sil9/uuzj0CDKh1CZmyZcgMHMhqHbNQMor7KcnNomVITBlwk9VdvvId/t
UaqxowSDWZLZ5hrD+YQH2BgK9JVh0PavRGH+aB7hl6eeVXHXYFD27BjrKVoO
4VN+XPwbOzAYJZEw1zuD8vO5D/voFjEM1jVvvrdKh/L50Mq3j3//YnCmxyyT
kxnlfKa8iLDuSQwy7x45vY81AZ2Drhvio6Yw+JtNf1CYJx7laqYBrtZZDB52
dLaePB5N+KDiIUrgHAZdm+l8G06h+aLmj5Kp3DwGy1/ScyedjyLcxdVRJGAB
X98njY9vKXwhfKfJE1r1EgZForfWWOmheWe/rSFQWsaguHLFJr3KcMIVSljH
IO6fbPt461pCCZe5KKwcuILfJ+cIQwTtLeEph00Z/+J+zL66bHkhBOWEWEau
S6sYLPPNY1VfH0x4y/yIVDvu64Dl2iwvmu90eTh1eNYw+HOnwXGXK74oV9ur
1OPnGdwUfU+Q3eg1Oo/aX390wn2R36LsrZ0bymPlsCwGd5HlNRbeQGe0L6L7
5H/jPkInlnH86gvCOzLG9/Tjvo7eQVPI4SnKCYxN16Zxz3zf9u2IxkPCb5m/
78RzADxZdUiEWU+T8IUUyUI8B0D7M1OHxJIB/M8rtVJWFv73vX+ZElVDDQlP
KVtPoeLOrMItfuaTJeHbj51yasF9SPTqrctPbAkff69Uno176zUO8ejPjoR/
H1UwDsG9l61U6qDPK8Idaw+mSuA+7bgQx63nTfhu5T26S/j7VzmYG1ws6E94
juUxg0zc1Y35Fqx3BhJu+rn5KS/ueViFUi1DCOG8T+2rXPE6OVN6iVmqKYzw
kIs3Zbfgrjhhr1zxK4JwDsE1Dh+8DsdfS9sd6P5I+DrHwwVPFzFYIPm+Orwh
kvDIG6Xq43j9l79g9lPPjSK80dcm8D6+vyRrdXcneicQXrx/U9EdfD9+HWy1
rP2QSHj67svTV/D9O8M/ZP5EPYnwrp5ZfY4J/P+lTFId7iYTfnVG+OHREQz6
s7nMaTqnEk6NtXT9gfeHYz+5pudzMwhXlInpZYEYLD46xWy9vYDwyXgZ4f5c
DO4PtFaqv4X8tso6j9RsDJqINk4dCkP+r8TmqWQ63pdOXzlcsa+Q8GDdNcm2
eLxvCLXyNogWEc781Y3O4i0Gz20tdh5RKCH8ougBOGmMwVrOPee+PisnPOCX
WOSQEQZ9GW4JNKchHzZjbWgwwN9/E9M83TRyx6NnBd5oY9BisfGcnMUvwnVO
LbwqVMUgY3af7Uvj34TfzIvdFSWO9/MfIU9yNCsJd/sa8OrHPA3KKCXEm3PX
Ei7jKsq16wEN3jiQInhpsAHVv7ZBul8NFa77HREj3tZO+M9Naps9c8ZgkK1o
WnFIL+GsR2q0pPVGoLD/55vaOQOEi8fairIZD0JRH/Z+oV/DhC/4cjC6KPZB
ll8azg3SY4RreFkr/KJ2wuMXpXdpKFAJf1v0vgWeaIYD+5ST5RhphBfNADXe
7c1QPjdoKocZ+a+I1XuW803wRcCegSOsyGMP//DaktcEy7rTf89wI2/3zLHf
cKkJrvqLex4XQR4cckmTXrMR1h9ljpfXRE5z119TeVoPqyK2Ugc/I4+u+lyd
r1AFr0ca3IkTwlCdnGge3sRUBaV/iW4IPIx8tLwtSa2kEt6nMhSYiyBXya8O
L7xQCV+PyxuzSSCPVuRgkD1RAfutZkyH5JCX8K/GNvL8gt4mytoDesh/psnu
zh4ogWybwXqBQOSvvoUY7v1UAkffbNs5EoQ87tXjglc6JVB9xU4g6g3yF+Nn
WU83F0NKavNmpjDkbAIp3LfLiuA+b5PT2t+Qj9tJ9X+OLoAiVulS17ORSy3k
NvvXZMIzvFNe5q3ID41o5p5Ry4Qymz+ozbchr77z3a+rNgOem2nfY9uBfP2B
Ageu+nT4WDm2z6Ab+aXDegvnGn/A/V+tepsHkGfFNp4NbUmCnJDTWYqG3K7b
c2RKMwlOnH3XooAh5x0Yo/NLSoQcVV9OKP1F3rsf6ytN/g6/7FRdPfkPud+6
Q7EdqTEw/O69lrgZ5Ese1TuH0j/B+3mtD7iXkMsGuRSKZnyEU9LLrJEkj/ZS
saWZRUCuNL/0fcvIradUbk2af4AnBzy3bl1BHsJjL2Ns8Q5eaE8rsCH5Q4pZ
3R+LN5DxVOeTNpLf3fahO9qSAldc8gddV5FnTqrrsjwOgIFfVSJrSP5x83fG
igFfGO/trM++hpzysIBiN/gaXqtW3qdE8oQUM9P9Q25QbTVs2J7kyedlfH4N
OUPJRJOEKJLXxPmM11W/gI8e412S5N+pHEostU/hjj+XZftIns+vZ2Ed+RCe
MFdhnyZ5/wRzeZSCJvQvTehdIfmiWYmMoqE0qL7/4Mcayff/cjF/pnEX6PW+
9Fwgea4Lb9imw4+Bd+5fvXGSV9XKLzQffA4eORecaSJ58KHgoSpOJzCRPb09
g+QvrjRirzg8gXdYbLMByVvLN/q3sPsAn6vS2cIk118/Zx3g4Q8mvO59pJHe
v/Bu1X817kHgwPvQJ1ok/y2WaLTJLRT4MgxfqCfVyT7xA3+d7cLBQwO6MF2S
1/bWBtme/ghaSnNV+kn19jyMZ6DzaCSgqw/51rSI3CDm+EUL7ijwvMxRSnce
+Tu2F+bu1O9gU0re4bVJ5P4Jc7bUoQRwy55WwkbyAGr8TsXeRDDXafODh7SP
BsRPcs2NJYHvdh5BO0j7cT7Mw8akOwVYp9vfSRtFriz66NqjsnSQ6Mqq60Ta
7z7goJmGXAaYGPB5xN2FfKeQ9LRkYQbwtZlu/kbqG5+Lo8qw7Exw/l9bZiKp
/ww5y8txJmSDjNGjxYYNyP9kT+rzU/IBj+7sZZ1S5Kyc6s/yjhSDEB6/4+8+
I8/hOh63ZFYMFqXSM5g/kfzabgPxlGKwBcipmocjtzoAtgSfLgGuVLc0gXek
52l6epH9YimQ1G2w4vVFDj3Xxw5ol4GDV0VMDK2RU4vXGK3cKwAXI/1lJSlS
X7ogocXSVwfqq14Hpmahc+pDXtqO5zdbwcjw+52nDSYIL18LcE926AHadyZO
1DwcJzxG1bju9kw/aDEsETBgHCWcLymyL6NnCFhf3KhYdWcI7a9inXsxUaOA
Ke/og1yBfpQzz30eVWscB26Ps0uL33QTvsvweXCP1wQ4lnEju4zyB9UV5ewV
kVEaWOn6U7bHF+UW/+TWFzITNLBFZnXayxx539AePtVJGrh7fwfflBryoevp
UVcXaOBMFpd9GifyOPaM30vMGOidWfPZLlaDcsXQtFO/EAa8dyXKMl6qIvyy
/XGzRW0MMB34ohBqjPJYX0dmBY8eBngvrbj4HkYe3FJvf8IQAxuk40KeU1Gu
a6fLalYxwYDwwSInKQvkljv8bwg9xcDGpRvcrs/KCP/h/OWPkRcGOqDnm9VX
pShXGB27z5OCgQ/W2tF8oSivTr8cL3T5gYHc9XoifBrIJy3prfrTMVA5WvFw
Bxvy5KWbTa45GODccNZg2QXl4WveIu4aJRjwfFIitK0ln3C1PT2bDzRioGFk
u3WwVTbqPxId9jNNGJBhtXm2NpSFnqeSTjK7BQNYDkbR10Ku4xFOEWrHAN+C
/y9W6UzCK4/UFL/uxcBV+j1/2FnTCdfWaohypGKg3jR8S08UmhcC7++LSJ3A
gOSflvbuncjpvO50dNAwsM+lyarNG80d/UnighyTGDB05tByGkTzi2iXYA/T
DAbKn4v8jbOPJbxRijJLxX0P+01/fYMYwle2maqWz2LAi4HxydbL0YTHx9wo
05/H19dwo646J5qbSrJMf/EvYcA6JliIEvOJcBthV2o67rMPzJW5/NBcZvlA
Tk1uGQPt/j8q94yGEx7av6VVegUDdfLvwmYc3hP+r/X3SjLuDF7clAaFtyiP
sQcZcK9iwO7ge4FYLjQ/XjKtGy/DvUc2Ils2NoBw6a1sbPh5D+4KKZ5lG/Ml
nH8Gs1LDXWzKINjv5WvCD1Tq7HDDXV6Ks2PDNjfU384qLCbjXtc0fP9ZrBM6
l/u+7GrEXZCje2/py+doHW/fc8DncZAV9dSAEovm8X8SbvxLuJ8KffQyM1af
8P9+Zxc87vO/39nz//P/A0flwpM=
                "]]}, 
              "Charting`Private`Tag$433333#1"], 
             Annotation[{
               AbsoluteThickness[2], 
               GrayLevel[0], 
               Thickness[Tiny], 
               Line[CompressedData["
1:eJxN2Xc8Vf8fB3BSoSGrEklKNCSVlNYHkaxooISMBiUjEpFCpGwXRXYlKzN7
fMwoe2fvfd1DVvbv/P74ns+5fz4f53Huuefz/rw/r/fj8uubXr+/jo6OTpWe
jo6BDn3S1/7/wcBc/qbq/lMOF//z9eKbeJZx/5DWMr2bchf85xkZT4wncTf3
/yHT6GtKeIjW0ZkO3C9+PCnKnPCc8Mxe5ZRC3F/HFL6I9H1F+MnRpqhQ3N91
7NsclONE+KPFqjoL3PeZOWzu+v6WcKk6iYqNuPM6hFfe8PUi/C5feWDJKgbc
TZtqpYp8CD/iuhT6Avd2umlDtRwK4YKUT8o1KxhwHFdMf/L9A+EmW0Qv8ixj
QFx26001nzDCS4zkS4KWMFCTOB28pzSc8Kb5Sgd23Bk3ctp6FkYQPngs8PPY
AgZsKCcY9LI/Ey4zoO1yYR7/Xmd6t99x3whP9/LAnkxi4BRczLPxSCT8S87C
mhmGgdFb6lVlMkmEq/aWKhjTMHBTc8/P6iLkp8pfeitSMfA1UFmrNj+Z8GPf
G/rjhzEAJSMKQtNTCdesdh1f7MCAdsDbj8pfMwi/6FI08bMQA2e2x8jw2kN0
ve3Co28QA9KHZgSW1xUQrqBu3mCfh4HwlgMcg5eRn/EJNWTPwgDzTc+B6Grk
qrIdaZWJGFg+OHJurrOQ8K74WgvPTxgYuLy1NGCpmHA+3uESRWP8+iSFpocn
ygnn7Tz5uOcvDTjn5slukq0lnPtt6Lah5AmQ8bxYLLe1hfA9fRc1r66nAsG4
PTVXqF2E9/3epnoqaxQMDLXeLmXqJzyZQcHLTngY8DPG0iuwDRGus5S+tWjd
AFi0KDsV928E1XPKpX2LHj0gfsdI9Qf9ccItKEM22wTagIsanLM/NUG4+Kij
oaZAPTByNOpeSKQRHkw/YFG+oR50pew2ePED+bi3HOOJ4TpgdbpKfjoT+V+j
JwPzMXXAMzjzXHUh8qEPjUoqx+pAt9x+ysEG5Ae2fbQ/KVELmFfq+E1mkHsm
dMGtfpVAPC444dRxjPBLR7QNRtUqQXdFqneBGPKr9IAuf2clcKRfTLt0Bvmd
uy0G1z9VgMzawJ8nAPIJ5fuOhyJ/A/r3F0ZSlZDPqMHI0IRyQKNyWUo9IN1/
XnyKtbgE3DlmqviGghxwOvo9cC4BU/KRR5gDkLP5zt3IkCsBV6h0zi4fkfO/
OqivUFkMJjj6wx+FIO+xf6dxpqkIzL7e9uRPFPIC9khXyaEC8FPBt10+E/nx
OOOP9ZuygRgfg9/rJuR2jx8z2ntmgSOGZwM4WpBrZd+/u589C2RQeNeF/SE9
J1ezpNauTJD0wmx7WDtyV/dUxvdC6aDgkPFemV7kTAG7gjDpFPBDvNyefxx5
UlfEK7mfycCp9e30WSry/NTug5/kk8GOyZFKpQnkSg7XL4irJoEUaff42xhy
ZU4VrZfZ8aDVI4qLaxq5vd/i/fsTX8C1Jn9LoQXkhlaUHJOuz8B9fa9qI9mP
KNs/rYkEndEtYtaLyF8KnLZ9lBwOjtHYOL4uId+p+lpOfuwjWIm+JkBZQR7b
rf2AozIAXOW3l/hH8gI2tr0t3/3Acpaw2s1V5FmXH5com3sDcau4sCmSqyuE
5TNEuYM1G5XqE2vIb7AyjRsYuYLvOrwMj0ne4O5Xx9/zCny9sGhfQHLKhO6p
ggfPwfz5qdJOkhvvuMiW1PYEXBLqY/9L8oO3XBITam6DWIWy+yskV07cvY5T
WBLO2ITkr5H84nFr8Z6Ve9B/yz3eBZL/zrYo0fz3FMZ17XYcJbk3twZPgbkt
XFatpNaSPOJQbLfnrAOcu2KjnUjy940T386ccIGJokcb35B8bJeoeIfJe9g9
N616jeQxbTVTGyx94GezOa0a0vtcdQ/lnaMGwqJb6wrvktaluvaiFf/mYBha
b/JoYhk5C8PfSZlDodBLNpr7KcnPs/DNZZ6IgIoLLN66pHow6tWMjzH5Ci3z
2Bvq/iGfzct31Bj8Do9GmAxu+Eta38DGkE0zCTBuXp9t/RTy64wMzpr0SVAv
xVZugVTnxZDhxvy2ZIiJXWkoJ+2L4T1+KnPCqbBakefp8gjy9jtiQSP3M6CK
nzpPeifys56ndfr6M+D4k6fHJDuQf121V2rWy4ShFDvbojbkIhdqhOO1s2CK
T31uIqk/bIbWYVvUcuAdvWOYcB3yEUeJR87SEFLNT5ukFCH32s5Cg27FMHPx
/vaJMOTsfSYJltcq4E/XLeekLiGXHI/dZ+JXATN5nh3wI/XhV4G58XdbKmC4
rChX1znkbze4pR3WroR8Dv3cGqQ+/+aj3WsdwyrY+SY5tVMA+VHT8jPCL2tg
3Lt5kYvrkf/MH1CZqKmDDgH9KTdz0fkyejZsKLGvCRZt6LPbz478V/VYI/Tr
hHc4ew5Y6FIJ19Po/2sh2Adr37rertIcI9z6vPsTZrtBePv09ABvxjDhjQO5
VgZSI3DLHGONWfcA4ZNlAkWtTWOw8/r9Q04mvYQzLLTTQgep0K5Wzu+kfTvh
AV07sRVtGmwbUoooF2kkPP5TTKO2AQ1uajEeu86C3Fzj69Y0Qxp8W7to0zLR
gPb1yRILeQsaZB+39qmJR/79qPsQsysNuj6mi7I7jHyst453JJEGdS0c3tfj
ueA/jyz1YWddoMGc0Y05CdtRznF79yJCY4UGAef7KqHRGlQ/0a0aAfQYFOwQ
Zh6NQp6ZLiC+wIzBwGo3a9V9yLGSsA83uTF4bUeZfBpXNbqP4EaqrgQGjat4
VYYZKtH+Kqi8Wm6GwT1bbA4+bSwj3FY45nCeBQbPXnmumuqP/FnZ2olYKwy2
WO0Moqkjb5o5+dPYDoPPkjNrb7T+ROfm+do+ylsMdrQdcWjrLCV8sWrtjlEw
fv2ZsvChQZQPoRIXTbgAg5kNQ3dqBlBeZT41vV2wCIOvEnqqdjxAvse1VH1n
CQazJLJN1YfzCfexNuDvK8OgzaR4Yf5oHuFXpp9XcdVg8NK5MZbTtBzCp704
+TZ1YDBKPGG+dxbl5/Of9tMtYhisa97yYJUO5fOhlW/hk5MYnO0xyeRgQjmf
MS8spHsKg0x7Rs7sZ0lA56DzxvioaQz+ZtUbFOaOR7macYCzdQ6Dh187Wk0d
jyZ8UOEQxXceg87NdJ4Np9F8UfNH0VjmHwbLX9FzJV2IItzJ+bWIzwK+vpaN
T2/LfyF8l5ElrXoJgyLR22osdNG8c8DGACguY1BMqWKzbmUo4fIlLGMQ9wib
Pp66lmDCpWWFlXxX8PvkHFkXRvtIeMphY4ZJ3I/ZVZctLwSgnBDLwHl5FYNl
nnksahv8CW/5NyLZjvt6YL42x4PmOx1uDm3uNQz+3KV/3OmqJ8rVdsr1+HkG
N0c/EGC7/x6dR+3vwx1wX+QzK/to64LyWDksi8FdZHmNmcfXEe2L6D6537iP
0J3IOH7tJeEdGeN7+3FfT2+vIWj/DOUEhqbrM7hnBrV9O6L+mPDbpkGdeA6A
p6oOiTDpahC+kCJRiOcAaHd2+tCJZAD/80rNlJWF/3/vJGOiSrAB4SllGyhU
3JmUucTORpgTvuPYaYcW3IdEr92+YmlD+HiQYnk27q3X2cWiP78m/PuovGEA
7r2spZIHPd4Q/rr2YKo47jOvF+K4dN0J36O0V2cJf//KB3P9iwW8Cc8xP6af
ibuaIe+C1S5fwo0/Nz/jwT0Pq1CsXRdAOM8zuypnvE7Oll5mkmwKITxA9tal
rbgrTNgpVfwKI5xdYI3dA6/D8fdStkLd4YSvf3244NkiBgskgqpDGyIJj7xZ
qjaO13/5SyYvtdwowhs9rX0f4vtLolZnT6J7AuHFBzYX3cX349fBVvPaT4mE
p++5MnMV37+zfEOmlmpJhHf1zOmxT+C/lzJFtb+XTPi1WeHHR0cw6M3qNK/h
mEo4Ndbc+QfeH4795Jz5l5tBuIJ0TC8zxGDx0Wkmqx0FhE/FSwv352LwgK+V
Yv1t5HeU17umZmPQSLRx+lAI8r8l1s8k0vG+dObq4Yr9hYT766xJtMXjfUOw
ladBtIhwpq8udGYfMXh+W7HjiHwJ4bKiQnDKEIO1HHvPf31eTrjPrxORQ/cx
6LnuNn9zGvJhE5aGBn38/Tcx/qObQf766Dn+D1oYNFtsPC9j9otw7dMLbwpV
MMiQ3WfzyvA34bfyYndHieH9/EeAZY5GJeEuX33e/PhHg9KKCfGmXLWESzuL
cu5+RIM3hVIELg82oPrX0k/3qqHC9b/DYsTa2gn/uVl1y7ucMehnI5pWHNBL
OMuRGk0p3REo7P35llbOAOFisTairIaDUNSDrV/w1zDhC57sDE4KfZD5l7pj
g9QY4epuVvK/qJ3wuKzUbnV5KuEfi4Ja4MlmOLBfKVmGgUZ40SxQ5dnRDOVy
/aZzmJD/Clt9YP6vCb702TtwhAV57OEfblvzmmBZd/rvWS7k7e9y7DZeboKr
3mLvjosg9w+4rEGv0QjrjzLFy2kgp73VW1N+Vg+rwrZRBz8jj676XJ0vXwVv
ROrfjRPEUJ2cbB7ezFgFpX6JbvQ9jHy0vC1JtaQSPqSuKzAVQa6cXx1aeLES
vh+XM2QVRx6twL7u0skK2G8xazwkg7yEbzW2kfsXdDdS0hrQRf4z7dKe7IES
yLoFbOD3Rf7mW4DBvogSOPph+64RP+Rxb54WvNEugWortvxRH5C/HD/Hcqa5
GFJSm7cwhiBn5U/hulNWBPe7G53R+oZ83Fay/3N0ARSxSJe8kY1cciG32bsm
E57lmXYzbUV+aEQj96xqJpTe8kn1Xxvy6rvfvbpqM+D52fa9Nh3INwgV2HPW
p8OnSrF9+t3ILx/WXTjf+AMe+GrR2zyAPCu28VxwSxLkgByOkjTktt3vRqY1
kuDEucAWeQw5z8AYnVdSImSv+nJScRJ57wGsrzT5O/yyS2X11F/kXusPxXak
xsDQew9a4maRL7lW7xpKj4AP81ofcS0hv+TnVCiaEQ6npZZZIkke7aZsQzMJ
g5xpXun7l5FbTSvfnjL9BE8NvNu2bQV5ALedtKFZILzYnlZgTfLHFJO6P2Yf
IMPpTss2kt/b/qk72pwCV5zyB51XkWdOqekwP/WBvl+VI2tIHr7lO0PFgCeM
d3fUY1tDTnlcQLEdfA+vVyvtVyR5QoqJ8YEhF6i6GjJsR/LkC9Iev4YcoUSi
UUIUyWviPMbrql/CJ0/xLkny71R2RebaZ3DnnyuX+kiez6drZhX5GJ40VWab
IXn/BFN5lLwG9C5N6F0h+aJJibSCgRSofvjoxxrJD/xyMn2ufg/o9r56t0Dy
XCeekM2HnwL33EndcZJX1cotNB98AZ44FpxtIrn/If+hKg4HMJE9syOD5C+v
NmJv2N8B95DYZn2St5Zv8m5h8wAe16SyhUmut2HeysfVG0y4PQinkd6/8B6V
vzVv/YBQULClJsl/n0i8v9klGHiuG75YT6qT/WJCk462oeCxPl2IDslre2v9
bM6Eg5bSXOV+Ur29COEe6DwaCejqA741LSLXjzkua8YVBV6UvZbU+Yc8kPWl
6Vvqd7A5Je/w2hRy74R5G+pQArhtRythJbkPNX6XQm8imO+0/sFN2kcDYqc4
58eSwHdbV7+dpP34L8TV2qg7BVil291NG0WuJPrk+pOydJDozKLjQNrvHuCg
ibpMBpgY8HjC1YV8l6DUjERhBvC0nmn+Ruobn4ujyrDsTHDhb1tmIqn/DDnK
yXAkZIOM0aPFBg3I/2RP6fFR8gG3ztwV7VLkLBxqz/OOFIMAbq/jgZ+R53Ae
j1syKQaLkukZTBEkv75HXyylGGwFMiqmocgthMBW/zMlwJnqksYfSHqepmey
bLKlQEKnwYLHEzl8tyF2QKsMHLwmYmRghZxavMZg8bYCcDLQX1GUJPWli+Ka
zH11oL7qvW9qFjqnPuWl7XxxqxWMDAftOqM/QXj5ms/bZPseoHV34mTN43HC
Y1QM6+7M9oMWgxJ+fYZRwnmTIvsyeoaAlewmhaq7Q2h/FWs/iIkaBYx5Rx/l
8vejnHn+86hq4zhweZpdWvyhm/DdBi/8e9wmwLGMm9lllD+orijnroqM0sBK
15+yvZ4ot3gnt76UnqCBrdKrM26myPuG9vKqTNHAvYc7eadVkQ/dSI+6tkAD
Z7M47dI4kMexZfxeYsJA7+yax44TNShXDM049AtiwH134iWGy1WEX7E7brKo
hQFGoS/ywYYoj/V1ZFZw62KA5/KKk+dh5P4t9XYnDTCwUSou4AUV5bp2uqxm
ZSMMCB8scpA0Q26+0/um4DMMbFq6yeX8vIzwH45f/tx3w0AHfPdh9U0pyhX3
jz3kTsHAJyutaN5glFdnXo0XOv3AQO4GXRFedeRT5vQW/ekYqByteLyTFXny
0q0m5xwMcGw8p7/shPLwdXeRt+olGHhnWSK4vSWfcNW9PVuEGjHQMLLDyt8i
G/Uf8Q672SYMSLNYP18bykLPU0knkd2CASwHo+hpItd2DaUItmOAd8H7F4tU
JuGVR2qK3/di4Br93j9sLOmEa2k2RL2mYqDeOHRrTxSaF3wf7g9LncCAxJ+W
9u5dyOnc7nZ00DCw36nJos0dzR39SWIC7FMYMHBk13QYRPOLaJdAD+MsBspf
iEzG2cUS3ihJmaPivpftlreefgzhK9uNVcrnMOC2jsFy25VowuNjbpbp/cPX
12CTjhoHmptKsox/8S1hwCrGX5ASE0G4tbAzNR33uUemSpxeaC4zfySjKrOM
gXbvH5V7R0MJD+7f2iq1goE6ucCQWfsgwv+2/l5Jxn2dGxelQf4jymNsfvpc
qxiwPRjEH8uJ5sfLxnXjZbj3XArLvhTrQ7jUNlZW/LwH9wQVzrGOeRLON4tZ
qOJ+Ylrf3+vVe8KFKrV3uuAuJ8nRsXG7C+pv5+QXk3Gvaxp++DzWAZ3LfV92
N+IuwN69r/TVC7SOdx7Y4/M4yIp6pk+JRfP4X3EXviXcTwc/eZUZq0f4f/+z
Cxz3+P//7Pn/A0LzwpM=
                "]]}, "Charting`Private`Tag$433333#2"], 
             Annotation[{
               AbsoluteThickness[2], 
               GrayLevel[0], 
               Thickness[Tiny], 
               Line[CompressedData["
1:eJxd2Xk0VV/0AHBSoUGmSqTyJU2SkGg6SMkUDSghQ4rMkYhkiJTZQyVTKpky
Zh6OMZThmTNknj3vJlOU/G5r/X733PV7/1jrs9567zn3nL332VvAyPqyyRoG
BgYNRgYGJvxvzuq/FwYY/ve1ULKhYeiY+5m1Uhv4/pD8RXbH7E7KTZCba2nx
g+S2YZ8UWkOsQZTu4bkekp95KSHGmvoA5A2oZZaR3C2x7GFcyGMgMdEWH03y
Zz3/bYwo9AR3l+ub7Ej+n437xt6PT4Fck8zX9STnd4+tuxISCG7urnlV+Re5
n3UbVa48GBzy+R39kOTdDLOmmoUUIEx5rda4gtxjSiXH8uMLYLVJ7AzfH+RS
5zZf1QyOAZVmSpURv5E3ps1G7qqKBW2Lde6cJGdez+0cUPYGjBx59XZyCbkT
RZzJsOAtUBjW8z69SPpeL0bfL8kfQE6gP2b5A/kxuFzs5J8G3hUurdpgyCeu
adVXK6QDjYEqZQs68qs6uz43lKeDYzWPglRoyN+/UtOllmSAIx9bhlLGkEPZ
N6XROVlAp8FnarkHuV7405dq73PBGe/y6c9lyKW3Jirwu0Kg47x09wNELn9g
TujPmlKgrGXb4lqMPLZjL9fI+VIgHRxtypmPnPVqwHBCQynQONeTXZeG/M/+
8ZML38tAbwrVLuA18uHzm6vCf1eA3fxjlSoWpPenK7fdEa8B/N8lzPt/0gn3
Kio+t+EcFfA+jd4ymjFNeO6DCsmizg6wa/CMzsW1NMKFk3c1XqD1gsEvWzSO
5U+g7x3tvF7FMgQymJQDXUTGCBdgTmJU5hgF+r9zNpevGSZ82a76WPKvcSCR
efa/Zf9+wlO2jTe8MJoCdpRRpy1CXYR7a8IF12PTQGrCw1RHqJlwMw+zvqU0
OohkHLarWYe8N3On8cNPdDAVpMgsPtZEuMPxeqXZPDr4aWY5vJiIPCAy72RD
GR2MvmhVVT+CvE9RkLK/hQ72bnnpKiFDRc9lpUnAao4OAlJ74ebQOrT/kyNT
jx3FwNlDesYTmsj7vmYFlUpi4CIjYCjZjtyDcTn7rDQGbtzsML78+ivhedRX
n8UBBqbVTDwOxH0hnPH56fEsVQzMacK46NQawuk0Hnu52/jnL0rNsFdUEn7j
iLXKEwoGALdH6G0v5DNKcYdYwzHAEbJwJVcR+QUag5f3SwwIPN5vpFxXQfg0
11Ds3SgM9Ls+05ZuKyd83m2L5bd4DJRyxvnIjpYS/lk5pFspDwNHky1eNm8o
IFxyN1OoWxsGXMzNmV0D8gk/ZHoinKsDA7oFJjcFOZHnUvjXxHzDfydPu6zu
jjzC0x/abI3pxoCPXxbz8305hJcesNijMIABlvAdEZh8JuGfpGpcBaYwkN77
5rHi5wzCPTufzp7Az39JVt/+10rIt/0Yr1OdxoCq++XTUhrphGfK+6Vcx+OL
Gre67qOCFMI7/eN5eGYx4Bq6bGIy/Y7wS21h9vvwuGbqQCm06n2L4u3aAY3W
f35IzfVeYxzh3xM6JB2XMfBI6Ljz3YxYwo/QObje43Fzu4abotLkS8JXEi4J
UfC4nNSnd5urLpzwiwKuMr9wL+Xg2NPxMRTFgXwRzat4fM8/b16pZhuE9q1D
cswM7lrKMSVM8X6ErzqpN4jj+eMKO8uUsZkP4R/1+ZnMcW/xC20S6H+M4ufp
ZddS3CnTBsdKbz8gfPHUTNV33C22neFI77Ik/Oy+Qc6fuO+/5p2W2nid8CTl
apMV3NXSdq7hFpGF/+dzTlEl//LumaOOUv0rtwgP23SLfwn3LwV2lTq/7hGe
3LvTYwL3IF5tvlJbZ8L/aNTRqLi/OZDUFzDvTvjCBSe9NNyft05/kBb3JjxN
7HDrE9wnd4hJ9Vg9J7xvYVbjEu6JXY0z6+yDCX9rs6DbiK/nX79o/gXaK8LL
r60pu4k/lwbqGQeBjZGERzdb3Z3G8ygb088fCgeiCQ88l8B7D/dTbLsX8sTf
EK6yxBZkgO8HswGdlESr94TbF3O2NP3CwHxxiYf2yEfCD7+xGln3E3++r1qj
NsylovVZNOJYO4OBy8xMXjqM6YQbZjorLuH7vAIyXVnckkE4JnmhpQY/F2O7
QtUXRLIIb1Dhu/dnHAPdNyQjxk1yCVcP1eLL+Y6BEwHH9QeHkE9Z3jsii+fR
939dVdsN89A6UFycy7swIHq6USRFL5/wzODmojQ8PmyEjjGbNAsJv2F4BBNp
wsC4h8xdL3lIOM32uFVmOQYCt7LRoW8F4XnLJlunYzDAOWiVan/pK+GffTad
lDuLAdmppP+sQpHn8d3fG4rH4cevilJudiCPPSfG03sSA0/X+WYf1KsjfLf7
EK82HuefvHRx0zetJ/z7k4ys70IYOGxdIy3yqBGt/7NF0TNrMfC5ZFh9urGJ
cPfwocyrRXQwcSJmNG2wDe2fdYMugpx0UNsw2QpDv6N14O7fa2dAA4baQz/t
hAcJpz71uV6vMwkcT/lZsrqMEH79+Owwf+4YaB0ucjCWGyd80wJzo03fMPhR
LVTe2TaJfv9lkwOeVgOAaambHj1CI9yFqhgq4doNwnu3Yyt6dMK7RlXf1Ii2
gpTXia16xsg3dFhMXmZrBbba7zdnmyJ/Sl126phuAWckKu2U7JBzTjkGN6a0
gI+H/UZZfZD7mDPEuxxsAZMDTfzjacgN7NyfN+P1QVxVMCf7EvLCifWFqVup
wPfZwzfaK8gB9/P6fRONYDyhUzucESNcuEeEdSK+EeTlCEktsSJ/1eDrqPFf
I8AqY15c5UV+aVu1UjZPAxgXXk8zkEFuUc+vPsZUBy6X1l2ssUG+a5PT/nut
1cBZJPFgsR3yExceaGSFVYP71aviSQ7IOxy2R9C1qkHbnMRnCxfk9zPyqFc6
PwPdU9RBylPkPV2H3Lu+V4Hl+tUbZpGk90tXx46OVACoykMXKUWe1zJ6o3EY
AtZjs1uFy5E/Tu2v33Ybgl0+VVrbK5HnyxRYa42VgGBHY4HBauROP6TKSiaK
wYXZB/U8jcjPnpxkO04vBLOB3Ls39CCPl0pdHJjPBadeCzIsY8ib2jfd/suQ
DkZXPsT++IF8vt8qj4slDTAXx0T1zSBn2TUuLciWCpK81qfEzyL/wm44IsKb
AqSZh7k7F5AfdPNwmDmaAEaUD1BCFpF7tTMEtBz/ABq/qVgo/EJe85iRJ/10
PPD0chMNXiI9X/vWe9eV3oEdZvb0ht/IRRO2NNoZxIK9TsZA5Q9ySdWvGw3q
ooFSJdskJPkbp0G+po5IIH9ORDVkhfQ5hYfWxNBfgsyDFkw/SH7EpaH6z1I4
eJTExH3+L/LqgGI2zXVhoOPXuGw3ydcC29UFvmCgz8ulx7uK/PMOo6OeFwOA
lIta8yWSb0y4LcRh8hywdT+PdSf58m6b6pfO3oCjBlYnklz0zyorX4gHwBIG
Fb+QfJxBPPfopUegJ3dqzxDJ1zK6agu73gcUprbLcyTPi+j6cEjLHFy3jvi+
QvJj9QdEWQy0wVKmTNkqyV1OzB4QzwCwTidzZYn8vT+Y09QjjWFm9ToKjeQs
ajySJ97Ywm1Hjrt3kHxU7NL1C/ZOcCpCpaaA5J2XOSUT3rrBjxNKpuEkH2Cv
kt3v/wS6UfdnSZF8zm0pmcfAD+5S3aP/m7T+avuLwiqEgmCh7RGjPJJrmvIv
OewIgRZv2+/zkbwY+6pCXRMO+e671HuR9smJqvMssm1RMPzctbObSa487aL6
tTYGcgqtcvqT9uHUcznnfX2xcK3bwdL7y8hLZSIaolviYNzVKs0p0v6vecQS
qFkUD1sDHEPukM6XDFV/V5pfKqzYu7H8Juk8vh/ptKW+ToM5uy7MXSSd3/nd
o9b2mumwt3/BkHOa9P9SZmiutzLgpXkR88PjyIPYPRe1PbIgLcnW6xMpPhz5
zD33qygXKssnDrBC5BWHZ1kctpXCmRR5kaEi5HtDHFSar5fCG2prfbIKkJuJ
tc4eiCqFPysd78vkkOKS9MWDXwXLYJj+qkxXCiluCHfytYiVQ5b33gw2L5Gf
2lLhMa5UCc+J7YMzpsipXHtOvX9QA4NrxeNGTZAHrLku0J5dA8es2FpajEjr
38b8i2GuBrodPinwQhe5zXLrKQWbWqh3fOlJmTpypoJBp8emX+C14qSd8ZKk
eP4p3L5Quw56vw9+8ukXymvyKqkp1jxUKO8lxr3zLvKr+zKFzo+0wG26RjmB
jSiPr/0SkyjZ1Q0/b9TY9KwQ5f1QJ7HsivAByHaoUUfOANUJIkFvr+kWDkPJ
JCcxdlNUV4j5cwwJ147BpQBOJk9lVIew1mp5tMhNQi1fB6VaGqpbjp6T26ml
RIMvyyM6oEQ74cOCqhkKTHRYPg80+LYhVywKnS1kocPamL+3bX+huuhR8J7h
Q3ipl3Twk+/mYuTVfTlf5nnosPtZocv688j/Bkk+OypKh2Hh57UZtVsJbz7M
kqKoTYf0p4aravebCa+P2UIbeUuHCfVvG0qUUF13Jc7oZrIwBlkk2sc2MiOX
qxVbH3IQgxM1Xekalag+vENbU2otikG1kobosjPIn08pmrJLYTBBmXPNWQlU
Zw7ZzVuMKmCwcvffpFbeWsL9zFR1hw0w+Dn77K6C4UrC2TeBdQIhGHzyIdz4
vzfIJ15s3TEeisHkJ/dKn+gh11xxFoh/gcFHUyfZpNtRnUzJat/EHIVBdoFM
nhvV5YQL+plJ637A4JSz7NDbhFIU/+1yZK/g5012qag9qBHV8yf4Zn2tOzF4
YFy76IQGcvlNrzV+dWGw4ebHwF4quhecmu/e44Sf/3X7Sl25m3MIv6eaNGjU
h8HzBw2WTrV+Quf9vd1A+zAG85NaT0Z2oPsLF+TykKVj0Lnv2fisNvLpk686
lPA4xTc8yRCYnobqzPp3Eip4XBvYiw1WZaB707sd6n+P/cRg4NoDST1ZiYRH
37rdkTyPwd8+DTtGc9C97E5x510ePP6eDfUsE8uNJXxW7g9bHO4JvmpOdKsY
wrmzA3ME8TjuMKt2fcb6Ncp3w8+2bMHzfTivi7ypDbo/nunOLnXE3Zxi1fTN
5gWKD8e/23fhfmvr674EWwrhK54lI154Xsmb0dRnvYfupyHv1eLw+ymM3fSR
6etwAOEpfh6GHHg+o5iXUpxH0D33coOqoAruqZlWFntH0b1Y42/UmAvuGafl
/WtHPVC+SDNLjce9Mdl/qqnhEeGW9/AoiftHGqcKK/U+4du/XTg7iHvJbgMb
hzhzwiWs1Tj+1QdD0yw18UraKF9UpQ78qw+WrSrllY3lwP95w527n/7VB3tr
Pa0faN0i3GDg8bN/9UGRJ1/UxoP3CPcr+mEwhXs9VXGpff9Dwi09Sk+04R52
IGy0nsud8OmCuW25uD+62Io94XyGPicqqd0I986aDUEdHP6E+1+SKxDB3XDd
okOwD+q3TPvejqXj6y+yS/1n41PUn9kXEWmvg/sX8TSTjd6RhAesGTvTjO8T
Qcl9Pzycowk3N2KI0sedOkANdZJG/aKOqiK1IXy/PYziHf5+GPWXGJrDP7Th
dYBR4tFzNjzxhD+sdpPVx+vdV+yPrJ/SPhK+MbP44CpeBwSlLjrRRlMJv+5C
r2THPZiWskN5II3wxe+On3jxczQseYx7cRL1zT46+4Rux8/jrygfR7M+1Jdz
yHG5mT2BQVUxy8uW1aiPl+bFpu+On3d/sN9KSyEXrduwvyVPLwZ3CMvNyZQh
D3Cca/+Ax423FfHVWAHqE57+2ZWXhsefUQ9FBa5U1IfMnThcYdyCwW8FM4a7
KSWE8+ovXNCrwiAbl+aD4kOo/xnOG3j01VsMFnIfTf5thXxZNieX5Q3ul3cZ
SWYi3wwU1K2jMWi3D2wOk0b9VS+ad7bAK/z3tN0/x3GuinAZ/RY7vgAMwmfr
koZ1qwnff0nUzBi/B9IqVpnsnqL+MDcT4wUVWTwunZHSYR1E/erm+uchWfl0
+Lo4e/vDa52Ej49F7JA2moY1q8FPM1xRv1335rREo/kUTFQ3bboxP4T2j3Gl
gBHTBORPjxvM7R9Fz+vcBuX6m6Nwb4Xe7cR41P9nLj58t0hgCK499XZCo3WK
cO97BVUVL/rgTuOHYf2+aL5wJPdqQTXlGwyinLwoOoHmESu936r3BFBhUEbn
I/lp5Jvl/875WlPh4OgefvUZ5LfubOef1aDC0Ss58ZeWkJ/I53bJ5qLCZI7c
L79Z0BxkYH7Vf5t4IywfnXMfEibNv3amnWU6Xw8vuBy1WtYlzaf2vVOKNK2F
gz15X3kNkPOdX/EMOFgLwzqaXSSMka+XSw5/SKuB3Qz57WpmyEX2l7vL2tRA
2+1BV4XvI9/w+yqP14Nq+Mnj3TcTX+Q98NmLv0+qIIvJkTu8mchfO+gm8EeW
wbnHU2Wen5AXrTMQ5dcqgzO2jHZDOcjrJr6ab2cvgxm/r7V5FSLnWn/S6I9n
KbzsJ/pUq5I0T7SvFN7aUQI19vRv2teKvGV8m0OYXQEUlOpxmW8jzbPYHB+s
jubDuToGmYIO5FghRjHUyYd6PtEU4W7S/HEpqJZNLg/WHWqseD6A/BLjnm8c
bDlQV6cl3o00j2u2iN7cH58BQ+4IxmRNI5f51tHdtyMDMvje7OkhzfUEPdvs
uvzS4VC6pBDnDHJjD04d95FUKNYr1M88j7zmoeiPZJck2CpLWaCRfA/HtSBD
o0S4stVCvWYBue8aJvstFxJgSuLVasNfpOdrvEFfkyseVuZb1O4mzTcdEsOE
KYlvoKOIFy2H5At3rVW5A2Oh7V0FDQXS/LQ76FPdnoloGDm0uVOONG9tUnwV
Ne8aAX92flnJIPkaXx5Ki9JLOMURasRDmts6748QSOIOh+ctmqaqSd5/Nqbg
bFIwlNvCzs5BmgvfElY+yT4ZAHfPY3YaJBefNQoLfPwc7qvT2+5NckVZrp71
W72h3Uml5QySN7WN3XmQ5A6XB9/tbCW5EGfff1WPH8KQG7ddaSTPj79vREmy
hT+lvHf/JvnxSMvHeUmG8P/P2YWO+v+bs5f8D9e0wpM=
                "]]}, 
              "Charting`Private`Tag$433333#3"]}}, {}}, {
           Opacity[0.4], 
           Sphere[{0, 0, 0}], 
           GrayLevel[0], 
           Thickness[Large], 
           Opacity[1.], 
           Line[{{0, 1, 0}, {0, -1, 0}}], 
           Line[{{0, 0, 1}, {0, 0, -1}}], 
           Line[{{1, 0, 0}, {-1, 0, 0}}], 
           Text[
            Ket[0], {0, 0, 1.3}], 
           Text[
            Ket[1], {0, 0, -1.3}], 
           Text[
            Ket["R"], {0, 1.3, 0}], 
           Text[
            Ket["L"], {0, -1.3, 0}], 
           Text[
            Ket["+"], {1.3, 0, 0}], 
           Text[
            Ket["-"], {-1.3, 0, 0}]}, {
           RGBColor[1, 0, 0], 
           Arrowheads[0.05], 
           Arrow[
            Tube[{{0, 0, 0}, {0.2968332171030157, -0.2882188082707501, 
               Complex[-0.10889705975708364`, 0.]}}, 0.03], {0, -0.01}]}}, {
         PlotRange -> All, ViewPoint -> {1, 1, 1}, DisplayFunction -> 
          Identity, PlotRangePadding -> {{0, 0}, {0, 0}, {0, 0}}, 
          ImagePadding -> Automatic, DisplayFunction -> Identity, Boxed -> 
          False, DisplayFunction :> Identity, FaceGridsStyle -> Automatic, 
          ImageSize -> Medium, 
          Method -> {
           "DefaultGraphicsInteraction" -> {
             "Version" -> 1.2, "TrackMousePosition" -> {True, False}, 
              "Effects" -> {
               "Highlight" -> {"ratio" -> 2}, 
                "HighlightPoint" -> {"ratio" -> 2}, 
                "Droplines" -> {
                 "freeformCursorMode" -> True, 
                  "placement" -> {"x" -> "All", "y" -> "None"}}}}}, 
          PlotRange -> {{-1.7, 1.7}, {-1.7, 1.7}, {-1.7, 1.7}}, 
          PlotRangePadding -> {Automatic, Automatic, Automatic}, 
          Ticks -> {Automatic, Automatic, Automatic}}], 
       "BlochSphericalCoordinates" -> {0.42783011796795617`, 
        1.8281615205884578`, 0.77067505160369}, "Computational" -> 
       Wolfram`QuantumFramework`QuantumState[
        SparseArray[
         Automatic, {2, 2}, Complex[0., 0.], {
          1, {{0, 2, 4}, {{1}, {2}, {1}, {2}}}, {Complex[1.107292044669285, 
           0.], Complex[0.3688474642471284, 0.35814312702779855`], Complex[
           0.3688474642471284, -0.3581431270277985], Complex[
           1.3779248582565096`, 0.]}}], 
         Wolfram`QuantumFramework`QuantumBasis[<|
          "Input" -> Wolfram`QuantumFramework`QuditBasis[<|{
                
                Wolfram`QuantumFramework`QuditName[\[FormalCapitalI], "Dual" -> 
                 False], 1} -> 1|>], "Output" -> 
           Wolfram`QuantumFramework`QuditBasis[<|{
                Wolfram`QuantumFramework`QuditName[0, "Dual" -> False], 1} -> 
              SparseArray[Automatic, {2}, 0, {1, {{0, 1}, {{1}}}, {1}}], {
                Wolfram`QuantumFramework`QuditName[1, "Dual" -> False], 1} -> 
              SparseArray[Automatic, {2}, 0, {1, {{0, 1}, {{2}}}, {1}}]|>], 
           "Picture" -> "Schr\[ODoubleDot]dinger", "Label" -> "Computational",
            "ParameterSpec" -> {}|>]], "ConjugateTranspose" -> 
       Wolfram`QuantumFramework`QuantumState[
        SparseArray[
         Automatic, {2, 2}, Complex[0., 0.], {
          1, {{0, 2, 4}, {{1}, {2}, {1}, {2}}}, {Complex[1.600751578490696, 
           0.], Complex[0.13531640679361223`, -0.36884746424712844`], Complex[
           0.13531640679361223`, 0.36884746424712844`], Complex[
           0.8844653244350991, 0.]}}], 
         Wolfram`QuantumFramework`QuantumBasis[<|
          "Input" -> Wolfram`QuantumFramework`QuditBasis[<|{
                Wolfram`QuantumFramework`QuditName[
                 Subscript["\[Psi]", 
                  Subscript["y", "-"]], "Dual" -> True], 1} -> 
              SparseArray[
               Automatic, {2}, 0, {
                1, {{0, 2}, {{1}, {2}}}, {
                 Complex[0, 1] 2^Rational[-1, 2], 2^Rational[-1, 2]}}], {
                Wolfram`QuantumFramework`QuditName[
                 Subscript["\[Psi]", 
                  Subscript["y", "+"]], "Dual" -> True], 1} -> 
              SparseArray[
               Automatic, {2}, 0, {
                1, {{0, 2}, {{1}, {2}}}, {
                 Complex[0, -1] 2^Rational[-1, 2], 2^Rational[-1, 2]}}]|>], 
           "Output" -> Wolfram`QuantumFramework`QuditBasis[<|{
                
                Wolfram`QuantumFramework`QuditName[\[FormalCapitalI], "Dual" -> 
                 False], 1} -> 1|>], "Picture" -> "Schr\[ODoubleDot]dinger", 
           "Label" -> Superscript["Y", "\[Dagger]"], 
           "ParameterSpec" -> {}|>]], "DensityMatrix" -> 
       SparseArray[
        Automatic, {2, 2}, Complex[0., 0.], {
         1, {{0, 2, 4}, {{1}, {2}, {1}, {2}}}, {Complex[1.600751578490696, 
          0.], Complex[0.13531640679361223`, -0.36884746424712844`], Complex[
          0.13531640679361223`, 0.36884746424712844`], Complex[
          0.8844653244350991, 0.]}}], "Diagram" -> Graphics[{
          GeometricTransformation[{
            Line[{{0, 
               Rational[1, 2]}, {1, 
               Rational[1, 2]}, {
               Rational[1, 2], 0}, {0, 
               Rational[1, 2]}}], {
             PointSize[
             0.2 Dynamic[
               3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                 Magnification])]], 
             Point[{{
                Rational[1, 2], 
                Rational[1, 2]}}], 
             Point[{}]}, {
             Arrowheads[
             0.002 Dynamic[
               3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                 Magnification])]], {
              Arrow[{{
                 Rational[1, 2], 
                 Rational[1, 2]}, {
                 Rational[1, 2], 
                 Rational[3, 5]}}]}, {}}}, {{{1, 0}, {0, 1}}, {0, 0}}], 
          Text[
           Style["Y", {FontSize -> 24, FontFamily -> "Times"}], {
            Rational[1, 2], 
            Rational[1, 4]}]}], "Dimension" -> 2, "Dimensions" -> {2}, "Dual" -> 
       Wolfram`QuantumFramework`QuantumState[
        SparseArray[
         Automatic, {2, 2}, Complex[0., 0.], {
          1, {{0, 2, 4}, {{1}, {2}, {1}, {2}}}, {Complex[1.600751578490696, 
           0.], Complex[0.13531640679361223`, 0.36884746424712844`], Complex[
           0.13531640679361223`, -0.36884746424712844`], Complex[
           0.8844653244350991, 0.]}}], 
         Wolfram`QuantumFramework`QuantumBasis[<|
          "Input" -> Wolfram`QuantumFramework`QuditBasis[<|{
                
                Wolfram`QuantumFramework`QuditName[\[FormalCapitalI], "Dual" -> 
                 False], 1} -> 1|>], "Output" -> 
           Wolfram`QuantumFramework`QuditBasis[<|{
                Wolfram`QuantumFramework`QuditName[
                 Subscript["\[Psi]", 
                  Subscript["y", "-"]], "Dual" -> True], 1} -> 
              SparseArray[
               Automatic, {2}, 0, {
                1, {{0, 2}, {{1}, {2}}}, {
                 Complex[0, 1] 2^Rational[-1, 2], 2^Rational[-1, 2]}}], {
                Wolfram`QuantumFramework`QuditName[
                 Subscript["\[Psi]", 
                  Subscript["y", "+"]], "Dual" -> True], 1} -> 
              SparseArray[
               Automatic, {2}, 0, {
                1, {{0, 2}, {{1}, {2}}}, {
                 Complex[0, -1] 2^Rational[-1, 2], 2^Rational[-1, 2]}}]|>], 
           "Picture" -> "Schr\[ODoubleDot]dinger", "Label" -> "Y", 
           "ParameterSpec" -> {}|>]], "Eigenstates" -> {
         Wolfram`QuantumFramework`QuantumState[
          SparseArray[Automatic, {2}, 
           Complex[0., 0.], {
           1, {{0, 2}, {{1}, {2}}}, {Complex[
            0.3150686399495922, -0.8588187616188203], Complex[
            0.4039332702462501, 0.]}}], 
          
          Wolfram`QuantumFramework`QuantumBasis[<|
           "Input" -> Wolfram`QuantumFramework`QuditBasis[<|{
                 
                 Wolfram`QuantumFramework`QuditName[\[FormalCapitalI], "Dual" -> 
                  False], 1} -> 1|>], "Output" -> 
            Wolfram`QuantumFramework`QuditBasis[<|{
                 Wolfram`QuantumFramework`QuditName[
                  Subscript["\[Psi]", 
                   Subscript["y", "-"]], "Dual" -> False], 1} -> 
               SparseArray[
                Automatic, {2}, 0, {
                 1, {{0, 2}, {{1}, {2}}}, {
                  Complex[0, 1] 2^Rational[-1, 2], 2^Rational[-1, 2]}}], {
                 Wolfram`QuantumFramework`QuditName[
                  Subscript["\[Psi]", 
                   Subscript["y", "+"]], "Dual" -> False], 1} -> 
               SparseArray[
                Automatic, {2}, 0, {
                 1, {{0, 2}, {{1}, {2}}}, {
                  Complex[0, -1] 2^Rational[-1, 2], 2^Rational[-1, 2]}}]|>], 
            "Picture" -> "Schr\[ODoubleDot]dinger", "Label" -> "Y", 
            "ParameterSpec" -> {}|>]], 
         Wolfram`QuantumFramework`QuantumState[
          SparseArray[Automatic, {2}, 
           Complex[0., 0.], {
           1, {{0, 2}, {{1}, {2}}}, {Complex[
            0.13912146104559603`, -0.3792193374399158], 
            Complex[-0.914788452697218, 0.]}}], 
          
          Wolfram`QuantumFramework`QuantumBasis[<|
           "Input" -> Wolfram`QuantumFramework`QuditBasis[<|{
                 
                 Wolfram`QuantumFramework`QuditName[\[FormalCapitalI], "Dual" -> 
                  False], 1} -> 1|>], "Output" -> 
            Wolfram`QuantumFramework`QuditBasis[<|{
                 Wolfram`QuantumFramework`QuditName[
                  Subscript["\[Psi]", 
                   Subscript["y", "-"]], "Dual" -> False], 1} -> 
               SparseArray[
                Automatic, {2}, 0, {
                 1, {{0, 2}, {{1}, {2}}}, {
                  Complex[0, 1] 2^Rational[-1, 2], 2^Rational[-1, 2]}}], {
                 Wolfram`QuantumFramework`QuditName[
                  Subscript["\[Psi]", 
                   Subscript["y", "+"]], "Dual" -> False], 1} -> 
               SparseArray[
                Automatic, {2}, 0, {
                 1, {{0, 2}, {{1}, {2}}}, {
                  Complex[0, -1] 2^Rational[-1, 2], 2^Rational[-1, 2]}}]|>], 
            "Picture" -> "Schr\[ODoubleDot]dinger", "Label" -> "Y", 
            "ParameterSpec" -> {}|>]]}, 
       "Eigenvalues" -> {1.7742337718402474`, 0.7109831310855467}, 
       "Eigenvectors" -> {{Complex[0.3150686399495922, -0.8588187616188203], 
         Complex[0.4039332702462501, 0.]}, {Complex[
         0.13912146104559603`, -0.3792193374399158], 
         Complex[-0.914788452697218, 0.]}}, 
       "ElementAssociation" -> <|Wolfram`QuantumFramework`QuditName[
           Subscript["\[Psi]", 
            Subscript["y", "-"]], "Dual" -> False] -> 
         SparseArray[
          Automatic, {2}, 0, {
           1, {{0, 2}, {{1}, {2}}}, {
            Complex[0, 1] 2^Rational[-1, 2], 2^Rational[-1, 2]}}], 
         Wolfram`QuantumFramework`QuditName[
           Subscript["\[Psi]", 
            Subscript["y", "+"]], "Dual" -> False] -> 
         SparseArray[
          Automatic, {2}, 0, {
           1, {{0, 2}, {{1}, {2}}}, {
            Complex[0, -1] 2^Rational[-1, 2], 2^Rational[-1, 2]}}]|>, 
       "ElementDimension" -> 2, "ElementDimensions" -> {2}, "ElementNames" -> {
         Wolfram`QuantumFramework`QuditName[
          Subscript["\[Psi]", 
           Subscript["y", "-"]], "Dual" -> False], 
         Wolfram`QuantumFramework`QuditName[
          Subscript["\[Psi]", 
           Subscript["y", "+"]], "Dual" -> False]}, "Elements" -> 
       SparseArray[
        Automatic, {2, 2}, 0, {
         1, {{0, 2, 4}, {{1}, {2}, {1}, {2}}}, {
          Complex[0, 1] 2^Rational[-1, 2], 2^Rational[-1, 2], Complex[0, -1] 
           2^Rational[-1, 2], 2^Rational[-1, 2]}}], "Entropy" -> 
       Quantity[0.8636100627467463, "Bits"], "FinalParameters" -> {}, 
       "Formula" -> 
       Complex[1.600751578490696, 0.] Wolfram`QuantumFramework`QuditName[{
            Subscript["\[Psi]", 
             Subscript["y", "-"]], 
            Subscript["\[Psi]", 
             Subscript["y", "-"]]}, "Dual" -> False] + 
        Complex[0.13531640679361223`, -0.36884746424712844`] 
         Wolfram`QuantumFramework`QuditName[{
            Subscript["\[Psi]", 
             Subscript["y", "-"]], 
            Subscript["\[Psi]", 
             Subscript["y", "+"]]}, "Dual" -> False] + 
        Complex[0.13531640679361223`, 0.36884746424712844`] 
         Wolfram`QuantumFramework`QuditName[{
            Subscript["\[Psi]", 
             Subscript["y", "+"]], 
            Subscript["\[Psi]", 
             Subscript["y", "-"]]}, "Dual" -> False] + 
        Complex[0.8844653244350991, 0.] Wolfram`QuantumFramework`QuditName[{
            Subscript["\[Psi]", 
             Subscript["y", "+"]], 
            Subscript["\[Psi]", 
             Subscript["y", "+"]]}, "Dual" -> False], "HasInputQ" -> False, 
       "InitialParameters" -> {}, "Input" -> 
       Wolfram`QuantumFramework`QuditBasis[<|{
            
            Wolfram`QuantumFramework`QuditName[\[FormalCapitalI], "Dual" -> 
             False], 1} -> 1|>], "InputBasis" -> 
       Wolfram`QuantumFramework`QuantumBasis[<|
         "Input" -> Wolfram`QuantumFramework`QuditBasis[<|{
               
               Wolfram`QuantumFramework`QuditName[\[FormalCapitalI], "Dual" -> 
                False], 1} -> 1|>], "Output" -> 
          Wolfram`QuantumFramework`QuditBasis[<|{
               Wolfram`QuantumFramework`QuditName[\[FormalCapitalI], "Dual" -> 
                False], 1} -> 1|>], "Picture" -> "Schr\[ODoubleDot]dinger", 
          "Label" -> "Y", "ParameterSpec" -> {}|>], "InputDimension" -> 1, 
       "InputDimensions" -> {1}, "InputElementDimensions" -> {}, 
       "InputElementNames" -> {
         Wolfram`QuantumFramework`QuditName[\[FormalCapitalI], "Dual" -> 
          False]}, "InputElements" -> 
       SparseArray[Automatic, {1}, 0, {1, {{0, 1}, {{1}}}, {1}}], 
       "InputMatrix" -> 
       SparseArray[Automatic, {1, 1}, 0, {1, {{0, 1}, {{1}}}, {1}}], 
       "InputNameDimension" -> 1, "InputNameDimensions" -> {1}, "InputQudits" -> 
       0, "InputRank" -> 0, "InputSize" -> 1, "InputTensor" -> 
       SparseArray[Automatic, {1}, 0, {1, {{0, 1}, {{1}}}, {1}}], "Label" -> 
       "Y", "LabelHead" -> "Y", "Matrix" -> 
       SparseArray[
        Automatic, {4, 1}, Complex[0., 0.], {
         1, {{0, 1, 2, 3, 4}, {{1}, {1}, {1}, {1}}}, {Complex[
          1.107292044669285, 0.], Complex[0.3688474642471284, 
          0.35814312702779855`], Complex[
          0.3688474642471284, -0.3581431270277985], Complex[
          1.3779248582565096`, 0.]}}], "MatrixDimensions" -> {2, 2}, 
       "MatrixElementDimensions" -> {2, 1}, "MatrixNameDimensions" -> {2, 1}, 
       "MatrixRepresentation" -> 
       SparseArray[
        Automatic, {2, 2}, Complex[0., 0.], {
         1, {{0, 2, 4}, {{1}, {2}, {1}, {2}}}, {Complex[1.107292044669285, 
          0.], Complex[0.3688474642471284, 0.35814312702779855`], Complex[
          0.3688474642471284, -0.3581431270277985], Complex[
          1.3779248582565096`, 0.]}}], "Mixed" -> 
       Wolfram`QuantumFramework`QuantumState[
        SparseArray[
         Automatic, {2, 2}, Complex[0., 0.], {
          1, {{0, 2, 4}, {{1}, {2}, {1}, {2}}}, {Complex[1.600751578490696, 
           0.], Complex[0.13531640679361223`, -0.36884746424712844`], Complex[
           0.13531640679361223`, 0.36884746424712844`], Complex[
           0.8844653244350991, 0.]}}], 
         Wolfram`QuantumFramework`QuantumBasis[<|
          "Input" -> Wolfram`QuantumFramework`QuditBasis[<|{
                
                Wolfram`QuantumFramework`QuditName[\[FormalCapitalI], "Dual" -> 
                 False], 1} -> 1|>], "Output" -> 
           Wolfram`QuantumFramework`QuditBasis[<|{
                Wolfram`QuantumFramework`QuditName[
                 Subscript["\[Psi]", 
                  Subscript["y", "-"]], "Dual" -> False], 1} -> 
              SparseArray[
               Automatic, {2}, 0, {
                1, {{0, 2}, {{1}, {2}}}, {
                 Complex[0, 1] 2^Rational[-1, 2], 2^Rational[-1, 2]}}], {
                Wolfram`QuantumFramework`QuditName[
                 Subscript["\[Psi]", 
                  Subscript["y", "+"]], "Dual" -> False], 1} -> 
              SparseArray[
               Automatic, {2}, 0, {
                1, {{0, 2}, {{1}, {2}}}, {
                 Complex[0, -1] 2^Rational[-1, 2], 2^Rational[-1, 2]}}]|>], 
           "Picture" -> "Schr\[ODoubleDot]dinger", "Label" -> "Y", 
           "ParameterSpec" -> {}|>]], "MixedStateQ" -> True, 
       "NameDimensions" -> {2}, "Names" -> {
         Wolfram`QuantumFramework`QuditName[
          Subscript["\[Psi]", 
           Subscript["y", "-"]], "Dual" -> False], 
         Wolfram`QuantumFramework`QuditName[
          Subscript["\[Psi]", 
           Subscript["y", "+"]], "Dual" -> False]}, "Norm" -> 
       Complex[2.485216902925795, 0.], "NormalElementNames" -> {{
          Wolfram`QuantumFramework`QuditName[
           Subscript["\[Psi]", 
            Subscript["y", "-"]], "Dual" -> False]}, {
          Wolfram`QuantumFramework`QuditName[
           Subscript["\[Psi]", 
            Subscript["y", "+"]], "Dual" -> False]}}, 
       "NormalizedAmplitudes" -> <|Wolfram`QuantumFramework`QuditName[{
            Subscript["\[Psi]", 
             Subscript["y", "-"]], 
            Subscript["\[Psi]", 
             Subscript["y", "-"]]}, "Dual" -> False] -> 0.8374814157535809, 
         Wolfram`QuantumFramework`QuditName[{
            Subscript["\[Psi]", 
             Subscript["y", "-"]], 
            Subscript["\[Psi]", 
             Subscript["y", "+"]]}, "Dual" -> False] -> 
         Complex[0.07079485502869397, -0.19297366356249943`], 
         Wolfram`QuantumFramework`QuditName[{
            Subscript["\[Psi]", 
             Subscript["y", "+"]], 
            Subscript["\[Psi]", 
             Subscript["y", "-"]]}, "Dual" -> False] -> 
         Complex[0.07079485502869397, 0.19297366356249943`], 
         Wolfram`QuantumFramework`QuditName[{
            Subscript["\[Psi]", 
             Subscript["y", "+"]], 
            Subscript["\[Psi]", 
             Subscript["y", "+"]]}, "Dual" -> False] -> 
         0.46273468166201304`|>, "NormalizedDensityMatrix" -> 
       SparseArray[
        Automatic, {2, 2}, Complex[0., 0.], {
         1, {{0, 2, 4}, {{1}, {2}, {1}, {2}}}, {Complex[0.6441094041353751, 
          0.], Complex[0.05444852987854178, -0.14841660855150787`], Complex[
          0.05444852987854178, 0.14841660855150787`], Complex[
          0.355890595864625, 0.]}}], 
       "NormalizedOperator" -> <|Wolfram`QuantumFramework`QuditName[
           Wolfram`QuantumFramework`QuditName[
            Subscript["\[Psi]", 
             Subscript["y", "-"]], "Dual" -> False], 
           Wolfram`QuantumFramework`QuditName[
            Subscript["\[Psi]", 
             Subscript["y", "-"]], "Dual" -> True]] -> 0.6441094041353751, 
         Wolfram`QuantumFramework`QuditName[
           Wolfram`QuantumFramework`QuditName[
            Subscript["\[Psi]", 
             Subscript["y", "-"]], "Dual" -> False], 
           Wolfram`QuantumFramework`QuditName[
            Subscript["\[Psi]", 
             Subscript["y", "+"]], "Dual" -> True]] -> 
         Complex[0.05444852987854178, -0.14841660855150787`], 
         Wolfram`QuantumFramework`QuditName[
           Wolfram`QuantumFramework`QuditName[
            Subscript["\[Psi]", 
             Subscript["y", "+"]], "Dual" -> False], 
           Wolfram`QuantumFramework`QuditName[
            Subscript["\[Psi]", 
             Subscript["y", "-"]], "Dual" -> True]] -> 
         Complex[0.05444852987854178, 0.14841660855150787`], 
         Wolfram`QuantumFramework`QuditName[
           Wolfram`QuantumFramework`QuditName[
            Subscript["\[Psi]", 
             Subscript["y", "+"]], "Dual" -> False], 
           Wolfram`QuantumFramework`QuditName[
            Subscript["\[Psi]", 
             Subscript["y", "+"]], "Dual" -> True]] -> 0.355890595864625|>, 
       "NormalizedProjector" -> Wolfram`QuantumFramework`QuantumState[
         SparseArray[Automatic, {4}, 
          Complex[0., 0.], {
          1, {{0, 4}, {{1}, {2}, {3}, {4}}}, {Complex[0.6441094041353751, 0.],
            Complex[0.05444852987854178, -0.14841660855150787`], Complex[
           0.05444852987854178, 0.14841660855150787`], Complex[
           0.355890595864625, 0.]}}], 
         Wolfram`QuantumFramework`QuantumBasis[<|
          "Input" -> Wolfram`QuantumFramework`QuditBasis[<|{
                Wolfram`QuantumFramework`QuditName[
                 Subscript["\[Psi]", 
                  Subscript["y", "-"]], "Dual" -> True], 1} -> 
              SparseArray[
               Automatic, {2}, 0, {
                1, {{0, 2}, {{1}, {2}}}, {
                 Complex[0, 1] 2^Rational[-1, 2], 2^Rational[-1, 2]}}], {
                Wolfram`QuantumFramework`QuditName[
                 Subscript["\[Psi]", 
                  Subscript["y", "+"]], "Dual" -> True], 1} -> 
              SparseArray[
               Automatic, {2}, 0, {
                1, {{0, 2}, {{1}, {2}}}, {
                 Complex[0, -1] 2^Rational[-1, 2], 2^Rational[-1, 2]}}]|>], 
           "Output" -> Wolfram`QuantumFramework`QuditBasis[<|{
                Wolfram`QuantumFramework`QuditName[
                 Subscript["\[Psi]", 
                  Subscript["y", "-"]], "Dual" -> False], 1} -> 
              SparseArray[
               Automatic, {2}, 0, {
                1, {{0, 2}, {{1}, {2}}}, {
                 Complex[0, 1] 2^Rational[-1, 2], 2^Rational[-1, 2]}}], {
                Wolfram`QuantumFramework`QuditName[
                 Subscript["\[Psi]", 
                  Subscript["y", "+"]], "Dual" -> False], 1} -> 
              SparseArray[
               Automatic, {2}, 0, {
                1, {{0, 2}, {{1}, {2}}}, {
                 Complex[0, -1] 2^Rational[-1, 2], 2^Rational[-1, 2]}}]|>], 
           "Picture" -> "Schr\[ODoubleDot]dinger", "Label" -> "Y", 
           "ParameterSpec" -> {}|>]], "NormalizedQ" -> False, 
       "NormalizedState" -> 
       Wolfram`QuantumFramework`QuantumState[
        SparseArray[
         Automatic, {2, 2}, Complex[0., 0.], {
          1, {{0, 2, 4}, {{1}, {2}, {1}, {2}}}, {Complex[0.6441094041353751, 
           0.], Complex[0.05444852987854178, -0.14841660855150787`], Complex[
           0.05444852987854178, 0.14841660855150787`], Complex[
           0.355890595864625, 0.]}}], 
         Wolfram`QuantumFramework`QuantumBasis[<|
          "Input" -> Wolfram`QuantumFramework`QuditBasis[<|{
                
                Wolfram`QuantumFramework`QuditName[\[FormalCapitalI], "Dual" -> 
                 False], 1} -> 1|>], "Output" -> 
           Wolfram`QuantumFramework`QuditBasis[<|{
                Wolfram`QuantumFramework`QuditName[
                 Subscript["\[Psi]", 
                  Subscript["y", "-"]], "Dual" -> False], 1} -> 
              SparseArray[
               Automatic, {2}, 0, {
                1, {{0, 2}, {{1}, {2}}}, {
                 Complex[0, 1] 2^Rational[-1, 2], 2^Rational[-1, 2]}}], {
                Wolfram`QuantumFramework`QuditName[
                 Subscript["\[Psi]", 
                  Subscript["y", "+"]], "Dual" -> False], 1} -> 
              SparseArray[
               Automatic, {2}, 0, {
                1, {{0, 2}, {{1}, {2}}}, {
                 Complex[0, -1] 2^Rational[-1, 2], 2^Rational[-1, 2]}}]|>], 
           "Picture" -> "Schr\[ODoubleDot]dinger", "Label" -> "Y", 
           "ParameterSpec" -> {}|>]], "NormalizedStateVector" -> 
       SparseArray[Automatic, {4}, 
         Complex[0., 0.], {
         1, {{0, 4}, {{1}, {2}, {3}, {4}}}, {Complex[0.8374814157535809, 0.], 
          Complex[0.07079485502869397, -0.19297366356249943`], Complex[
          0.07079485502869397, 0.19297366356249943`], Complex[
          0.46273468166201304`, 0.]}}], "Operator" -> 
       Wolfram`QuantumFramework`QuantumOperator[
         Wolfram`QuantumFramework`QuantumState[
          SparseArray[Automatic, {4}, 
           Complex[0., 0.], {
           1, {{0, 4}, {{1}, {2}, {3}, {4}}}, {Complex[1.600751578490696, 0.],
             Complex[0.13531640679361223`, -0.36884746424712844`], Complex[
            0.13531640679361223`, 0.36884746424712844`], Complex[
            0.8844653244350991, 0.]}}], 
          
          Wolfram`QuantumFramework`QuantumBasis[<|
           "Input" -> Wolfram`QuantumFramework`QuditBasis[<|{
                 Wolfram`QuantumFramework`QuditName[
                  Subscript["\[Psi]", 
                   Subscript["y", "-"]], "Dual" -> True], 1} -> 
               SparseArray[
                Automatic, {2}, 0, {
                 1, {{0, 2}, {{1}, {2}}}, {
                  Complex[0, 1] 2^Rational[-1, 2], 2^Rational[-1, 2]}}], {
                 Wolfram`QuantumFramework`QuditName[
                  Subscript["\[Psi]", 
                   Subscript["y", "+"]], "Dual" -> True], 1} -> 
               SparseArray[
                Automatic, {2}, 0, {
                 1, {{0, 2}, {{1}, {2}}}, {
                  Complex[0, -1] 2^Rational[-1, 2], 2^Rational[-1, 2]}}]|>], 
            "Output" -> Wolfram`QuantumFramework`QuditBasis[<|{
                 Wolfram`QuantumFramework`QuditName[
                  Subscript["\[Psi]", 
                   Subscript["y", "-"]], "Dual" -> False], 1} -> 
               SparseArray[
                Automatic, {2}, 0, {
                 1, {{0, 2}, {{1}, {2}}}, {
                  Complex[0, 1] 2^Rational[-1, 2], 2^Rational[-1, 2]}}], {
                 Wolfram`QuantumFramework`QuditName[
                  Subscript["\[Psi]", 
                   Subscript["y", "+"]], "Dual" -> False], 1} -> 
               SparseArray[
                Automatic, {2}, 0, {
                 1, {{0, 2}, {{1}, {2}}}, {
                  Complex[0, -1] 2^Rational[-1, 2], 2^Rational[-1, 2]}}]|>], 
            "Picture" -> "Schr\[ODoubleDot]dinger", "Label" -> "Y", 
            "ParameterSpec" -> {}|>]], {{1}, {1}}], 
       "OrthogonalElements" -> {{
         Complex[0, 1] 2^Rational[-1, 2], 2^Rational[-1, 2]}, {
         Complex[0, -1] 2^Rational[-1, 2], 2^Rational[-1, 2]}}, "Output" -> 
       Wolfram`QuantumFramework`QuditBasis[<|{
            Wolfram`QuantumFramework`QuditName[
             Subscript["\[Psi]", 
              Subscript["y", "-"]], "Dual" -> False], 1} -> 
          SparseArray[
           Automatic, {2}, 0, {
            1, {{0, 2}, {{1}, {2}}}, {
             Complex[0, 1] 2^Rational[-1, 2], 2^Rational[-1, 2]}}], {
            Wolfram`QuantumFramework`QuditName[
             Subscript["\[Psi]", 
              Subscript["y", "+"]], "Dual" -> False], 1} -> 
          SparseArray[
           Automatic, {2}, 0, {
            1, {{0, 2}, {{1}, {2}}}, {
             Complex[0, -1] 2^Rational[-1, 2], 2^Rational[-1, 2]}}]|>], 
       "OutputBasis" -> 
       Wolfram`QuantumFramework`QuantumBasis[<|
         "Input" -> Wolfram`QuantumFramework`QuditBasis[<|{
               
               Wolfram`QuantumFramework`QuditName[\[FormalCapitalI], "Dual" -> 
                False], 1} -> 1|>], "Output" -> 
          Wolfram`QuantumFramework`QuditBasis[<|{
               Wolfram`QuantumFramework`QuditName[
                Subscript["\[Psi]", 
                 Subscript["y", "-"]], "Dual" -> False], 1} -> 
             SparseArray[
              Automatic, {2}, 0, {
               1, {{0, 2}, {{1}, {2}}}, {
                Complex[0, 1] 2^Rational[-1, 2], 2^Rational[-1, 2]}}], {
               Wolfram`QuantumFramework`QuditName[
                Subscript["\[Psi]", 
                 Subscript["y", "+"]], "Dual" -> False], 1} -> 
             SparseArray[
              Automatic, {2}, 0, {
               1, {{0, 2}, {{1}, {2}}}, {
                Complex[0, -1] 2^Rational[-1, 2], 2^Rational[-1, 2]}}]|>], 
          "Picture" -> "Schr\[ODoubleDot]dinger", "Label" -> "Y", 
          "ParameterSpec" -> {}|>], "OutputDimension" -> 2, 
       "OutputDimensions" -> {2}, "OutputElementDimensions" -> {2}, 
       "OutputElementNames" -> {
         Wolfram`QuantumFramework`QuditName[
          Subscript["\[Psi]", 
           Subscript["y", "-"]], "Dual" -> False], 
         Wolfram`QuantumFramework`QuditName[
          Subscript["\[Psi]", 
           Subscript["y", "+"]], "Dual" -> False]}, "OutputElements" -> 
       SparseArray[
        Automatic, {2, 2}, 0, {
         1, {{0, 2, 4}, {{1}, {2}, {1}, {2}}}, {
          Complex[0, 1] 2^Rational[-1, 2], 2^Rational[-1, 2], Complex[0, -1] 
           2^Rational[-1, 2], 2^Rational[-1, 2]}}], "OutputMatrix" -> 
       SparseArray[
        Automatic, {2, 2}, 0, {
         1, {{0, 2, 4}, {{1}, {2}, {1}, {2}}}, {
          Complex[0, 1] 2^Rational[-1, 2], Complex[0, -1] 2^Rational[-1, 2], 
           2^Rational[-1, 2], 2^Rational[-1, 2]}}], "OutputNameDimension" -> 
       2, "OutputNameDimensions" -> {2}, "OutputQudits" -> 1, "OutputRank" -> 
       1, "OutputSize" -> 2, "OutputTensor" -> 
       SparseArray[
        Automatic, {2, 2}, 0, {
         1, {{0, 2, 4}, {{1}, {2}, {1}, {2}}}, {
          Complex[0, 1] 2^Rational[-1, 2], Complex[0, -1] 2^Rational[-1, 2], 
           2^Rational[-1, 2], 2^Rational[-1, 2]}}], "ParameterArity" -> 0, 
       "Parameters" -> {}, "ParameterSpec" -> {}, "Picture" -> 
       "Schr\[ODoubleDot]dinger", "Probabilities" -> 
       SparseArray[
        Automatic, {2}, 0., {
         1, {{0, 2}, {{1}, {2}}}, {0.6441094041353751, 0.355890595864625}}], 
       "Projector" -> Wolfram`QuantumFramework`QuantumState[
         SparseArray[Automatic, {4}, 
          Complex[0., 0.], {
          1, {{0, 4}, {{1}, {2}, {3}, {4}}}, {Complex[1.600751578490696, 0.], 
           Complex[0.13531640679361223`, -0.36884746424712844`], Complex[
           0.13531640679361223`, 0.36884746424712844`], Complex[
           0.8844653244350991, 0.]}}], 
         Wolfram`QuantumFramework`QuantumBasis[<|
          "Input" -> Wolfram`QuantumFramework`QuditBasis[<|{
                Wolfram`QuantumFramework`QuditName[
                 Subscript["\[Psi]", 
                  Subscript["y", "-"]], "Dual" -> True], 1} -> 
              SparseArray[
               Automatic, {2}, 0, {
                1, {{0, 2}, {{1}, {2}}}, {
                 Complex[0, 1] 2^Rational[-1, 2], 2^Rational[-1, 2]}}], {
                Wolfram`QuantumFramework`QuditName[
                 Subscript["\[Psi]", 
                  Subscript["y", "+"]], "Dual" -> True], 1} -> 
              SparseArray[
               Automatic, {2}, 0, {
                1, {{0, 2}, {{1}, {2}}}, {
                 Complex[0, -1] 2^Rational[-1, 2], 2^Rational[-1, 2]}}]|>], 
           "Output" -> Wolfram`QuantumFramework`QuditBasis[<|{
                Wolfram`QuantumFramework`QuditName[
                 Subscript["\[Psi]", 
                  Subscript["y", "-"]], "Dual" -> False], 1} -> 
              SparseArray[
               Automatic, {2}, 0, {
                1, {{0, 2}, {{1}, {2}}}, {
                 Complex[0, 1] 2^Rational[-1, 2], 2^Rational[-1, 2]}}], {
                Wolfram`QuantumFramework`QuditName[
                 Subscript["\[Psi]", 
                  Subscript["y", "+"]], "Dual" -> False], 1} -> 
              SparseArray[
               Automatic, {2}, 0, {
                1, {{0, 2}, {{1}, {2}}}, {
                 Complex[0, -1] 2^Rational[-1, 2], 2^Rational[-1, 2]}}]|>], 
           "Picture" -> "Schr\[ODoubleDot]dinger", "Label" -> "Y", 
           "ParameterSpec" -> {}|>]], 
       "Projectors" -> {
        SparseArray[
         Automatic, {2, 2}, 0, {
          1, {{0, 2, 4}, {{1}, {2}, {1}, {2}}}, {
           Rational[1, 2], Complex[0, Rational[1, 2]], Complex[
            0, Rational[-1, 2]], Rational[1, 2]}}], SparseArray[
         Automatic, {2, 2}, 0, {
          1, {{0, 2, 4}, {{1}, {2}, {1}, {2}}}, {
           Rational[1, 2], Complex[0, Rational[-1, 2]], Complex[
            0, Rational[1, 2]], Rational[1, 2]}}]}, "Pure" -> 
       Wolfram`QuantumFramework`QuantumState[
         SparseArray[Automatic, {4}, 
          Complex[0., 0.], {
          1, {{0, 4}, {{1}, {2}, {3}, {4}}}, {Complex[1.600751578490696, 0.], 
           Complex[0.13531640679361223`, -0.36884746424712844`], Complex[
           0.13531640679361223`, 0.36884746424712844`], Complex[
           0.8844653244350991, 0.]}}], 
         Wolfram`QuantumFramework`QuantumBasis[<|
          "Output" -> Wolfram`QuantumFramework`QuditBasis[<|{
                Wolfram`QuantumFramework`QuditName[
                 Subscript["\[Psi]", 
                  Subscript["y", "-"]], "Dual" -> False], 1} -> 
              SparseArray[
               Automatic, {2}, 0, {
                1, {{0, 2}, {{1}, {2}}}, {
                 Complex[0, 1] 2^Rational[-1, 2], 2^Rational[-1, 2]}}], {
                Wolfram`QuantumFramework`QuditName[
                 Subscript["\[Psi]", 
                  Subscript["y", "+"]], "Dual" -> False], 1} -> 
              SparseArray[
               Automatic, {2}, 0, {
                1, {{0, 2}, {{1}, {2}}}, {
                 Complex[0, -1] 2^Rational[-1, 2], 2^Rational[-1, 2]}}], {
                Wolfram`QuantumFramework`QuditName[
                 Subscript["\[Psi]", 
                  Subscript["y", "-"]], "Dual" -> False], 2} -> 
              SparseArray[
               Automatic, {2}, 0, {
                1, {{0, 2}, {{1}, {2}}}, {
                 Complex[0, 1] 2^Rational[-1, 2], 2^Rational[-1, 2]}}], {
                Wolfram`QuantumFramework`QuditName[
                 Subscript["\[Psi]", 
                  Subscript["y", "+"]], "Dual" -> False], 2} -> 
              SparseArray[
               Automatic, {2}, 0, {
                1, {{0, 2}, {{1}, {2}}}, {
                 Complex[0, -1] 2^Rational[-1, 2], 2^Rational[-1, 2]}}]|>], 
           "Input" -> Wolfram`QuantumFramework`QuditBasis[<|{
                
                Wolfram`QuantumFramework`QuditName[\[FormalCapitalI], "Dual" -> 
                 False], 1} -> 1|>], "Picture" -> "Schr\[ODoubleDot]dinger", 
           "Label" -> Superscript["Y", 
             CircleTimes[2]], "ParameterSpec" -> {}|>]], "PureEffects" -> {
         Wolfram`QuantumFramework`QuantumState[
          SparseArray[Automatic, {2}, 0, {1, {{0, 1}, {{1}}}, {1}}], 
          
          Wolfram`QuantumFramework`QuantumBasis[<|
           "Input" -> Wolfram`QuantumFramework`QuditBasis[<|{
                 
                 Wolfram`QuantumFramework`QuditName[\[FormalCapitalI], "Dual" -> 
                  False], 1} -> 1|>], "Output" -> 
            Wolfram`QuantumFramework`QuditBasis[<|{
                 Wolfram`QuantumFramework`QuditName[
                  Subscript["\[Psi]", 
                   Subscript["y", "-"]], "Dual" -> False], 1} -> 
               SparseArray[
                Automatic, {2}, 0, {
                 1, {{0, 2}, {{1}, {2}}}, {
                  Complex[0, 1] 2^Rational[-1, 2], 2^Rational[-1, 2]}}], {
                 Wolfram`QuantumFramework`QuditName[
                  Subscript["\[Psi]", 
                   Subscript["y", "+"]], "Dual" -> False], 1} -> 
               SparseArray[
                Automatic, {2}, 0, {
                 1, {{0, 2}, {{1}, {2}}}, {
                  Complex[0, -1] 2^Rational[-1, 2], 2^Rational[-1, 2]}}]|>], 
            "Picture" -> "Schr\[ODoubleDot]dinger", "Label" -> "Y", 
            "ParameterSpec" -> {}|>]]}, "PureMaps" -> {{
          Wolfram`QuantumFramework`QuantumState[
           SparseArray[Automatic, {2}, 0, {1, {{0, 1}, {{1}}}, {1}}], 
           
           Wolfram`QuantumFramework`QuantumBasis[<|
            "Input" -> Wolfram`QuantumFramework`QuditBasis[<|{
                  
                  Wolfram`QuantumFramework`QuditName[\[FormalCapitalI], 
                   "Dual" -> False], 1} -> 1|>], "Output" -> 
             Wolfram`QuantumFramework`QuditBasis[<|{
                  Wolfram`QuantumFramework`QuditName[
                   Subscript["\[Psi]", 
                    Subscript["y", "-"]], "Dual" -> False], 1} -> 
                SparseArray[
                 Automatic, {2}, 0, {
                  1, {{0, 2}, {{1}, {2}}}, {
                   Complex[0, 1] 2^Rational[-1, 2], 2^Rational[-1, 2]}}], {
                  Wolfram`QuantumFramework`QuditName[
                   Subscript["\[Psi]", 
                    Subscript["y", "+"]], "Dual" -> False], 1} -> 
                SparseArray[
                 Automatic, {2}, 0, {
                  1, {{0, 2}, {{1}, {2}}}, {
                   Complex[0, -1] 2^Rational[-1, 2], 2^Rational[-1, 2]}}]|>], 
             "Picture" -> "Schr\[ODoubleDot]dinger", "Label" -> "Y", 
             "ParameterSpec" -> {}|>]]}, {
          Wolfram`QuantumFramework`QuantumState[
           SparseArray[Automatic, {2}, 0, {1, {{0, 1}, {{2}}}, {1}}], 
           
           Wolfram`QuantumFramework`QuantumBasis[<|
            "Input" -> Wolfram`QuantumFramework`QuditBasis[<|{
                  
                  Wolfram`QuantumFramework`QuditName[\[FormalCapitalI], 
                   "Dual" -> False], 1} -> 1|>], "Output" -> 
             Wolfram`QuantumFramework`QuditBasis[<|{
                  Wolfram`QuantumFramework`QuditName[
                   Subscript["\[Psi]", 
                    Subscript["y", "-"]], "Dual" -> False], 1} -> 
                SparseArray[
                 Automatic, {2}, 0, {
                  1, {{0, 2}, {{1}, {2}}}, {
                   Complex[0, 1] 2^Rational[-1, 2], 2^Rational[-1, 2]}}], {
                  Wolfram`QuantumFramework`QuditName[
                   Subscript["\[Psi]", 
                    Subscript["y", "+"]], "Dual" -> False], 1} -> 
                SparseArray[
                 Automatic, {2}, 0, {
                  1, {{0, 2}, {{1}, {2}}}, {
                   Complex[0, -1] 2^Rational[-1, 2], 2^Rational[-1, 2]}}]|>], 
             "Picture" -> "Schr\[ODoubleDot]dinger", "Label" -> "Y", 
             "ParameterSpec" -> {}|>]]}}, "PureStateQ" -> False, "PureStates" -> {
         Wolfram`QuantumFramework`QuantumState[
          SparseArray[Automatic, {2}, 0, {1, {{0, 1}, {{1}}}, {1}}], 
          Wolfram`QuantumFramework`QuantumBasis[<|
           "Input" -> Wolfram`QuantumFramework`QuditBasis[<|{
                 
                 Wolfram`QuantumFramework`QuditName[\[FormalCapitalI], "Dual" -> 
                  False], 1} -> 1|>], "Output" -> 
            Wolfram`QuantumFramework`QuditBasis[<|{
                 Wolfram`QuantumFramework`QuditName[
                  Subscript["\[Psi]", 
                   Subscript["y", "-"]], "Dual" -> False], 1} -> 
               SparseArray[
                Automatic, {2}, 0, {
                 1, {{0, 2}, {{1}, {2}}}, {
                  Complex[0, 1] 2^Rational[-1, 2], 2^Rational[-1, 2]}}], {
                 Wolfram`QuantumFramework`QuditName[
                  Subscript["\[Psi]", 
                   Subscript["y", "+"]], "Dual" -> False], 1} -> 
               SparseArray[
                Automatic, {2}, 0, {
                 1, {{0, 2}, {{1}, {2}}}, {
                  Complex[0, -1] 2^Rational[-1, 2], 2^Rational[-1, 2]}}]|>], 
            "Picture" -> "Schr\[ODoubleDot]dinger", "Label" -> "Y", 
            "ParameterSpec" -> {}|>]], 
         Wolfram`QuantumFramework`QuantumState[
          SparseArray[Automatic, {2}, 0, {1, {{0, 1}, {{2}}}, {1}}], 
          
          Wolfram`QuantumFramework`QuantumBasis[<|
           "Input" -> Wolfram`QuantumFramework`QuditBasis[<|{
                 
                 Wolfram`QuantumFramework`QuditName[\[FormalCapitalI], "Dual" -> 
                  False], 1} -> 1|>], "Output" -> 
            Wolfram`QuantumFramework`QuditBasis[<|{
                 Wolfram`QuantumFramework`QuditName[
                  Subscript["\[Psi]", 
                   Subscript["y", "-"]], "Dual" -> False], 1} -> 
               SparseArray[
                Automatic, {2}, 0, {
                 1, {{0, 2}, {{1}, {2}}}, {
                  Complex[0, 1] 2^Rational[-1, 2], 2^Rational[-1, 2]}}], {
                 Wolfram`QuantumFramework`QuditName[
                  Subscript["\[Psi]", 
                   Subscript["y", "+"]], "Dual" -> False], 1} -> 
               SparseArray[
                Automatic, {2}, 0, {
                 1, {{0, 2}, {{1}, {2}}}, {
                  Complex[0, -1] 2^Rational[-1, 2], 2^Rational[-1, 2]}}]|>], 
            "Picture" -> "Schr\[ODoubleDot]dinger", "Label" -> "Y", 
            "ParameterSpec" -> {}|>]]}, "Purity" -> 0.5915193049202377, 
       "QuditBasis" -> Wolfram`QuantumFramework`QuditBasis[<|{
            Wolfram`QuantumFramework`QuditName[
             Subscript["\[Psi]", 
              Subscript["y", "-"]], "Dual" -> False], 1} -> 
          SparseArray[
           Automatic, {2}, 0, {
            1, {{0, 2}, {{1}, {2}}}, {
             Complex[0, 1] 2^Rational[-1, 2], 2^Rational[-1, 2]}}], {
            Wolfram`QuantumFramework`QuditName[
             Subscript["\[Psi]", 
              Subscript["y", "+"]], "Dual" -> False], 1} -> 
          SparseArray[
           Automatic, {2}, 0, {
            1, {{0, 2}, {{1}, {2}}}, {
             Complex[0, -1] 2^Rational[-1, 2], 2^Rational[-1, 2]}}]|>], 
       "Qudits" -> 1, "Rank" -> 1, "SchmidtBasis" -> 
       Wolfram`QuantumFramework`QuantumState[
         SparseArray[
         Automatic, {4}, 0., {1, {{0, 1}, {{1}}}, {1.9113875823146596`}}], 
         Wolfram`QuantumFramework`QuantumBasis[<|
          "Input" -> Wolfram`QuantumFramework`QuditBasis[<|{
                Wolfram`QuantumFramework`QuditName[
                 Subscript["v", 1], "Dual" -> False], 1} -> 
              SparseArray[Automatic, {1}, 
                Complex[0., 0.], {1, {{0, 1}, {{1}}}, {Complex[-1., 0.]}}]|>],
            "Output" -> Wolfram`QuantumFramework`QuditBasis[<|{
                Wolfram`QuantumFramework`QuditName[
                 Subscript["u", 1], "Dual" -> False], 1} -> 
              SparseArray[Automatic, {4}, 
                Complex[0., 0.], {
                1, {{0, 4}, {{1}, {2}, {3}, {4}}}, {
                 Complex[-0.579313193679103, 0.], 
                 Complex[-0.19297366356249945`, -0.18737336704578406`], 
                 Complex[-0.19297366356249945`, 0.18737336704578403`], 
                 Complex[-0.720902903736491, 0.]}}], {
                Wolfram`QuantumFramework`QuditName[
                 Subscript["u", 2], "Dual" -> False], 1} -> 
              SparseArray[Automatic, {4}, 
                Complex[0., 0.], {
                1, {{0, 4}, {{1}, {2}, {3}, {4}}}, {
                 Complex[-0.19297366356249945`, 0.18737336704578406`], 
                 Complex[0.9541904583610368, 7.712214118426319*^-19], 
                 Complex[-0.001348723077337517, 0.04578968280336261], 
                 Complex[-0.08808593188713719, 0.08552958648532336]}}], {
                Wolfram`QuantumFramework`QuditName[
                 Subscript["u", 3], "Dual" -> False], 1} -> 
              SparseArray[Automatic, {4}, 
                Complex[0., 0.], {
                1, {{0, 4}, {{1}, {2}, {3}, {4}}}, {
                 Complex[-0.19297366356249945`, -0.18737336704578403`], 
                 Complex[-0.0013487230773375164`, -0.04578968280336261], 
                 Complex[0.9541904583610368, -6.931822770785578*^-19], 
                 Complex[-0.08808593188713719, -0.08552958648532334]}}], {
                Wolfram`QuantumFramework`QuditName[
                 Subscript["u", 4], "Dual" -> False], 1} -> 
              SparseArray[Automatic, {4}, 
                Complex[0., 0.], {
                1, {{0, 4}, {{1}, {2}, {3}, {4}}}, {
                 Complex[-0.720902903736491, 0.], 
                 Complex[-0.08808593188713719, -0.08552958648532336], 
                 Complex[-0.08808593188713719, 0.08552958648532334], Complex[
                 0.6709322769570294, 0.]}}]|>], "Picture" -> 
           "Schr\[ODoubleDot]dinger", "Label" -> "Computational", 
           "ParameterSpec" -> {}|>]], "Size" -> 3, "SpectralBasis" -> 
       Wolfram`QuantumFramework`QuantumState[
         SparseArray[
         Automatic, {2}, 0., {
          1, {{0, 2}, {{1}, {2}}}, {1.7742337718402474`, 
           0.7109831310855467}}], 
         Wolfram`QuantumFramework`QuantumBasis[<|
          "Input" -> Wolfram`QuantumFramework`QuditBasis[<|{
                
                Wolfram`QuantumFramework`QuditName[\[FormalCapitalI], "Dual" -> 
                 False], 1} -> 1|>], "Output" -> 
           Wolfram`QuantumFramework`QuditBasis[<|{
                Wolfram`QuantumFramework`QuditName[
                 Subscript["s", 1], "Dual" -> False], 1} -> 
              SparseArray[Automatic, {2}, 
                Complex[0., 0.], {
                1, {{0, 2}, {{1}, {2}}}, {Complex[
                 0.3150686399495922, -0.8588187616188203], Complex[
                 0.4039332702462501, 0.]}}], {
                Wolfram`QuantumFramework`QuditName[
                 Subscript["s", 2], "Dual" -> False], 1} -> 
              SparseArray[Automatic, {2}, 
                Complex[0., 0.], {
                1, {{0, 2}, {{1}, {2}}}, {Complex[
                 0.13912146104559603`, -0.3792193374399158], 
                 Complex[-0.914788452697218, 0.]}}]|>], "Picture" -> 
           "Schr\[ODoubleDot]dinger", "Label" -> None, 
           "ParameterSpec" -> {}|>]], "State" -> 
       SparseArray[
        Automatic, {2, 2}, Complex[0., 0.], {
         1, {{0, 2, 4}, {{1}, {2}, {1}, {2}}}, {Complex[1.600751578490696, 
          0.], Complex[0.13531640679361223`, -0.36884746424712844`], Complex[
          0.13531640679361223`, 0.36884746424712844`], Complex[
          0.8844653244350991, 0.]}}], "StateMatrix" -> 
       SparseArray[
        Automatic, {4, 1}, Complex[0., 0.], {
         1, {{0, 1, 2, 3, 4}, {{1}, {1}, {1}, {1}}}, {Complex[
          1.600751578490696, 0.], Complex[
          0.13531640679361223`, -0.36884746424712844`], Complex[
          0.13531640679361223`, 0.36884746424712844`], Complex[
          0.8844653244350991, 0.]}}], "StateTensor" -> 
       SparseArray[
        Automatic, {2, 2}, Complex[0., 0.], {
         1, {{0, 2, 4}, {{1}, {2}, {1}, {2}}}, {Complex[1.600751578490696, 
          0.], Complex[0.13531640679361223`, -0.36884746424712844`], Complex[
          0.13531640679361223`, 0.36884746424712844`], Complex[
          0.8844653244350991, 0.]}}], "StateType" -> "Matrix", "StateVector" -> 
       SparseArray[Automatic, {4}, 
         Complex[0., 0.], {
         1, {{0, 4}, {{1}, {2}, {3}, {4}}}, {Complex[1.600751578490696, 0.], 
          Complex[0.13531640679361223`, -0.36884746424712844`], Complex[
          0.13531640679361223`, 0.36884746424712844`], Complex[
          0.8844653244350991, 0.]}}], "Tensor" -> 
       SparseArray[
        Automatic, {2, 2}, Complex[0., 0.], {
         1, {{0, 2, 4}, {{1}, {2}, {1}, {2}}}, {Complex[1.107292044669285, 
          0.], Complex[0.3688474642471284, 0.35814312702779855`], Complex[
          0.3688474642471284, -0.3581431270277985], Complex[
          1.3779248582565096`, 0.]}}], "TensorDimensions" -> {2, 2}, 
       "TensorRepresentation" -> 
       SparseArray[
        Automatic, {2, 2}, Complex[0., 0.], {
         1, {{0, 2, 4}, {{1}, {2}, {1}, {2}}}, {Complex[1.107292044669285, 
          0.], Complex[0.3688474642471284, 0.35814312702779855`], Complex[
          0.3688474642471284, -0.3581431270277985], Complex[
          1.3779248582565096`, 0.]}}], "Transpose" -> 
       Wolfram`QuantumFramework`QuantumState[
        SparseArray[
         Automatic, {2, 2}, Complex[0., 0.], {
          1, {{0, 2, 4}, {{1}, {2}, {1}, {2}}}, {Complex[1.600751578490696, 
           0.], Complex[0.13531640679361223`, -0.36884746424712844`], Complex[
           0.13531640679361223`, 0.36884746424712844`], Complex[
           0.8844653244350991, 0.]}}], 
         Wolfram`QuantumFramework`QuantumBasis[<|
          "Input" -> Wolfram`QuantumFramework`QuditBasis[<|{
                Wolfram`QuantumFramework`QuditName[
                 Subscript["\[Psi]", 
                  Subscript["y", "-"]], "Dual" -> False], 1} -> 
              SparseArray[
               Automatic, {2}, 0, {
                1, {{0, 2}, {{1}, {2}}}, {
                 Complex[0, 1] 2^Rational[-1, 2], 2^Rational[-1, 2]}}], {
                Wolfram`QuantumFramework`QuditName[
                 Subscript["\[Psi]", 
                  Subscript["y", "+"]], "Dual" -> False], 1} -> 
              SparseArray[
               Automatic, {2}, 0, {
                1, {{0, 2}, {{1}, {2}}}, {
                 Complex[0, -1] 2^Rational[-1, 2], 2^Rational[-1, 2]}}]|>], 
           "Output" -> Wolfram`QuantumFramework`QuditBasis[<|{
                
                Wolfram`QuantumFramework`QuditName[\[FormalCapitalI], "Dual" -> 
                 False], 1} -> 1|>], "Picture" -> "Schr\[ODoubleDot]dinger", 
           "Label" -> Superscript["Y", "T"], "ParameterSpec" -> {}|>]], 
       "Type" -> "Mixed", "VonNeumannEntropy" -> 
       Quantity[0.8636100627467463, "Bits"], "Weights" -> 
       SparseArray[Automatic, {2}, 
         Complex[0., 0.], {
         1, {{0, 2}, {{1}, {2}}}, {Complex[1.600751578490696, 0.], Complex[
          0.8844653244350991, 0.]}}]|>, "AllowEmbedding" -> True, 
     "InitialShape" -> TypeSystem`PackageScope`Limited[
       TypeSystem`PackageScope`ColumnShape[
        TypeSystem`PackageScope`KeyValueShape[
         TypeSystem`PackageScope`AtomShape[280.], 
         TypeSystem`PackageScope`UnknownShape[False]]], 20, 
       DirectedInfinity[1], {}], "InitialType" -> TypeSystem`Assoc[
       TypeSystem`Atom[String], TypeSystem`AnyType, 107], "Meta" -> <||>, 
     "RowTarget" -> 20, "ColumnTarget" -> 10, "Shape" -> 
     TypeSystem`PackageScope`Limited[
       TypeSystem`PackageScope`ColumnShape[
        TypeSystem`PackageScope`KeyValueShape[
         TypeSystem`PackageScope`AtomShape[280.], 
         TypeSystem`PackageScope`UnknownShape[False]]], 20, 
       DirectedInfinity[1], {}], "Type" -> TypeSystem`Assoc[
       TypeSystem`Atom[String], TypeSystem`AnyType, 107], "Path" -> {}, 
     "DisplayedRowCount" -> 20, "DisplayedColumnCount" -> 1, "DataRowCount" -> 
     107, "DataColumnCount" -> 1, "SortPaths" -> {}, "SortDirections" -> {}, 
     "HiddenItemsMap" -> Null, "UpdateType" -> 1|>, 
    TypeSystem`NestedGrid`PackagePrivate`$outputID$$, 
    TypeSystem`NestedGrid`PackagePrivate`$path$$ = {}, 
    TypeSystem`NestedGrid`PackagePrivate`$vPos$$ = 1, 
    TypeSystem`NestedGrid`PackagePrivate`$hPos$$ = 1, 
    TypeSystem`NestedGrid`PackagePrivate`$grid$$ = 
    DynamicModule[{
     TypeSystem`NestedGrid`PackagePrivate`renderedGrid = Deploy[
        Style[
         Grid[{{
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover["Amplitudes", 
                  Style[
                  "Amplitudes", FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                If[
                  TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                    Key["Amplitudes"]}, 1]]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key["Amplitudes"]}, "RowHeader", False], "Mouse"], 
              ImageSize -> {{280., Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
             GrayLevel[0.95], Alignment -> {Left, Baseline}], 
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover[
                  Style[
                   Row[{"\[LeftAssociation] ", 
                    Subscript["\[Ellipsis]", 4], "\[RightAssociation]"}], 
                   GrayLevel[0.5]], 
                  Style[
                   Style[
                    Row[{"\[LeftAssociation] ", 
                    Subscript["\[Ellipsis]", 4], "\[RightAssociation]"}], 
                    GrayLevel[0.5]], FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                If[
                  TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                    Key["Amplitudes"]}, 4]]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key["Amplitudes"]}, "Item", False], "Mouse"], 
              ImageMargins -> {{5, 3}, {4, 5}}], BaseStyle -> {
               GrayLevel[0.5]}]}, {
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover["Association", 
                  Style[
                  "Association", FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                If[
                  TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                    Key["Association"]}, 1]]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key["Association"]}, "RowHeader", False], "Mouse"], 
              ImageSize -> {{280., Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
             GrayLevel[0.95], Alignment -> {Left, Baseline}], 
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover[
                  Style[
                   Row[{"\[LeftAssociation] ", 
                    Subscript["\[Ellipsis]", 2], "\[RightAssociation]"}], 
                   GrayLevel[0.5]], 
                  Style[
                   Style[
                    Row[{"\[LeftAssociation] ", 
                    Subscript["\[Ellipsis]", 2], "\[RightAssociation]"}], 
                    GrayLevel[0.5]], FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                If[
                  TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                    Key["Association"]}, 4]]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key["Association"]}, "Item", False], "Mouse"], 
              ImageMargins -> {{5, 3}, {4, 5}}], BaseStyle -> {
               GrayLevel[0.5]}]}, {
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover["Basis", 
                  Style[
                  "Basis", FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                If[
                  TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                    Key["Basis"]}, 1]]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key["Basis"]}, "RowHeader", False], "Mouse"], 
              ImageSize -> {{280., Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
             GrayLevel[0.95], Alignment -> {Left, Baseline}], 
            Item[
             Pane[
              Annotation[
               RawBoxes[
                StyleBox[
                 RowBox[{
                   TagBox["QuantumBasis", "SummaryHead"], "[", 
                   TemplateBox[{
                    GridBox[{{
                    GridBox[{{
                    RowBox[{
                    TagBox["\"Picture: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox["\"Schr\[ODoubleDot]dinger\"", "SummaryItem"]}], 
                    RowBox[{
                    TagBox["\"Rank: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox["1", "SummaryItem"]}]}, {
                    RowBox[{
                    TagBox["\"Dimension: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox["2", "SummaryItem"]}], ""}}, 
                    GridBoxAlignment -> {
                    "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, 
                    AutoDelete -> False, 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {
                    "Columns" -> {{2}}, "Rows" -> {{Automatic}}}, 
                    BaseStyle -> {
                    ShowStringCharacters -> False, NumberMarks -> False, 
                    PrintPrecision -> 3, ShowSyntaxStyles -> False}]}}, 
                    GridBoxAlignment -> {
                    "Columns" -> {{Left}}, "Rows" -> {{Top}}}, AutoDelete -> 
                    False, GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                    BaselinePosition -> {1, 1}]}, "SummaryPanel"], "]"}], 
                 FontFamily -> Dynamic[
                   CurrentValue[{"StyleHints", "CodeFont"}]], 
                 ShowStringCharacters -> True]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key["Basis"]}, "Item", False], "Mouse"], 
              ImageSize -> {{60, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}]}, {
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover["BlochCartesianCoordinates", 
                  Style[
                  "BlochCartesianCoordinates", FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                If[
                  TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                    Key["BlochCartesianCoordinates"]}, 1]]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key["BlochCartesianCoordinates"]}, "RowHeader", False], 
               "Mouse"], ImageSize -> {{280., Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
             GrayLevel[0.95], Alignment -> {Left, Baseline}], 
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover[
                  Style[{0.2968332171030157, -0.2882188082707501, 
                    Complex[-0.10889705975708364`, 0.]}, ShowStringCharacters -> 
                   False], 
                  Style[
                   Style[{0.2968332171030157, -0.2882188082707501, 
                    Complex[-0.10889705975708364`, 0.]}, ShowStringCharacters -> 
                    False], FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                If[
                  TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                    Key["BlochCartesianCoordinates"]}, 4]]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key["BlochCartesianCoordinates"]}, "Item", False], "Mouse"], 
              ImageMargins -> {{5, 3}, {4, 5}}]]}, {
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover["BlochPlot", 
                  Style[
                  "BlochPlot", FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                If[
                  TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                    Key["BlochPlot"]}, 1]]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key["BlochPlot"]}, "RowHeader", False], "Mouse"], 
              ImageSize -> {{280., Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
             GrayLevel[0.95], Alignment -> {Left, Baseline}], 
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover[
                  Style["\[Ellipsis]", 
                   GrayLevel[0.5]], 
                  Style[
                   Style["\[Ellipsis]", 
                    GrayLevel[0.5]], FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                If[
                  TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                    Key["BlochPlot"]}, 4]]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key["BlochPlot"]}, "Item", False], "Mouse"], 
              ImageMargins -> {{5, 3}, {4, 5}}], BaseStyle -> {
               GrayLevel[0.5], Bold}]}, {
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover["BlochSphericalCoordinates", 
                  Style[
                  "BlochSphericalCoordinates", FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                If[
                  TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                    Key["BlochSphericalCoordinates"]}, 1]]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key["BlochSphericalCoordinates"]}, "RowHeader", False], 
               "Mouse"], ImageSize -> {{280., Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
             GrayLevel[0.95], Alignment -> {Left, Baseline}], 
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover[
                  
                  Style[{0.42783011796795617`, 1.8281615205884578`, 
                   0.77067505160369}, ShowStringCharacters -> False], 
                  Style[
                   
                   Style[{0.42783011796795617`, 1.8281615205884578`, 
                    0.77067505160369}, ShowStringCharacters -> False], 
                   FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                If[
                  TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                    Key["BlochSphericalCoordinates"]}, 4]]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key["BlochSphericalCoordinates"]}, "Item", False], "Mouse"], 
              ImageMargins -> {{5, 3}, {4, 5}}]]}, {
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover["Computational", 
                  Style[
                  "Computational", FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                If[
                  TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                    Key["Computational"]}, 1]]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key["Computational"]}, "RowHeader", False], "Mouse"], 
              ImageSize -> {{280., Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
             GrayLevel[0.95], Alignment -> {Left, Baseline}], 
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover[
                  Style["\[Ellipsis]", 
                   GrayLevel[0.5]], 
                  Style[
                   Style["\[Ellipsis]", 
                    GrayLevel[0.5]], FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                If[
                  TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                    Key["Computational"]}, 4]]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key["Computational"]}, "Item", False], "Mouse"], 
              ImageMargins -> {{5, 3}, {4, 5}}], BaseStyle -> {
               GrayLevel[0.5], Bold}]}, {
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover["ConjugateTranspose", 
                  Style[
                  "ConjugateTranspose", FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                If[
                  TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                    Key["ConjugateTranspose"]}, 1]]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key["ConjugateTranspose"]}, "RowHeader", False], "Mouse"], 
              ImageSize -> {{280., Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
             GrayLevel[0.95], Alignment -> {Left, Baseline}], 
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover[
                  Style["\[Ellipsis]", 
                   GrayLevel[0.5]], 
                  Style[
                   Style["\[Ellipsis]", 
                    GrayLevel[0.5]], FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                If[
                  TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                    Key["ConjugateTranspose"]}, 4]]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key["ConjugateTranspose"]}, "Item", False], "Mouse"], 
              ImageMargins -> {{5, 3}, {4, 5}}], BaseStyle -> {
               GrayLevel[0.5], Bold}]}, {
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover["DensityMatrix", 
                  Style[
                  "DensityMatrix", FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                If[
                  TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                    Key["DensityMatrix"]}, 1]]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key["DensityMatrix"]}, "RowHeader", False], "Mouse"], 
              ImageSize -> {{280., Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
             GrayLevel[0.95], Alignment -> {Left, Baseline}], 
            Item[
             Pane[
              Annotation[
               RawBoxes[
                StyleBox[
                 RowBox[{
                   TagBox["SparseArray", "SummaryHead"], "[", 
                   TemplateBox[{
                    GridBox[{{
                    GridBox[{{
                    RowBox[{
                    TagBox[
                    "\"Specified elements: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox["4", "SummaryItem"]}]}, {
                    RowBox[{
                    TagBox["\"Dimensions: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox[
                    RowBox[{"{", 
                    RowBox[{"2", ",", "2"}], "}"}], "SummaryItem"]}]}}, 
                    GridBoxAlignment -> {
                    "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, 
                    AutoDelete -> False, 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {
                    "Columns" -> {{2}}, "Rows" -> {{Automatic}}}, 
                    BaseStyle -> {
                    ShowStringCharacters -> False, NumberMarks -> False, 
                    PrintPrecision -> 3, ShowSyntaxStyles -> False}]}}, 
                    GridBoxAlignment -> {
                    "Columns" -> {{Left}}, "Rows" -> {{Top}}}, AutoDelete -> 
                    False, GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                    BaselinePosition -> {1, 1}]}, "SummaryPanel"], "]"}], 
                 FontFamily -> Dynamic[
                   CurrentValue[{"StyleHints", "CodeFont"}]], 
                 ShowStringCharacters -> True]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key["DensityMatrix"]}, "Item", False], "Mouse"], 
              ImageSize -> {{60, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}]}, {
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover["Diagram", 
                  Style[
                  "Diagram", FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                If[
                  TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                    Key["Diagram"]}, 1]]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key["Diagram"]}, "RowHeader", False], "Mouse"], 
              ImageSize -> {{280., Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
             GrayLevel[0.95], Alignment -> {Left, Baseline}], 
            Item[
             Pane[
              Annotation[
               RawBoxes[
                GraphicsBox[{
                  GeometricTransformationBox[{
                    LineBox[
                    NCache[{{0, 
                    Rational[1, 2]}, {1, 
                    Rational[1, 2]}, {
                    Rational[1, 2], 0}, {0, 
                    Rational[1, 2]}}, {{0, 0.5}, {1, 0.5}, {0.5, 0}, {
                    0, 0.5}}]], {
                    PointSize[
                    0.2 Dynamic[
                    3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                    Magnification])]], 
                    PointBox[
                    NCache[{{
                    Rational[1, 2], 
                    Rational[1, 2]}}, {{0.5, 0.5}}]], 
                    PointBox[{}]}, {
                    Arrowheads[
                    0.002 Dynamic[
                    3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                    Magnification])]], {
                    ArrowBox[
                    NCache[{{
                    Rational[1, 2], 
                    Rational[1, 2]}, {
                    Rational[1, 2], 
                    Rational[3, 5]}}, {{0.5, 0.5}, {0.5, 0.6}}]]}, {}}}, {{{1,
                     0}, {0, 1}}, {0, 0}}], 
                  InsetBox[
                   FormBox[
                    StyleBox[
                    "\"Y\"", {FontSize -> 24, FontFamily -> "Times"}, 
                    StripOnInput -> False], TraditionalForm], 
                   NCache[{
                    Rational[1, 2], 
                    Rational[1, 4]}, {0.5, 0.25}]]}, {
                 PlotRangeClipping -> True, Frame -> True, FrameStyle -> 
                  GrayLevel[0.85], Ticks -> None, FrameTicks -> None, Axes -> 
                  None, ImageSize -> 112}]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key["Diagram"]}, "Item", False], "Mouse"], 
              ImageSize -> {{60, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}]}, {
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover["Dimension", 
                  Style[
                  "Dimension", FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                If[
                  TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                    Key["Dimension"]}, 1]]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key["Dimension"]}, "RowHeader", False], "Mouse"], 
              ImageSize -> {{280., Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
             GrayLevel[0.95], Alignment -> {Left, Baseline}], 
            Item[
             Pane[
              Annotation[
               RawBoxes["2"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key["Dimension"]}, "Item", False], "Mouse"], 
              ImageSize -> {{34, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}]}, {
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover["Dimensions", 
                  Style[
                  "Dimensions", FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                If[
                  TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                    Key["Dimensions"]}, 1]]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key["Dimensions"]}, "RowHeader", False], "Mouse"], 
              ImageSize -> {{280., Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
             GrayLevel[0.95], Alignment -> {Left, Baseline}], 
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover[
                  Style[{2}, ShowStringCharacters -> False], 
                  Style[
                   Style[{2}, ShowStringCharacters -> False], FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                If[
                  TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                    Key["Dimensions"]}, 4]]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key["Dimensions"]}, "Item", False], "Mouse"], 
              ImageMargins -> {{5, 3}, {4, 5}}]]}, {
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover["Dual", 
                  Style[
                  "Dual", FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                If[
                  TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                    Key["Dual"]}, 1]]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key["Dual"]}, "RowHeader", False], "Mouse"], 
              ImageSize -> {{280., Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
             GrayLevel[0.95], Alignment -> {Left, Baseline}], 
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover[
                  Style["\[Ellipsis]", 
                   GrayLevel[0.5]], 
                  Style[
                   Style["\[Ellipsis]", 
                    GrayLevel[0.5]], FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                If[
                  TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                    Key["Dual"]}, 4]]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key["Dual"]}, "Item", False], "Mouse"], 
              ImageMargins -> {{5, 3}, {4, 5}}], BaseStyle -> {
               GrayLevel[0.5], Bold}]}, {
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover["Eigenstates", 
                  Style[
                  "Eigenstates", FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                If[
                  TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                    Key["Eigenstates"]}, 1]]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key["Eigenstates"]}, "RowHeader", False], "Mouse"], 
              ImageSize -> {{280., Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
             GrayLevel[0.95], Alignment -> {Left, Baseline}], 
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover[
                  Style[
                   Row[{"\[ThinSpace]{ ", 
                    Subscript["\[Ellipsis]", 2], " }\[ThinSpace]"}], 
                   GrayLevel[0.5]], 
                  Style[
                   Style[
                    Row[{"\[ThinSpace]{ ", 
                    Subscript["\[Ellipsis]", 2], " }\[ThinSpace]"}], 
                    GrayLevel[0.5]], FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                If[
                  TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                    Key["Eigenstates"]}, 4]]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key["Eigenstates"]}, "Item", False], "Mouse"], 
              ImageMargins -> {{5, 3}, {4, 5}}], BaseStyle -> {
               GrayLevel[0.5]}]}, {
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover["Eigenvalues", 
                  Style[
                  "Eigenvalues", FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                If[
                  TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                    Key["Eigenvalues"]}, 1]]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key["Eigenvalues"]}, "RowHeader", False], "Mouse"], 
              ImageSize -> {{280., Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
             GrayLevel[0.95], Alignment -> {Left, Baseline}], 
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover[
                  
                  Style[{1.7742337718402474`, 0.7109831310855467}, 
                   ShowStringCharacters -> False], 
                  Style[
                   
                   Style[{1.7742337718402474`, 0.7109831310855467}, 
                    ShowStringCharacters -> False], FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                If[
                  TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                    Key["Eigenvalues"]}, 4]]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key["Eigenvalues"]}, "Item", False], "Mouse"], 
              ImageMargins -> {{5, 3}, {4, 5}}]]}, {
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover["Eigenvectors", 
                  Style[
                  "Eigenvectors", FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                If[
                  TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                    Key["Eigenvectors"]}, 1]]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key["Eigenvectors"]}, "RowHeader", False], "Mouse"], 
              ImageSize -> {{280., Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
             GrayLevel[0.95], Alignment -> {Left, Baseline}], 
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover[
                  
                  Style[{{Complex[0.3150686399495922, -0.8588187616188203], 
                    Complex[0.4039332702462501, 0.]}, {Complex[
                    0.13912146104559603`, -0.3792193374399158], 
                    Complex[-0.914788452697218, 0.]}}, ShowStringCharacters -> 
                   False], 
                  Style[
                   
                   Style[{{Complex[0.3150686399495922, -0.8588187616188203], 
                    Complex[0.4039332702462501, 0.]}, {Complex[
                    0.13912146104559603`, -0.3792193374399158], 
                    Complex[-0.914788452697218, 0.]}}, ShowStringCharacters -> 
                    False], FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                If[
                  TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                    Key["Eigenvectors"]}, 4]]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key["Eigenvectors"]}, "Item", False], "Mouse"], 
              ImageMargins -> {{5, 3}, {4, 5}}]]}, {
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover["ElementAssociation", 
                  Style[
                  "ElementAssociation", FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                If[
                  TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                    Key["ElementAssociation"]}, 1]]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key["ElementAssociation"]}, "RowHeader", False], "Mouse"], 
              ImageSize -> {{280., Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
             GrayLevel[0.95], Alignment -> {Left, Baseline}], 
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover[
                  Style[
                   Row[{"\[LeftAssociation] ", 
                    Subscript["\[Ellipsis]", 2], "\[RightAssociation]"}], 
                   GrayLevel[0.5]], 
                  Style[
                   Style[
                    Row[{"\[LeftAssociation] ", 
                    Subscript["\[Ellipsis]", 2], "\[RightAssociation]"}], 
                    GrayLevel[0.5]], FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                If[
                  TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                    Key["ElementAssociation"]}, 4]]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key["ElementAssociation"]}, "Item", False], "Mouse"], 
              ImageMargins -> {{5, 3}, {4, 5}}], BaseStyle -> {
               GrayLevel[0.5]}]}, {
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover["ElementDimension", 
                  Style[
                  "ElementDimension", FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                If[
                  TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                    Key["ElementDimension"]}, 1]]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key["ElementDimension"]}, "RowHeader", False], "Mouse"], 
              ImageSize -> {{280., Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
             GrayLevel[0.95], Alignment -> {Left, Baseline}], 
            Item[
             Pane[
              Annotation[
               RawBoxes["2"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key["ElementDimension"]}, "Item", False], "Mouse"], 
              ImageSize -> {{34, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}]}, {
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover["ElementDimensions", 
                  Style[
                  "ElementDimensions", FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                If[
                  TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                    Key["ElementDimensions"]}, 1]]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key["ElementDimensions"]}, "RowHeader", False], "Mouse"], 
              ImageSize -> {{280., Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
             GrayLevel[0.95], Alignment -> {Left, Baseline}], 
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover[
                  Style[{2}, ShowStringCharacters -> False], 
                  Style[
                   Style[{2}, ShowStringCharacters -> False], FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                If[
                  TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                    Key["ElementDimensions"]}, 4]]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key["ElementDimensions"]}, "Item", False], "Mouse"], 
              ImageMargins -> {{5, 3}, {4, 5}}]]}, {
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover["ElementNames", 
                  Style[
                  "ElementNames", FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                If[
                  TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                    Key["ElementNames"]}, 1]]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key["ElementNames"]}, "RowHeader", False], "Mouse"], 
              ImageSize -> {{280., Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
             GrayLevel[0.95], Alignment -> {Left, Baseline}], 
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover[
                  Style[{
                    Wolfram`QuantumFramework`QuditName[
                    Subscript["\[Psi]", 
                    Subscript["y", "-"]], "Dual" -> False], 
                    Wolfram`QuantumFramework`QuditName[
                    Subscript["\[Psi]", 
                    Subscript["y", "+"]], "Dual" -> False]}, 
                   ShowStringCharacters -> False], 
                  Style[
                   Style[{
                    Wolfram`QuantumFramework`QuditName[
                    Subscript["\[Psi]", 
                    Subscript["y", "-"]], "Dual" -> False], 
                    Wolfram`QuantumFramework`QuditName[
                    Subscript["\[Psi]", 
                    Subscript["y", "+"]], "Dual" -> False]}, 
                    ShowStringCharacters -> False], FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                If[
                  TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                    Key["ElementNames"]}, 4]]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key["ElementNames"]}, "Item", False], "Mouse"], 
              ImageMargins -> {{5, 3}, {4, 5}}]]}, {
            Item[
             Deploy[
              Pane[
               Row[{
                 Spacer[2], 
                 Style[
                  Row[{
                    Button[
                    MouseAppearance[
                    Mouseover[
                    Graphics[{{
                    EdgeForm[None], 
                    FaceForm[None], 
                    Rectangle[{0, 0}, {18, 18}, RoundingRadius -> 2]}, 
                    Rotate[
                    Translate[{
                    CapForm[Round], 
                    Line[{{0, 0}, {4, 5}, {8, 0}}], 
                    Line[{{0, 5}, {8, 5}}]}, {5, 6.5}], 0, {9, 9}]}, 
                    ImageSize -> (1 -> 1), ImagePadding -> {{0, 1}, {1, 0}}, 
                    BaselinePosition -> Scaled[0.35], BaseStyle -> 
                    RGBColor[
                    0.5372549019607843, 0.5372549019607843, 
                    0.5372549019607843]], 
                    Graphics[{{
                    EdgeForm[
                    RGBColor[
                    0.27450980392156865`, 0.5411764705882353, 
                    0.796078431372549]], 
                    FaceForm[None], 
                    Rectangle[{0, 0}, {18, 18}, RoundingRadius -> 2]}, 
                    Rotate[
                    Translate[{
                    CapForm[Round], 
                    RGBColor[0.27450980392156865`, 0.5411764705882353, 
                    0.796078431372549], 
                    Line[{{0, 0}, {4, 5}, {8, 0}}], 
                    Line[{{0, 5}, {8, 5}}]}, {5, 6.5}], 0, {9, 9}]}, 
                    ImageSize -> (1 -> 1), ImagePadding -> {{0, 1}, {1, 0}}, 
                    BaselinePosition -> Scaled[0.35]]], "LinkHand"], 
                    If[
                    TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$ = 
                    Clip[TypeSystem`NestedGrid`PackagePrivate`$vPos$$ + (-20) 
                    If[True, 107, 1], {1, 107 - -20 + 1}]; 
                    TypeSystem`NestedGrid`PackagePrivate`updateState[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]], True][
                    TypeSystem`NestedGrid`PackagePrivate`$path$$]], 
                    Appearance -> None], 
                    Button[
                    MouseAppearance[
                    Mouseover[
                    Graphics[{{
                    EdgeForm[None], 
                    FaceForm[None], 
                    Rectangle[{0, 0}, {18, 18}, RoundingRadius -> 2]}, 
                    Rotate[
                    Translate[{
                    CapForm[Round], 
                    Line[{{0, 0}, {4, 5}, {8, 0}}]}, {5, 6.5}], 0, {9, 9}]}, 
                    ImageSize -> (1 -> 1), ImagePadding -> {{0, 1}, {1, 0}}, 
                    BaselinePosition -> Scaled[0.35], BaseStyle -> 
                    RGBColor[
                    0.5372549019607843, 0.5372549019607843, 
                    0.5372549019607843]], 
                    Graphics[{{
                    EdgeForm[
                    RGBColor[
                    0.27450980392156865`, 0.5411764705882353, 
                    0.796078431372549]], 
                    FaceForm[None], 
                    Rectangle[{0, 0}, {18, 18}, RoundingRadius -> 2]}, 
                    Rotate[
                    Translate[{
                    CapForm[Round], 
                    RGBColor[
                    0.27450980392156865`, 0.5411764705882353, 
                    0.796078431372549], 
                    Line[{{0, 0}, {4, 5}, {8, 0}}]}, {5, 6.5}], 0, {9, 9}]}, 
                    ImageSize -> (1 -> 1), ImagePadding -> {{0, 1}, {1, 0}}, 
                    BaselinePosition -> Scaled[0.35]]], "LinkHand"], 
                    If[
                    TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$ = 
                    Clip[TypeSystem`NestedGrid`PackagePrivate`$vPos$$ + (-20) 
                    If[False, 107, 1], {1, 107 - -20 + 1}]; 
                    TypeSystem`NestedGrid`PackagePrivate`updateState[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]], True][
                    TypeSystem`NestedGrid`PackagePrivate`$path$$]], 
                    Appearance -> None], " ", 
                    Style[
                    Mouseover[
                    Style[
                    Row[{"rows ", 1, "\[Dash]", 20, " of ", 
                    Style[107, FontWeight -> Bold]}], FontSize -> 
                    9.333333333333332, FontColor -> 
                    RGBColor[
                    0.5098039215686274, 0.5098039215686274, 
                    0.5098039215686274]], 
                    Style[
                    Row[{"rows ", 1, "\[Dash]", 20, " of ", 
                    Style[107, FontWeight -> Bold]}], FontSize -> 
                    9.333333333333332, FontColor -> 
                    RGBColor[
                    0.5098039215686274, 0.5098039215686274, 
                    0.5098039215686274]]], ContextMenu -> {
                    MenuItem["Hide", 
                    KernelExecute[
                    
                    TypeSystem`NestedGrid`PackagePrivate`adjustLimits[{
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]}, 
                    "Rows", 1, {}]], MenuEvaluator -> Automatic], 
                    MenuItem["Show up to 10 Rows", 
                    KernelExecute[
                    
                    TypeSystem`NestedGrid`PackagePrivate`adjustLimits[{
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]}, 
                    "Rows", 10, {}]], MenuEvaluator -> Automatic], 
                    MenuItem["Show up to 30 Rows", 
                    KernelExecute[
                    
                    TypeSystem`NestedGrid`PackagePrivate`adjustLimits[{
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]}, 
                    "Rows", 30, {}]], MenuEvaluator -> Automatic], 
                    MenuItem["Show up to 100 Rows", 
                    KernelExecute[
                    
                    TypeSystem`NestedGrid`PackagePrivate`adjustLimits[{
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]}, 
                    "Rows", 100, {}]], MenuEvaluator -> Automatic], 
                    MenuItem["Show All", 
                    KernelExecute[
                    
                    TypeSystem`NestedGrid`PackagePrivate`adjustLimits[{
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]}, 
                    "Rows", 100000000, {}]], MenuEvaluator -> Automatic]}], 
                    " ", 
                    Button[
                    MouseAppearance[
                    Mouseover[
                    Graphics[{{
                    EdgeForm[None], 
                    FaceForm[None], 
                    Rectangle[{0, 0}, {18, 18}, RoundingRadius -> 2]}, 
                    Rotate[
                    Translate[{
                    CapForm[Round], 
                    Line[{{0, 0}, {4, 5}, {8, 0}}]}, {5, 6.5}], 180 Degree, {
                    9, 9}]}, ImageSize -> (1 -> 1), 
                    ImagePadding -> {{0, 1}, {1, 0}}, BaselinePosition -> 
                    Scaled[0.35], BaseStyle -> 
                    RGBColor[
                    0.5372549019607843, 0.5372549019607843, 
                    0.5372549019607843]], 
                    Graphics[{{
                    EdgeForm[
                    RGBColor[
                    0.27450980392156865`, 0.5411764705882353, 
                    0.796078431372549]], 
                    FaceForm[None], 
                    Rectangle[{0, 0}, {18, 18}, RoundingRadius -> 2]}, 
                    Rotate[
                    Translate[{
                    CapForm[Round], 
                    RGBColor[
                    0.27450980392156865`, 0.5411764705882353, 
                    0.796078431372549], 
                    Line[{{0, 0}, {4, 5}, {8, 0}}]}, {5, 6.5}], 180 Degree, {
                    9, 9}]}, ImageSize -> (1 -> 1), 
                    ImagePadding -> {{0, 1}, {1, 0}}, BaselinePosition -> 
                    Scaled[0.35]]], "LinkHand"], 
                    If[
                    TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$ = 
                    Clip[TypeSystem`NestedGrid`PackagePrivate`$vPos$$ + 
                    20 If[False, 107, 1], {1, 107 - 20 + 1}]; 
                    TypeSystem`NestedGrid`PackagePrivate`updateState[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]], True][
                    TypeSystem`NestedGrid`PackagePrivate`$path$$]], 
                    Appearance -> None], 
                    Button[
                    MouseAppearance[
                    Mouseover[
                    Graphics[{{
                    EdgeForm[None], 
                    FaceForm[None], 
                    Rectangle[{0, 0}, {18, 18}, RoundingRadius -> 2]}, 
                    Rotate[
                    Translate[{
                    CapForm[Round], 
                    Line[{{0, 0}, {4, 5}, {8, 0}}], 
                    Line[{{0, 5}, {8, 5}}]}, {5, 6.5}], 180 Degree, {9, 9}]}, 
                    ImageSize -> (1 -> 1), ImagePadding -> {{0, 1}, {1, 0}}, 
                    BaselinePosition -> Scaled[0.35], BaseStyle -> 
                    RGBColor[
                    0.5372549019607843, 0.5372549019607843, 
                    0.5372549019607843]], 
                    Graphics[{{
                    EdgeForm[
                    RGBColor[
                    0.27450980392156865`, 0.5411764705882353, 
                    0.796078431372549]], 
                    FaceForm[None], 
                    Rectangle[{0, 0}, {18, 18}, RoundingRadius -> 2]}, 
                    Rotate[
                    Translate[{
                    CapForm[Round], 
                    RGBColor[
                    0.27450980392156865`, 0.5411764705882353, 
                    0.796078431372549], 
                    Line[{{0, 0}, {4, 5}, {8, 0}}], 
                    Line[{{0, 5}, {8, 5}}]}, {5, 6.5}], 180 Degree, {9, 9}]}, 
                    ImageSize -> (1 -> 1), ImagePadding -> {{0, 1}, {1, 0}}, 
                    BaselinePosition -> Scaled[0.35]]], "LinkHand"], 
                    If[
                    TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$ = 
                    Clip[TypeSystem`NestedGrid`PackagePrivate`$vPos$$ + 
                    20 If[True, 107, 1], {1, 107 - 20 + 1}]; 
                    TypeSystem`NestedGrid`PackagePrivate`updateState[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]], True][
                    TypeSystem`NestedGrid`PackagePrivate`$path$$]], 
                    Appearance -> None]}], ContextMenu -> {}]}], 
               ImageMargins -> {{0, -1}, {-1, 1}}]], Background -> 
             RGBColor[
              0.9764705882352941, 0.9764705882352941, 0.9764705882352941], 
             Alignment -> {Left, Top}], SpanFromLeft}}, 
          BaseStyle -> {
           ContextMenu -> 
            Dynamic[TypeSystem`NestedGrid`PackagePrivate`$contextMenuTrigger; 
              Which[TypeSystem`NestedGrid`PackagePrivate`$lastOutputID =!= 
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                 TypeSystem`NestedGrid`PackagePrivate`$outputID$$], {}, 
                TypeSystem`NestedGrid`PackagePrivate`$contextMenuTrigger === 
                TypeSystem`NestedGrid`PackagePrivate`$lastContextMenuTrigger, 
                TypeSystem`NestedGrid`PackagePrivate`$lastContextMenu, True, 
                TypeSystem`NestedGrid`PackagePrivate`$lastContextMenuTrigger = 
                 TypeSystem`NestedGrid`PackagePrivate`$contextMenuTrigger; 
                TypeSystem`NestedGrid`PackagePrivate`$lastContextMenu = 
                 Block[{TypeSystem`NestedGrid`PackagePrivate`$globalScrollPos = \
{TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$}}, 
                   
                   With[{TypeSystem`NestedGrid`PackagePrivate`lastPath$ = 
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath, 
                    TypeSystem`NestedGrid`PackagePrivate`lastPathType$ = 
                    TypeSystem`NestedGrid`PackagePrivate`$lastPathType, 
                    TypeSystem`NestedGrid`PackagePrivate`isLeafHeader$ = 
                    TypeSystem`NestedGrid`PackagePrivate`$\
lastPathIsLeafHeader, TypeSystem`NestedGrid`PackagePrivate`headerHidden$ = And[
                    MatchQ[TypeSystem`NestedGrid`PackagePrivate`$lastPathType, 
                    Alternatives["RowHeader", "ColumnHeader"]], 
                    TypeSystem`NestedGrid`PackagePrivate`headerHiddenQ[
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath, 
                    TypeSystem`NestedGrid`PackagePrivate`$state$$]], 
                    TypeSystem`NestedGrid`PackagePrivate`allHidden$ = 
                    TypeSystem`NestedGrid`PackagePrivate`allHiddenQ[
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath, 
                    TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                    TypeSystem`NestedGrid`PackagePrivate`anyHidden$ = 
                    TypeSystem`NestedGrid`PackagePrivate`anyHiddenQ[
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath, 
                    TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                    TypeSystem`NestedGrid`PackagePrivate`sortDirection$ = 
                    TypeSystem`NestedGrid`PackagePrivate`columnSortDirection[
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath, 
                    TypeSystem`NestedGrid`PackagePrivate`$state$$[
                    "SortPaths"], 
                    TypeSystem`NestedGrid`PackagePrivate`$state$$[
                    "SortDirections"]], 
                    TypeSystem`NestedGrid`PackagePrivate`haveData$ = Not[
                    FailureQ[
                    TypeSystem`NestedGrid`PackagePrivate`datasetInitialData[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$]]], 
                    TypeSystem`NestedGrid`PackagePrivate`isKeyDummy$ = Not[
                    FreeQ[
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath, Keys]]}, 
                    Join[{
                    If[
                    Or[
                    Not[TypeSystem`NestedGrid`PackagePrivate`haveData$], 
                    Not[TypeSystem`NestedGrid`PackagePrivate`anyHidden$], 
                    TypeSystem`NestedGrid`PackagePrivate`isKeyDummy$], 
                    Nothing, 
                    MenuItem[
                    "Show " <> 
                    Which[TypeSystem`NestedGrid`PackagePrivate`lastPathType$ == 
                    "Item", "", 
                    TypeSystem`NestedGrid`PackagePrivate`lastPathType$ == 
                    "RowHeader", "Row", 
                    TypeSystem`NestedGrid`PackagePrivate`lastPathType$ == 
                    "ColumnHeader", "Column", True, ""], 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`updateHiddenItems[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][
                    TypeSystem`NestedGrid`PackagePrivate`lastPath$, 
                    "remove"]], MenuEvaluator -> Automatic]], 
                    If[
                    Or[
                    Not[TypeSystem`NestedGrid`PackagePrivate`haveData$], 
                    TypeSystem`NestedGrid`PackagePrivate`pathEmptyQ[
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath, 
                    TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                    TypeSystem`NestedGrid`PackagePrivate`isKeyDummy$, 
                    And[
                    TypeSystem`NestedGrid`PackagePrivate`allHidden$, 
                    TypeSystem`NestedGrid`PackagePrivate`headerHidden$]], 
                    Nothing, 
                    MenuItem[
                    "Hide " <> 
                    Which[TypeSystem`NestedGrid`PackagePrivate`lastPathType$ == 
                    "Item", "", 
                    TypeSystem`NestedGrid`PackagePrivate`lastPathType$ == 
                    "RowHeader", "Row", 
                    TypeSystem`NestedGrid`PackagePrivate`lastPathType$ == 
                    "ColumnHeader", "Column", True, ""], 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`updateHiddenItems[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][
                    TypeSystem`NestedGrid`PackagePrivate`lastPath$, "add"]], 
                    MenuEvaluator -> Automatic]], Delimiter}, 
                    If[
                    And[TypeSystem`NestedGrid`PackagePrivate`haveData$, 
                    MatchQ[TypeSystem`NestedGrid`PackagePrivate`lastPathType$, 
                    Alternatives["ColumnHeader", "KeyDummy"]], 
                    TypeSystem`NestedGrid`PackagePrivate`isLeafHeader$, 
                    Not[TypeSystem`NestedGrid`PackagePrivate`allHidden$]], {
                    If[
                    TypeSystem`NestedGrid`PackagePrivate`sortDirection$ =!= 
                    "Ascending", 
                    MenuItem["Sort", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`updateSort[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][
                    TypeSystem`NestedGrid`PackagePrivate`lastPath$, 
                    "Ascending"]], MenuEvaluator -> Automatic], Nothing], 
                    If[
                    TypeSystem`NestedGrid`PackagePrivate`sortDirection$ =!= 
                    "Descending", 
                    MenuItem["Reverse Sort", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`updateSort[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][
                    TypeSystem`NestedGrid`PackagePrivate`lastPath$, 
                    "Descending"]], MenuEvaluator -> Automatic], Nothing], 
                    If[
                    TypeSystem`NestedGrid`PackagePrivate`sortDirection$ =!= 
                    None, 
                    MenuItem["Unsort", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`updateSort[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][
                    TypeSystem`NestedGrid`PackagePrivate`lastPath$, None]], 
                    MenuEvaluator -> Automatic], Nothing], Delimiter}, {}], {
                    MenuItem["Copy Position to Clipboard", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`toCurrentPosition[
                    TypeSystem`NestedGrid`PackagePrivate`copyClip]], 
                    MenuEvaluator -> Automatic], 
                    If[TypeSystem`NestedGrid`PackagePrivate`haveData$, 
                    MenuItem["Copy Data to Clipboard", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`toCurrentData[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`copyClip]], 
                    MenuEvaluator -> Automatic], Nothing], Delimiter, 
                    MenuItem["Paste Position in New Cell", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`toCurrentPosition[
                    TypeSystem`NestedGrid`PackagePrivate`cellPaste]], 
                    MenuEvaluator -> Automatic], 
                    If[TypeSystem`NestedGrid`PackagePrivate`haveData$, 
                    MenuItem["Paste Data in New Cell", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`toCurrentData[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`cellPaste]], 
                    MenuEvaluator -> Automatic], Nothing]}]]]]], FontFamily -> 
            "Source Sans Pro", FontSize -> 14, FontWeight -> Plain}, Dividers -> 
          All, FrameStyle -> GrayLevel[0.7490196078431373], 
          Spacings -> {0, 0}, Alignment -> Left, 
          BaseStyle -> {
           FontFamily -> "Source Sans Pro", FontSize -> 14, FontWeight -> 
            Plain}], LineBreakWithin -> False, ContextMenu -> {}, NumberMarks -> 
         False, ShowAutoStyles -> False]], 
      TypeSystem`NestedGrid`PackagePrivate`initialQ = True}, 
     Dynamic[
      TypeSystem`NestedGrid`PackagePrivate`setupViewPath[
      TypeSystem`NestedGrid`PackagePrivate`$path$$, If[
         Not[TypeSystem`NestedGrid`PackagePrivate`initialQ], 
         Module[{
          TypeSystem`NestedGrid`PackagePrivate`tmpGrid$ = $Failed, 
           TypeSystem`NestedGrid`PackagePrivate`tmpData$ = 
           TypeSystem`NestedGrid`PackagePrivate`datasetData[
            TypeSystem`NestedGrid`PackagePrivate`$state$$]}, 
          TypeSystem`NestedGrid`PackagePrivate`tmpGrid$ = If[
             FailureQ[TypeSystem`NestedGrid`PackagePrivate`tmpData$], 
             TypeSystem`NestedGrid`PackagePrivate`renderedGrid, 
             TypeSystem`NestedGrid`PackagePrivate`renderGrid[
             TypeSystem`NestedGrid`PackagePrivate`$state$$, 
              TypeSystem`NestedGrid`PackagePrivate`$path$$, 
              TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
              TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
              TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
              TypeSystem`NestedGrid`PackagePrivate`localHold[
              TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][
             TypeSystem`NestedGrid`PackagePrivate`tmpData$]]; If[
            Not[
             FailureQ[TypeSystem`NestedGrid`PackagePrivate`tmpGrid$]], 
            TypeSystem`NestedGrid`PackagePrivate`renderedGrid = 
            TypeSystem`NestedGrid`PackagePrivate`tmpGrid$]; Null]]; 
       TypeSystem`NestedGrid`PackagePrivate`initialQ = False; 
       TypeSystem`NestedGrid`PackagePrivate`$vPos$$; 
       TypeSystem`NestedGrid`PackagePrivate`$hPos$$; If[
         FailureQ[TypeSystem`NestedGrid`PackagePrivate`renderedGrid], 
         TypeSystem`SparseGrid[
          TypeSystem`H["(data no longer present)"]], 
         TypeSystem`NestedGrid`PackagePrivate`renderedGrid]], 
      TrackedSymbols :> {
       TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
        TypeSystem`NestedGrid`PackagePrivate`$hPos$$}], 
     DynamicModuleValues :> {}], 
    TypeSystem`NestedGrid`PackagePrivate`$topBar$$ = Dynamic[
     TypeSystem`NestedGrid`PackagePrivate`makeFramedBar[
      TypeSystem`PackageScope`SubViewPathbar[
      TypeSystem`NestedGrid`PackagePrivate`$path$$, 
       TypeSystem`NestedGrid`PackagePrivate`updateState[
       TypeSystem`NestedGrid`PackagePrivate`$state$$, 
        TypeSystem`NestedGrid`PackagePrivate`$path$$, 
        TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
        TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
        TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
        TypeSystem`NestedGrid`PackagePrivate`localHold[
        TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]]], 
     TrackedSymbols :> {TypeSystem`NestedGrid`PackagePrivate`$path$$}], 
    TypeSystem`NestedGrid`PackagePrivate`$bottomBar$$ = Style[
     Framed[
      Dynamic[
       Replace[
       TypeSystem`NestedGrid`PackagePrivate`mouseAnnotation$$, {
        TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
           TypeSystem`NestedGrid`PackagePrivate`localHold[
           TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][Null, 
           Blank[]] -> "", TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
           TypeSystem`NestedGrid`PackagePrivate`localHold[
           TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][
           Pattern[TypeSystem`NestedGrid`PackagePrivate`path$, 
            Blank[]], 
           Pattern[TypeSystem`NestedGrid`PackagePrivate`pathType$, 
            Blank[]], 
           Pattern[TypeSystem`NestedGrid`PackagePrivate`isLeafHeader$, 
            Blank[]]] :> (
          Increment[TypeSystem`NestedGrid`PackagePrivate`$contextMenuTrigger]; 
          TypeSystem`NestedGrid`PackagePrivate`$lastPath = 
           TypeSystem`NestedGrid`PackagePrivate`path$; 
          TypeSystem`NestedGrid`PackagePrivate`$lastPathType = 
           TypeSystem`NestedGrid`PackagePrivate`pathType$; 
          TypeSystem`NestedGrid`PackagePrivate`$lastPathIsLeafHeader = 
           TypeSystem`NestedGrid`PackagePrivate`isLeafHeader$; 
          TypeSystem`NestedGrid`PackagePrivate`$lastOutputID = 
           TypeSystem`NestedGrid`PackagePrivate`localHold[
            TypeSystem`NestedGrid`PackagePrivate`$outputID$$]; 
          TypeSystem`NestedGrid`PackagePrivate`makePathTrail[
           TypeSystem`NestedGrid`PackagePrivate`path$, 
            TypeSystem`NestedGrid`PackagePrivate`makePathElements]), Null :> 
         Spacer[10], Blank[] :> Spacer[10]}], 
       TrackedSymbols :> {
        TypeSystem`NestedGrid`PackagePrivate`mouseAnnotation$$}], FrameStyle -> 
      None, ImageMargins -> 0, FrameMargins -> 0, Alignment -> Top, 
      ImageSize -> {Automatic, 15}], FontSize -> 1], 
    TypeSystem`NestedGrid`PackagePrivate`mouseAnnotation$$ = 
    TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
    "1fa24bf3-7906-4e2f-999e-4c50af78268e"][{
      Key["DensityMatrix"]}, "Item", False]}, 
    DynamicWrapperBox[
     DynamicBox[ToBoxes[
       Dataset`DatasetContent[
       2, "Path" -> Hold[TypeSystem`NestedGrid`PackagePrivate`$path$$], 
        "Grid" -> Hold[TypeSystem`NestedGrid`PackagePrivate`$grid$$], "State" -> 
        Hold[TypeSystem`NestedGrid`PackagePrivate`$state$$], "VPos" -> 
        Hold[TypeSystem`NestedGrid`PackagePrivate`$vPos$$], "HPos" -> 
        Hold[TypeSystem`NestedGrid`PackagePrivate`$hPos$$], "TopBar" -> 
        Hold[TypeSystem`NestedGrid`PackagePrivate`$topBar$$], "BottomBar" -> 
        Hold[TypeSystem`NestedGrid`PackagePrivate`$bottomBar$$], "OutputID" -> 
        Hold[
          TypeSystem`NestedGrid`PackagePrivate`localHold[
          TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]], StandardForm],
      ImageSizeCache->{774., {344.634033203125, 350.365966796875}},
      TrackedSymbols:>{
       TypeSystem`NestedGrid`PackagePrivate`$state$$, 
        TypeSystem`NestedGrid`PackagePrivate`$grid$$}], 
     TypeSystem`NestedGrid`PackagePrivate`mouseAnnotation$$ = 
     MouseAnnotation[],
     ImageSizeCache->{774., {344.634033203125, 350.365966796875}}],
    BaseStyle->{LineBreakWithin -> False},
    DynamicModuleValues:>{},
    Initialization:>(TypeSystem`NestedGrid`PackagePrivate`$outputID$$ = 
     CreateUUID[]),
    UnsavedVariables:>{TypeSystem`NestedGrid`PackagePrivate`$outputID$$}],
   Deploy,
   DefaultBaseStyle->"Deploy"],
  Dataset`InterpretDataset[1],
  Editable->False,
  SelectWithContents->True,
  Selectable->False]], "Output",
 CellChangeTimes->{{3.858282106430892*^9, 3.8582821133267517`*^9}, 
   3.8582857267529707`*^9},
 CellLabel->
  "Out[217]=",ExpressionUUID->"08c00bad-8bf0-4da4-8bab-1f615daafb09"]
}, Open  ]],

Cell["\<\
Any basis can be used to make a general quantum map, either vector or matrix, \
allowing even for construction of mixed operators and maps.\
\>", "Text",
 CellChangeTimes->{{3.858284844581127*^9, 
  3.858284976830717*^9}},ExpressionUUID->"7f6d0ec0-d9dc-4094-a9c8-\
e32f17cd461d"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"QuantumState", "[", 
  RowBox[{
   RowBox[{"RandomReal", "[", 
    RowBox[{"1", ",", 
     RowBox[{"{", 
      RowBox[{"8", ",", "8"}], "}"}]}], "]"}], ",", 
   RowBox[{"QuantumBasis", "[", 
    RowBox[{
     RowBox[{"QuditBasis", "@", "\"\<X\>\""}], ",", 
     RowBox[{"QuditBasis", "[", 
      RowBox[{"{", 
       RowBox[{"\"\<Y\>\"", ",", "\"\<Z\>\""}], "}"}], "]"}]}], "]"}]}], 
  "]"}]], "Input",
 CellChangeTimes->{{3.858284794125761*^9, 3.858284826268338*^9}},
 CellLabel->
  "In[218]:=",ExpressionUUID->"4df61233-3659-430d-9121-55de1f969495"],

Cell[BoxData[
 InterpretationBox[
  RowBox[{
   TagBox["QuantumState",
    "SummaryHead"], "[", 
   DynamicModuleBox[{Typeset`open$$ = False, Typeset`embedState$$ = "Ready"}, 
    
    TemplateBox[{
      PaneSelectorBox[{False -> GridBox[{{
            PaneBox[
             ButtonBox[
              DynamicBox[
               FEPrivate`FrontEndResource["FEBitmaps", "SummaryBoxOpener"]], 
              ButtonFunction :> (Typeset`open$$ = True), Appearance -> None, 
              BaseStyle -> {}, Evaluator -> Automatic, Method -> 
              "Preemptive"], Alignment -> {Center, Center}, ImageSize -> 
             Dynamic[{
               Automatic, 
                3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                 Magnification])}]], 
            GraphicsBox[
             RasterBox[CompressedData["
1:eJyd0n1QzHkcB/A8Z3JEu5RWkVKbhwiVG+ddWZaYkKfZkjA2T8WMsZjqbkRt
Y2wPtjBmaSvPhvJQKtW51mBFJQ+hrN1tt/31e+yQ6Fy3mLv75/7qd9+Z77y/
f73m+/183xM27YqSD3BwcHD8Z38//71+R18zNSviy5BtHO54HA7fp2fhRqQd
ithP4c8jsg81m59B9mtNu07aBm2Md1jodqrP7n/TnCQolppb8O8NO5+8CBS6
svCVtzUUrDRBmbVW25C2m7e7efecgOSal5jlE7BGsdWKGWkPQ65Xk1Cs/Hly
vb4FGQEFSxWZ7Rg9OP+XknqSt5+a99PVwgQGMY+0h971miAyNjYnPNyLisru
fLMnh96BV4p9NW8xqsnLN5bYArNwxXzBPBPymloMHWICMZ+6BzzWUfAqdyyQ
nHqBEemaAHWsBQ82zpVUjeQ/zxurAiusZ8z4nGEV+XcRKFo0ZfJfP9JQMcZC
wtaEfgv9vF6rzHATPq9rOMffd9WfXaO/TSMyJWeiz0UW0Sp3t8J8DsO8989z
j2IRKQj0TL5MwmAaP0mdbuTtR1cxPb33X4GYOrIykbLCJSNOKc399i/ZQa2u
OitCzHK1rJyEpW3oAU8p87/71te0qovWhaVzmLV6+DiPmRzev353/GYmjRE9
mkViWNClj19e9KYDs2WUk889mrfvv6BTXFdswD7vM5XiOBuchflOyyIoVNs/
apYs4KDdZCETw1gciP/j0jA3/v0UbRi4bWopi+WlrQbncTS4Y6mKMqUF3aLn
gTMncTA7Xz/KPmLwpTbcdQdB8PaV4Tfu+OSwCBbqBtF5FOIHCTS53m2YYg8t
Pb+4A45zTpcIb9GY7XJr+9m9LNyZnli5IweVzi6PjGHwJqd/dZLOBkEjvZ65
1gzywnRPu9WCOv/Bx/Js/N/r9DT7UtQYFg1hyi1+iRyMcbKaMpdO1CrKUoSN
DKKDE0KCUgiszVo4WpzczNtPuPvMIz2IhbFd26MKJWGzn5BIdhqwgUq6q75q
w9iS1vl+9RR+mFZiCmb49xNduRMrqkiUZ1eJJBkMOshTq7ves6jYVSvfY2Sx
+FrmwZO/0ZDWxfZzmd7O2/8KXDj2qA==
              "], {{0, 0}, {8, 8}}, {0, 1}], 
             Frame -> False, FrameLabel -> {None, None}, 
             FrameTicks -> {{None, None}, {None, None}}, GridLinesStyle -> 
             Directive[
               GrayLevel[0.5, 0.4]], ImageSize -> 
             Dynamic[{
               Automatic, 
                3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                 Magnification])}], 
             Method -> {
              "AxisPadding" -> Scaled[0.02], "DefaultBoundaryStyle" -> 
               Automatic, 
               "DefaultGraphicsInteraction" -> {
                "Version" -> 1.2, "TrackMousePosition" -> {True, False}, 
                 "Effects" -> {
                  "Highlight" -> {"ratio" -> 2}, 
                   "HighlightPoint" -> {"ratio" -> 2}, 
                   "Droplines" -> {
                    "freeformCursorMode" -> True, 
                    "placement" -> {"x" -> "All", "y" -> "None"}}}}, 
               "DefaultPlotStyle" -> Automatic, "DomainPadding" -> 
               Scaled[0.02], "RangePadding" -> Scaled[0.05]}], 
            GridBox[{{
               RowBox[{
                 TagBox["\"StateType: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox["\"Matrix\"", "SummaryItem"]}], 
               RowBox[{
                 TagBox["\"Qudits: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox["3", "SummaryItem"]}]}, {
               RowBox[{
                 TagBox["\"Type: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox["\"Unknown\"", "SummaryItem"]}], 
               RowBox[{
                 TagBox["\"Dimension: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox["8", "SummaryItem"]}]}, {
               RowBox[{
                 TagBox["\"Picture: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox["\"Schr\[ODoubleDot]dinger\"", "SummaryItem"]}], ""}},
              GridBoxAlignment -> {
              "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, AutoDelete -> 
             False, GridBoxItemSize -> {
              "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
             GridBoxSpacings -> {"Columns" -> {{2}}, "Rows" -> {{Automatic}}},
              BaseStyle -> {
              ShowStringCharacters -> False, NumberMarks -> False, 
               PrintPrecision -> 3, ShowSyntaxStyles -> False}]}}, 
          GridBoxAlignment -> {"Columns" -> {{Left}}, "Rows" -> {{Top}}}, 
          AutoDelete -> False, 
          GridBoxItemSize -> {
           "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
          BaselinePosition -> {1, 1}], True -> GridBox[{{
            PaneBox[
             ButtonBox[
              DynamicBox[
               FEPrivate`FrontEndResource["FEBitmaps", "SummaryBoxCloser"]], 
              ButtonFunction :> (Typeset`open$$ = False), Appearance -> None, 
              BaseStyle -> {}, Evaluator -> Automatic, Method -> 
              "Preemptive"], Alignment -> {Center, Center}, ImageSize -> 
             Dynamic[{
               Automatic, 
                3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                 Magnification])}]], 
            GraphicsBox[
             RasterBox[CompressedData["
1:eJyd0n1QzHkcB/A8Z3JEu5RWkVKbhwiVG+ddWZaYkKfZkjA2T8WMsZjqbkRt
Y2wPtjBmaSvPhvJQKtW51mBFJQ+hrN1tt/31e+yQ6Fy3mLv75/7qd9+Z77y/
f73m+/183xM27YqSD3BwcHD8Z38//71+R18zNSviy5BtHO54HA7fp2fhRqQd
ithP4c8jsg81m59B9mtNu07aBm2Md1jodqrP7n/TnCQolppb8O8NO5+8CBS6
svCVtzUUrDRBmbVW25C2m7e7efecgOSal5jlE7BGsdWKGWkPQ65Xk1Cs/Hly
vb4FGQEFSxWZ7Rg9OP+XknqSt5+a99PVwgQGMY+0h971miAyNjYnPNyLisru
fLMnh96BV4p9NW8xqsnLN5bYArNwxXzBPBPymloMHWICMZ+6BzzWUfAqdyyQ
nHqBEemaAHWsBQ82zpVUjeQ/zxurAiusZ8z4nGEV+XcRKFo0ZfJfP9JQMcZC
wtaEfgv9vF6rzHATPq9rOMffd9WfXaO/TSMyJWeiz0UW0Sp3t8J8DsO8989z
j2IRKQj0TL5MwmAaP0mdbuTtR1cxPb33X4GYOrIykbLCJSNOKc399i/ZQa2u
OitCzHK1rJyEpW3oAU8p87/71te0qovWhaVzmLV6+DiPmRzev353/GYmjRE9
mkViWNClj19e9KYDs2WUk889mrfvv6BTXFdswD7vM5XiOBuchflOyyIoVNs/
apYs4KDdZCETw1gciP/j0jA3/v0UbRi4bWopi+WlrQbncTS4Y6mKMqUF3aLn
gTMncTA7Xz/KPmLwpTbcdQdB8PaV4Tfu+OSwCBbqBtF5FOIHCTS53m2YYg8t
Pb+4A45zTpcIb9GY7XJr+9m9LNyZnli5IweVzi6PjGHwJqd/dZLOBkEjvZ65
1gzywnRPu9WCOv/Bx/Js/N/r9DT7UtQYFg1hyi1+iRyMcbKaMpdO1CrKUoSN
DKKDE0KCUgiszVo4WpzczNtPuPvMIz2IhbFd26MKJWGzn5BIdhqwgUq6q75q
w9iS1vl+9RR+mFZiCmb49xNduRMrqkiUZ1eJJBkMOshTq7ves6jYVSvfY2Sx
+FrmwZO/0ZDWxfZzmd7O2/8KXDj2qA==
              "], {{0, 0}, {8, 8}}, {0, 1}], 
             Frame -> False, FrameLabel -> {None, None}, 
             FrameTicks -> {{None, None}, {None, None}}, GridLinesStyle -> 
             Directive[
               GrayLevel[0.5, 0.4]], ImageSize -> 
             Dynamic[{
               Automatic, 
                3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                 Magnification])}], 
             Method -> {
              "AxisPadding" -> Scaled[0.02], "DefaultBoundaryStyle" -> 
               Automatic, 
               "DefaultGraphicsInteraction" -> {
                "Version" -> 1.2, "TrackMousePosition" -> {True, False}, 
                 "Effects" -> {
                  "Highlight" -> {"ratio" -> 2}, 
                   "HighlightPoint" -> {"ratio" -> 2}, 
                   "Droplines" -> {
                    "freeformCursorMode" -> True, 
                    "placement" -> {"x" -> "All", "y" -> "None"}}}}, 
               "DefaultPlotStyle" -> Automatic, "DomainPadding" -> 
               Scaled[0.02], "RangePadding" -> Scaled[0.05]}], 
            GridBox[{{
               RowBox[{
                 TagBox["\"StateType: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox["\"Matrix\"", "SummaryItem"]}], 
               RowBox[{
                 TagBox["\"Qudits: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox["3", "SummaryItem"]}]}, {
               RowBox[{
                 TagBox["\"Type: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox["\"Unknown\"", "SummaryItem"]}], 
               RowBox[{
                 TagBox["\"Dimension: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox["8", "SummaryItem"]}]}, {
               RowBox[{
                 TagBox["\"Picture: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox["\"Schr\[ODoubleDot]dinger\"", "SummaryItem"]}], ""}, {
               RowBox[{
                 TagBox["\"Purity: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox["1.986155883418012`", "SummaryItem"]}], ""}, {
               RowBox[{
                 TagBox["\"Von Neumann Entropy: \"", "SummaryItemAnnotation"],
                  "\[InvisibleSpace]", 
                 TagBox[
                  TemplateBox[{
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"0.1514648334688575`", "\[VeryThinSpace]"}], "+", 
                    
                    RowBox[{"0.44125930620712533`", " ", "\[ImaginaryI]"}]}], 
                    ")"}], "\"b\"", "bits", "\"Bits\""}, "Quantity", 
                   SyntaxForm -> Mod], "SummaryItem"]}], ""}, {
               RowBox[{
                 TagBox["\"Dimensions: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox[
                  RowBox[{"{", 
                    RowBox[{"2", ",", 
                    StyleBox["2", Bold, StripOnInput -> False], ",", 
                    StyleBox["2", Bold, StripOnInput -> False]}], "}"}], 
                  "SummaryItem"]}], ""}, {
               RowBox[{
                 TagBox["\"ParameterArity: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox["0", "SummaryItem"]}], 
               RowBox[{
                 TagBox["\"Parameters: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox[
                  RowBox[{"{", "}"}], "SummaryItem"]}]}}, 
             GridBoxAlignment -> {
              "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, AutoDelete -> 
             False, GridBoxItemSize -> {
              "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
             GridBoxSpacings -> {"Columns" -> {{2}}, "Rows" -> {{Automatic}}},
              BaseStyle -> {
              ShowStringCharacters -> False, NumberMarks -> False, 
               PrintPrecision -> 3, ShowSyntaxStyles -> False}]}}, 
          GridBoxAlignment -> {"Columns" -> {{Left}}, "Rows" -> {{Top}}}, 
          AutoDelete -> False, 
          GridBoxItemSize -> {
           "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
          BaselinePosition -> {1, 1}]}, 
       Dynamic[Typeset`open$$], ImageSize -> Automatic]},
     "SummaryPanel"],
    DynamicModuleValues:>{}], "]"}],
  Wolfram`QuantumFramework`QuantumState[
  SparseArray[
   Automatic, {8, 8}, 0., {
    1, {{0, 8, 16, 24, 32, 40, 48, 56, 64}, {{1}, {2}, {3}, {4}, {5}, {6}, {
      7}, {8}, {1}, {2}, {3}, {4}, {5}, {6}, {7}, {8}, {1}, {2}, {3}, {4}, {
      5}, {6}, {7}, {8}, {1}, {2}, {3}, {4}, {5}, {6}, {7}, {8}, {1}, {2}, {
      3}, {4}, {5}, {6}, {7}, {8}, {1}, {2}, {3}, {4}, {5}, {6}, {7}, {8}, {
      1}, {2}, {3}, {4}, {5}, {6}, {7}, {8}, {1}, {2}, {3}, {4}, {5}, {6}, {
      7}, {8}}}, CompressedData["
1:eJwBDQLy/SFib1JlAQAAAEAAAABAwNrXHoWrP/RWmnLooek/YkP56Yv67j9G
VsxeoO3mPwApOkQVc3k/Vo/sWG/Z6T9kKqJmKHrjP1wweBYo+e4/zGVNt2pu
4z+AQK0QgPLpP4R1duw2w+g/YDmSd3tfoD+qLzFbluThPwCxRg/gFLE/vKLA
PDot4T8ORbXBCjjiP+6YSGWGW+o/HFnTxpxX5j+0ZH4Iy9bfP0yKEavRruc/
NGn1LXFl6z9CiQ3njb/nP+jWSBztfMA/RFXP5qvq3D/sb3A6TZDuP1ablQ1F
YOw/6KmC1/Ng0z/kAUEa4xTaPzjuvAn/Ktk/kDfC/VzU0z/YQ/dXvlviP+Cs
RzB7os8/gFmE/9dc7z98QJzr6XfkPxIK92Q7IOw/hG3cjQFj6j9IVU+GCjjN
P1gvERRzBcM/kE8YQsAY2z+M+3QlMk/pP4QBZ+lH5Nc/QA5Zt4Ylxz8Yqt+3
mcboP7YJiDpzIeI/OPCeWPWd4j+wxpthveLhP4C9goPeIKY/MvdWElUJ4j8o
RaZPGs7KP2h7JF/jrt8/coee9l6b5z82PPOgJP3hP4bkKZ4uuOI/bjMmHkCF
5T/w9fvsr0G/P5qKL16EA+8/FLQ5DGm24D9qU21/3/zrP/ZCN3xrIeQ/GvNh
lsju4j/w/mXtP8XqPzyhqQBOJN4/tAtNaDLU4T+wyg6Vo9vgP+PGAv4=
     "]}], 
   Wolfram`QuantumFramework`QuantumBasis[<|
    "Input" -> Wolfram`QuantumFramework`QuditBasis[<|{
          Wolfram`QuantumFramework`QuditName[
           Subscript["\[Psi]", 
            Subscript["y", "-"]], "Dual" -> True], 1} -> 
        SparseArray[
         Automatic, {2}, 0, {
          1, {{0, 2}, {{1}, {2}}}, {
           Complex[0, 1] 2^Rational[-1, 2], 2^Rational[-1, 2]}}], {
          Wolfram`QuantumFramework`QuditName[
           Subscript["\[Psi]", 
            Subscript["y", "+"]], "Dual" -> True], 1} -> 
        SparseArray[
         Automatic, {2}, 0, {
          1, {{0, 2}, {{1}, {2}}}, {
           Complex[0, -1] 2^Rational[-1, 2], 2^Rational[-1, 2]}}], {
          Wolfram`QuantumFramework`QuditName[
           Subscript["\[Psi]", 
            Subscript["z", "-"]], "Dual" -> True], 2} -> 
        SparseArray[Automatic, {2}, 0, {1, {{0, 1}, {{2}}}, {1}}], {
          Wolfram`QuantumFramework`QuditName[
           Subscript["\[Psi]", 
            Subscript["z", "+"]], "Dual" -> True], 2} -> 
        SparseArray[Automatic, {2}, 0, {1, {{0, 1}, {{1}}}, {1}}]|>], 
     "Output" -> Wolfram`QuantumFramework`QuditBasis[<|{
          Wolfram`QuantumFramework`QuditName[
           Subscript["\[Psi]", 
            Subscript["x", "-"]], "Dual" -> False], 1} -> 
        SparseArray[
         Automatic, {2}, 0, {
          1, {{0, 2}, {{1}, {2}}}, {-2^Rational[-1, 2], 2^Rational[-1, 2]}}], {
          Wolfram`QuantumFramework`QuditName[
           Subscript["\[Psi]", 
            Subscript["x", "+"]], "Dual" -> False], 1} -> 
        SparseArray[
         Automatic, {2}, 0, {
          1, {{0, 2}, {{1}, {2}}}, {
           2^Rational[-1, 2], 2^Rational[-1, 2]}}]|>], "Picture" -> 
     "Schr\[ODoubleDot]dinger", "Label" -> "Computational", 
     "ParameterSpec" -> {}|>]],
  Editable->False,
  SelectWithContents->True,
  Selectable->False]], "Output",
 CellChangeTimes->{{3.858284809334077*^9, 3.858284826770732*^9}, 
   3.858285727184368*^9},
 CellLabel->
  "Out[218]=",ExpressionUUID->"ed1579e0-f21b-402e-96d6-129dd94e5146"]
}, Open  ]],

Cell["State containing no non-zero amplitudes is degenerate:", "Text",
 CellChangeTimes->{{3.8582822013434563`*^9, 
  3.8582822202897053`*^9}},ExpressionUUID->"e13d80c5-dd8e-40cc-9f3f-\
c351510f3b78"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"0", 
  RowBox[{"QuantumState", "[", "\"\<RandomMixed\>\"", "]"}]}]], "Input",
 CellChangeTimes->{
  3.858282193113611*^9, {3.858282229536613*^9, 3.858282229760098*^9}},
 CellLabel->
  "In[219]:=",ExpressionUUID->"33e24015-fd98-4590-9cc1-6d839dbee953"],

Cell[BoxData[
 InterpretationBox[
  RowBox[{
   TagBox["QuantumState",
    "SummaryHead"], "[", 
   DynamicModuleBox[{Typeset`open$$ = False, Typeset`embedState$$ = "Ready"}, 
    
    TemplateBox[{
      PaneSelectorBox[{False -> GridBox[{{
            PaneBox[
             ButtonBox[
              DynamicBox[
               FEPrivate`FrontEndResource["FEBitmaps", "SummaryBoxOpener"]], 
              ButtonFunction :> (Typeset`open$$ = True), Appearance -> None, 
              BaseStyle -> {}, Evaluator -> Automatic, Method -> 
              "Preemptive"], Alignment -> {Center, Center}, ImageSize -> 
             Dynamic[{
               Automatic, 
                3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                 Magnification])}]], 
            GraphicsBox[
             RasterBox[
             SparseArray[Automatic, {2, 2}, 1., {1, {{0, 0, 0}, {}}, {}}], {{
              0, 0}, {2, 2}}, {0, 1}], Frame -> False, 
             FrameLabel -> {None, None}, 
             FrameTicks -> {{None, None}, {None, None}}, GridLinesStyle -> 
             Directive[
               GrayLevel[0.5, 0.4]], ImageSize -> 
             Dynamic[{
               Automatic, 
                3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                 Magnification])}], 
             Method -> {
              "AxisPadding" -> Scaled[0.02], "DefaultBoundaryStyle" -> 
               Automatic, 
               "DefaultGraphicsInteraction" -> {
                "Version" -> 1.2, "TrackMousePosition" -> {True, False}, 
                 "Effects" -> {
                  "Highlight" -> {"ratio" -> 2}, 
                   "HighlightPoint" -> {"ratio" -> 2}, 
                   "Droplines" -> {
                    "freeformCursorMode" -> True, 
                    "placement" -> {"x" -> "All", "y" -> "None"}}}}, 
               "DefaultPlotStyle" -> Automatic, "DomainPadding" -> 
               Scaled[0.02], "RangePadding" -> Scaled[0.05]}], 
            GridBox[{{
               RowBox[{
                 TagBox["\"StateType: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox["\"Matrix\"", "SummaryItem"]}], 
               RowBox[{
                 TagBox["\"Qudits: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox["1", "SummaryItem"]}]}, {
               RowBox[{
                 TagBox["\"Type: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox["\"Degenerate\"", "SummaryItem"]}], 
               RowBox[{
                 TagBox["\"Dimension: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox["2", "SummaryItem"]}]}, {
               RowBox[{
                 TagBox["\"Picture: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox["\"Schr\[ODoubleDot]dinger\"", "SummaryItem"]}], ""}},
              GridBoxAlignment -> {
              "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, AutoDelete -> 
             False, GridBoxItemSize -> {
              "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
             GridBoxSpacings -> {"Columns" -> {{2}}, "Rows" -> {{Automatic}}},
              BaseStyle -> {
              ShowStringCharacters -> False, NumberMarks -> False, 
               PrintPrecision -> 3, ShowSyntaxStyles -> False}]}}, 
          GridBoxAlignment -> {"Columns" -> {{Left}}, "Rows" -> {{Top}}}, 
          AutoDelete -> False, 
          GridBoxItemSize -> {
           "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
          BaselinePosition -> {1, 1}], True -> GridBox[{{
            PaneBox[
             ButtonBox[
              DynamicBox[
               FEPrivate`FrontEndResource["FEBitmaps", "SummaryBoxCloser"]], 
              ButtonFunction :> (Typeset`open$$ = False), Appearance -> None, 
              BaseStyle -> {}, Evaluator -> Automatic, Method -> 
              "Preemptive"], Alignment -> {Center, Center}, ImageSize -> 
             Dynamic[{
               Automatic, 
                3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                 Magnification])}]], 
            GraphicsBox[
             RasterBox[
             SparseArray[Automatic, {2, 2}, 1., {1, {{0, 0, 0}, {}}, {}}], {{
              0, 0}, {2, 2}}, {0, 1}], Frame -> False, 
             FrameLabel -> {None, None}, 
             FrameTicks -> {{None, None}, {None, None}}, GridLinesStyle -> 
             Directive[
               GrayLevel[0.5, 0.4]], ImageSize -> 
             Dynamic[{
               Automatic, 
                3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                 Magnification])}], 
             Method -> {
              "AxisPadding" -> Scaled[0.02], "DefaultBoundaryStyle" -> 
               Automatic, 
               "DefaultGraphicsInteraction" -> {
                "Version" -> 1.2, "TrackMousePosition" -> {True, False}, 
                 "Effects" -> {
                  "Highlight" -> {"ratio" -> 2}, 
                   "HighlightPoint" -> {"ratio" -> 2}, 
                   "Droplines" -> {
                    "freeformCursorMode" -> True, 
                    "placement" -> {"x" -> "All", "y" -> "None"}}}}, 
               "DefaultPlotStyle" -> Automatic, "DomainPadding" -> 
               Scaled[0.02], "RangePadding" -> Scaled[0.05]}], 
            GridBox[{{
               RowBox[{
                 TagBox["\"StateType: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox["\"Matrix\"", "SummaryItem"]}], 
               RowBox[{
                 TagBox["\"Qudits: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox["1", "SummaryItem"]}]}, {
               RowBox[{
                 TagBox["\"Type: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox["\"Degenerate\"", "SummaryItem"]}], 
               RowBox[{
                 TagBox["\"Dimension: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox["2", "SummaryItem"]}]}, {
               RowBox[{
                 TagBox["\"Picture: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox["\"Schr\[ODoubleDot]dinger\"", "SummaryItem"]}], ""}, {
               RowBox[{
                 TagBox["\"Purity: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox["Indeterminate", "SummaryItem"]}], ""}, {
               RowBox[{
                 TagBox["\"Von Neumann Entropy: \"", "SummaryItemAnnotation"],
                  "\[InvisibleSpace]", 
                 TagBox["Indeterminate", "SummaryItem"]}], ""}, {
               RowBox[{
                 TagBox["\"Dimensions: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox[
                  RowBox[{"{", "2", "}"}], "SummaryItem"]}], ""}, {
               RowBox[{
                 TagBox["\"ParameterArity: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox["0", "SummaryItem"]}], 
               RowBox[{
                 TagBox["\"Parameters: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox[
                  RowBox[{"{", "}"}], "SummaryItem"]}]}}, 
             GridBoxAlignment -> {
              "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, AutoDelete -> 
             False, GridBoxItemSize -> {
              "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
             GridBoxSpacings -> {"Columns" -> {{2}}, "Rows" -> {{Automatic}}},
              BaseStyle -> {
              ShowStringCharacters -> False, NumberMarks -> False, 
               PrintPrecision -> 3, ShowSyntaxStyles -> False}]}}, 
          GridBoxAlignment -> {"Columns" -> {{Left}}, "Rows" -> {{Top}}}, 
          AutoDelete -> False, 
          GridBoxItemSize -> {
           "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
          BaselinePosition -> {1, 1}]}, 
       Dynamic[Typeset`open$$], ImageSize -> Automatic]},
     "SummaryPanel"],
    DynamicModuleValues:>{}], "]"}],
  Wolfram`QuantumFramework`QuantumState[
  SparseArray[
   Automatic, {2, 2}, Complex[0., 0.], {
    1, {{0, 2, 4}, {{1}, {2}, {1}, {2}}}, {Complex[0., 0.], Complex[0., 0.], 
     Complex[0., 0.], Complex[0., 0.]}}], 
   Wolfram`QuantumFramework`QuantumBasis[<|
    "Input" -> Wolfram`QuantumFramework`QuditBasis[<|{
          
          Wolfram`QuantumFramework`QuditName[\[FormalCapitalI], "Dual" -> 
           False], 1} -> 1|>], "Output" -> 
     Wolfram`QuantumFramework`QuditBasis[<|{
          Wolfram`QuantumFramework`QuditName[0, "Dual" -> False], 1} -> 
        SparseArray[Automatic, {2}, 0, {1, {{0, 1}, {{1}}}, {1}}], {
          Wolfram`QuantumFramework`QuditName[1, "Dual" -> False], 1} -> 
        SparseArray[Automatic, {2}, 0, {1, {{0, 1}, {{2}}}, {1}}]|>], 
     "Picture" -> "Schr\[ODoubleDot]dinger", "Label" -> "Computational", 
     "ParameterSpec" -> {}|>]],
  Editable->False,
  SelectWithContents->True,
  Selectable->False]], "Output",
 CellChangeTimes->{3.858282193588275*^9, 3.858282230284387*^9, 
  3.858285727309237*^9},
 CellLabel->
  "Out[219]=",ExpressionUUID->"caf06b3c-3c09-4a54-8405-2ac08c70fb25"]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["QuantumOperator", "Section",
 CellChangeTimes->{{3.841079411554879*^9, 
  3.841079412058795*^9}},ExpressionUUID->"a129d358-2f6f-4120-9430-\
32c3a76464ee"],

Cell["\<\
QuantumOperator is a QuantumState with Order, that specifies orientation of \
input and output qudits\
\>", "Text",
 CellChangeTimes->{{3.8410771258515587`*^9, 3.84107712803542*^9}, {
  3.841079228566916*^9, 3.841079242451515*^9}, {3.842904993387116*^9, 
  3.8429050326019983`*^9}, {3.858282239674325*^9, 3.8582822473252583`*^9}, {
  3.858283142690497*^9, 
  3.858283142811141*^9}},ExpressionUUID->"e859ba48-427c-41c2-8c56-\
216470e67ab0"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"List", "@@", 
  RowBox[{"QuantumOperator", "[", "\"\<Hadamard\>\"", "]"}]}]], "Input",
 CellChangeTimes->{{3.8582831477725573`*^9, 3.858283207843342*^9}},
 CellLabel->
  "In[220]:=",ExpressionUUID->"993f3fd8-deb0-47bf-a7e8-efc32c8ce0dd"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   InterpretationBox[
    RowBox[{
     TagBox["QuantumState",
      "SummaryHead"], "[", 
     DynamicModuleBox[{Typeset`open$$ = False, Typeset`embedState$$ = 
      "Ready"}, 
      TemplateBox[{
        PaneSelectorBox[{False -> GridBox[{{
              PaneBox[
               ButtonBox[
                DynamicBox[
                 FEPrivate`FrontEndResource["FEBitmaps", "SummaryBoxOpener"]],
                 ButtonFunction :> (Typeset`open$$ = True), Appearance -> 
                None, BaseStyle -> {}, Evaluator -> Automatic, Method -> 
                "Preemptive"], Alignment -> {Center, Center}, ImageSize -> 
               Dynamic[{
                 Automatic, 
                  3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                   Magnification])}]], 
              GraphicsBox[
               RasterBox[CompressedData["
1:eJxTTMoPSmVmYGBggWIQW0u+adXF1RfskwQiLLecuGZ/W1hl2+72N/akijOA
wQf7h1Ui69wf3oLyYYBycVrbO1DmAwD9VH/w
                "], {{0, 0}, {4, 4}}, {0,
                 1}], Frame -> False, FrameLabel -> {None, None}, 
               FrameTicks -> {{None, None}, {None, None}}, GridLinesStyle -> 
               Directive[
                 GrayLevel[0.5, 0.4]], ImageSize -> 
               Dynamic[{
                 Automatic, 
                  3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                   Magnification])}], 
               Method -> {
                "AxisPadding" -> Scaled[0.02], "DefaultBoundaryStyle" -> 
                 Automatic, 
                 "DefaultGraphicsInteraction" -> {
                  "Version" -> 1.2, "TrackMousePosition" -> {True, False}, 
                   "Effects" -> {
                    "Highlight" -> {"ratio" -> 2}, 
                    "HighlightPoint" -> {"ratio" -> 2}, 
                    "Droplines" -> {
                    "freeformCursorMode" -> True, 
                    "placement" -> {"x" -> "All", "y" -> "None"}}}}, 
                 "DefaultPlotStyle" -> Automatic, "DomainPadding" -> 
                 Scaled[0.02], "RangePadding" -> Scaled[0.05]}], 
              GridBox[{{
                 RowBox[{
                   TagBox["\"StateType: \"", "SummaryItemAnnotation"], 
                   "\[InvisibleSpace]", 
                   TagBox["\"Vector\"", "SummaryItem"]}], 
                 RowBox[{
                   TagBox["\"Qudits: \"", "SummaryItemAnnotation"], 
                   "\[InvisibleSpace]", 
                   TagBox["2", "SummaryItem"]}]}, {
                 RowBox[{
                   TagBox["\"Type: \"", "SummaryItemAnnotation"], 
                   "\[InvisibleSpace]", 
                   TagBox["\"Pure\"", "SummaryItem"]}], 
                 RowBox[{
                   TagBox["\"Dimension: \"", "SummaryItemAnnotation"], 
                   "\[InvisibleSpace]", 
                   TagBox["4", "SummaryItem"]}]}, {
                 RowBox[{
                   TagBox["\"Picture: \"", "SummaryItemAnnotation"], 
                   "\[InvisibleSpace]", 
                   TagBox["\"Schr\[ODoubleDot]dinger\"", "SummaryItem"]}], 
                 ""}}, GridBoxAlignment -> {
                "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, AutoDelete -> 
               False, GridBoxItemSize -> {
                "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
               GridBoxSpacings -> {
                "Columns" -> {{2}}, "Rows" -> {{Automatic}}}, 
               BaseStyle -> {
                ShowStringCharacters -> False, NumberMarks -> False, 
                 PrintPrecision -> 3, ShowSyntaxStyles -> False}]}}, 
            GridBoxAlignment -> {"Columns" -> {{Left}}, "Rows" -> {{Top}}}, 
            AutoDelete -> False, 
            GridBoxItemSize -> {
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
            BaselinePosition -> {1, 1}], True -> GridBox[{{
              PaneBox[
               ButtonBox[
                DynamicBox[
                 FEPrivate`FrontEndResource["FEBitmaps", "SummaryBoxCloser"]],
                 ButtonFunction :> (Typeset`open$$ = False), Appearance -> 
                None, BaseStyle -> {}, Evaluator -> Automatic, Method -> 
                "Preemptive"], Alignment -> {Center, Center}, ImageSize -> 
               Dynamic[{
                 Automatic, 
                  3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                   Magnification])}]], 
              GraphicsBox[
               RasterBox[CompressedData["
1:eJxTTMoPSmVmYGBggWIQW0u+adXF1RfskwQiLLecuGZ/W1hl2+72N/akijOA
wQf7h1Ui69wf3oLyYYBycVrbO1DmAwD9VH/w
                "], {{0, 0}, {4, 4}}, {0,
                 1}], Frame -> False, FrameLabel -> {None, None}, 
               FrameTicks -> {{None, None}, {None, None}}, GridLinesStyle -> 
               Directive[
                 GrayLevel[0.5, 0.4]], ImageSize -> 
               Dynamic[{
                 Automatic, 
                  3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                   Magnification])}], 
               Method -> {
                "AxisPadding" -> Scaled[0.02], "DefaultBoundaryStyle" -> 
                 Automatic, 
                 "DefaultGraphicsInteraction" -> {
                  "Version" -> 1.2, "TrackMousePosition" -> {True, False}, 
                   "Effects" -> {
                    "Highlight" -> {"ratio" -> 2}, 
                    "HighlightPoint" -> {"ratio" -> 2}, 
                    "Droplines" -> {
                    "freeformCursorMode" -> True, 
                    "placement" -> {"x" -> "All", "y" -> "None"}}}}, 
                 "DefaultPlotStyle" -> Automatic, "DomainPadding" -> 
                 Scaled[0.02], "RangePadding" -> Scaled[0.05]}], 
              GridBox[{{
                 RowBox[{
                   TagBox["\"StateType: \"", "SummaryItemAnnotation"], 
                   "\[InvisibleSpace]", 
                   TagBox["\"Vector\"", "SummaryItem"]}], 
                 RowBox[{
                   TagBox["\"Qudits: \"", "SummaryItemAnnotation"], 
                   "\[InvisibleSpace]", 
                   TagBox["2", "SummaryItem"]}]}, {
                 RowBox[{
                   TagBox["\"Type: \"", "SummaryItemAnnotation"], 
                   "\[InvisibleSpace]", 
                   TagBox["\"Pure\"", "SummaryItem"]}], 
                 RowBox[{
                   TagBox["\"Dimension: \"", "SummaryItemAnnotation"], 
                   "\[InvisibleSpace]", 
                   TagBox["4", "SummaryItem"]}]}, {
                 RowBox[{
                   TagBox["\"Picture: \"", "SummaryItemAnnotation"], 
                   "\[InvisibleSpace]", 
                   TagBox["\"Schr\[ODoubleDot]dinger\"", "SummaryItem"]}], 
                 ""}, {
                 RowBox[{
                   TagBox["\"Purity: \"", "SummaryItemAnnotation"], 
                   "\[InvisibleSpace]", 
                   TagBox["1.`", "SummaryItem"]}], ""}, {
                 RowBox[{
                   TagBox[
                   "\"Von Neumann Entropy: \"", "SummaryItemAnnotation"], 
                   "\[InvisibleSpace]", 
                   TagBox[
                    
                    TemplateBox[{"0.`", "\"b\"", "bits", "\"Bits\""}, 
                    "Quantity", SyntaxForm -> Mod], "SummaryItem"]}], ""}, {
                 RowBox[{
                   TagBox["\"Dimensions: \"", "SummaryItemAnnotation"], 
                   "\[InvisibleSpace]", 
                   TagBox[
                    RowBox[{"{", 
                    RowBox[{"2", ",", 
                    StyleBox["2", Bold, StripOnInput -> False]}], "}"}], 
                    "SummaryItem"]}], ""}, {
                 RowBox[{
                   TagBox["\"ParameterArity: \"", "SummaryItemAnnotation"], 
                   "\[InvisibleSpace]", 
                   TagBox["0", "SummaryItem"]}], 
                 RowBox[{
                   TagBox["\"Parameters: \"", "SummaryItemAnnotation"], 
                   "\[InvisibleSpace]", 
                   TagBox[
                    RowBox[{"{", "}"}], "SummaryItem"]}]}}, 
               GridBoxAlignment -> {
                "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, AutoDelete -> 
               False, GridBoxItemSize -> {
                "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
               GridBoxSpacings -> {
                "Columns" -> {{2}}, "Rows" -> {{Automatic}}}, 
               BaseStyle -> {
                ShowStringCharacters -> False, NumberMarks -> False, 
                 PrintPrecision -> 3, ShowSyntaxStyles -> False}]}}, 
            GridBoxAlignment -> {"Columns" -> {{Left}}, "Rows" -> {{Top}}}, 
            AutoDelete -> False, 
            GridBoxItemSize -> {
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
            BaselinePosition -> {1, 1}]}, 
         Dynamic[Typeset`open$$], ImageSize -> Automatic]},
       "SummaryPanel"],
      DynamicModuleValues:>{}], "]"}],
    Wolfram`QuantumFramework`QuantumState[
     SparseArray[
     Automatic, {4}, 0, {
      1, {{0, 4}, {{1}, {2}, {3}, {4}}}, {
       2^Rational[-1, 2], 2^Rational[-1, 2], 2^
        Rational[-1, 2], -2^Rational[-1, 2]}}], 
     Wolfram`QuantumFramework`QuantumBasis[<|
      "Input" -> Wolfram`QuantumFramework`QuditBasis[<|{
            Wolfram`QuantumFramework`QuditName[0, "Dual" -> True], 1} -> 
          SparseArray[Automatic, {2}, 0, {1, {{0, 1}, {{1}}}, {1}}], {
            Wolfram`QuantumFramework`QuditName[1, "Dual" -> True], 1} -> 
          SparseArray[Automatic, {2}, 0, {1, {{0, 1}, {{2}}}, {1}}]|>], 
       "Output" -> Wolfram`QuantumFramework`QuditBasis[<|{
            Wolfram`QuantumFramework`QuditName[0, "Dual" -> False], 1} -> 
          SparseArray[Automatic, {2}, 0, {1, {{0, 1}, {{1}}}, {1}}], {
            Wolfram`QuantumFramework`QuditName[1, "Dual" -> False], 1} -> 
          SparseArray[Automatic, {2}, 0, {1, {{0, 1}, {{2}}}, {1}}]|>], 
       "Picture" -> "Schr\[ODoubleDot]dinger", "Label" -> "H", 
       "ParameterSpec" -> {}|>]],
    Editable->False,
    SelectWithContents->True,
    Selectable->False], ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", "1", "}"}], ",", 
     RowBox[{"{", "1", "}"}]}], "}"}]}], "}"}]], "Output",
 CellChangeTimes->{{3.8582831494499607`*^9, 3.858283208351261*^9}, 
   3.858285727417707*^9},
 CellLabel->
  "Out[220]=",ExpressionUUID->"3478edef-2901-4b28-8f81-f65feb4fedc3"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{"QuantumOperator", "[", "\"\<Hadamard\>\"", 
  "]"}], "\[IndentingNewLine]", 
 RowBox[{"Dataset", "@", 
  RowBox[{"AssociationMap", "[", 
   RowBox[{"%", ",", 
    RowBox[{"%", "[", "\"\<Properties\>\"", "]"}]}], "]"}]}]}], "Input",
 CellChangeTimes->{{3.8410771389189568`*^9, 3.8410771820096292`*^9}, {
   3.8582826184106817`*^9, 3.858282679813797*^9}, {3.8582827265028048`*^9, 
   3.858282742434079*^9}, 3.858283107370737*^9},
 CellLabel->
  "In[221]:=",ExpressionUUID->"97368210-3e3a-4dd3-81ef-b877faa45ae4"],

Cell[BoxData[
 InterpretationBox[
  RowBox[{
   TagBox["QuantumOperator",
    "SummaryHead"], "[", 
   DynamicModuleBox[{Typeset`open$$ = False, Typeset`embedState$$ = "Ready"}, 
    
    TemplateBox[{
      PaneSelectorBox[{False -> GridBox[{{
            PaneBox[
             ButtonBox[
              DynamicBox[
               FEPrivate`FrontEndResource["FEBitmaps", "SummaryBoxOpener"]], 
              ButtonFunction :> (Typeset`open$$ = True), Appearance -> None, 
              BaseStyle -> {}, Evaluator -> Automatic, Method -> 
              "Preemptive"], Alignment -> {Center, Center}, ImageSize -> 
             Dynamic[{
               Automatic, 
                3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                 Magnification])}]], 
            GraphicsBox[
             
             RasterBox[{{{1., 0.42, 0.}, {0.260487, 0.356, 0.891569}}, {{1., 
              0.42, 0.}, {1., 0.42, 0.}}}, {{0, 0}, {2, 2}}, {0, 1}], Frame -> 
             False, FrameLabel -> {None, None}, 
             FrameTicks -> {{None, None}, {None, None}}, GridLinesStyle -> 
             Directive[
               GrayLevel[0.5, 0.4]], ImageSize -> 
             Dynamic[{
               Automatic, 
                3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                 Magnification])}], 
             Method -> {
              "AxisPadding" -> Scaled[0.02], "DefaultBoundaryStyle" -> 
               Automatic, 
               "DefaultGraphicsInteraction" -> {
                "Version" -> 1.2, "TrackMousePosition" -> {True, False}, 
                 "Effects" -> {
                  "Highlight" -> {"ratio" -> 2}, 
                   "HighlightPoint" -> {"ratio" -> 2}, 
                   "Droplines" -> {
                    "freeformCursorMode" -> True, 
                    "placement" -> {"x" -> "All", "y" -> "None"}}}}, 
               "DefaultPlotStyle" -> Automatic, "DomainPadding" -> 
               Scaled[0.02], "RangePadding" -> Scaled[0.05]}], 
            GridBox[{{
               RowBox[{
                 TagBox["\"Picture: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox["\"Schr\[ODoubleDot]dinger\"", "SummaryItem"]}], 
               RowBox[{
                 TagBox["\"Arity: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox["1", "SummaryItem"]}]}, {
               RowBox[{
                 TagBox["\"Dimension: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox[
                  TemplateBox[{"2", "\"\[RightArrow]\"", "2"}, "RowDefault"], 
                  "SummaryItem"]}], 
               RowBox[{
                 TagBox["\"Qudits: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox[
                  TemplateBox[{"1", "\"\[RightArrow]\"", "1"}, "RowDefault"], 
                  "SummaryItem"]}]}}, 
             GridBoxAlignment -> {
              "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, AutoDelete -> 
             False, GridBoxItemSize -> {
              "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
             GridBoxSpacings -> {"Columns" -> {{2}}, "Rows" -> {{Automatic}}},
              BaseStyle -> {
              ShowStringCharacters -> False, NumberMarks -> False, 
               PrintPrecision -> 3, ShowSyntaxStyles -> False}]}}, 
          GridBoxAlignment -> {"Columns" -> {{Left}}, "Rows" -> {{Top}}}, 
          AutoDelete -> False, 
          GridBoxItemSize -> {
           "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
          BaselinePosition -> {1, 1}], True -> GridBox[{{
            PaneBox[
             ButtonBox[
              DynamicBox[
               FEPrivate`FrontEndResource["FEBitmaps", "SummaryBoxCloser"]], 
              ButtonFunction :> (Typeset`open$$ = False), Appearance -> None, 
              BaseStyle -> {}, Evaluator -> Automatic, Method -> 
              "Preemptive"], Alignment -> {Center, Center}, ImageSize -> 
             Dynamic[{
               Automatic, 
                3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                 Magnification])}]], 
            GraphicsBox[
             
             RasterBox[{{{1., 0.42, 0.}, {0.260487, 0.356, 0.891569}}, {{1., 
              0.42, 0.}, {1., 0.42, 0.}}}, {{0, 0}, {2, 2}}, {0, 1}], Frame -> 
             False, FrameLabel -> {None, None}, 
             FrameTicks -> {{None, None}, {None, None}}, GridLinesStyle -> 
             Directive[
               GrayLevel[0.5, 0.4]], ImageSize -> 
             Dynamic[{
               Automatic, 
                3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                 Magnification])}], 
             Method -> {
              "AxisPadding" -> Scaled[0.02], "DefaultBoundaryStyle" -> 
               Automatic, 
               "DefaultGraphicsInteraction" -> {
                "Version" -> 1.2, "TrackMousePosition" -> {True, False}, 
                 "Effects" -> {
                  "Highlight" -> {"ratio" -> 2}, 
                   "HighlightPoint" -> {"ratio" -> 2}, 
                   "Droplines" -> {
                    "freeformCursorMode" -> True, 
                    "placement" -> {"x" -> "All", "y" -> "None"}}}}, 
               "DefaultPlotStyle" -> Automatic, "DomainPadding" -> 
               Scaled[0.02], "RangePadding" -> Scaled[0.05]}], 
            GridBox[{{
               RowBox[{
                 TagBox["\"Picture: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox["\"Schr\[ODoubleDot]dinger\"", "SummaryItem"]}], 
               RowBox[{
                 TagBox["\"Arity: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox["1", "SummaryItem"]}]}, {
               RowBox[{
                 TagBox["\"Dimension: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox[
                  TemplateBox[{"2", "\"\[RightArrow]\"", "2"}, "RowDefault"], 
                  "SummaryItem"]}], 
               RowBox[{
                 TagBox["\"Qudits: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox[
                  TemplateBox[{"1", "\"\[RightArrow]\"", "1"}, "RowDefault"], 
                  "SummaryItem"]}]}, {
               RowBox[{
                 TagBox["\"Hermitian: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox["True", "SummaryItem"]}], 
               RowBox[{
                 TagBox["\"Order: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox[
                  TemplateBox[{
                    RowBox[{"{", "1", "}"}], "\"\[RightArrow]\"", 
                    RowBox[{"{", "1", "}"}]}, "RowDefault"], 
                  "SummaryItem"]}]}, {
               RowBox[{
                 TagBox["\"Unitary: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox["True", "SummaryItem"]}], 
               RowBox[{
                 TagBox["\"Dimensions: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox[
                  TemplateBox[{
                    RowBox[{"{", "2", "}"}], "\"\[RightArrow]\"", 
                    RowBox[{"{", "2", "}"}]}, "RowDefault"], 
                  "SummaryItem"]}]}, {
               RowBox[{
                 TagBox["\"ParameterArity: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox["0", "SummaryItem"]}], 
               RowBox[{
                 TagBox["\"Parameters: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox[
                  RowBox[{"{", "}"}], "SummaryItem"]}]}}, 
             GridBoxAlignment -> {
              "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, AutoDelete -> 
             False, GridBoxItemSize -> {
              "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
             GridBoxSpacings -> {"Columns" -> {{2}}, "Rows" -> {{Automatic}}},
              BaseStyle -> {
              ShowStringCharacters -> False, NumberMarks -> False, 
               PrintPrecision -> 3, ShowSyntaxStyles -> False}]}}, 
          GridBoxAlignment -> {"Columns" -> {{Left}}, "Rows" -> {{Top}}}, 
          AutoDelete -> False, 
          GridBoxItemSize -> {
           "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
          BaselinePosition -> {1, 1}]}, 
       Dynamic[Typeset`open$$], ImageSize -> Automatic]},
     "SummaryPanel"],
    DynamicModuleValues:>{}], "]"}],
  Wolfram`QuantumFramework`QuantumOperator[
   Wolfram`QuantumFramework`QuantumState[
    SparseArray[
    Automatic, {4}, 0, {
     1, {{0, 4}, {{1}, {2}, {3}, {4}}}, {
      2^Rational[-1, 2], 2^Rational[-1, 2], 2^
       Rational[-1, 2], -2^Rational[-1, 2]}}], 
    Wolfram`QuantumFramework`QuantumBasis[<|
     "Input" -> Wolfram`QuantumFramework`QuditBasis[<|{
           Wolfram`QuantumFramework`QuditName[0, "Dual" -> True], 1} -> 
         SparseArray[Automatic, {2}, 0, {1, {{0, 1}, {{1}}}, {1}}], {
           Wolfram`QuantumFramework`QuditName[1, "Dual" -> True], 1} -> 
         SparseArray[Automatic, {2}, 0, {1, {{0, 1}, {{2}}}, {1}}]|>], 
      "Output" -> Wolfram`QuantumFramework`QuditBasis[<|{
           Wolfram`QuantumFramework`QuditName[0, "Dual" -> False], 1} -> 
         SparseArray[Automatic, {2}, 0, {1, {{0, 1}, {{1}}}, {1}}], {
           Wolfram`QuantumFramework`QuditName[1, "Dual" -> False], 1} -> 
         SparseArray[Automatic, {2}, 0, {1, {{0, 1}, {{2}}}, {1}}]|>], 
      "Picture" -> "Schr\[ODoubleDot]dinger", "Label" -> "H", 
      "ParameterSpec" -> {}|>]], {{1}, {1}}],
  Editable->False,
  SelectWithContents->True,
  Selectable->False]], "Output",
 CellChangeTimes->{{3.841077159004704*^9, 3.841077182279243*^9}, 
   3.8410773142647667`*^9, 3.841077373088992*^9, 3.841077528473065*^9, 
   3.841077631093308*^9, 3.841078432376334*^9, 3.841078471789085*^9, 
   3.841078544845221*^9, 3.841079078754526*^9, 3.841088588912805*^9, 
   3.842904958110985*^9, 3.843147063718732*^9, 3.843147110148871*^9, 
   3.843147333108461*^9, 3.8431474104781923`*^9, 3.843147507695294*^9, 
   3.858282250715876*^9, {3.8582826118594103`*^9, 3.858282688171487*^9}, {
   3.858282730882001*^9, 3.858282747476392*^9}, {3.858283101877254*^9, 
   3.858283107800803*^9}, 3.858285727531912*^9},
 CellLabel->
  "Out[221]=",ExpressionUUID->"ab8b5a04-0436-4e51-ab75-cb872ce0e006"],

Cell[BoxData[
 TagBox[
  TagBox[
   DynamicModuleBox[{TypeSystem`NestedGrid`PackagePrivate`$state$$ = <|
    "InitialData" -> <|"Amplitudes" -> <|Wolfram`QuantumFramework`QuditName[
           Wolfram`QuantumFramework`QuditName[0, "Dual" -> False], 
           Wolfram`QuantumFramework`QuditName[0, "Dual" -> True]] -> 
         2^Rational[-1, 2], Wolfram`QuantumFramework`QuditName[
           Wolfram`QuantumFramework`QuditName[0, "Dual" -> False], 
           Wolfram`QuantumFramework`QuditName[1, "Dual" -> True]] -> 
         2^Rational[-1, 2], Wolfram`QuantumFramework`QuditName[
           Wolfram`QuantumFramework`QuditName[1, "Dual" -> False], 
           Wolfram`QuantumFramework`QuditName[0, "Dual" -> True]] -> 
         2^Rational[-1, 2], Wolfram`QuantumFramework`QuditName[
           Wolfram`QuantumFramework`QuditName[1, "Dual" -> False], 
           Wolfram`QuantumFramework`QuditName[1, "Dual" -> True]] -> -2^
           Rational[-1, 2]|>, "Arity" -> 1, 
       "Association" -> <|Wolfram`QuantumFramework`QuditName[
           Wolfram`QuantumFramework`QuditName[0, "Dual" -> False], 
           Wolfram`QuantumFramework`QuditName[0, "Dual" -> True]] -> 
         SparseArray[Automatic, {2, 2}, 0, {1, {{0, 1, 1}, {{1}}}, {1}}], 
         Wolfram`QuantumFramework`QuditName[
           Wolfram`QuantumFramework`QuditName[0, "Dual" -> False], 
           Wolfram`QuantumFramework`QuditName[1, "Dual" -> True]] -> 
         SparseArray[Automatic, {2, 2}, 0, {1, {{0, 1, 1}, {{2}}}, {1}}], 
         Wolfram`QuantumFramework`QuditName[
           Wolfram`QuantumFramework`QuditName[1, "Dual" -> False], 
           Wolfram`QuantumFramework`QuditName[0, "Dual" -> True]] -> 
         SparseArray[Automatic, {2, 2}, 0, {1, {{0, 0, 1}, {{1}}}, {1}}], 
         Wolfram`QuantumFramework`QuditName[
           Wolfram`QuantumFramework`QuditName[1, "Dual" -> False], 
           Wolfram`QuantumFramework`QuditName[1, "Dual" -> True]] -> 
         SparseArray[Automatic, {2, 2}, 0, {1, {{0, 0, 1}, {{2}}}, {1}}]|>, 
       "Basis" -> 
       Wolfram`QuantumFramework`QuantumBasis[<|
         "Input" -> Wolfram`QuantumFramework`QuditBasis[<|{
               Wolfram`QuantumFramework`QuditName[0, "Dual" -> True], 1} -> 
             SparseArray[Automatic, {2}, 0, {1, {{0, 1}, {{1}}}, {1}}], {
               Wolfram`QuantumFramework`QuditName[1, "Dual" -> True], 1} -> 
             SparseArray[Automatic, {2}, 0, {1, {{0, 1}, {{2}}}, {1}}]|>], 
          "Output" -> Wolfram`QuantumFramework`QuditBasis[<|{
               Wolfram`QuantumFramework`QuditName[0, "Dual" -> False], 1} -> 
             SparseArray[Automatic, {2}, 0, {1, {{0, 1}, {{1}}}, {1}}], {
               Wolfram`QuantumFramework`QuditName[1, "Dual" -> False], 1} -> 
             SparseArray[Automatic, {2}, 0, {1, {{0, 1}, {{2}}}, {1}}]|>], 
          "Picture" -> "Schr\[ODoubleDot]dinger", "Label" -> "H", 
          "ParameterSpec" -> {}|>], "Computational" -> 
       Wolfram`QuantumFramework`QuantumOperator[
         Wolfram`QuantumFramework`QuantumState[
          SparseArray[
          Automatic, {4}, 0, {
           1, {{0, 4}, {{1}, {2}, {3}, {4}}}, {
            2^Rational[-1, 2], 2^Rational[-1, 2], 2^
             Rational[-1, 2], -2^Rational[-1, 2]}}], 
          
          Wolfram`QuantumFramework`QuantumBasis[<|
           "Input" -> Wolfram`QuantumFramework`QuditBasis[<|{
                 Wolfram`QuantumFramework`QuditName[0, "Dual" -> True], 1} -> 
               SparseArray[Automatic, {2}, 0, {1, {{0, 1}, {{1}}}, {1}}], {
                 Wolfram`QuantumFramework`QuditName[1, "Dual" -> True], 1} -> 
               SparseArray[Automatic, {2}, 0, {1, {{0, 1}, {{2}}}, {1}}]|>], 
            "Output" -> Wolfram`QuantumFramework`QuditBasis[<|{
                 Wolfram`QuantumFramework`QuditName[0, "Dual" -> False], 1} -> 
               SparseArray[Automatic, {2}, 0, {1, {{0, 1}, {{1}}}, {1}}], {
                 Wolfram`QuantumFramework`QuditName[1, "Dual" -> False], 1} -> 
               SparseArray[Automatic, {2}, 0, {1, {{0, 1}, {{2}}}, {1}}]|>], 
            "Picture" -> "Schr\[ODoubleDot]dinger", "Label" -> 
            "Computational", "ParameterSpec" -> {}|>]], {{1}, {1}}], 
       "ConjugateTranspose" -> Wolfram`QuantumFramework`QuantumOperator[
         Wolfram`QuantumFramework`QuantumState[
          SparseArray[
          Automatic, {4}, 0, {
           1, {{0, 4}, {{1}, {2}, {3}, {4}}}, {
            2^Rational[-1, 2], 2^Rational[-1, 2], 2^
             Rational[-1, 2], -2^Rational[-1, 2]}}], 
          
          Wolfram`QuantumFramework`QuantumBasis[<|
           "Input" -> Wolfram`QuantumFramework`QuditBasis[<|{
                 Wolfram`QuantumFramework`QuditName[0, "Dual" -> True], 1} -> 
               SparseArray[Automatic, {2}, 0, {1, {{0, 1}, {{1}}}, {1}}], {
                 Wolfram`QuantumFramework`QuditName[1, "Dual" -> True], 1} -> 
               SparseArray[Automatic, {2}, 0, {1, {{0, 1}, {{2}}}, {1}}]|>], 
            "Output" -> Wolfram`QuantumFramework`QuditBasis[<|{
                 Wolfram`QuantumFramework`QuditName[0, "Dual" -> False], 1} -> 
               SparseArray[Automatic, {2}, 0, {1, {{0, 1}, {{1}}}, {1}}], {
                 Wolfram`QuantumFramework`QuditName[1, "Dual" -> False], 1} -> 
               SparseArray[Automatic, {2}, 0, {1, {{0, 1}, {{2}}}, {1}}]|>], 
            "Picture" -> "Schr\[ODoubleDot]dinger", "Label" -> 
            Superscript["H", "\[Dagger]"], "ParameterSpec" -> {}|>]], {{1}, {
         1}}], "ControlOrder" -> Missing["ControlOrder"], "Dagger" -> 
       Wolfram`QuantumFramework`QuantumOperator[
         Wolfram`QuantumFramework`QuantumState[
          SparseArray[
          Automatic, {4}, 0, {
           1, {{0, 4}, {{1}, {2}, {3}, {4}}}, {
            2^Rational[-1, 2], 2^Rational[-1, 2], 2^
             Rational[-1, 2], -2^Rational[-1, 2]}}], 
          
          Wolfram`QuantumFramework`QuantumBasis[<|
           "Input" -> Wolfram`QuantumFramework`QuditBasis[<|{
                 Wolfram`QuantumFramework`QuditName[0, "Dual" -> True], 1} -> 
               SparseArray[Automatic, {2}, 0, {1, {{0, 1}, {{1}}}, {1}}], {
                 Wolfram`QuantumFramework`QuditName[1, "Dual" -> True], 1} -> 
               SparseArray[Automatic, {2}, 0, {1, {{0, 1}, {{2}}}, {1}}]|>], 
            "Output" -> Wolfram`QuantumFramework`QuditBasis[<|{
                 Wolfram`QuantumFramework`QuditName[0, "Dual" -> False], 1} -> 
               SparseArray[Automatic, {2}, 0, {1, {{0, 1}, {{1}}}, {1}}], {
                 Wolfram`QuantumFramework`QuditName[1, "Dual" -> False], 1} -> 
               SparseArray[Automatic, {2}, 0, {1, {{0, 1}, {{2}}}, {1}}]|>], 
            "Picture" -> "Schr\[ODoubleDot]dinger", "Label" -> 
            Superscript["H", "\[Dagger]"], "ParameterSpec" -> {}|>]], {{1}, {
         1}}], "DensityMatrix" -> 
       SparseArray[
        Automatic, {4, 4}, 0, {
         1, {{0, 4, 8, 12, 16}, {{1}, {2}, {3}, {4}, {1}, {2}, {3}, {4}, {
           1}, {2}, {3}, {4}, {1}, {2}, {3}, {4}}}, {
          Rational[1, 2], Rational[1, 2], Rational[1, 2], Rational[-1, 2], 
           Rational[1, 2], Rational[1, 2], Rational[1, 2], Rational[-1, 2], 
           Rational[1, 2], Rational[1, 2], Rational[1, 2], Rational[-1, 2], 
           Rational[-1, 2], Rational[-1, 2], Rational[-1, 2], Rational[
           1, 2]}}], "Diagram" -> Graphics[{
          GeometricTransformation[{
            Line[{{0, 0}, {1, 0}, {1, 1}, {0, 1}, {0, 0}}], {
             PointSize[
             0.2 Dynamic[
               3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                 Magnification])]], 
             Point[{{
                Rational[1, 2], 1}}], 
             Point[{{
                Rational[1, 2], 0}}]}, {
             Arrowheads[
             0.004 Dynamic[
               3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                 Magnification])]], {
              Arrow[{{
                 Rational[1, 2], 1}, {
                 Rational[1, 2], 
                 Rational[6, 5]}}]}, {
              Arrow[{{
                 Rational[1, 2], 
                 Rational[-1, 5]}, {
                 Rational[1, 2], 0}}]}}}, {{{1, 0}, {0, 1}}, {0, 0}}], 
          Text[
           Style["H", {FontSize -> 24, FontFamily -> "Times"}], {
            Rational[1, 2], 
            Rational[1, 2]}]}], "Dimension" -> 4, "Dimensions" -> {2, 2}, 
       "Dual" -> Wolfram`QuantumFramework`QuantumOperator[
         Wolfram`QuantumFramework`QuantumState[
          SparseArray[
          Automatic, {4}, 0, {
           1, {{0, 4}, {{1}, {2}, {3}, {4}}}, {
            2^Rational[-1, 2], 2^Rational[-1, 2], 2^
             Rational[-1, 2], -2^Rational[-1, 2]}}], 
          
          Wolfram`QuantumFramework`QuantumBasis[<|
           "Input" -> Wolfram`QuantumFramework`QuditBasis[<|{
                 Wolfram`QuantumFramework`QuditName[0, "Dual" -> False], 1} -> 
               SparseArray[Automatic, {2}, 0, {1, {{0, 1}, {{1}}}, {1}}], {
                 Wolfram`QuantumFramework`QuditName[1, "Dual" -> False], 1} -> 
               SparseArray[Automatic, {2}, 0, {1, {{0, 1}, {{2}}}, {1}}]|>], 
            "Output" -> Wolfram`QuantumFramework`QuditBasis[<|{
                 Wolfram`QuantumFramework`QuditName[0, "Dual" -> True], 1} -> 
               SparseArray[Automatic, {2}, 0, {1, {{0, 1}, {{1}}}, {1}}], {
                 Wolfram`QuantumFramework`QuditName[1, "Dual" -> True], 1} -> 
               SparseArray[Automatic, {2}, 0, {1, {{0, 1}, {{2}}}, {1}}]|>], 
            "Picture" -> "Schr\[ODoubleDot]dinger", "Label" -> "H", 
            "ParameterSpec" -> {}|>]], {{1}, {1}}], "Eigenstates" -> {
         Wolfram`QuantumFramework`QuantumState[
          SparseArray[
          Automatic, {4}, 0, {
           1, {{0, 4}, {{1}, {2}, {3}, {4}}}, {-1, -1, -1, 1}}], 
          
          Wolfram`QuantumFramework`QuantumBasis[<|
           "Input" -> Wolfram`QuantumFramework`QuditBasis[<|{
                 Wolfram`QuantumFramework`QuditName[0, "Dual" -> True], 1} -> 
               SparseArray[Automatic, {2}, 0, {1, {{0, 1}, {{1}}}, {1}}], {
                 Wolfram`QuantumFramework`QuditName[1, "Dual" -> True], 1} -> 
               SparseArray[Automatic, {2}, 0, {1, {{0, 1}, {{2}}}, {1}}]|>], 
            "Output" -> Wolfram`QuantumFramework`QuditBasis[<|{
                 Wolfram`QuantumFramework`QuditName[0, "Dual" -> False], 1} -> 
               SparseArray[Automatic, {2}, 0, {1, {{0, 1}, {{1}}}, {1}}], {
                 Wolfram`QuantumFramework`QuditName[1, "Dual" -> False], 1} -> 
               SparseArray[Automatic, {2}, 0, {1, {{0, 1}, {{2}}}, {1}}]|>], 
            "Picture" -> "Schr\[ODoubleDot]dinger", "Label" -> "H", 
            "ParameterSpec" -> {}|>]], 
         Wolfram`QuantumFramework`QuantumState[
          SparseArray[Automatic, {4}, 0, {1, {{0, 2}, {{1}, {4}}}, {1, 1}}], 
          
          Wolfram`QuantumFramework`QuantumBasis[<|
           "Input" -> Wolfram`QuantumFramework`QuditBasis[<|{
                 Wolfram`QuantumFramework`QuditName[0, "Dual" -> True], 1} -> 
               SparseArray[Automatic, {2}, 0, {1, {{0, 1}, {{1}}}, {1}}], {
                 Wolfram`QuantumFramework`QuditName[1, "Dual" -> True], 1} -> 
               SparseArray[Automatic, {2}, 0, {1, {{0, 1}, {{2}}}, {1}}]|>], 
            "Output" -> Wolfram`QuantumFramework`QuditBasis[<|{
                 Wolfram`QuantumFramework`QuditName[0, "Dual" -> False], 1} -> 
               SparseArray[Automatic, {2}, 0, {1, {{0, 1}, {{1}}}, {1}}], {
                 Wolfram`QuantumFramework`QuditName[1, "Dual" -> False], 1} -> 
               SparseArray[Automatic, {2}, 0, {1, {{0, 1}, {{2}}}, {1}}]|>], 
            "Picture" -> "Schr\[ODoubleDot]dinger", "Label" -> "H", 
            "ParameterSpec" -> {}|>]], 
         Wolfram`QuantumFramework`QuantumState[
          SparseArray[Automatic, {4}, 0, {1, {{0, 2}, {{1}, {3}}}, {-1, 1}}], 
          
          
          Wolfram`QuantumFramework`QuantumBasis[<|
           "Input" -> Wolfram`QuantumFramework`QuditBasis[<|{
                 Wolfram`QuantumFramework`QuditName[0, "Dual" -> True], 1} -> 
               SparseArray[Automatic, {2}, 0, {1, {{0, 1}, {{1}}}, {1}}], {
                 Wolfram`QuantumFramework`QuditName[1, "Dual" -> True], 1} -> 
               SparseArray[Automatic, {2}, 0, {1, {{0, 1}, {{2}}}, {1}}]|>], 
            "Output" -> Wolfram`QuantumFramework`QuditBasis[<|{
                 Wolfram`QuantumFramework`QuditName[0, "Dual" -> False], 1} -> 
               SparseArray[Automatic, {2}, 0, {1, {{0, 1}, {{1}}}, {1}}], {
                 Wolfram`QuantumFramework`QuditName[1, "Dual" -> False], 1} -> 
               SparseArray[Automatic, {2}, 0, {1, {{0, 1}, {{2}}}, {1}}]|>], 
            "Picture" -> "Schr\[ODoubleDot]dinger", "Label" -> "H", 
            "ParameterSpec" -> {}|>]], 
         Wolfram`QuantumFramework`QuantumState[
          SparseArray[Automatic, {4}, 0, {1, {{0, 2}, {{1}, {2}}}, {-1, 1}}], 
          
          
          Wolfram`QuantumFramework`QuantumBasis[<|
           "Input" -> Wolfram`QuantumFramework`QuditBasis[<|{
                 Wolfram`QuantumFramework`QuditName[0, "Dual" -> True], 1} -> 
               SparseArray[Automatic, {2}, 0, {1, {{0, 1}, {{1}}}, {1}}], {
                 Wolfram`QuantumFramework`QuditName[1, "Dual" -> True], 1} -> 
               SparseArray[Automatic, {2}, 0, {1, {{0, 1}, {{2}}}, {1}}]|>], 
            "Output" -> Wolfram`QuantumFramework`QuditBasis[<|{
                 Wolfram`QuantumFramework`QuditName[0, "Dual" -> False], 1} -> 
               SparseArray[Automatic, {2}, 0, {1, {{0, 1}, {{1}}}, {1}}], {
                 Wolfram`QuantumFramework`QuditName[1, "Dual" -> False], 1} -> 
               SparseArray[Automatic, {2}, 0, {1, {{0, 1}, {{2}}}, {1}}]|>], 
            "Picture" -> "Schr\[ODoubleDot]dinger", "Label" -> "H", 
            "ParameterSpec" -> {}|>]]}, 
       "Eigensystem" -> {{-1, 
         1}, {{(1 - 2^Rational[1, 2]) (1 + (-1 + 2^Rational[1, 2])^2)^
            Rational[-1, 2], (1 + (-1 + 2^Rational[1, 2])^2)^
           Rational[-1, 2]}, {(1 + 
            2^Rational[1, 2]) (1 + (1 + 2^Rational[1, 2])^2)^
            Rational[-1, 2], (1 + (1 + 2^Rational[1, 2])^2)^
           Rational[-1, 2]}}}, "Eigenvalues" -> {-1, 1}, 
       "Eigenvectors" -> {{(1 - 2^
           Rational[1, 2]) (1 + (-1 + 2^Rational[1, 2])^2)^Rational[-1, 2], (
           1 + (-1 + 2^Rational[1, 2])^2)^
          Rational[-1, 2]}, {(1 + 
           2^Rational[1, 2]) (1 + (1 + 2^Rational[1, 2])^2)^Rational[-1, 2], (
           1 + (1 + 2^Rational[1, 2])^2)^Rational[-1, 2]}}, 
       "ElementAssociation" -> <|Wolfram`QuantumFramework`QuditName[
           Wolfram`QuantumFramework`QuditName[0, "Dual" -> False], 
           Wolfram`QuantumFramework`QuditName[0, "Dual" -> True]] -> 
         SparseArray[Automatic, {2, 2}, 0, {1, {{0, 1, 1}, {{1}}}, {1}}], 
         Wolfram`QuantumFramework`QuditName[
           Wolfram`QuantumFramework`QuditName[0, "Dual" -> False], 
           Wolfram`QuantumFramework`QuditName[1, "Dual" -> True]] -> 
         SparseArray[Automatic, {2, 2}, 0, {1, {{0, 1, 1}, {{2}}}, {1}}], 
         Wolfram`QuantumFramework`QuditName[
           Wolfram`QuantumFramework`QuditName[1, "Dual" -> False], 
           Wolfram`QuantumFramework`QuditName[0, "Dual" -> True]] -> 
         SparseArray[Automatic, {2, 2}, 0, {1, {{0, 0, 1}, {{1}}}, {1}}], 
         Wolfram`QuantumFramework`QuditName[
           Wolfram`QuantumFramework`QuditName[1, "Dual" -> False], 
           Wolfram`QuantumFramework`QuditName[1, "Dual" -> True]] -> 
         SparseArray[Automatic, {2, 2}, 0, {1, {{0, 0, 1}, {{2}}}, {1}}]|>, 
       "ElementDimension" -> 4, "ElementDimensions" -> {2, 2}, "ElementNames" -> {
         Wolfram`QuantumFramework`QuditName[
          Wolfram`QuantumFramework`QuditName[0, "Dual" -> False], 
          Wolfram`QuantumFramework`QuditName[0, "Dual" -> True]], 
         Wolfram`QuantumFramework`QuditName[
          Wolfram`QuantumFramework`QuditName[0, "Dual" -> False], 
          Wolfram`QuantumFramework`QuditName[1, "Dual" -> True]], 
         Wolfram`QuantumFramework`QuditName[
          Wolfram`QuantumFramework`QuditName[1, "Dual" -> False], 
          Wolfram`QuantumFramework`QuditName[0, "Dual" -> True]], 
         Wolfram`QuantumFramework`QuditName[
          Wolfram`QuantumFramework`QuditName[1, "Dual" -> False], 
          Wolfram`QuantumFramework`QuditName[1, "Dual" -> True]]}, "Elements" -> 
       SparseArray[
        Automatic, {4, 2, 2}, 0, {
         1, {{0, 1, 2, 3, 4}, {{1, 1}, {1, 2}, {2, 1}, {2, 2}}}, {1, 1, 1, 
          1}}], "Entropy" -> Quantity[0, "Bits"], "FinalParameters" -> {}, 
       "FirstInputQudit" -> 1, "FirstOutputQudit" -> 1, "Formula" -> 
       2^Rational[-1, 2] Wolfram`QuantumFramework`QuditName[
           Wolfram`QuantumFramework`QuditName[0, "Dual" -> False], 
           Wolfram`QuantumFramework`QuditName[0, "Dual" -> True]] + 
        2^Rational[-1, 2] Wolfram`QuantumFramework`QuditName[
           Wolfram`QuantumFramework`QuditName[0, "Dual" -> False], 
           Wolfram`QuantumFramework`QuditName[1, "Dual" -> True]] + 
        2^Rational[-1, 2] Wolfram`QuantumFramework`QuditName[
           Wolfram`QuantumFramework`QuditName[1, "Dual" -> False], 
           Wolfram`QuantumFramework`QuditName[0, "Dual" -> True]] - 
        2^Rational[-1, 2] Wolfram`QuantumFramework`QuditName[
          Wolfram`QuantumFramework`QuditName[1, "Dual" -> False], 
          Wolfram`QuantumFramework`QuditName[1, "Dual" -> True]], "FullArity" -> 
       1, "FullInputOrder" -> {1}, "FullOutputOrder" -> {1}, "HasInputQ" -> 
       True, "HermitianQ" -> True, "InitialParameters" -> {}, "Input" -> 
       Wolfram`QuantumFramework`QuditBasis[<|{
            Wolfram`QuantumFramework`QuditName[0, "Dual" -> True], 1} -> 
          SparseArray[Automatic, {2}, 0, {1, {{0, 1}, {{1}}}, {1}}], {
            Wolfram`QuantumFramework`QuditName[1, "Dual" -> True], 1} -> 
          SparseArray[Automatic, {2}, 0, {1, {{0, 1}, {{2}}}, {1}}]|>], 
       "InputBasis" -> 
       Wolfram`QuantumFramework`QuantumBasis[<|
         "Input" -> Wolfram`QuantumFramework`QuditBasis[<|{
               Wolfram`QuantumFramework`QuditName[0, "Dual" -> True], 1} -> 
             SparseArray[Automatic, {2}, 0, {1, {{0, 1}, {{1}}}, {1}}], {
               Wolfram`QuantumFramework`QuditName[1, "Dual" -> True], 1} -> 
             SparseArray[Automatic, {2}, 0, {1, {{0, 1}, {{2}}}, {1}}]|>], 
          "Output" -> Wolfram`QuantumFramework`QuditBasis[<|{
               
               Wolfram`QuantumFramework`QuditName[\[FormalCapitalI], "Dual" -> 
                False], 1} -> 1|>], "Picture" -> "Schr\[ODoubleDot]dinger", 
          "Label" -> "H", "ParameterSpec" -> {}|>], "InputDimension" -> 2, 
       "InputDimensions" -> {2}, "InputElementDimensions" -> {2}, 
       "InputElementNames" -> {
         Wolfram`QuantumFramework`QuditName[0, "Dual" -> True], 
         Wolfram`QuantumFramework`QuditName[1, "Dual" -> True]}, 
       "InputElements" -> 
       SparseArray[
        Automatic, {2, 2}, 0, {1, {{0, 1, 2}, {{1}, {2}}}, {1, 1}}], 
       "InputMatrix" -> 
       SparseArray[
        Automatic, {2, 2}, 0, {1, {{0, 1, 2}, {{1}, {2}}}, {1, 1}}], 
       "InputNameDimension" -> 2, "InputNameDimensions" -> {2}, 
       "InputOrder" -> {1}, "InputOrderQuditMapping" -> {1 -> 1}, 
       "InputQuditOrder" -> {1}, "InputQudits" -> 1, "InputRank" -> 1, 
       "InputSize" -> 2, "InputTensor" -> 
       SparseArray[
        Automatic, {2, 2}, 0, {1, {{0, 1, 2}, {{1}, {2}}}, {1, 1}}], "Label" -> 
       "H", "LabelHead" -> "H", "LastInputQudit" -> 1, "LastOutputQudit" -> 1,
        "Matrix" -> 
       SparseArray[
        Automatic, {2, 2}, 0, {
         1, {{0, 2, 4}, {{1}, {2}, {1}, {2}}}, {
          2^Rational[-1, 2], 2^Rational[-1, 2], 2^
           Rational[-1, 2], -2^Rational[-1, 2]}}], 
       "MatrixDimensions" -> {4, 4}, "MatrixElementDimensions" -> {2, 2}, 
       "MatrixNameDimensions" -> {2, 2}, "MatrixRepresentation" -> 
       SparseArray[
        Automatic, {2, 2}, 0, {
         1, {{0, 2, 4}, {{1}, {2}, {1}, {2}}}, {
          2^Rational[-1, 2], 2^Rational[-1, 2], 2^
           Rational[-1, 2], -2^Rational[-1, 2]}}], "MaxArity" -> 1, "Mixed" -> 
       Wolfram`QuantumFramework`QuantumState[
        SparseArray[
         Automatic, {2, 2}, 0, {
          1, {{0, 2, 4}, {{1}, {2}, {1}, {2}}}, {
           2^Rational[-1, 2], 2^Rational[-1, 2], 2^
            Rational[-1, 2], -2^Rational[-1, 2]}}], 
         Wolfram`QuantumFramework`QuantumBasis[<|
          "Input" -> Wolfram`QuantumFramework`QuditBasis[<|{
                
                Wolfram`QuantumFramework`QuditName[\[FormalCapitalI], "Dual" -> 
                 False], 1} -> 1|>], "Output" -> 
           Wolfram`QuantumFramework`QuditBasis[<|{
                Wolfram`QuantumFramework`QuditName[0, "Dual" -> False], 1} -> 
              SparseArray[Automatic, {2}, 0, {1, {{0, 1}, {{1}}}, {1}}], {
                Wolfram`QuantumFramework`QuditName[1, "Dual" -> False], 1} -> 
              SparseArray[Automatic, {2}, 0, {1, {{0, 1}, {{2}}}, {1}}]|>], 
           "Picture" -> "Schr\[ODoubleDot]dinger", "Label" -> "Computational",
            "ParameterSpec" -> {}|>]], "MixedStateQ" -> False, 
       "NameDimensions" -> {2, 2}, "Names" -> {
         Wolfram`QuantumFramework`QuditName[
          Wolfram`QuantumFramework`QuditName[0, "Dual" -> False], 
          Wolfram`QuantumFramework`QuditName[0, "Dual" -> True]], 
         Wolfram`QuantumFramework`QuditName[
          Wolfram`QuantumFramework`QuditName[0, "Dual" -> False], 
          Wolfram`QuantumFramework`QuditName[1, "Dual" -> True]], 
         Wolfram`QuantumFramework`QuditName[
          Wolfram`QuantumFramework`QuditName[1, "Dual" -> False], 
          Wolfram`QuantumFramework`QuditName[0, "Dual" -> True]], 
         Wolfram`QuantumFramework`QuditName[
          Wolfram`QuantumFramework`QuditName[1, "Dual" -> False], 
          Wolfram`QuantumFramework`QuditName[1, "Dual" -> True]]}, "Norm" -> 
       2^Rational[1, 2], "NormalElementNames" -> {{
          Wolfram`QuantumFramework`QuditName[0, "Dual" -> False], 
          Wolfram`QuantumFramework`QuditName[0, "Dual" -> True]}, {
          Wolfram`QuantumFramework`QuditName[0, "Dual" -> False], 
          Wolfram`QuantumFramework`QuditName[1, "Dual" -> True]}, {
          Wolfram`QuantumFramework`QuditName[1, "Dual" -> False], 
          Wolfram`QuantumFramework`QuditName[0, "Dual" -> True]}, {
          Wolfram`QuantumFramework`QuditName[1, "Dual" -> False], 
          Wolfram`QuantumFramework`QuditName[1, "Dual" -> True]}}, 
       "NormalizedAmplitudes" -> <|Wolfram`QuantumFramework`QuditName[
           Wolfram`QuantumFramework`QuditName[0, "Dual" -> False], 
           Wolfram`QuantumFramework`QuditName[0, "Dual" -> True]] -> 
         Rational[1, 2], Wolfram`QuantumFramework`QuditName[
           Wolfram`QuantumFramework`QuditName[0, "Dual" -> False], 
           Wolfram`QuantumFramework`QuditName[1, "Dual" -> True]] -> 
         Rational[1, 2], Wolfram`QuantumFramework`QuditName[
           Wolfram`QuantumFramework`QuditName[1, "Dual" -> False], 
           Wolfram`QuantumFramework`QuditName[0, "Dual" -> True]] -> 
         Rational[1, 2], Wolfram`QuantumFramework`QuditName[
           Wolfram`QuantumFramework`QuditName[1, "Dual" -> False], 
           Wolfram`QuantumFramework`QuditName[1, "Dual" -> True]] -> 
         Rational[-1, 2]|>, "NormalizedDensityMatrix" -> 
       SparseArray[
        Automatic, {4, 4}, 0, {
         1, {{0, 4, 8, 12, 16}, {{1}, {2}, {3}, {4}, {1}, {2}, {3}, {4}, {
           1}, {2}, {3}, {4}, {1}, {2}, {3}, {4}}}, {
          Rational[1, 4], Rational[1, 4], Rational[1, 4], Rational[-1, 4], 
           Rational[1, 4], Rational[1, 4], Rational[1, 4], Rational[-1, 4], 
           Rational[1, 4], Rational[1, 4], Rational[1, 4], Rational[-1, 4], 
           Rational[-1, 4], Rational[-1, 4], Rational[-1, 4], Rational[
           1, 4]}}], 
       "NormalizedOperator" -> <|Wolfram`QuantumFramework`QuditName[
           Wolfram`QuantumFramework`QuditName[{0, 0}, "Dual" -> False], 
           Wolfram`QuantumFramework`QuditName[0, "Dual" -> True]] -> 
         Rational[1, 4], Wolfram`QuantumFramework`QuditName[
           Wolfram`QuantumFramework`QuditName[{0, 0}, "Dual" -> False], 
           Wolfram`QuantumFramework`QuditName[1, "Dual" -> True]] -> 
         Rational[1, 4], Wolfram`QuantumFramework`QuditName[
           Wolfram`QuantumFramework`QuditName[{0, 1}, "Dual" -> False], 
           Wolfram`QuantumFramework`QuditName[0, "Dual" -> True]] -> 
         Rational[1, 4], Wolfram`QuantumFramework`QuditName[
           Wolfram`QuantumFramework`QuditName[{0, 1}, "Dual" -> False], 
           Wolfram`QuantumFramework`QuditName[1, "Dual" -> True]] -> 
         Rational[-1, 4], Wolfram`QuantumFramework`QuditName[
           Wolfram`QuantumFramework`QuditName[{0, 2}, "Dual" -> False], 
           Wolfram`QuantumFramework`QuditName[0, "Dual" -> True]] -> 
         Rational[1, 4], Wolfram`QuantumFramework`QuditName[
           Wolfram`QuantumFramework`QuditName[{0, 2}, "Dual" -> False], 
           Wolfram`QuantumFramework`QuditName[1, "Dual" -> True]] -> 
         Rational[1, 4], Wolfram`QuantumFramework`QuditName[
           Wolfram`QuantumFramework`QuditName[{0, 3}, "Dual" -> False], 
           Wolfram`QuantumFramework`QuditName[0, "Dual" -> True]] -> 
         Rational[1, 4], Wolfram`QuantumFramework`QuditName[
           Wolfram`QuantumFramework`QuditName[{0, 3}, "Dual" -> False], 
           Wolfram`QuantumFramework`QuditName[1, "Dual" -> True]] -> 
         Rational[-1, 4], Wolfram`QuantumFramework`QuditName[
           Wolfram`QuantumFramework`QuditName[{0, 4}, "Dual" -> False], 
           Wolfram`QuantumFramework`QuditName[0, "Dual" -> True]] -> 
         Rational[1, 4], Wolfram`QuantumFramework`QuditName[
           Wolfram`QuantumFramework`QuditName[{0, 4}, "Dual" -> False], 
           Wolfram`QuantumFramework`QuditName[1, "Dual" -> True]] -> 
         Rational[1, 4], Wolfram`QuantumFramework`QuditName[
           Wolfram`QuantumFramework`QuditName[{0, 5}, "Dual" -> False], 
           Wolfram`QuantumFramework`QuditName[0, "Dual" -> True]] -> 
         Rational[1, 4], Wolfram`QuantumFramework`QuditName[
           Wolfram`QuantumFramework`QuditName[{0, 5}, "Dual" -> False], 
           Wolfram`QuantumFramework`QuditName[1, "Dual" -> True]] -> 
         Rational[-1, 4], Wolfram`QuantumFramework`QuditName[
           Wolfram`QuantumFramework`QuditName[{0, 6}, "Dual" -> False], 
           Wolfram`QuantumFramework`QuditName[0, "Dual" -> True]] -> 
         Rational[-1, 4], Wolfram`QuantumFramework`QuditName[
           Wolfram`QuantumFramework`QuditName[{0, 6}, "Dual" -> False], 
           Wolfram`QuantumFramework`QuditName[1, "Dual" -> True]] -> 
         Rational[-1, 4], Wolfram`QuantumFramework`QuditName[
           Wolfram`QuantumFramework`QuditName[{0, 7}, "Dual" -> False], 
           Wolfram`QuantumFramework`QuditName[0, "Dual" -> True]] -> 
         Rational[-1, 4], Wolfram`QuantumFramework`QuditName[
           Wolfram`QuantumFramework`QuditName[{0, 7}, "Dual" -> False], 
           Wolfram`QuantumFramework`QuditName[1, "Dual" -> True]] -> 
         Rational[1, 4], Wolfram`QuantumFramework`QuditName[
           Wolfram`QuantumFramework`QuditName[{0, 8}, "Dual" -> False], 
           Wolfram`QuantumFramework`QuditName[0, "Dual" -> True]] -> 0, 
         Wolfram`QuantumFramework`QuditName[
           Wolfram`QuantumFramework`QuditName[{0, 8}, "Dual" -> False], 
           Wolfram`QuantumFramework`QuditName[1, "Dual" -> True]] -> 0, 
         Wolfram`QuantumFramework`QuditName[
           Wolfram`QuantumFramework`QuditName[{0, 9}, "Dual" -> False], 
           Wolfram`QuantumFramework`QuditName[0, "Dual" -> True]] -> 0, 
         Wolfram`QuantumFramework`QuditName[
           Wolfram`QuantumFramework`QuditName[{0, 9}, "Dual" -> False], 
           Wolfram`QuantumFramework`QuditName[1, "Dual" -> True]] -> 0, 
         Wolfram`QuantumFramework`QuditName[
           Wolfram`QuantumFramework`QuditName[{0, 10}, "Dual" -> False], 
           Wolfram`QuantumFramework`QuditName[0, "Dual" -> True]] -> 0, 
         Wolfram`QuantumFramework`QuditName[
           Wolfram`QuantumFramework`QuditName[{0, 10}, "Dual" -> False], 
           Wolfram`QuantumFramework`QuditName[1, "Dual" -> True]] -> 0, 
         Wolfram`QuantumFramework`QuditName[
           Wolfram`QuantumFramework`QuditName[{0, 11}, "Dual" -> False], 
           Wolfram`QuantumFramework`QuditName[0, "Dual" -> True]] -> 0, 
         Wolfram`QuantumFramework`QuditName[
           Wolfram`QuantumFramework`QuditName[{0, 11}, "Dual" -> False], 
           Wolfram`QuantumFramework`QuditName[1, "Dual" -> True]] -> 0, 
         Wolfram`QuantumFramework`QuditName[
           Wolfram`QuantumFramework`QuditName[{1, 0}, "Dual" -> False], 
           Wolfram`QuantumFramework`QuditName[0, "Dual" -> True]] -> 0, 
         Wolfram`QuantumFramework`QuditName[
           Wolfram`QuantumFramework`QuditName[{1, 0}, "Dual" -> False], 
           Wolfram`QuantumFramework`QuditName[1, "Dual" -> True]] -> 0, 
         Wolfram`QuantumFramework`QuditName[
           Wolfram`QuantumFramework`QuditName[{1, 1}, "Dual" -> False], 
           Wolfram`QuantumFramework`QuditName[0, "Dual" -> True]] -> 0, 
         Wolfram`QuantumFramework`QuditName[
           Wolfram`QuantumFramework`QuditName[{1, 1}, "Dual" -> False], 
           Wolfram`QuantumFramework`QuditName[1, "Dual" -> True]] -> 0, 
         Wolfram`QuantumFramework`QuditName[
           Wolfram`QuantumFramework`QuditName[{1, 2}, "Dual" -> False], 
           Wolfram`QuantumFramework`QuditName[0, "Dual" -> True]] -> 0, 
         Wolfram`QuantumFramework`QuditName[
           Wolfram`QuantumFramework`QuditName[{1, 2}, "Dual" -> False], 
           Wolfram`QuantumFramework`QuditName[1, "Dual" -> True]] -> 0, 
         Wolfram`QuantumFramework`QuditName[
           Wolfram`QuantumFramework`QuditName[{1, 3}, "Dual" -> False], 
           Wolfram`QuantumFramework`QuditName[0, "Dual" -> True]] -> 0, 
         Wolfram`QuantumFramework`QuditName[
           Wolfram`QuantumFramework`QuditName[{1, 3}, "Dual" -> False], 
           Wolfram`QuantumFramework`QuditName[1, "Dual" -> True]] -> 0, 
         Wolfram`QuantumFramework`QuditName[
           Wolfram`QuantumFramework`QuditName[{1, 4}, "Dual" -> False], 
           Wolfram`QuantumFramework`QuditName[0, "Dual" -> True]] -> 0, 
         Wolfram`QuantumFramework`QuditName[
           Wolfram`QuantumFramework`QuditName[{1, 4}, "Dual" -> False], 
           Wolfram`QuantumFramework`QuditName[1, "Dual" -> True]] -> 0, 
         Wolfram`QuantumFramework`QuditName[
           Wolfram`QuantumFramework`QuditName[{1, 5}, "Dual" -> False], 
           Wolfram`QuantumFramework`QuditName[0, "Dual" -> True]] -> 0, 
         Wolfram`QuantumFramework`QuditName[
           Wolfram`QuantumFramework`QuditName[{1, 5}, "Dual" -> False], 
           Wolfram`QuantumFramework`QuditName[1, "Dual" -> True]] -> 0, 
         Wolfram`QuantumFramework`QuditName[
           Wolfram`QuantumFramework`QuditName[{1, 6}, "Dual" -> False], 
           Wolfram`QuantumFramework`QuditName[0, "Dual" -> True]] -> 0, 
         Wolfram`QuantumFramework`QuditName[
           Wolfram`QuantumFramework`QuditName[{1, 6}, "Dual" -> False], 
           Wolfram`QuantumFramework`QuditName[1, "Dual" -> True]] -> 0, 
         Wolfram`QuantumFramework`QuditName[
           Wolfram`QuantumFramework`QuditName[{1, 7}, "Dual" -> False], 
           Wolfram`QuantumFramework`QuditName[0, "Dual" -> True]] -> 0, 
         Wolfram`QuantumFramework`QuditName[
           Wolfram`QuantumFramework`QuditName[{1, 7}, "Dual" -> False], 
           Wolfram`QuantumFramework`QuditName[1, "Dual" -> True]] -> 0, 
         Wolfram`QuantumFramework`QuditName[
           Wolfram`QuantumFramework`QuditName[{1, 8}, "Dual" -> False], 
           Wolfram`QuantumFramework`QuditName[0, "Dual" -> True]] -> 0, 
         Wolfram`QuantumFramework`QuditName[
           Wolfram`QuantumFramework`QuditName[{1, 8}, "Dual" -> False], 
           Wolfram`QuantumFramework`QuditName[1, "Dual" -> True]] -> 0, 
         Wolfram`QuantumFramework`QuditName[
           Wolfram`QuantumFramework`QuditName[{1, 9}, "Dual" -> False], 
           Wolfram`QuantumFramework`QuditName[0, "Dual" -> True]] -> 0, 
         Wolfram`QuantumFramework`QuditName[
           Wolfram`QuantumFramework`QuditName[{1, 9}, "Dual" -> False], 
           Wolfram`QuantumFramework`QuditName[1, "Dual" -> True]] -> 0, 
         Wolfram`QuantumFramework`QuditName[
           Wolfram`QuantumFramework`QuditName[{1, 10}, "Dual" -> False], 
           Wolfram`QuantumFramework`QuditName[0, "Dual" -> True]] -> 0, 
         Wolfram`QuantumFramework`QuditName[
           Wolfram`QuantumFramework`QuditName[{1, 10}, "Dual" -> False], 
           Wolfram`QuantumFramework`QuditName[1, "Dual" -> True]] -> 0, 
         Wolfram`QuantumFramework`QuditName[
           Wolfram`QuantumFramework`QuditName[{1, 11}, "Dual" -> False], 
           Wolfram`QuantumFramework`QuditName[0, "Dual" -> True]] -> 0, 
         Wolfram`QuantumFramework`QuditName[
           Wolfram`QuantumFramework`QuditName[{1, 11}, "Dual" -> False], 
           Wolfram`QuantumFramework`QuditName[1, "Dual" -> True]] -> 0|>, 
       "NormalizedProjector" -> Wolfram`QuantumFramework`QuantumState[
         SparseArray[
         Automatic, {48}, 0, {
          1, {{0, 16}, {{1}, {2}, {3}, {4}, {5}, {6}, {7}, {8}, {9}, {10}, {
            11}, {12}, {13}, {14}, {15}, {16}}}, {
            Rational[1, 4], 
            Rational[1, 4], 
            Rational[1, 4], 
            Rational[-1, 4], 
            Rational[1, 4], 
            Rational[1, 4], 
            Rational[1, 4], 
            Rational[-1, 4], 
            Rational[1, 4], 
            Rational[1, 4], 
            Rational[1, 4], 
            Rational[-1, 4], 
            Rational[-1, 4], 
            Rational[-1, 4], 
            Rational[-1, 4], 
            Rational[1, 4]}}], 
         Wolfram`QuantumFramework`QuantumBasis[<|
          "Output" -> Wolfram`QuantumFramework`QuditBasis[<|{
                Wolfram`QuantumFramework`QuditName[0, "Dual" -> False], 1} -> 
              SparseArray[Automatic, {2}, 0, {1, {{0, 1}, {{1}}}, {1}}], {
                Wolfram`QuantumFramework`QuditName[1, "Dual" -> False], 1} -> 
              SparseArray[Automatic, {2}, 0, {1, {{0, 1}, {{2}}}, {1}}], {
                Wolfram`QuantumFramework`QuditName[0, "Dual" -> False], 2} -> 
              SparseArray[Automatic, {12}, 0, {1, {{0, 1}, {{1}}}, {1}}], {
                Wolfram`QuantumFramework`QuditName[1, "Dual" -> False], 2} -> 
              SparseArray[Automatic, {12}, 0, {1, {{0, 1}, {{2}}}, {1}}], {
                Wolfram`QuantumFramework`QuditName[2, "Dual" -> False], 2} -> 
              SparseArray[Automatic, {12}, 0, {1, {{0, 1}, {{3}}}, {1}}], {
                Wolfram`QuantumFramework`QuditName[3, "Dual" -> False], 2} -> 
              SparseArray[Automatic, {12}, 0, {1, {{0, 1}, {{4}}}, {1}}], {
                Wolfram`QuantumFramework`QuditName[4, "Dual" -> False], 2} -> 
              SparseArray[Automatic, {12}, 0, {1, {{0, 1}, {{5}}}, {1}}], {
                Wolfram`QuantumFramework`QuditName[5, "Dual" -> False], 2} -> 
              SparseArray[Automatic, {12}, 0, {1, {{0, 1}, {{6}}}, {1}}], {
                Wolfram`QuantumFramework`QuditName[6, "Dual" -> False], 2} -> 
              SparseArray[Automatic, {12}, 0, {1, {{0, 1}, {{7}}}, {1}}], {
                Wolfram`QuantumFramework`QuditName[7, "Dual" -> False], 2} -> 
              SparseArray[Automatic, {12}, 0, {1, {{0, 1}, {{8}}}, {1}}], {
                Wolfram`QuantumFramework`QuditName[8, "Dual" -> False], 2} -> 
              SparseArray[Automatic, {12}, 0, {1, {{0, 1}, {{9}}}, {1}}], {
                Wolfram`QuantumFramework`QuditName[9, "Dual" -> False], 2} -> 
              SparseArray[Automatic, {12}, 0, {1, {{0, 1}, {{10}}}, {1}}], {
                Wolfram`QuantumFramework`QuditName[10, "Dual" -> False], 2} -> 
              SparseArray[Automatic, {12}, 0, {1, {{0, 1}, {{11}}}, {1}}], {
                Wolfram`QuantumFramework`QuditName[11, "Dual" -> False], 2} -> 
              SparseArray[Automatic, {12}, 0, {1, {{0, 1}, {{12}}}, {1}}]|>], 
           "Input" -> Wolfram`QuantumFramework`QuditBasis[<|{
                Wolfram`QuantumFramework`QuditName[0, "Dual" -> True], 1} -> 
              SparseArray[Automatic, {2}, 0, {1, {{0, 1}, {{1}}}, {1}}], {
                Wolfram`QuantumFramework`QuditName[1, "Dual" -> True], 1} -> 
              SparseArray[Automatic, {2}, 0, {1, {{0, 1}, {{2}}}, {1}}]|>], 
           "Picture" -> "Schr\[ODoubleDot]dinger", "Label" -> 
           CircleTimes["H", None], "ParameterSpec" -> {}|>]], "NormalizedQ" -> 
       False, "NormalizedState" -> Wolfram`QuantumFramework`QuantumState[
         SparseArray[Automatic, {4}, 0, {1, {{0, 4}, {{1}, {2}, {3}, {4}}}, {
            Rational[1, 2], 
            Rational[1, 2], 
            Rational[1, 2], 
            Rational[-1, 2]}}], 
         Wolfram`QuantumFramework`QuantumBasis[<|
          "Input" -> Wolfram`QuantumFramework`QuditBasis[<|{
                Wolfram`QuantumFramework`QuditName[0, "Dual" -> True], 1} -> 
              SparseArray[Automatic, {2}, 0, {1, {{0, 1}, {{1}}}, {1}}], {
                Wolfram`QuantumFramework`QuditName[1, "Dual" -> True], 1} -> 
              SparseArray[Automatic, {2}, 0, {1, {{0, 1}, {{2}}}, {1}}]|>], 
           "Output" -> Wolfram`QuantumFramework`QuditBasis[<|{
                Wolfram`QuantumFramework`QuditName[0, "Dual" -> False], 1} -> 
              SparseArray[Automatic, {2}, 0, {1, {{0, 1}, {{1}}}, {1}}], {
                Wolfram`QuantumFramework`QuditName[1, "Dual" -> False], 1} -> 
              SparseArray[Automatic, {2}, 0, {1, {{0, 1}, {{2}}}, {1}}]|>], 
           "Picture" -> "Schr\[ODoubleDot]dinger", "Label" -> "H", 
           "ParameterSpec" -> {}|>]], "NormalizedStateVector" -> 
       SparseArray[Automatic, {4}, 0, {1, {{0, 4}, {{1}, {2}, {3}, {4}}}, {
           Rational[1, 2], 
           Rational[1, 2], 
           Rational[1, 2], 
           Rational[-1, 2]}}], 
       "Operator" -> <|Wolfram`QuantumFramework`QuditName[
           Wolfram`QuantumFramework`QuditName[0, "Dual" -> False], 
           Wolfram`QuantumFramework`QuditName[0, "Dual" -> True]] -> 
         2^Rational[-1, 2], Wolfram`QuantumFramework`QuditName[
           Wolfram`QuantumFramework`QuditName[0, "Dual" -> False], 
           Wolfram`QuantumFramework`QuditName[1, "Dual" -> True]] -> 
         2^Rational[-1, 2], Wolfram`QuantumFramework`QuditName[
           Wolfram`QuantumFramework`QuditName[1, "Dual" -> False], 
           Wolfram`QuantumFramework`QuditName[0, "Dual" -> True]] -> 
         2^Rational[-1, 2], Wolfram`QuantumFramework`QuditName[
           Wolfram`QuantumFramework`QuditName[1, "Dual" -> False], 
           Wolfram`QuantumFramework`QuditName[1, "Dual" -> True]] -> -2^
           Rational[-1, 2]|>, "Order" -> {{1}, {1}}, "Ordered" -> 
       Wolfram`QuantumFramework`QuantumOperator[
         Wolfram`QuantumFramework`QuantumState[
          SparseArray[
          Automatic, {4}, 0, {
           1, {{0, 4}, {{1}, {2}, {3}, {4}}}, {
            2^Rational[-1, 2], 2^Rational[-1, 2], 2^
             Rational[-1, 2], -2^Rational[-1, 2]}}], 
          
          Wolfram`QuantumFramework`QuantumBasis[<|
           "Input" -> Wolfram`QuantumFramework`QuditBasis[<|{
                 Wolfram`QuantumFramework`QuditName[0, "Dual" -> False], 1} -> 
               SparseArray[Automatic, {2}, 0, {1, {{0, 1}, {{1}}}, {1}}], {
                 Wolfram`QuantumFramework`QuditName[1, "Dual" -> False], 1} -> 
               SparseArray[Automatic, {2}, 0, {1, {{0, 1}, {{2}}}, {1}}]|>], 
            "Output" -> Wolfram`QuantumFramework`QuditBasis[<|{
                 Wolfram`QuantumFramework`QuditName[0, "Dual" -> False], 1} -> 
               SparseArray[Automatic, {2}, 0, {1, {{0, 1}, {{1}}}, {1}}], {
                 Wolfram`QuantumFramework`QuditName[1, "Dual" -> False], 1} -> 
               SparseArray[Automatic, {2}, 0, {1, {{0, 1}, {{2}}}, {1}}]|>], 
            "Picture" -> "Schr\[ODoubleDot]dinger", "Label" -> "H", 
            "ParameterSpec" -> {}|>]], {{1}, {1}}], "OrderedInput" -> 
       Wolfram`QuantumFramework`QuantumOperator[
         Wolfram`QuantumFramework`QuantumState[
          SparseArray[
          Automatic, {4}, 0, {
           1, {{0, 4}, {{1}, {2}, {3}, {4}}}, {
            2^Rational[-1, 2], 2^Rational[-1, 2], 2^
             Rational[-1, 2], -2^Rational[-1, 2]}}], 
          
          Wolfram`QuantumFramework`QuantumBasis[<|
           "Input" -> Wolfram`QuantumFramework`QuditBasis[<|{
                 Wolfram`QuantumFramework`QuditName[0, "Dual" -> False], 1} -> 
               SparseArray[Automatic, {2}, 0, {1, {{0, 1}, {{1}}}, {1}}], {
                 Wolfram`QuantumFramework`QuditName[1, "Dual" -> False], 1} -> 
               SparseArray[Automatic, {2}, 0, {1, {{0, 1}, {{2}}}, {1}}]|>], 
            "Output" -> Wolfram`QuantumFramework`QuditBasis[<|{
                 Wolfram`QuantumFramework`QuditName[0, "Dual" -> False], 1} -> 
               SparseArray[Automatic, {2}, 0, {1, {{0, 1}, {{1}}}, {1}}], {
                 Wolfram`QuantumFramework`QuditName[1, "Dual" -> False], 1} -> 
               SparseArray[Automatic, {2}, 0, {1, {{0, 1}, {{2}}}, {1}}]|>], 
            "Picture" -> "Schr\[ODoubleDot]dinger", "Label" -> "H", 
            "ParameterSpec" -> {}|>]], {{1}, {1}}], "OrderedMatrix" -> 
       SparseArray[
        Automatic, {2, 2}, 0, {
         1, {{0, 2, 4}, {{1}, {2}, {1}, {2}}}, {
          2^Rational[-1, 2], 2^Rational[-1, 2], 2^
           Rational[-1, 2], -2^Rational[-1, 2]}}], 
       "OrderedMatrixRepresentation" -> 
       SparseArray[
        Automatic, {2, 2}, 0, {
         1, {{0, 2, 4}, {{1}, {2}, {1}, {2}}}, {
          2^Rational[-1, 2], 2^Rational[-1, 2], 2^
           Rational[-1, 2], -2^Rational[-1, 2]}}], "OrderedOutput" -> 
       Wolfram`QuantumFramework`QuantumOperator[
         Wolfram`QuantumFramework`QuantumState[
          SparseArray[
          Automatic, {4}, 0, {
           1, {{0, 4}, {{1}, {2}, {3}, {4}}}, {
            2^Rational[-1, 2], 2^Rational[-1, 2], 2^
             Rational[-1, 2], -2^Rational[-1, 2]}}], 
          
          Wolfram`QuantumFramework`QuantumBasis[<|
           "Input" -> Wolfram`QuantumFramework`QuditBasis[<|{
                 Wolfram`QuantumFramework`QuditName[0, "Dual" -> True], 1} -> 
               SparseArray[Automatic, {2}, 0, {1, {{0, 1}, {{1}}}, {1}}], {
                 Wolfram`QuantumFramework`QuditName[1, "Dual" -> True], 1} -> 
               SparseArray[Automatic, {2}, 0, {1, {{0, 1}, {{2}}}, {1}}]|>], 
            "Output" -> Wolfram`QuantumFramework`QuditBasis[<|{
                 Wolfram`QuantumFramework`QuditName[0, "Dual" -> False], 1} -> 
               SparseArray[Automatic, {2}, 0, {1, {{0, 1}, {{1}}}, {1}}], {
                 Wolfram`QuantumFramework`QuditName[1, "Dual" -> False], 1} -> 
               SparseArray[Automatic, {2}, 0, {1, {{0, 1}, {{2}}}, {1}}]|>], 
            "Picture" -> "Schr\[ODoubleDot]dinger", "Label" -> "H", 
            "ParameterSpec" -> {}|>]], {{1}, {1}}], "OrderedTensor" -> 
       SparseArray[
        Automatic, {2, 2}, 0, {
         1, {{0, 2, 4}, {{1}, {2}, {1}, {2}}}, {
          2^Rational[-1, 2], 2^Rational[-1, 2], 2^
           Rational[-1, 2], -2^Rational[-1, 2]}}], 
       "OrderedTensorRepresentation" -> 
       SparseArray[
        Automatic, {2, 2}, 0, {
         1, {{0, 2, 4}, {{1}, {2}, {1}, {2}}}, {
          2^Rational[-1, 2], 2^Rational[-1, 2], 2^
           Rational[-1, 2], -2^Rational[-1, 2]}}], 
       "OrthogonalElements" -> {{{1, 0}, {0, 0}}, {{0, 1}, {0, 0}}, {{0, 0}, {
        1, 0}}, {{0, 0}, {0, 1}}}, "Output" -> 
       Wolfram`QuantumFramework`QuditBasis[<|{
            Wolfram`QuantumFramework`QuditName[0, "Dual" -> False], 1} -> 
          SparseArray[Automatic, {2}, 0, {1, {{0, 1}, {{1}}}, {1}}], {
            Wolfram`QuantumFramework`QuditName[1, "Dual" -> False], 1} -> 
          SparseArray[Automatic, {2}, 0, {1, {{0, 1}, {{2}}}, {1}}]|>], 
       "OutputBasis" -> 
       Wolfram`QuantumFramework`QuantumBasis[<|
         "Input" -> Wolfram`QuantumFramework`QuditBasis[<|{
               
               Wolfram`QuantumFramework`QuditName[\[FormalCapitalI], "Dual" -> 
                False], 1} -> 1|>], "Output" -> 
          Wolfram`QuantumFramework`QuditBasis[<|{
               Wolfram`QuantumFramework`QuditName[0, "Dual" -> False], 1} -> 
             SparseArray[Automatic, {2}, 0, {1, {{0, 1}, {{1}}}, {1}}], {
               Wolfram`QuantumFramework`QuditName[1, "Dual" -> False], 1} -> 
             SparseArray[Automatic, {2}, 0, {1, {{0, 1}, {{2}}}, {1}}]|>], 
          "Picture" -> "Schr\[ODoubleDot]dinger", "Label" -> "H", 
          "ParameterSpec" -> {}|>], "OutputDimension" -> 2, 
       "OutputDimensions" -> {2}, "OutputElementDimensions" -> {2}, 
       "OutputElementNames" -> {
         Wolfram`QuantumFramework`QuditName[0, "Dual" -> False], 
         Wolfram`QuantumFramework`QuditName[1, "Dual" -> False]}, 
       "OutputElements" -> 
       SparseArray[
        Automatic, {2, 2}, 0, {1, {{0, 1, 2}, {{1}, {2}}}, {1, 1}}], 
       "OutputMatrix" -> 
       SparseArray[
        Automatic, {2, 2}, 0, {1, {{0, 1, 2}, {{1}, {2}}}, {1, 1}}], 
       "OutputNameDimension" -> 2, "OutputNameDimensions" -> {2}, 
       "OutputOrder" -> {1}, "OutputQuditOrder" -> {1}, "OutputQudits" -> 1, 
       "OutputRank" -> 1, "OutputSize" -> 2, "OutputTensor" -> 
       SparseArray[
        Automatic, {2, 2}, 0, {1, {{0, 1, 2}, {{1}, {2}}}, {1, 1}}], 
       "ParameterArity" -> 0, "Parameters" -> {}, "ParameterSpec" -> {}, 
       "Picture" -> "Schr\[ODoubleDot]dinger", "Probabilities" -> 
       SparseArray[Automatic, {4}, 0, {1, {{0, 4}, {{1}, {2}, {3}, {4}}}, {
           Rational[1, 4], 
           Rational[1, 4], 
           Rational[1, 4], 
           Rational[1, 4]}}], "Projector" -> 
       Wolfram`QuantumFramework`QuantumState[
         SparseArray[
         Automatic, {48}, 0, {
          1, {{0, 16}, {{1}, {2}, {3}, {4}, {5}, {6}, {7}, {8}, {9}, {10}, {
            11}, {12}, {13}, {14}, {15}, {16}}}, {
            Rational[1, 2], 
            Rational[1, 2], 
            Rational[1, 2], 
            Rational[-1, 2], 
            Rational[1, 2], 
            Rational[1, 2], 
            Rational[1, 2], 
            Rational[-1, 2], 
            Rational[1, 2], 
            Rational[1, 2], 
            Rational[1, 2], 
            Rational[-1, 2], 
            Rational[-1, 2], 
            Rational[-1, 2], 
            Rational[-1, 2], 
            Rational[1, 2]}}], 
         Wolfram`QuantumFramework`QuantumBasis[<|
          "Output" -> Wolfram`QuantumFramework`QuditBasis[<|{
                Wolfram`QuantumFramework`QuditName[0, "Dual" -> False], 1} -> 
              SparseArray[Automatic, {2}, 0, {1, {{0, 1}, {{1}}}, {1}}], {
                Wolfram`QuantumFramework`QuditName[1, "Dual" -> False], 1} -> 
              SparseArray[Automatic, {2}, 0, {1, {{0, 1}, {{2}}}, {1}}], {
                Wolfram`QuantumFramework`QuditName[0, "Dual" -> False], 2} -> 
              SparseArray[Automatic, {12}, 0, {1, {{0, 1}, {{1}}}, {1}}], {
                Wolfram`QuantumFramework`QuditName[1, "Dual" -> False], 2} -> 
              SparseArray[Automatic, {12}, 0, {1, {{0, 1}, {{2}}}, {1}}], {
                Wolfram`QuantumFramework`QuditName[2, "Dual" -> False], 2} -> 
              SparseArray[Automatic, {12}, 0, {1, {{0, 1}, {{3}}}, {1}}], {
                Wolfram`QuantumFramework`QuditName[3, "Dual" -> False], 2} -> 
              SparseArray[Automatic, {12}, 0, {1, {{0, 1}, {{4}}}, {1}}], {
                Wolfram`QuantumFramework`QuditName[4, "Dual" -> False], 2} -> 
              SparseArray[Automatic, {12}, 0, {1, {{0, 1}, {{5}}}, {1}}], {
                Wolfram`QuantumFramework`QuditName[5, "Dual" -> False], 2} -> 
              SparseArray[Automatic, {12}, 0, {1, {{0, 1}, {{6}}}, {1}}], {
                Wolfram`QuantumFramework`QuditName[6, "Dual" -> False], 2} -> 
              SparseArray[Automatic, {12}, 0, {1, {{0, 1}, {{7}}}, {1}}], {
                Wolfram`QuantumFramework`QuditName[7, "Dual" -> False], 2} -> 
              SparseArray[Automatic, {12}, 0, {1, {{0, 1}, {{8}}}, {1}}], {
                Wolfram`QuantumFramework`QuditName[8, "Dual" -> False], 2} -> 
              SparseArray[Automatic, {12}, 0, {1, {{0, 1}, {{9}}}, {1}}], {
                Wolfram`QuantumFramework`QuditName[9, "Dual" -> False], 2} -> 
              SparseArray[Automatic, {12}, 0, {1, {{0, 1}, {{10}}}, {1}}], {
                Wolfram`QuantumFramework`QuditName[10, "Dual" -> False], 2} -> 
              SparseArray[Automatic, {12}, 0, {1, {{0, 1}, {{11}}}, {1}}], {
                Wolfram`QuantumFramework`QuditName[11, "Dual" -> False], 2} -> 
              SparseArray[Automatic, {12}, 0, {1, {{0, 1}, {{12}}}, {1}}]|>], 
           "Input" -> Wolfram`QuantumFramework`QuditBasis[<|{
                Wolfram`QuantumFramework`QuditName[0, "Dual" -> True], 1} -> 
              SparseArray[Automatic, {2}, 0, {1, {{0, 1}, {{1}}}, {1}}], {
                Wolfram`QuantumFramework`QuditName[1, "Dual" -> True], 1} -> 
              SparseArray[Automatic, {2}, 0, {1, {{0, 1}, {{2}}}, {1}}]|>], 
           "Picture" -> "Schr\[ODoubleDot]dinger", "Label" -> 
           CircleTimes["H", None], "ParameterSpec" -> {}|>]], 
       "Projectors" -> {
        SparseArray[
         Automatic, {2, 2}, 0, {
          1, {{0, 2, 4}, {{1}, {2}, {1}, {2}}}, {(1 - 2^Rational[1, 2])^2/(
            1 + (-1 + 2^Rational[1, 2])^2), (1 - 2^Rational[1, 2])/(
            1 + (-1 + 2^Rational[1, 2])^2), (1 - 2^Rational[1, 2])/(
            1 + (-1 + 2^Rational[1, 2])^2), (
             1 + (-1 + 2^Rational[1, 2])^2)^(-1)}}], SparseArray[
         Automatic, {2, 2}, 0, {
          1, {{0, 2, 4}, {{1}, {2}, {1}, {2}}}, {(1 + 2^Rational[1, 2])^2/(
            1 + (1 + 2^Rational[1, 2])^2), (1 + 2^Rational[1, 2])/(
            1 + (1 + 2^Rational[1, 2])^2), (1 + 2^Rational[1, 2])/(
            1 + (1 + 2^Rational[1, 2])^2), (
             1 + (1 + 2^Rational[1, 2])^2)^(-1)}}]}, "Pure" -> 
       Wolfram`QuantumFramework`QuantumState[
         SparseArray[
         Automatic, {4}, 0, {
          1, {{0, 4}, {{1}, {2}, {3}, {4}}}, {
           2^Rational[-1, 2], 2^Rational[-1, 2], 2^
            Rational[-1, 2], -2^Rational[-1, 2]}}], 
         Wolfram`QuantumFramework`QuantumBasis[<|
          "Input" -> Wolfram`QuantumFramework`QuditBasis[<|{
                Wolfram`QuantumFramework`QuditName[0, "Dual" -> True], 1} -> 
              SparseArray[Automatic, {2}, 0, {1, {{0, 1}, {{1}}}, {1}}], {
                Wolfram`QuantumFramework`QuditName[1, "Dual" -> True], 1} -> 
              SparseArray[Automatic, {2}, 0, {1, {{0, 1}, {{2}}}, {1}}]|>], 
           "Output" -> Wolfram`QuantumFramework`QuditBasis[<|{
                Wolfram`QuantumFramework`QuditName[0, "Dual" -> False], 1} -> 
              SparseArray[Automatic, {2}, 0, {1, {{0, 1}, {{1}}}, {1}}], {
                Wolfram`QuantumFramework`QuditName[1, "Dual" -> False], 1} -> 
              SparseArray[Automatic, {2}, 0, {1, {{0, 1}, {{2}}}, {1}}]|>], 
           "Picture" -> "Schr\[ODoubleDot]dinger", "Label" -> "H", 
           "ParameterSpec" -> {}|>]], "PureEffects" -> {
         Wolfram`QuantumFramework`QuantumState[
          SparseArray[Automatic, {4}, 0, {1, {{0, 1}, {{1}}}, {1}}], 
          
          Wolfram`QuantumFramework`QuantumBasis[<|
           "Input" -> Wolfram`QuantumFramework`QuditBasis[<|{
                 Wolfram`QuantumFramework`QuditName[0, "Dual" -> True], 1} -> 
               SparseArray[Automatic, {2}, 0, {1, {{0, 1}, {{1}}}, {1}}], {
                 Wolfram`QuantumFramework`QuditName[1, "Dual" -> True], 1} -> 
               SparseArray[Automatic, {2}, 0, {1, {{0, 1}, {{2}}}, {1}}]|>], 
            "Output" -> Wolfram`QuantumFramework`QuditBasis[<|{
                 Wolfram`QuantumFramework`QuditName[0, "Dual" -> False], 1} -> 
               SparseArray[Automatic, {2}, 0, {1, {{0, 1}, {{1}}}, {1}}], {
                 Wolfram`QuantumFramework`QuditName[1, "Dual" -> False], 1} -> 
               SparseArray[Automatic, {2}, 0, {1, {{0, 1}, {{2}}}, {1}}]|>], 
            "Picture" -> "Schr\[ODoubleDot]dinger", "Label" -> "H", 
            "ParameterSpec" -> {}|>]], 
         Wolfram`QuantumFramework`QuantumState[
          SparseArray[Automatic, {4}, 0, {1, {{0, 1}, {{2}}}, {1}}], 
          
          Wolfram`QuantumFramework`QuantumBasis[<|
           "Input" -> Wolfram`QuantumFramework`QuditBasis[<|{
                 Wolfram`QuantumFramework`QuditName[0, "Dual" -> True], 1} -> 
               SparseArray[Automatic, {2}, 0, {1, {{0, 1}, {{1}}}, {1}}], {
                 Wolfram`QuantumFramework`QuditName[1, "Dual" -> True], 1} -> 
               SparseArray[Automatic, {2}, 0, {1, {{0, 1}, {{2}}}, {1}}]|>], 
            "Output" -> Wolfram`QuantumFramework`QuditBasis[<|{
                 Wolfram`QuantumFramework`QuditName[0, "Dual" -> False], 1} -> 
               SparseArray[Automatic, {2}, 0, {1, {{0, 1}, {{1}}}, {1}}], {
                 Wolfram`QuantumFramework`QuditName[1, "Dual" -> False], 1} -> 
               SparseArray[Automatic, {2}, 0, {1, {{0, 1}, {{2}}}, {1}}]|>], 
            "Picture" -> "Schr\[ODoubleDot]dinger", "Label" -> "H", 
            "ParameterSpec" -> {}|>]]}, "PureMaps" -> {{
          Wolfram`QuantumFramework`QuantumState[
           SparseArray[Automatic, {4}, 0, {1, {{0, 1}, {{1}}}, {1}}], 
           
           Wolfram`QuantumFramework`QuantumBasis[<|
            "Input" -> Wolfram`QuantumFramework`QuditBasis[<|{
                  Wolfram`QuantumFramework`QuditName[0, "Dual" -> True], 1} -> 
                SparseArray[Automatic, {2}, 0, {1, {{0, 1}, {{1}}}, {1}}], {
                  Wolfram`QuantumFramework`QuditName[1, "Dual" -> True], 1} -> 
                SparseArray[Automatic, {2}, 0, {1, {{0, 1}, {{2}}}, {1}}]|>], 
             "Output" -> Wolfram`QuantumFramework`QuditBasis[<|{
                  Wolfram`QuantumFramework`QuditName[0, "Dual" -> False], 1} -> 
                SparseArray[Automatic, {2}, 0, {1, {{0, 1}, {{1}}}, {1}}], {
                  Wolfram`QuantumFramework`QuditName[1, "Dual" -> False], 1} -> 
                SparseArray[Automatic, {2}, 0, {1, {{0, 1}, {{2}}}, {1}}]|>], 
             "Picture" -> "Schr\[ODoubleDot]dinger", "Label" -> "H", 
             "ParameterSpec" -> {}|>]], 
          Wolfram`QuantumFramework`QuantumState[
           SparseArray[Automatic, {4}, 0, {1, {{0, 1}, {{2}}}, {1}}], 
           
           Wolfram`QuantumFramework`QuantumBasis[<|
            "Input" -> Wolfram`QuantumFramework`QuditBasis[<|{
                  Wolfram`QuantumFramework`QuditName[0, "Dual" -> True], 1} -> 
                SparseArray[Automatic, {2}, 0, {1, {{0, 1}, {{1}}}, {1}}], {
                  Wolfram`QuantumFramework`QuditName[1, "Dual" -> True], 1} -> 
                SparseArray[Automatic, {2}, 0, {1, {{0, 1}, {{2}}}, {1}}]|>], 
             "Output" -> Wolfram`QuantumFramework`QuditBasis[<|{
                  Wolfram`QuantumFramework`QuditName[0, "Dual" -> False], 1} -> 
                SparseArray[Automatic, {2}, 0, {1, {{0, 1}, {{1}}}, {1}}], {
                  Wolfram`QuantumFramework`QuditName[1, "Dual" -> False], 1} -> 
                SparseArray[Automatic, {2}, 0, {1, {{0, 1}, {{2}}}, {1}}]|>], 
             "Picture" -> "Schr\[ODoubleDot]dinger", "Label" -> "H", 
             "ParameterSpec" -> {}|>]]}, {
          Wolfram`QuantumFramework`QuantumState[
           SparseArray[Automatic, {4}, 0, {1, {{0, 1}, {{3}}}, {1}}], 
           
           Wolfram`QuantumFramework`QuantumBasis[<|
            "Input" -> Wolfram`QuantumFramework`QuditBasis[<|{
                  Wolfram`QuantumFramework`QuditName[0, "Dual" -> True], 1} -> 
                SparseArray[Automatic, {2}, 0, {1, {{0, 1}, {{1}}}, {1}}], {
                  Wolfram`QuantumFramework`QuditName[1, "Dual" -> True], 1} -> 
                SparseArray[Automatic, {2}, 0, {1, {{0, 1}, {{2}}}, {1}}]|>], 
             "Output" -> Wolfram`QuantumFramework`QuditBasis[<|{
                  Wolfram`QuantumFramework`QuditName[0, "Dual" -> False], 1} -> 
                SparseArray[Automatic, {2}, 0, {1, {{0, 1}, {{1}}}, {1}}], {
                  Wolfram`QuantumFramework`QuditName[1, "Dual" -> False], 1} -> 
                SparseArray[Automatic, {2}, 0, {1, {{0, 1}, {{2}}}, {1}}]|>], 
             "Picture" -> "Schr\[ODoubleDot]dinger", "Label" -> "H", 
             "ParameterSpec" -> {}|>]], 
          Wolfram`QuantumFramework`QuantumState[
           SparseArray[Automatic, {4}, 0, {1, {{0, 1}, {{4}}}, {1}}], 
           
           Wolfram`QuantumFramework`QuantumBasis[<|
            "Input" -> Wolfram`QuantumFramework`QuditBasis[<|{
                  Wolfram`QuantumFramework`QuditName[0, "Dual" -> True], 1} -> 
                SparseArray[Automatic, {2}, 0, {1, {{0, 1}, {{1}}}, {1}}], {
                  Wolfram`QuantumFramework`QuditName[1, "Dual" -> True], 1} -> 
                SparseArray[Automatic, {2}, 0, {1, {{0, 1}, {{2}}}, {1}}]|>], 
             "Output" -> Wolfram`QuantumFramework`QuditBasis[<|{
                  Wolfram`QuantumFramework`QuditName[0, "Dual" -> False], 1} -> 
                SparseArray[Automatic, {2}, 0, {1, {{0, 1}, {{1}}}, {1}}], {
                  Wolfram`QuantumFramework`QuditName[1, "Dual" -> False], 1} -> 
                SparseArray[Automatic, {2}, 0, {1, {{0, 1}, {{2}}}, {1}}]|>], 
             "Picture" -> "Schr\[ODoubleDot]dinger", "Label" -> "H", 
             "ParameterSpec" -> {}|>]]}}, "PureStateQ" -> True, "PureStates" -> {
         Wolfram`QuantumFramework`QuantumState[
          SparseArray[Automatic, {4}, 0, {1, {{0, 1}, {{1}}}, {1}}], 
          
          Wolfram`QuantumFramework`QuantumBasis[<|
           "Input" -> Wolfram`QuantumFramework`QuditBasis[<|{
                 Wolfram`QuantumFramework`QuditName[0, "Dual" -> True], 1} -> 
               SparseArray[Automatic, {2}, 0, {1, {{0, 1}, {{1}}}, {1}}], {
                 Wolfram`QuantumFramework`QuditName[1, "Dual" -> True], 1} -> 
               SparseArray[Automatic, {2}, 0, {1, {{0, 1}, {{2}}}, {1}}]|>], 
            "Output" -> Wolfram`QuantumFramework`QuditBasis[<|{
                 Wolfram`QuantumFramework`QuditName[0, "Dual" -> False], 1} -> 
               SparseArray[Automatic, {2}, 0, {1, {{0, 1}, {{1}}}, {1}}], {
                 Wolfram`QuantumFramework`QuditName[1, "Dual" -> False], 1} -> 
               SparseArray[Automatic, {2}, 0, {1, {{0, 1}, {{2}}}, {1}}]|>], 
            "Picture" -> "Schr\[ODoubleDot]dinger", "Label" -> "H", 
            "ParameterSpec" -> {}|>]], 
         Wolfram`QuantumFramework`QuantumState[
          SparseArray[Automatic, {4}, 0, {1, {{0, 1}, {{2}}}, {1}}], 
          
          Wolfram`QuantumFramework`QuantumBasis[<|
           "Input" -> Wolfram`QuantumFramework`QuditBasis[<|{
                 Wolfram`QuantumFramework`QuditName[0, "Dual" -> True], 1} -> 
               SparseArray[Automatic, {2}, 0, {1, {{0, 1}, {{1}}}, {1}}], {
                 Wolfram`QuantumFramework`QuditName[1, "Dual" -> True], 1} -> 
               SparseArray[Automatic, {2}, 0, {1, {{0, 1}, {{2}}}, {1}}]|>], 
            "Output" -> Wolfram`QuantumFramework`QuditBasis[<|{
                 Wolfram`QuantumFramework`QuditName[0, "Dual" -> False], 1} -> 
               SparseArray[Automatic, {2}, 0, {1, {{0, 1}, {{1}}}, {1}}], {
                 Wolfram`QuantumFramework`QuditName[1, "Dual" -> False], 1} -> 
               SparseArray[Automatic, {2}, 0, {1, {{0, 1}, {{2}}}, {1}}]|>], 
            "Picture" -> "Schr\[ODoubleDot]dinger", "Label" -> "H", 
            "ParameterSpec" -> {}|>]]}, "Purity" -> 1, "QuantumOperator" -> 
       Wolfram`QuantumFramework`QuantumOperator[
         Wolfram`QuantumFramework`QuantumState[
          SparseArray[
          Automatic, {4}, 0, {
           1, {{0, 4}, {{1}, {2}, {3}, {4}}}, {
            2^Rational[-1, 2], 2^Rational[-1, 2], 2^
             Rational[-1, 2], -2^Rational[-1, 2]}}], 
          
          Wolfram`QuantumFramework`QuantumBasis[<|
           "Input" -> Wolfram`QuantumFramework`QuditBasis[<|{
                 Wolfram`QuantumFramework`QuditName[0, "Dual" -> True], 1} -> 
               SparseArray[Automatic, {2}, 0, {1, {{0, 1}, {{1}}}, {1}}], {
                 Wolfram`QuantumFramework`QuditName[1, "Dual" -> True], 1} -> 
               SparseArray[Automatic, {2}, 0, {1, {{0, 1}, {{2}}}, {1}}]|>], 
            "Output" -> Wolfram`QuantumFramework`QuditBasis[<|{
                 Wolfram`QuantumFramework`QuditName[0, "Dual" -> False], 1} -> 
               SparseArray[Automatic, {2}, 0, {1, {{0, 1}, {{1}}}, {1}}], {
                 Wolfram`QuantumFramework`QuditName[1, "Dual" -> False], 1} -> 
               SparseArray[Automatic, {2}, 0, {1, {{0, 1}, {{2}}}, {1}}]|>], 
            "Picture" -> "Schr\[ODoubleDot]dinger", "Label" -> "H", 
            "ParameterSpec" -> {}|>]], {{1}, {1}}], "QuditBasis" -> 
       Wolfram`QuantumFramework`QuditBasis[<|{
            Wolfram`QuantumFramework`QuditName[0, "Dual" -> False], 1} -> 
          SparseArray[Automatic, {2}, 0, {1, {{0, 1}, {{1}}}, {1}}], {
            Wolfram`QuantumFramework`QuditName[1, "Dual" -> False], 1} -> 
          SparseArray[Automatic, {2}, 0, {1, {{0, 1}, {{2}}}, {1}}], {
            Wolfram`QuantumFramework`QuditName[0, "Dual" -> True], 2} -> 
          SparseArray[Automatic, {2}, 0, {1, {{0, 1}, {{1}}}, {1}}], {
            Wolfram`QuantumFramework`QuditName[1, "Dual" -> True], 2} -> 
          SparseArray[Automatic, {2}, 0, {1, {{0, 1}, {{2}}}, {1}}]|>], 
       "Qudits" -> 2, "Range" -> 1, "Rank" -> 2, "SchmidtBasis" -> 
       Wolfram`QuantumFramework`QuantumOperator[
         Wolfram`QuantumFramework`QuantumState[
          SparseArray[Automatic, {4}, 0, {1, {{0, 2}, {{1}, {2}}}, {1, 1}}], 
          
          Wolfram`QuantumFramework`QuantumBasis[<|
           "Input" -> Wolfram`QuantumFramework`QuditBasis[<|{
                 Wolfram`QuantumFramework`QuditName[
                  Subscript["v", 1], "Dual" -> False], 1} -> 
               SparseArray[Automatic, {2}, 0, {1, {{0, 1}, {{2}}}, {1}}], {
                 Wolfram`QuantumFramework`QuditName[
                  Subscript["v", 2], "Dual" -> False], 1} -> 
               SparseArray[Automatic, {2}, 0, {1, {{0, 1}, {{1}}}, {1}}]|>], 
            "Output" -> Wolfram`QuantumFramework`QuditBasis[<|{
                 Wolfram`QuantumFramework`QuditName[
                  Subscript["u", 1], "Dual" -> False], 1} -> 
               SparseArray[
                Automatic, {2}, 0, {
                 1, {{0, 2}, {{1}, {2}}}, {
                  2^Rational[-1, 2], -2^Rational[-1, 2]}}], {
                 Wolfram`QuantumFramework`QuditName[
                  Subscript["u", 2], "Dual" -> False], 1} -> 
               SparseArray[
                Automatic, {2}, 0, {
                 1, {{0, 2}, {{1}, {2}}}, {
                  2^Rational[-1, 2], 2^Rational[-1, 2]}}]|>], "Picture" -> 
            "Schr\[ODoubleDot]dinger", "Label" -> "Computational", 
            "ParameterSpec" -> {}|>]], {{1}, {1}}], "Size" -> 4, "Sort" -> 
       Wolfram`QuantumFramework`QuantumOperator[
         Wolfram`QuantumFramework`QuantumState[
          SparseArray[
          Automatic, {4}, 0, {
           1, {{0, 4}, {{1}, {2}, {3}, {4}}}, {
            2^Rational[-1, 2], 2^Rational[-1, 2], 2^
             Rational[-1, 2], -2^Rational[-1, 2]}}], 
          
          Wolfram`QuantumFramework`QuantumBasis[<|
           "Input" -> Wolfram`QuantumFramework`QuditBasis[<|{
                 Wolfram`QuantumFramework`QuditName[0, "Dual" -> True], 1} -> 
               SparseArray[Automatic, {2}, 0, {1, {{0, 1}, {{1}}}, {1}}], {
                 Wolfram`QuantumFramework`QuditName[1, "Dual" -> True], 1} -> 
               SparseArray[Automatic, {2}, 0, {1, {{0, 1}, {{2}}}, {1}}]|>], 
            "Output" -> Wolfram`QuantumFramework`QuditBasis[<|{
                 Wolfram`QuantumFramework`QuditName[0, "Dual" -> False], 1} -> 
               SparseArray[Automatic, {2}, 0, {1, {{0, 1}, {{1}}}, {1}}], {
                 Wolfram`QuantumFramework`QuditName[1, "Dual" -> False], 1} -> 
               SparseArray[Automatic, {2}, 0, {1, {{0, 1}, {{2}}}, {1}}]|>], 
            "Picture" -> "Schr\[ODoubleDot]dinger", "Label" -> "H", 
            "ParameterSpec" -> {}|>]], {{1}, {1}}], "SortInput" -> 
       Wolfram`QuantumFramework`QuantumOperator[
         Wolfram`QuantumFramework`QuantumState[
          SparseArray[
          Automatic, {4}, 0, {
           1, {{0, 4}, {{1}, {2}, {3}, {4}}}, {
            2^Rational[-1, 2], 2^Rational[-1, 2], 2^
             Rational[-1, 2], -2^Rational[-1, 2]}}], 
          
          Wolfram`QuantumFramework`QuantumBasis[<|
           "Input" -> Wolfram`QuantumFramework`QuditBasis[<|{
                 Wolfram`QuantumFramework`QuditName[0, "Dual" -> True], 1} -> 
               SparseArray[Automatic, {2}, 0, {1, {{0, 1}, {{1}}}, {1}}], {
                 Wolfram`QuantumFramework`QuditName[1, "Dual" -> True], 1} -> 
               SparseArray[Automatic, {2}, 0, {1, {{0, 1}, {{2}}}, {1}}]|>], 
            "Output" -> Wolfram`QuantumFramework`QuditBasis[<|{
                 Wolfram`QuantumFramework`QuditName[0, "Dual" -> False], 1} -> 
               SparseArray[Automatic, {2}, 0, {1, {{0, 1}, {{1}}}, {1}}], {
                 Wolfram`QuantumFramework`QuditName[1, "Dual" -> False], 1} -> 
               SparseArray[Automatic, {2}, 0, {1, {{0, 1}, {{2}}}, {1}}]|>], 
            "Picture" -> "Schr\[ODoubleDot]dinger", "Label" -> "H", 
            "ParameterSpec" -> {}|>]], {{1}, {1}}], "SortOutput" -> 
       Wolfram`QuantumFramework`QuantumOperator[
         Wolfram`QuantumFramework`QuantumState[
          SparseArray[
          Automatic, {4}, 0, {
           1, {{0, 4}, {{1}, {2}, {3}, {4}}}, {
            2^Rational[-1, 2], 2^Rational[-1, 2], 2^
             Rational[-1, 2], -2^Rational[-1, 2]}}], 
          
          Wolfram`QuantumFramework`QuantumBasis[<|
           "Input" -> Wolfram`QuantumFramework`QuditBasis[<|{
                 Wolfram`QuantumFramework`QuditName[0, "Dual" -> True], 1} -> 
               SparseArray[Automatic, {2}, 0, {1, {{0, 1}, {{1}}}, {1}}], {
                 Wolfram`QuantumFramework`QuditName[1, "Dual" -> True], 1} -> 
               SparseArray[Automatic, {2}, 0, {1, {{0, 1}, {{2}}}, {1}}]|>], 
            "Output" -> Wolfram`QuantumFramework`QuditBasis[<|{
                 Wolfram`QuantumFramework`QuditName[0, "Dual" -> False], 1} -> 
               SparseArray[Automatic, {2}, 0, {1, {{0, 1}, {{1}}}, {1}}], {
                 Wolfram`QuantumFramework`QuditName[1, "Dual" -> False], 1} -> 
               SparseArray[Automatic, {2}, 0, {1, {{0, 1}, {{2}}}, {1}}]|>], 
            "Picture" -> "Schr\[ODoubleDot]dinger", "Label" -> "H", 
            "ParameterSpec" -> {}|>]], {{1}, {1}}], "SpectralBasis" -> 
       Wolfram`QuantumFramework`QuantumOperator[
         Wolfram`QuantumFramework`QuantumState[
          SparseArray[Automatic, {4}, 0, {1, {{0, 1}, {{1}}}, {2}}], 
          
          Wolfram`QuantumFramework`QuantumBasis[<|
           "Input" -> Wolfram`QuantumFramework`QuditBasis[<|{
                 Wolfram`QuantumFramework`QuditName[\[FormalCapitalI], "Dual" -> 
                  False], 1} -> 1|>], "Output" -> 
            Wolfram`QuantumFramework`QuditBasis[<|{
                 Wolfram`QuantumFramework`QuditName[
                  Wolfram`QuantumFramework`QuditName[
                   Subscript["s", 1], "Dual" -> False], 
                  Wolfram`QuantumFramework`QuditName[
                   Subscript["s", 1], "Dual" -> True]], 1} -> 
               SparseArray[
                Automatic, {4}, 0, {
                 1, {{0, 4}, {{1}, {2}, {3}, {4}}}, {-1, -1, -1, 1}}], {
                 Wolfram`QuantumFramework`QuditName[
                  Wolfram`QuantumFramework`QuditName[
                   Subscript["s", 1], "Dual" -> False], 
                  Wolfram`QuantumFramework`QuditName[
                   Subscript["s", 2], "Dual" -> True]], 1} -> 
               SparseArray[
                Automatic, {4}, 0, {1, {{0, 2}, {{1}, {4}}}, {1, 1}}], {
                 Wolfram`QuantumFramework`QuditName[
                  Wolfram`QuantumFramework`QuditName[
                   Subscript["s", 2], "Dual" -> False], 
                  Wolfram`QuantumFramework`QuditName[
                   Subscript["s", 1], "Dual" -> True]], 1} -> 
               SparseArray[
                Automatic, {4}, 0, {1, {{0, 2}, {{1}, {3}}}, {-1, 1}}], {
                 Wolfram`QuantumFramework`QuditName[
                  Wolfram`QuantumFramework`QuditName[
                   Subscript["s", 2], "Dual" -> False], 
                  Wolfram`QuantumFramework`QuditName[
                   Subscript["s", 2], "Dual" -> True]], 1} -> 
               SparseArray[
                Automatic, {4}, 0, {1, {{0, 2}, {{1}, {2}}}, {-1, 1}}]|>], 
            "Picture" -> "Schr\[ODoubleDot]dinger", "Label" -> None, 
            "ParameterSpec" -> {}|>]], {{1}, {1}}], "State" -> 
       Wolfram`QuantumFramework`QuantumState[
         SparseArray[
         Automatic, {4}, 0, {
          1, {{0, 4}, {{1}, {2}, {3}, {4}}}, {
           2^Rational[-1, 2], 2^Rational[-1, 2], 2^
            Rational[-1, 2], -2^Rational[-1, 2]}}], 
         Wolfram`QuantumFramework`QuantumBasis[<|
          "Input" -> Wolfram`QuantumFramework`QuditBasis[<|{
                Wolfram`QuantumFramework`QuditName[0, "Dual" -> True], 1} -> 
              SparseArray[Automatic, {2}, 0, {1, {{0, 1}, {{1}}}, {1}}], {
                Wolfram`QuantumFramework`QuditName[1, "Dual" -> True], 1} -> 
              SparseArray[Automatic, {2}, 0, {1, {{0, 1}, {{2}}}, {1}}]|>], 
           "Output" -> Wolfram`QuantumFramework`QuditBasis[<|{
                Wolfram`QuantumFramework`QuditName[0, "Dual" -> False], 1} -> 
              SparseArray[Automatic, {2}, 0, {1, {{0, 1}, {{1}}}, {1}}], {
                Wolfram`QuantumFramework`QuditName[1, "Dual" -> False], 1} -> 
              SparseArray[Automatic, {2}, 0, {1, {{0, 1}, {{2}}}, {1}}]|>], 
           "Picture" -> "Schr\[ODoubleDot]dinger", "Label" -> "H", 
           "ParameterSpec" -> {}|>]], "StateMatrix" -> 
       SparseArray[
        Automatic, {2, 2}, 0, {
         1, {{0, 2, 4}, {{1}, {2}, {1}, {2}}}, {
          2^Rational[-1, 2], 2^Rational[-1, 2], 2^
           Rational[-1, 2], -2^Rational[-1, 2]}}], "StateTensor" -> 
       SparseArray[
        Automatic, {2, 2}, 0, {
         1, {{0, 2, 4}, {{1}, {2}, {1}, {2}}}, {
          2^Rational[-1, 2], 2^Rational[-1, 2], 2^
           Rational[-1, 2], -2^Rational[-1, 2]}}], "StateType" -> "Vector", 
       "StateVector" -> 
       SparseArray[
        Automatic, {4}, 0, {
         1, {{0, 4}, {{1}, {2}, {3}, {4}}}, {
          2^Rational[-1, 2], 2^Rational[-1, 2], 2^
           Rational[-1, 2], -2^Rational[-1, 2]}}], "TargetArity" -> 1, 
       "TargetOrder" -> {1}, "Tensor" -> 
       SparseArray[
        Automatic, {2, 2}, 0, {
         1, {{0, 2, 4}, {{1}, {2}, {1}, {2}}}, {
          2^Rational[-1, 2], 2^Rational[-1, 2], 2^
           Rational[-1, 2], -2^Rational[-1, 2]}}], 
       "TensorDimensions" -> {2, 2, 2, 2}, "TensorRepresentation" -> 
       SparseArray[
        Automatic, {2, 2}, 0, {
         1, {{0, 2, 4}, {{1}, {2}, {1}, {2}}}, {
          2^Rational[-1, 2], 2^Rational[-1, 2], 2^
           Rational[-1, 2], -2^Rational[-1, 2]}}], "Transpose" -> 
       Wolfram`QuantumFramework`QuantumOperator[
         Wolfram`QuantumFramework`QuantumState[
          SparseArray[
          Automatic, {4}, 0, {
           1, {{0, 4}, {{1}, {2}, {3}, {4}}}, {
            2^Rational[-1, 2], 2^Rational[-1, 2], 2^
             Rational[-1, 2], -2^Rational[-1, 2]}}], 
          
          Wolfram`QuantumFramework`QuantumBasis[<|
           "Input" -> Wolfram`QuantumFramework`QuditBasis[<|{
                 Wolfram`QuantumFramework`QuditName[0, "Dual" -> False], 1} -> 
               SparseArray[Automatic, {2}, 0, {1, {{0, 1}, {{1}}}, {1}}], {
                 Wolfram`QuantumFramework`QuditName[1, "Dual" -> False], 1} -> 
               SparseArray[Automatic, {2}, 0, {1, {{0, 1}, {{2}}}, {1}}]|>], 
            "Output" -> Wolfram`QuantumFramework`QuditBasis[<|{
                 Wolfram`QuantumFramework`QuditName[0, "Dual" -> True], 1} -> 
               SparseArray[Automatic, {2}, 0, {1, {{0, 1}, {{1}}}, {1}}], {
                 Wolfram`QuantumFramework`QuditName[1, "Dual" -> True], 1} -> 
               SparseArray[Automatic, {2}, 0, {1, {{0, 1}, {{2}}}, {1}}]|>], 
            "Picture" -> "Schr\[ODoubleDot]dinger", "Label" -> 
            Superscript["H", "T"], "ParameterSpec" -> {}|>]], {{1}, {1}}], 
       "Type" -> "Pure", "UnitaryQ" -> True, "UnstackInput" -> {
         Wolfram`QuantumFramework`QuantumOperator[
          Wolfram`QuantumFramework`QuantumState[
           SparseArray[
           Automatic, {2}, 0, {
            1, {{0, 2}, {{1}, {2}}}, {2^Rational[-1, 2], 2^Rational[-1, 2]}}], 
           
           Wolfram`QuantumFramework`QuantumBasis[<|
            "Input" -> Wolfram`QuantumFramework`QuditBasis[<|{
                  
                  Wolfram`QuantumFramework`QuditName[\[FormalCapitalI], 
                   "Dual" -> False], 1} -> 1|>], "Output" -> 
             Wolfram`QuantumFramework`QuditBasis[<|{
                  Wolfram`QuantumFramework`QuditName[0, "Dual" -> False], 1} -> 
                SparseArray[Automatic, {2}, 0, {1, {{0, 1}, {{1}}}, {1}}], {
                  Wolfram`QuantumFramework`QuditName[1, "Dual" -> False], 1} -> 
                SparseArray[Automatic, {2}, 0, {1, {{0, 1}, {{2}}}, {1}}]|>], 
             "Picture" -> "Schr\[ODoubleDot]dinger", "Label" -> Superscript[
               Superscript["H", "T"], "T"], "ParameterSpec" -> {}|>]], {{
           1}, {}}], 
         Wolfram`QuantumFramework`QuantumOperator[
          Wolfram`QuantumFramework`QuantumState[
           SparseArray[
           Automatic, {2}, 0, {
            1, {{0, 2}, {{1}, {2}}}, {
             2^Rational[-1, 2], -2^Rational[-1, 2]}}], 
           
           Wolfram`QuantumFramework`QuantumBasis[<|
            "Input" -> Wolfram`QuantumFramework`QuditBasis[<|{
                  
                  Wolfram`QuantumFramework`QuditName[\[FormalCapitalI], 
                   "Dual" -> False], 1} -> 1|>], "Output" -> 
             Wolfram`QuantumFramework`QuditBasis[<|{
                  Wolfram`QuantumFramework`QuditName[0, "Dual" -> False], 1} -> 
                SparseArray[Automatic, {2}, 0, {1, {{0, 1}, {{1}}}, {1}}], {
                  Wolfram`QuantumFramework`QuditName[1, "Dual" -> False], 1} -> 
                SparseArray[Automatic, {2}, 0, {1, {{0, 1}, {{2}}}, {1}}]|>], 
             "Picture" -> "Schr\[ODoubleDot]dinger", "Label" -> Superscript[
               Superscript["H", "T"], "T"], "ParameterSpec" -> {}|>]], {{
           1}, {}}]}, "UnstackOutput" -> {
         Wolfram`QuantumFramework`QuantumOperator[
          Wolfram`QuantumFramework`QuantumState[
           SparseArray[
           Automatic, {2}, 0, {
            1, {{0, 2}, {{1}, {2}}}, {2^Rational[-1, 2], 2^Rational[-1, 2]}}], 
           
           Wolfram`QuantumFramework`QuantumBasis[<|
            "Input" -> Wolfram`QuantumFramework`QuditBasis[<|{
                  Wolfram`QuantumFramework`QuditName[0, "Dual" -> True], 1} -> 
                SparseArray[Automatic, {2}, 0, {1, {{0, 1}, {{1}}}, {1}}], {
                  Wolfram`QuantumFramework`QuditName[1, "Dual" -> True], 1} -> 
                SparseArray[Automatic, {2}, 0, {1, {{0, 1}, {{2}}}, {1}}]|>], 
             "Output" -> Wolfram`QuantumFramework`QuditBasis[<|{
                  
                  Wolfram`QuantumFramework`QuditName[\[FormalCapitalI], 
                   "Dual" -> False], 1} -> 1|>], "Picture" -> 
             "Schr\[ODoubleDot]dinger", "Label" -> "H", 
             "ParameterSpec" -> {}|>]], {{}, {1}}], 
         Wolfram`QuantumFramework`QuantumOperator[
          Wolfram`QuantumFramework`QuantumState[
           SparseArray[
           Automatic, {2}, 0, {
            1, {{0, 2}, {{1}, {2}}}, {
             2^Rational[-1, 2], -2^Rational[-1, 2]}}], 
           
           Wolfram`QuantumFramework`QuantumBasis[<|
            "Input" -> Wolfram`QuantumFramework`QuditBasis[<|{
                  Wolfram`QuantumFramework`QuditName[0, "Dual" -> True], 1} -> 
                SparseArray[Automatic, {2}, 0, {1, {{0, 1}, {{1}}}, {1}}], {
                  Wolfram`QuantumFramework`QuditName[1, "Dual" -> True], 1} -> 
                SparseArray[Automatic, {2}, 0, {1, {{0, 1}, {{2}}}, {1}}]|>], 
             "Output" -> Wolfram`QuantumFramework`QuditBasis[<|{
                  
                  Wolfram`QuantumFramework`QuditName[\[FormalCapitalI], 
                   "Dual" -> False], 1} -> 1|>], "Picture" -> 
             "Schr\[ODoubleDot]dinger", "Label" -> "H", 
             "ParameterSpec" -> {}|>]], {{}, {1}}]}, "VonNeumannEntropy" -> 
       Quantity[0, "Bits"], "Weights" -> 
       SparseArray[Automatic, {4}, 0, {1, {{0, 4}, {{1}, {2}, {3}, {4}}}, {
           Rational[1, 2], 
           Rational[1, 2], 
           Rational[1, 2], 
           Rational[1, 2]}}]|>, "AllowEmbedding" -> True, "InitialShape" -> 
     TypeSystem`PackageScope`Limited[
       TypeSystem`PackageScope`ColumnShape[
        TypeSystem`PackageScope`KeyValueShape[
         TypeSystem`PackageScope`AtomShape[201.60000000000002`], 
         TypeSystem`PackageScope`UnknownShape[False]]], 20, 
       DirectedInfinity[1], {}], "InitialType" -> TypeSystem`Assoc[
       TypeSystem`Atom[String], TypeSystem`AnyType, 140], "Meta" -> <||>, 
     "RowTarget" -> 20, "ColumnTarget" -> 10, "Shape" -> 
     TypeSystem`PackageScope`Limited[
       TypeSystem`PackageScope`ColumnShape[
        TypeSystem`PackageScope`KeyValueShape[
         TypeSystem`PackageScope`AtomShape[201.60000000000002`], 
         TypeSystem`PackageScope`UnknownShape[False]]], 20, 
       DirectedInfinity[1], {}], "Type" -> TypeSystem`Assoc[
       TypeSystem`Atom[String], TypeSystem`AnyType, 140], "Path" -> {}, 
     "DisplayedRowCount" -> 20, "DisplayedColumnCount" -> 1, "DataRowCount" -> 
     140, "DataColumnCount" -> 1, "SortPaths" -> {}, "SortDirections" -> {}, 
     "HiddenItemsMap" -> Null, "UpdateType" -> 1|>, 
    TypeSystem`NestedGrid`PackagePrivate`$outputID$$, 
    TypeSystem`NestedGrid`PackagePrivate`$path$$ = {}, 
    TypeSystem`NestedGrid`PackagePrivate`$vPos$$ = 1, 
    TypeSystem`NestedGrid`PackagePrivate`$hPos$$ = 1, 
    TypeSystem`NestedGrid`PackagePrivate`$grid$$ = 
    DynamicModule[{
     TypeSystem`NestedGrid`PackagePrivate`renderedGrid = Deploy[
        Style[
         Grid[{{
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover["Amplitudes", 
                  Style[
                  "Amplitudes", FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                If[
                  TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                    Key["Amplitudes"]}, 1]]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key["Amplitudes"]}, "RowHeader", False], "Mouse"], 
              ImageSize -> {{201.60000000000002`, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
             GrayLevel[0.95], Alignment -> {Left, Baseline}], 
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover[
                  Style[
                   Row[{"\[LeftAssociation] ", 
                    Subscript["\[Ellipsis]", 4], "\[RightAssociation]"}], 
                   GrayLevel[0.5]], 
                  Style[
                   Style[
                    Row[{"\[LeftAssociation] ", 
                    Subscript["\[Ellipsis]", 4], "\[RightAssociation]"}], 
                    GrayLevel[0.5]], FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                If[
                  TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                    Key["Amplitudes"]}, 4]]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key["Amplitudes"]}, "Item", False], "Mouse"], 
              ImageMargins -> {{5, 3}, {4, 5}}], BaseStyle -> {
               GrayLevel[0.5]}]}, {
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover["Arity", 
                  Style[
                  "Arity", FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                If[
                  TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                    Key["Arity"]}, 1]]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key["Arity"]}, "RowHeader", False], "Mouse"], 
              ImageSize -> {{201.60000000000002`, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
             GrayLevel[0.95], Alignment -> {Left, Baseline}], 
            Item[
             Pane[
              Annotation[
               RawBoxes["1"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key["Arity"]}, "Item", False], "Mouse"], 
              ImageSize -> {{34, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}]}, {
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover["Association", 
                  Style[
                  "Association", FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                If[
                  TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                    Key["Association"]}, 1]]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key["Association"]}, "RowHeader", False], "Mouse"], 
              ImageSize -> {{201.60000000000002`, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
             GrayLevel[0.95], Alignment -> {Left, Baseline}], 
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover[
                  Style[
                   Row[{"\[LeftAssociation] ", 
                    Subscript["\[Ellipsis]", 4], "\[RightAssociation]"}], 
                   GrayLevel[0.5]], 
                  Style[
                   Style[
                    Row[{"\[LeftAssociation] ", 
                    Subscript["\[Ellipsis]", 4], "\[RightAssociation]"}], 
                    GrayLevel[0.5]], FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                If[
                  TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                    Key["Association"]}, 4]]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key["Association"]}, "Item", False], "Mouse"], 
              ImageMargins -> {{5, 3}, {4, 5}}], BaseStyle -> {
               GrayLevel[0.5]}]}, {
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover["Basis", 
                  Style[
                  "Basis", FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                If[
                  TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                    Key["Basis"]}, 1]]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key["Basis"]}, "RowHeader", False], "Mouse"], 
              ImageSize -> {{201.60000000000002`, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
             GrayLevel[0.95], Alignment -> {Left, Baseline}], 
            Item[
             Pane[
              Annotation[
               RawBoxes[
                StyleBox[
                 RowBox[{
                   TagBox["QuantumBasis", "SummaryHead"], "[", 
                   TemplateBox[{
                    GridBox[{{
                    GridBox[{{
                    RowBox[{
                    TagBox["\"Picture: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox["\"Schr\[ODoubleDot]dinger\"", "SummaryItem"]}], 
                    RowBox[{
                    TagBox["\"Rank: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox["2", "SummaryItem"]}]}, {
                    RowBox[{
                    TagBox["\"Dimension: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox["4", "SummaryItem"]}], ""}}, 
                    GridBoxAlignment -> {
                    "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, 
                    AutoDelete -> False, 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {
                    "Columns" -> {{2}}, "Rows" -> {{Automatic}}}, 
                    BaseStyle -> {
                    ShowStringCharacters -> False, NumberMarks -> False, 
                    PrintPrecision -> 3, ShowSyntaxStyles -> False}]}}, 
                    GridBoxAlignment -> {
                    "Columns" -> {{Left}}, "Rows" -> {{Top}}}, AutoDelete -> 
                    False, GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                    BaselinePosition -> {1, 1}]}, "SummaryPanel"], "]"}], 
                 FontFamily -> Dynamic[
                   CurrentValue[{"StyleHints", "CodeFont"}]], 
                 ShowStringCharacters -> True]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key["Basis"]}, "Item", False], "Mouse"], 
              ImageSize -> {{60, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}]}, {
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover["Computational", 
                  Style[
                  "Computational", FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                If[
                  TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                    Key["Computational"]}, 1]]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key["Computational"]}, "RowHeader", False], "Mouse"], 
              ImageSize -> {{201.60000000000002`, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
             GrayLevel[0.95], Alignment -> {Left, Baseline}], 
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover[
                  Style["\[Ellipsis]", 
                   GrayLevel[0.5]], 
                  Style[
                   Style["\[Ellipsis]", 
                    GrayLevel[0.5]], FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                If[
                  TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                    Key["Computational"]}, 4]]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key["Computational"]}, "Item", False], "Mouse"], 
              ImageMargins -> {{5, 3}, {4, 5}}], BaseStyle -> {
               GrayLevel[0.5], Bold}]}, {
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover["ConjugateTranspose", 
                  Style[
                  "ConjugateTranspose", FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                If[
                  TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                    Key["ConjugateTranspose"]}, 1]]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key["ConjugateTranspose"]}, "RowHeader", False], "Mouse"], 
              ImageSize -> {{201.60000000000002`, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
             GrayLevel[0.95], Alignment -> {Left, Baseline}], 
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover[
                  Style["\[Ellipsis]", 
                   GrayLevel[0.5]], 
                  Style[
                   Style["\[Ellipsis]", 
                    GrayLevel[0.5]], FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                If[
                  TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                    Key["ConjugateTranspose"]}, 4]]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key["ConjugateTranspose"]}, "Item", False], "Mouse"], 
              ImageMargins -> {{5, 3}, {4, 5}}], BaseStyle -> {
               GrayLevel[0.5], Bold}]}, {
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover["ControlOrder", 
                  Style[
                  "ControlOrder", FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                If[
                  TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                    Key["ControlOrder"]}, 1]]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key["ControlOrder"]}, "RowHeader", False], "Mouse"], 
              ImageSize -> {{201.60000000000002`, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
             GrayLevel[0.95], Alignment -> {Left, Baseline}], 
            Item[
             Pane[
              Annotation[
               Style["\[LongDash]", 
                GrayLevel[0.75]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key["ControlOrder"]}, "Item", False], "Mouse"], 
              ImageSize -> {{60, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}]}, {
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover["Dagger", 
                  Style[
                  "Dagger", FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                If[
                  TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                    Key["Dagger"]}, 1]]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key["Dagger"]}, "RowHeader", False], "Mouse"], 
              ImageSize -> {{201.60000000000002`, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
             GrayLevel[0.95], Alignment -> {Left, Baseline}], 
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover[
                  Style["\[Ellipsis]", 
                   GrayLevel[0.5]], 
                  Style[
                   Style["\[Ellipsis]", 
                    GrayLevel[0.5]], FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                If[
                  TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                    Key["Dagger"]}, 4]]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key["Dagger"]}, "Item", False], "Mouse"], 
              ImageMargins -> {{5, 3}, {4, 5}}], BaseStyle -> {
               GrayLevel[0.5], Bold}]}, {
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover["DensityMatrix", 
                  Style[
                  "DensityMatrix", FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                If[
                  TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                    Key["DensityMatrix"]}, 1]]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key["DensityMatrix"]}, "RowHeader", False], "Mouse"], 
              ImageSize -> {{201.60000000000002`, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
             GrayLevel[0.95], Alignment -> {Left, Baseline}], 
            Item[
             Pane[
              Annotation[
               RawBoxes[
                StyleBox[
                 RowBox[{
                   TagBox["SparseArray", "SummaryHead"], "[", 
                   TemplateBox[{
                    GridBox[{{
                    GridBox[{{
                    RowBox[{
                    TagBox[
                    "\"Specified elements: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox["16", "SummaryItem"]}]}, {
                    RowBox[{
                    TagBox["\"Dimensions: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox[
                    RowBox[{"{", 
                    RowBox[{"4", ",", "4"}], "}"}], "SummaryItem"]}]}}, 
                    GridBoxAlignment -> {
                    "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, 
                    AutoDelete -> False, 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {
                    "Columns" -> {{2}}, "Rows" -> {{Automatic}}}, 
                    BaseStyle -> {
                    ShowStringCharacters -> False, NumberMarks -> False, 
                    PrintPrecision -> 3, ShowSyntaxStyles -> False}]}}, 
                    GridBoxAlignment -> {
                    "Columns" -> {{Left}}, "Rows" -> {{Top}}}, AutoDelete -> 
                    False, GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                    BaselinePosition -> {1, 1}]}, "SummaryPanel"], "]"}], 
                 FontFamily -> Dynamic[
                   CurrentValue[{"StyleHints", "CodeFont"}]], 
                 ShowStringCharacters -> True]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key["DensityMatrix"]}, "Item", False], "Mouse"], 
              ImageSize -> {{60, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}]}, {
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover["Diagram", 
                  Style[
                  "Diagram", FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                If[
                  TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                    Key["Diagram"]}, 1]]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key["Diagram"]}, "RowHeader", False], "Mouse"], 
              ImageSize -> {{201.60000000000002`, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
             GrayLevel[0.95], Alignment -> {Left, Baseline}], 
            Item[
             Pane[
              Annotation[
               RawBoxes[
                GraphicsBox[{
                  GeometricTransformationBox[{
                    LineBox[{{0, 0}, {1, 0}, {1, 1}, {0, 1}, {0, 0}}], {
                    PointSize[
                    0.2 Dynamic[
                    3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                    Magnification])]], 
                    PointBox[
                    NCache[{{
                    Rational[1, 2], 1}}, {{0.5, 1}}]], 
                    PointBox[
                    NCache[{{
                    Rational[1, 2], 0}}, {{0.5, 0}}]]}, {
                    Arrowheads[
                    0.004 Dynamic[
                    3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                    Magnification])]], {
                    ArrowBox[
                    NCache[{{
                    Rational[1, 2], 1}, {
                    Rational[1, 2], 
                    Rational[6, 5]}}, {{0.5, 1}, {0.5, 1.2}}]]}, {
                    ArrowBox[
                    NCache[{{
                    Rational[1, 2], 
                    Rational[-1, 5]}, {
                    Rational[1, 2], 0}}, {{0.5, -0.2}, {0.5, 0}}]]}}}, {{{1, 
                    0}, {0, 1}}, {0, 0}}], 
                  InsetBox[
                   FormBox[
                    StyleBox[
                    "\"H\"", {FontSize -> 24, FontFamily -> "Times"}, 
                    StripOnInput -> False], TraditionalForm], 
                   NCache[{
                    Rational[1, 2], 
                    Rational[1, 2]}, {0.5, 0.5}]]}, {
                 PlotRangeClipping -> True, Frame -> True, FrameStyle -> 
                  GrayLevel[0.85], Ticks -> None, FrameTicks -> None, Axes -> 
                  None, ImageSize -> 112}]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key["Diagram"]}, "Item", False], "Mouse"], 
              ImageSize -> {{60, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}]}, {
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover["Dimension", 
                  Style[
                  "Dimension", FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                If[
                  TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                    Key["Dimension"]}, 1]]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key["Dimension"]}, "RowHeader", False], "Mouse"], 
              ImageSize -> {{201.60000000000002`, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
             GrayLevel[0.95], Alignment -> {Left, Baseline}], 
            Item[
             Pane[
              Annotation[
               RawBoxes["4"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key["Dimension"]}, "Item", False], "Mouse"], 
              ImageSize -> {{34, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}]}, {
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover["Dimensions", 
                  Style[
                  "Dimensions", FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                If[
                  TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                    Key["Dimensions"]}, 1]]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key["Dimensions"]}, "RowHeader", False], "Mouse"], 
              ImageSize -> {{201.60000000000002`, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
             GrayLevel[0.95], Alignment -> {Left, Baseline}], 
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover[
                  Style[{2, 2}, ShowStringCharacters -> False], 
                  Style[
                   Style[{2, 2}, ShowStringCharacters -> False], FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                If[
                  TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                    Key["Dimensions"]}, 4]]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key["Dimensions"]}, "Item", False], "Mouse"], 
              ImageMargins -> {{5, 3}, {4, 5}}]]}, {
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover["Dual", 
                  Style[
                  "Dual", FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                If[
                  TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                    Key["Dual"]}, 1]]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key["Dual"]}, "RowHeader", False], "Mouse"], 
              ImageSize -> {{201.60000000000002`, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
             GrayLevel[0.95], Alignment -> {Left, Baseline}], 
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover[
                  Style["\[Ellipsis]", 
                   GrayLevel[0.5]], 
                  Style[
                   Style["\[Ellipsis]", 
                    GrayLevel[0.5]], FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                If[
                  TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                    Key["Dual"]}, 4]]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key["Dual"]}, "Item", False], "Mouse"], 
              ImageMargins -> {{5, 3}, {4, 5}}], BaseStyle -> {
               GrayLevel[0.5], Bold}]}, {
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover["Eigenstates", 
                  Style[
                  "Eigenstates", FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                If[
                  TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                    Key["Eigenstates"]}, 1]]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key["Eigenstates"]}, "RowHeader", False], "Mouse"], 
              ImageSize -> {{201.60000000000002`, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
             GrayLevel[0.95], Alignment -> {Left, Baseline}], 
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover[
                  Style[
                   Row[{"\[ThinSpace]{ ", 
                    Subscript["\[Ellipsis]", 4], " }\[ThinSpace]"}], 
                   GrayLevel[0.5]], 
                  Style[
                   Style[
                    Row[{"\[ThinSpace]{ ", 
                    Subscript["\[Ellipsis]", 4], " }\[ThinSpace]"}], 
                    GrayLevel[0.5]], FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                If[
                  TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                    Key["Eigenstates"]}, 4]]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key["Eigenstates"]}, "Item", False], "Mouse"], 
              ImageMargins -> {{5, 3}, {4, 5}}], BaseStyle -> {
               GrayLevel[0.5]}]}, {
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover["Eigensystem", 
                  Style[
                  "Eigensystem", FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                If[
                  TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                    Key["Eigensystem"]}, 1]]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key["Eigensystem"]}, "RowHeader", False], "Mouse"], 
              ImageSize -> {{201.60000000000002`, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
             GrayLevel[0.95], Alignment -> {Left, Baseline}], 
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover[
                  Style[
                   Row[{"\[ThinSpace]{ ", 
                    Subscript["\[Ellipsis]", 2], " }\[ThinSpace]"}], 
                   GrayLevel[0.5]], 
                  Style[
                   Style[
                    Row[{"\[ThinSpace]{ ", 
                    Subscript["\[Ellipsis]", 2], " }\[ThinSpace]"}], 
                    GrayLevel[0.5]], FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                If[
                  TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                    Key["Eigensystem"]}, 4]]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key["Eigensystem"]}, "Item", False], "Mouse"], 
              ImageMargins -> {{5, 3}, {4, 5}}], BaseStyle -> {
               GrayLevel[0.5]}]}, {
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover["Eigenvalues", 
                  Style[
                  "Eigenvalues", FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                If[
                  TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                    Key["Eigenvalues"]}, 1]]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key["Eigenvalues"]}, "RowHeader", False], "Mouse"], 
              ImageSize -> {{201.60000000000002`, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
             GrayLevel[0.95], Alignment -> {Left, Baseline}], 
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover[
                  Style[{-1, 1}, ShowStringCharacters -> False], 
                  Style[
                   Style[{-1, 1}, ShowStringCharacters -> False], FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                If[
                  TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                    Key["Eigenvalues"]}, 4]]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key["Eigenvalues"]}, "Item", False], "Mouse"], 
              ImageMargins -> {{5, 3}, {4, 5}}]]}, {
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover["Eigenvectors", 
                  Style[
                  "Eigenvectors", FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                If[
                  TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                    Key["Eigenvectors"]}, 1]]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key["Eigenvectors"]}, "RowHeader", False], "Mouse"], 
              ImageSize -> {{201.60000000000002`, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
             GrayLevel[0.95], Alignment -> {Left, Baseline}], 
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover[
                  Style[
                   Row[{"\[ThinSpace]{ ", 
                    Subscript["\[Ellipsis]", 2], " }\[ThinSpace]"}], 
                   GrayLevel[0.5]], 
                  Style[
                   Style[
                    Row[{"\[ThinSpace]{ ", 
                    Subscript["\[Ellipsis]", 2], " }\[ThinSpace]"}], 
                    GrayLevel[0.5]], FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                If[
                  TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                    Key["Eigenvectors"]}, 4]]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key["Eigenvectors"]}, "Item", False], "Mouse"], 
              ImageMargins -> {{5, 3}, {4, 5}}], BaseStyle -> {
               GrayLevel[0.5]}]}, {
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover["ElementAssociation", 
                  Style[
                  "ElementAssociation", FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                If[
                  TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                    Key["ElementAssociation"]}, 1]]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key["ElementAssociation"]}, "RowHeader", False], "Mouse"], 
              ImageSize -> {{201.60000000000002`, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
             GrayLevel[0.95], Alignment -> {Left, Baseline}], 
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover[
                  Style[
                   Row[{"\[LeftAssociation] ", 
                    Subscript["\[Ellipsis]", 4], "\[RightAssociation]"}], 
                   GrayLevel[0.5]], 
                  Style[
                   Style[
                    Row[{"\[LeftAssociation] ", 
                    Subscript["\[Ellipsis]", 4], "\[RightAssociation]"}], 
                    GrayLevel[0.5]], FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                If[
                  TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                    Key["ElementAssociation"]}, 4]]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key["ElementAssociation"]}, "Item", False], "Mouse"], 
              ImageMargins -> {{5, 3}, {4, 5}}], BaseStyle -> {
               GrayLevel[0.5]}]}, {
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover["ElementDimension", 
                  Style[
                  "ElementDimension", FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                If[
                  TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                    Key["ElementDimension"]}, 1]]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key["ElementDimension"]}, "RowHeader", False], "Mouse"], 
              ImageSize -> {{201.60000000000002`, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
             GrayLevel[0.95], Alignment -> {Left, Baseline}], 
            Item[
             Pane[
              Annotation[
               RawBoxes["4"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key["ElementDimension"]}, "Item", False], "Mouse"], 
              ImageSize -> {{34, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}]}, {
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover["ElementDimensions", 
                  Style[
                  "ElementDimensions", FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                If[
                  TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                    Key["ElementDimensions"]}, 1]]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key["ElementDimensions"]}, "RowHeader", False], "Mouse"], 
              ImageSize -> {{201.60000000000002`, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
             GrayLevel[0.95], Alignment -> {Left, Baseline}], 
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover[
                  Style[{2, 2}, ShowStringCharacters -> False], 
                  Style[
                   Style[{2, 2}, ShowStringCharacters -> False], FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                If[
                  TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                    Key["ElementDimensions"]}, 4]]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key["ElementDimensions"]}, "Item", False], "Mouse"], 
              ImageMargins -> {{5, 3}, {4, 5}}]]}, {
            Item[
             Deploy[
              Pane[
               Row[{
                 Spacer[2], 
                 Style[
                  Row[{
                    Button[
                    MouseAppearance[
                    Mouseover[
                    Graphics[{{
                    EdgeForm[None], 
                    FaceForm[None], 
                    Rectangle[{0, 0}, {18, 18}, RoundingRadius -> 2]}, 
                    Rotate[
                    Translate[{
                    CapForm[Round], 
                    Line[{{0, 0}, {4, 5}, {8, 0}}], 
                    Line[{{0, 5}, {8, 5}}]}, {5, 6.5}], 0, {9, 9}]}, 
                    ImageSize -> (1 -> 1), ImagePadding -> {{0, 1}, {1, 0}}, 
                    BaselinePosition -> Scaled[0.35], BaseStyle -> 
                    RGBColor[
                    0.5372549019607843, 0.5372549019607843, 
                    0.5372549019607843]], 
                    Graphics[{{
                    EdgeForm[
                    RGBColor[
                    0.27450980392156865`, 0.5411764705882353, 
                    0.796078431372549]], 
                    FaceForm[None], 
                    Rectangle[{0, 0}, {18, 18}, RoundingRadius -> 2]}, 
                    Rotate[
                    Translate[{
                    CapForm[Round], 
                    RGBColor[
                    0.27450980392156865`, 0.5411764705882353, 
                    0.796078431372549], 
                    Line[{{0, 0}, {4, 5}, {8, 0}}], 
                    Line[{{0, 5}, {8, 5}}]}, {5, 6.5}], 0, {9, 9}]}, 
                    ImageSize -> (1 -> 1), ImagePadding -> {{0, 1}, {1, 0}}, 
                    BaselinePosition -> Scaled[0.35]]], "LinkHand"], 
                    If[
                    TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$ = 
                    Clip[TypeSystem`NestedGrid`PackagePrivate`$vPos$$ + (-20) 
                    If[True, 140, 1], {1, 140 - -20 + 1}]; 
                    TypeSystem`NestedGrid`PackagePrivate`updateState[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]], True][
                    TypeSystem`NestedGrid`PackagePrivate`$path$$]], 
                    Appearance -> None], 
                    Button[
                    MouseAppearance[
                    Mouseover[
                    Graphics[{{
                    EdgeForm[None], 
                    FaceForm[None], 
                    Rectangle[{0, 0}, {18, 18}, RoundingRadius -> 2]}, 
                    Rotate[
                    Translate[{
                    CapForm[Round], 
                    Line[{{0, 0}, {4, 5}, {8, 0}}]}, {5, 6.5}], 0, {9, 9}]}, 
                    ImageSize -> (1 -> 1), ImagePadding -> {{0, 1}, {1, 0}}, 
                    BaselinePosition -> Scaled[0.35], BaseStyle -> 
                    RGBColor[
                    0.5372549019607843, 0.5372549019607843, 
                    0.5372549019607843]], 
                    Graphics[{{
                    EdgeForm[
                    RGBColor[
                    0.27450980392156865`, 0.5411764705882353, 
                    0.796078431372549]], 
                    FaceForm[None], 
                    Rectangle[{0, 0}, {18, 18}, RoundingRadius -> 2]}, 
                    Rotate[
                    Translate[{
                    CapForm[Round], 
                    RGBColor[
                    0.27450980392156865`, 0.5411764705882353, 
                    0.796078431372549], 
                    Line[{{0, 0}, {4, 5}, {8, 0}}]}, {5, 6.5}], 0, {9, 9}]}, 
                    ImageSize -> (1 -> 1), ImagePadding -> {{0, 1}, {1, 0}}, 
                    BaselinePosition -> Scaled[0.35]]], "LinkHand"], 
                    If[
                    TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$ = 
                    Clip[TypeSystem`NestedGrid`PackagePrivate`$vPos$$ + (-20) 
                    If[False, 140, 1], {1, 140 - -20 + 1}]; 
                    TypeSystem`NestedGrid`PackagePrivate`updateState[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]], True][
                    TypeSystem`NestedGrid`PackagePrivate`$path$$]], 
                    Appearance -> None], " ", 
                    Style[
                    Mouseover[
                    Style[
                    Row[{"rows ", 1, "\[Dash]", 20, " of ", 
                    Style[140, FontWeight -> Bold]}], FontSize -> 
                    9.333333333333332, FontColor -> 
                    RGBColor[
                    0.5098039215686274, 0.5098039215686274, 
                    0.5098039215686274]], 
                    Style[
                    Row[{"rows ", 1, "\[Dash]", 20, " of ", 
                    Style[140, FontWeight -> Bold]}], FontSize -> 
                    9.333333333333332, FontColor -> 
                    RGBColor[
                    0.5098039215686274, 0.5098039215686274, 
                    0.5098039215686274]]], ContextMenu -> {
                    MenuItem["Hide", 
                    KernelExecute[
                    
                    TypeSystem`NestedGrid`PackagePrivate`adjustLimits[{
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]}, 
                    "Rows", 1, {}]], MenuEvaluator -> Automatic], 
                    MenuItem["Show up to 10 Rows", 
                    KernelExecute[
                    
                    TypeSystem`NestedGrid`PackagePrivate`adjustLimits[{
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]}, 
                    "Rows", 10, {}]], MenuEvaluator -> Automatic], 
                    MenuItem["Show up to 30 Rows", 
                    KernelExecute[
                    
                    TypeSystem`NestedGrid`PackagePrivate`adjustLimits[{
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]}, 
                    "Rows", 30, {}]], MenuEvaluator -> Automatic], 
                    MenuItem["Show up to 100 Rows", 
                    KernelExecute[
                    
                    TypeSystem`NestedGrid`PackagePrivate`adjustLimits[{
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]}, 
                    "Rows", 100, {}]], MenuEvaluator -> Automatic], 
                    MenuItem["Show All", 
                    KernelExecute[
                    
                    TypeSystem`NestedGrid`PackagePrivate`adjustLimits[{
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]}, 
                    "Rows", 100000000, {}]], MenuEvaluator -> Automatic]}], 
                    " ", 
                    Button[
                    MouseAppearance[
                    Mouseover[
                    Graphics[{{
                    EdgeForm[None], 
                    FaceForm[None], 
                    Rectangle[{0, 0}, {18, 18}, RoundingRadius -> 2]}, 
                    Rotate[
                    Translate[{
                    CapForm[Round], 
                    Line[{{0, 0}, {4, 5}, {8, 0}}]}, {5, 6.5}], 180 Degree, {
                    9, 9}]}, ImageSize -> (1 -> 1), 
                    ImagePadding -> {{0, 1}, {1, 0}}, BaselinePosition -> 
                    Scaled[0.35], BaseStyle -> 
                    RGBColor[
                    0.5372549019607843, 0.5372549019607843, 
                    0.5372549019607843]], 
                    Graphics[{{
                    EdgeForm[
                    RGBColor[
                    0.27450980392156865`, 0.5411764705882353, 
                    0.796078431372549]], 
                    FaceForm[None], 
                    Rectangle[{0, 0}, {18, 18}, RoundingRadius -> 2]}, 
                    Rotate[
                    Translate[{
                    CapForm[Round], 
                    RGBColor[
                    0.27450980392156865`, 0.5411764705882353, 
                    0.796078431372549], 
                    Line[{{0, 0}, {4, 5}, {8, 0}}]}, {5, 6.5}], 180 Degree, {
                    9, 9}]}, ImageSize -> (1 -> 1), 
                    ImagePadding -> {{0, 1}, {1, 0}}, BaselinePosition -> 
                    Scaled[0.35]]], "LinkHand"], 
                    If[
                    TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$ = 
                    Clip[TypeSystem`NestedGrid`PackagePrivate`$vPos$$ + 
                    20 If[False, 140, 1], {1, 140 - 20 + 1}]; 
                    TypeSystem`NestedGrid`PackagePrivate`updateState[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]], True][
                    TypeSystem`NestedGrid`PackagePrivate`$path$$]], 
                    Appearance -> None], 
                    Button[
                    MouseAppearance[
                    Mouseover[
                    Graphics[{{
                    EdgeForm[None], 
                    FaceForm[None], 
                    Rectangle[{0, 0}, {18, 18}, RoundingRadius -> 2]}, 
                    Rotate[
                    Translate[{
                    CapForm[Round], 
                    Line[{{0, 0}, {4, 5}, {8, 0}}], 
                    Line[{{0, 5}, {8, 5}}]}, {5, 6.5}], 180 Degree, {9, 9}]}, 
                    ImageSize -> (1 -> 1), ImagePadding -> {{0, 1}, {1, 0}}, 
                    BaselinePosition -> Scaled[0.35], BaseStyle -> 
                    RGBColor[
                    0.5372549019607843, 0.5372549019607843, 
                    0.5372549019607843]], 
                    Graphics[{{
                    EdgeForm[
                    RGBColor[
                    0.27450980392156865`, 0.5411764705882353, 
                    0.796078431372549]], 
                    FaceForm[None], 
                    Rectangle[{0, 0}, {18, 18}, RoundingRadius -> 2]}, 
                    Rotate[
                    Translate[{
                    CapForm[Round], 
                    RGBColor[
                    0.27450980392156865`, 0.5411764705882353, 
                    0.796078431372549], 
                    Line[{{0, 0}, {4, 5}, {8, 0}}], 
                    Line[{{0, 5}, {8, 5}}]}, {5, 6.5}], 180 Degree, {9, 9}]}, 
                    ImageSize -> (1 -> 1), ImagePadding -> {{0, 1}, {1, 0}}, 
                    BaselinePosition -> Scaled[0.35]]], "LinkHand"], 
                    If[
                    TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$ = 
                    Clip[TypeSystem`NestedGrid`PackagePrivate`$vPos$$ + 
                    20 If[True, 140, 1], {1, 140 - 20 + 1}]; 
                    TypeSystem`NestedGrid`PackagePrivate`updateState[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]], True][
                    TypeSystem`NestedGrid`PackagePrivate`$path$$]], 
                    Appearance -> None]}], ContextMenu -> {}]}], 
               ImageMargins -> {{0, -1}, {-1, 1}}]], Background -> 
             RGBColor[
              0.9764705882352941, 0.9764705882352941, 0.9764705882352941], 
             Alignment -> {Left, Top}], SpanFromLeft}}, 
          BaseStyle -> {
           ContextMenu -> 
            Dynamic[TypeSystem`NestedGrid`PackagePrivate`$contextMenuTrigger; 
              Which[TypeSystem`NestedGrid`PackagePrivate`$lastOutputID =!= 
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                 TypeSystem`NestedGrid`PackagePrivate`$outputID$$], {}, 
                TypeSystem`NestedGrid`PackagePrivate`$contextMenuTrigger === 
                TypeSystem`NestedGrid`PackagePrivate`$lastContextMenuTrigger, 
                TypeSystem`NestedGrid`PackagePrivate`$lastContextMenu, True, 
                TypeSystem`NestedGrid`PackagePrivate`$lastContextMenuTrigger = 
                 TypeSystem`NestedGrid`PackagePrivate`$contextMenuTrigger; 
                TypeSystem`NestedGrid`PackagePrivate`$lastContextMenu = 
                 Block[{TypeSystem`NestedGrid`PackagePrivate`$globalScrollPos = \
{TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$}}, 
                   
                   With[{TypeSystem`NestedGrid`PackagePrivate`lastPath$ = 
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath, 
                    TypeSystem`NestedGrid`PackagePrivate`lastPathType$ = 
                    TypeSystem`NestedGrid`PackagePrivate`$lastPathType, 
                    TypeSystem`NestedGrid`PackagePrivate`isLeafHeader$ = 
                    TypeSystem`NestedGrid`PackagePrivate`$\
lastPathIsLeafHeader, TypeSystem`NestedGrid`PackagePrivate`headerHidden$ = And[
                    MatchQ[TypeSystem`NestedGrid`PackagePrivate`$lastPathType, 
                    Alternatives["RowHeader", "ColumnHeader"]], 
                    TypeSystem`NestedGrid`PackagePrivate`headerHiddenQ[
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath, 
                    TypeSystem`NestedGrid`PackagePrivate`$state$$]], 
                    TypeSystem`NestedGrid`PackagePrivate`allHidden$ = 
                    TypeSystem`NestedGrid`PackagePrivate`allHiddenQ[
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath, 
                    TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                    TypeSystem`NestedGrid`PackagePrivate`anyHidden$ = 
                    TypeSystem`NestedGrid`PackagePrivate`anyHiddenQ[
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath, 
                    TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                    TypeSystem`NestedGrid`PackagePrivate`sortDirection$ = 
                    TypeSystem`NestedGrid`PackagePrivate`columnSortDirection[
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath, 
                    TypeSystem`NestedGrid`PackagePrivate`$state$$[
                    "SortPaths"], 
                    TypeSystem`NestedGrid`PackagePrivate`$state$$[
                    "SortDirections"]], 
                    TypeSystem`NestedGrid`PackagePrivate`haveData$ = Not[
                    FailureQ[
                    TypeSystem`NestedGrid`PackagePrivate`datasetInitialData[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$]]], 
                    TypeSystem`NestedGrid`PackagePrivate`isKeyDummy$ = Not[
                    FreeQ[
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath, Keys]]}, 
                    Join[{
                    If[
                    Or[
                    Not[TypeSystem`NestedGrid`PackagePrivate`haveData$], 
                    Not[TypeSystem`NestedGrid`PackagePrivate`anyHidden$], 
                    TypeSystem`NestedGrid`PackagePrivate`isKeyDummy$], 
                    Nothing, 
                    MenuItem[
                    "Show " <> 
                    Which[TypeSystem`NestedGrid`PackagePrivate`lastPathType$ == 
                    "Item", "", 
                    TypeSystem`NestedGrid`PackagePrivate`lastPathType$ == 
                    "RowHeader", "Row", 
                    TypeSystem`NestedGrid`PackagePrivate`lastPathType$ == 
                    "ColumnHeader", "Column", True, ""], 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`updateHiddenItems[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][
                    TypeSystem`NestedGrid`PackagePrivate`lastPath$, 
                    "remove"]], MenuEvaluator -> Automatic]], 
                    If[
                    Or[
                    Not[TypeSystem`NestedGrid`PackagePrivate`haveData$], 
                    TypeSystem`NestedGrid`PackagePrivate`pathEmptyQ[
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath, 
                    TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                    TypeSystem`NestedGrid`PackagePrivate`isKeyDummy$, 
                    And[
                    TypeSystem`NestedGrid`PackagePrivate`allHidden$, 
                    TypeSystem`NestedGrid`PackagePrivate`headerHidden$]], 
                    Nothing, 
                    MenuItem[
                    "Hide " <> 
                    Which[TypeSystem`NestedGrid`PackagePrivate`lastPathType$ == 
                    "Item", "", 
                    TypeSystem`NestedGrid`PackagePrivate`lastPathType$ == 
                    "RowHeader", "Row", 
                    TypeSystem`NestedGrid`PackagePrivate`lastPathType$ == 
                    "ColumnHeader", "Column", True, ""], 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`updateHiddenItems[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][
                    TypeSystem`NestedGrid`PackagePrivate`lastPath$, "add"]], 
                    MenuEvaluator -> Automatic]], Delimiter}, 
                    If[
                    And[TypeSystem`NestedGrid`PackagePrivate`haveData$, 
                    MatchQ[TypeSystem`NestedGrid`PackagePrivate`lastPathType$, 
                    Alternatives["ColumnHeader", "KeyDummy"]], 
                    TypeSystem`NestedGrid`PackagePrivate`isLeafHeader$, 
                    Not[TypeSystem`NestedGrid`PackagePrivate`allHidden$]], {
                    If[
                    TypeSystem`NestedGrid`PackagePrivate`sortDirection$ =!= 
                    "Ascending", 
                    MenuItem["Sort", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`updateSort[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][
                    TypeSystem`NestedGrid`PackagePrivate`lastPath$, 
                    "Ascending"]], MenuEvaluator -> Automatic], Nothing], 
                    If[
                    TypeSystem`NestedGrid`PackagePrivate`sortDirection$ =!= 
                    "Descending", 
                    MenuItem["Reverse Sort", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`updateSort[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][
                    TypeSystem`NestedGrid`PackagePrivate`lastPath$, 
                    "Descending"]], MenuEvaluator -> Automatic], Nothing], 
                    If[
                    TypeSystem`NestedGrid`PackagePrivate`sortDirection$ =!= 
                    None, 
                    MenuItem["Unsort", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`updateSort[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][
                    TypeSystem`NestedGrid`PackagePrivate`lastPath$, None]], 
                    MenuEvaluator -> Automatic], Nothing], Delimiter}, {}], {
                    MenuItem["Copy Position to Clipboard", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`toCurrentPosition[
                    TypeSystem`NestedGrid`PackagePrivate`copyClip]], 
                    MenuEvaluator -> Automatic], 
                    If[TypeSystem`NestedGrid`PackagePrivate`haveData$, 
                    MenuItem["Copy Data to Clipboard", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`toCurrentData[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`copyClip]], 
                    MenuEvaluator -> Automatic], Nothing], Delimiter, 
                    MenuItem["Paste Position in New Cell", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`toCurrentPosition[
                    TypeSystem`NestedGrid`PackagePrivate`cellPaste]], 
                    MenuEvaluator -> Automatic], 
                    If[TypeSystem`NestedGrid`PackagePrivate`haveData$, 
                    MenuItem["Paste Data in New Cell", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`toCurrentData[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`cellPaste]], 
                    MenuEvaluator -> Automatic], Nothing]}]]]]], FontFamily -> 
            "Source Sans Pro", FontSize -> 14, FontWeight -> Plain}, Dividers -> 
          All, FrameStyle -> GrayLevel[0.7490196078431373], 
          Spacings -> {0, 0}, Alignment -> Left, 
          BaseStyle -> {
           FontFamily -> "Source Sans Pro", FontSize -> 14, FontWeight -> 
            Plain}], LineBreakWithin -> False, ContextMenu -> {}, NumberMarks -> 
         False, ShowAutoStyles -> False]], 
      TypeSystem`NestedGrid`PackagePrivate`initialQ = True}, 
     Dynamic[
      TypeSystem`NestedGrid`PackagePrivate`setupViewPath[
      TypeSystem`NestedGrid`PackagePrivate`$path$$, If[
         Not[TypeSystem`NestedGrid`PackagePrivate`initialQ], 
         Module[{
          TypeSystem`NestedGrid`PackagePrivate`tmpGrid$ = $Failed, 
           TypeSystem`NestedGrid`PackagePrivate`tmpData$ = 
           TypeSystem`NestedGrid`PackagePrivate`datasetData[
            TypeSystem`NestedGrid`PackagePrivate`$state$$]}, 
          TypeSystem`NestedGrid`PackagePrivate`tmpGrid$ = If[
             FailureQ[TypeSystem`NestedGrid`PackagePrivate`tmpData$], 
             TypeSystem`NestedGrid`PackagePrivate`renderedGrid, 
             TypeSystem`NestedGrid`PackagePrivate`renderGrid[
             TypeSystem`NestedGrid`PackagePrivate`$state$$, 
              TypeSystem`NestedGrid`PackagePrivate`$path$$, 
              TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
              TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
              TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
              TypeSystem`NestedGrid`PackagePrivate`localHold[
              TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][
             TypeSystem`NestedGrid`PackagePrivate`tmpData$]]; If[
            Not[
             FailureQ[TypeSystem`NestedGrid`PackagePrivate`tmpGrid$]], 
            TypeSystem`NestedGrid`PackagePrivate`renderedGrid = 
            TypeSystem`NestedGrid`PackagePrivate`tmpGrid$]; Null]]; 
       TypeSystem`NestedGrid`PackagePrivate`initialQ = False; 
       TypeSystem`NestedGrid`PackagePrivate`$vPos$$; 
       TypeSystem`NestedGrid`PackagePrivate`$hPos$$; If[
         FailureQ[TypeSystem`NestedGrid`PackagePrivate`renderedGrid], 
         TypeSystem`SparseGrid[
          TypeSystem`H["(data no longer present)"]], 
         TypeSystem`NestedGrid`PackagePrivate`renderedGrid]], 
      TrackedSymbols :> {
       TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
        TypeSystem`NestedGrid`PackagePrivate`$hPos$$}], 
     DynamicModuleValues :> {}], 
    TypeSystem`NestedGrid`PackagePrivate`$topBar$$ = Dynamic[
     TypeSystem`NestedGrid`PackagePrivate`makeFramedBar[
      TypeSystem`PackageScope`SubViewPathbar[
      TypeSystem`NestedGrid`PackagePrivate`$path$$, 
       TypeSystem`NestedGrid`PackagePrivate`updateState[
       TypeSystem`NestedGrid`PackagePrivate`$state$$, 
        TypeSystem`NestedGrid`PackagePrivate`$path$$, 
        TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
        TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
        TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
        TypeSystem`NestedGrid`PackagePrivate`localHold[
        TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]]], 
     TrackedSymbols :> {TypeSystem`NestedGrid`PackagePrivate`$path$$}], 
    TypeSystem`NestedGrid`PackagePrivate`$bottomBar$$ = Style[
     Framed[
      Dynamic[
       Replace[
       TypeSystem`NestedGrid`PackagePrivate`mouseAnnotation$$, {
        TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
           TypeSystem`NestedGrid`PackagePrivate`localHold[
           TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][Null, 
           Blank[]] -> "", TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
           TypeSystem`NestedGrid`PackagePrivate`localHold[
           TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][
           Pattern[TypeSystem`NestedGrid`PackagePrivate`path$, 
            Blank[]], 
           Pattern[TypeSystem`NestedGrid`PackagePrivate`pathType$, 
            Blank[]], 
           Pattern[TypeSystem`NestedGrid`PackagePrivate`isLeafHeader$, 
            Blank[]]] :> (
          Increment[TypeSystem`NestedGrid`PackagePrivate`$contextMenuTrigger]; 
          TypeSystem`NestedGrid`PackagePrivate`$lastPath = 
           TypeSystem`NestedGrid`PackagePrivate`path$; 
          TypeSystem`NestedGrid`PackagePrivate`$lastPathType = 
           TypeSystem`NestedGrid`PackagePrivate`pathType$; 
          TypeSystem`NestedGrid`PackagePrivate`$lastPathIsLeafHeader = 
           TypeSystem`NestedGrid`PackagePrivate`isLeafHeader$; 
          TypeSystem`NestedGrid`PackagePrivate`$lastOutputID = 
           TypeSystem`NestedGrid`PackagePrivate`localHold[
            TypeSystem`NestedGrid`PackagePrivate`$outputID$$]; 
          TypeSystem`NestedGrid`PackagePrivate`makePathTrail[
           TypeSystem`NestedGrid`PackagePrivate`path$, 
            TypeSystem`NestedGrid`PackagePrivate`makePathElements]), Null :> 
         Spacer[10], Blank[] :> Spacer[10]}], 
       TrackedSymbols :> {
        TypeSystem`NestedGrid`PackagePrivate`mouseAnnotation$$}], FrameStyle -> 
      None, ImageMargins -> 0, FrameMargins -> 0, Alignment -> Top, 
      ImageSize -> {Automatic, 15}], FontSize -> 1], 
    TypeSystem`NestedGrid`PackagePrivate`mouseAnnotation$$ = Null}, 
    DynamicWrapperBox[
     DynamicBox[ToBoxes[
       Dataset`DatasetContent[
       2, "Path" -> Hold[TypeSystem`NestedGrid`PackagePrivate`$path$$], 
        "Grid" -> Hold[TypeSystem`NestedGrid`PackagePrivate`$grid$$], "State" -> 
        Hold[TypeSystem`NestedGrid`PackagePrivate`$state$$], "VPos" -> 
        Hold[TypeSystem`NestedGrid`PackagePrivate`$vPos$$], "HPos" -> 
        Hold[TypeSystem`NestedGrid`PackagePrivate`$hPos$$], "TopBar" -> 
        Hold[TypeSystem`NestedGrid`PackagePrivate`$topBar$$], "BottomBar" -> 
        Hold[TypeSystem`NestedGrid`PackagePrivate`$bottomBar$$], "OutputID" -> 
        Hold[
          TypeSystem`NestedGrid`PackagePrivate`localHold[
          TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]], StandardForm],
      ImageSizeCache->{544., {384.134033203125, 389.865966796875}},
      TrackedSymbols:>{
       TypeSystem`NestedGrid`PackagePrivate`$state$$, 
        TypeSystem`NestedGrid`PackagePrivate`$grid$$}], 
     TypeSystem`NestedGrid`PackagePrivate`mouseAnnotation$$ = 
     MouseAnnotation[],
     ImageSizeCache->{544., {384.134033203125, 389.865966796875}}],
    BaseStyle->{LineBreakWithin -> False},
    DynamicModuleValues:>{},
    Initialization:>(TypeSystem`NestedGrid`PackagePrivate`$outputID$$ = 
     CreateUUID[]),
    UnsavedVariables:>{TypeSystem`NestedGrid`PackagePrivate`$outputID$$}],
   Deploy,
   DefaultBaseStyle->"Deploy"],
  Dataset`InterpretDataset[1],
  Editable->False,
  SelectWithContents->True,
  Selectable->False]], "Output",
 CellChangeTimes->{{3.841077159004704*^9, 3.841077182279243*^9}, 
   3.8410773142647667`*^9, 3.841077373088992*^9, 3.841077528473065*^9, 
   3.841077631093308*^9, 3.841078432376334*^9, 3.841078471789085*^9, 
   3.841078544845221*^9, 3.841079078754526*^9, 3.841088588912805*^9, 
   3.842904958110985*^9, 3.843147063718732*^9, 3.843147110148871*^9, 
   3.843147333108461*^9, 3.8431474104781923`*^9, 3.843147507695294*^9, 
   3.858282250715876*^9, {3.8582826118594103`*^9, 3.858282688171487*^9}, {
   3.858282730882001*^9, 3.858282747476392*^9}, {3.858283101877254*^9, 
   3.858283107800803*^9}, 3.858285727768691*^9},
 CellLabel->
  "Out[222]=",ExpressionUUID->"6a8f07ec-c7c6-4da8-87c3-f6865f6a2c16"]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["QuantumMeasurementOperator", "Section",
 CellChangeTimes->{{3.841079408355204*^9, 
  3.8410794088749313`*^9}},ExpressionUUID->"1011731f-75de-4029-b4cc-\
f5b8d8f6d0e8"],

Cell["\<\
QuantumMeasurementOperator is a QuantumOperator with a list of target \
measurement qudits:\
\>", "Text",
 CellChangeTimes->{{3.841077715069422*^9, 3.841077720792522*^9}, {
  3.841079247773881*^9, 3.841079260337316*^9}, {3.842905057833255*^9, 
  3.842905084395041*^9}, {3.858283483880855*^9, 
  3.858283489526668*^9}},ExpressionUUID->"7d7f11c3-a96e-4568-ace7-\
3d42e9a1dc0e"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"List", "@@", 
  RowBox[{"QuantumMeasurementOperator", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"\"\<PauliX\>\"", ",", "\"\<Fourier\>\""}], "}"}], ",", 
    RowBox[{"{", 
     RowBox[{"2", ",", "1"}], "}"}]}], "]"}]}]], "Input",
 CellChangeTimes->{{3.85828429545804*^9, 3.858284317962582*^9}},
 CellLabel->
  "In[223]:=",ExpressionUUID->"845ca8c6-c71d-4aea-ba48-e82b6f82bd89"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   InterpretationBox[
    RowBox[{
     TagBox["QuantumOperator",
      "SummaryHead"], "[", 
     DynamicModuleBox[{Typeset`open$$ = False, Typeset`embedState$$ = 
      "Ready"}, 
      TemplateBox[{
        PaneSelectorBox[{False -> GridBox[{{
              PaneBox[
               ButtonBox[
                DynamicBox[
                 FEPrivate`FrontEndResource["FEBitmaps", "SummaryBoxOpener"]],
                 ButtonFunction :> (Typeset`open$$ = True), Appearance -> 
                None, BaseStyle -> {}, Evaluator -> Automatic, Method -> 
                "Preemptive"], Alignment -> {Center, Center}, ImageSize -> 
               Dynamic[{
                 Automatic, 
                  3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                   Magnification])}]], 
              GraphicsBox[
               RasterBox[CompressedData["
1:eJxTTMoPSmVmYGBggWIQGwI+2KPTLF/PxHm+fW2/4N21SUcXPLb/4LZSZo/t
XvsWGZ7yM6uv2fNKub+refTYft6klSaJz1/C9T2sElnn/vCWPcxkXObgsheX
ObjsJdU9pPqXVPeQ6l8AFsCOAA==
                "], {{0, 0}, {4, 4}}, {0, 1}], 
               Frame -> False, FrameLabel -> {None, None}, 
               FrameTicks -> {{None, None}, {None, None}}, GridLinesStyle -> 
               Directive[
                 GrayLevel[0.5, 0.4]], ImageSize -> 
               Dynamic[{
                 Automatic, 
                  3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                   Magnification])}], 
               Method -> {
                "AxisPadding" -> Scaled[0.02], "DefaultBoundaryStyle" -> 
                 Automatic, 
                 "DefaultGraphicsInteraction" -> {
                  "Version" -> 1.2, "TrackMousePosition" -> {True, False}, 
                   "Effects" -> {
                    "Highlight" -> {"ratio" -> 2}, 
                    "HighlightPoint" -> {"ratio" -> 2}, 
                    "Droplines" -> {
                    "freeformCursorMode" -> True, 
                    "placement" -> {"x" -> "All", "y" -> "None"}}}}, 
                 "DefaultPlotStyle" -> Automatic, "DomainPadding" -> 
                 Scaled[0.02], "RangePadding" -> Scaled[0.05]}], 
              GridBox[{{
                 RowBox[{
                   TagBox["\"Picture: \"", "SummaryItemAnnotation"], 
                   "\[InvisibleSpace]", 
                   TagBox["\"Schr\[ODoubleDot]dinger\"", "SummaryItem"]}], 
                 RowBox[{
                   TagBox["\"Arity: \"", "SummaryItemAnnotation"], 
                   "\[InvisibleSpace]", 
                   TagBox["2", "SummaryItem"]}]}, {
                 RowBox[{
                   TagBox["\"Dimension: \"", "SummaryItemAnnotation"], 
                   "\[InvisibleSpace]", 
                   TagBox[
                    
                    TemplateBox[{"4", "\"\[RightArrow]\"", "4"}, 
                    "RowDefault"], "SummaryItem"]}], 
                 RowBox[{
                   TagBox["\"Qudits: \"", "SummaryItemAnnotation"], 
                   "\[InvisibleSpace]", 
                   TagBox[
                    
                    TemplateBox[{"2", "\"\[RightArrow]\"", "2"}, 
                    "RowDefault"], "SummaryItem"]}]}}, 
               GridBoxAlignment -> {
                "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, AutoDelete -> 
               False, GridBoxItemSize -> {
                "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
               GridBoxSpacings -> {
                "Columns" -> {{2}}, "Rows" -> {{Automatic}}}, 
               BaseStyle -> {
                ShowStringCharacters -> False, NumberMarks -> False, 
                 PrintPrecision -> 3, ShowSyntaxStyles -> False}]}}, 
            GridBoxAlignment -> {"Columns" -> {{Left}}, "Rows" -> {{Top}}}, 
            AutoDelete -> False, 
            GridBoxItemSize -> {
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
            BaselinePosition -> {1, 1}], True -> GridBox[{{
              PaneBox[
               ButtonBox[
                DynamicBox[
                 FEPrivate`FrontEndResource["FEBitmaps", "SummaryBoxCloser"]],
                 ButtonFunction :> (Typeset`open$$ = False), Appearance -> 
                None, BaseStyle -> {}, Evaluator -> Automatic, Method -> 
                "Preemptive"], Alignment -> {Center, Center}, ImageSize -> 
               Dynamic[{
                 Automatic, 
                  3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                   Magnification])}]], 
              GraphicsBox[
               RasterBox[CompressedData["
1:eJxTTMoPSmVmYGBggWIQGwI+2KPTLF/PxHm+fW2/4N21SUcXPLb/4LZSZo/t
XvsWGZ7yM6uv2fNKub+refTYft6klSaJz1/C9T2sElnn/vCWPcxkXObgsheX
ObjsJdU9pPqXVPeQ6l8AFsCOAA==
                "], {{0, 0}, {4, 4}}, {0, 1}], 
               Frame -> False, FrameLabel -> {None, None}, 
               FrameTicks -> {{None, None}, {None, None}}, GridLinesStyle -> 
               Directive[
                 GrayLevel[0.5, 0.4]], ImageSize -> 
               Dynamic[{
                 Automatic, 
                  3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                   Magnification])}], 
               Method -> {
                "AxisPadding" -> Scaled[0.02], "DefaultBoundaryStyle" -> 
                 Automatic, 
                 "DefaultGraphicsInteraction" -> {
                  "Version" -> 1.2, "TrackMousePosition" -> {True, False}, 
                   "Effects" -> {
                    "Highlight" -> {"ratio" -> 2}, 
                    "HighlightPoint" -> {"ratio" -> 2}, 
                    "Droplines" -> {
                    "freeformCursorMode" -> True, 
                    "placement" -> {"x" -> "All", "y" -> "None"}}}}, 
                 "DefaultPlotStyle" -> Automatic, "DomainPadding" -> 
                 Scaled[0.02], "RangePadding" -> Scaled[0.05]}], 
              GridBox[{{
                 RowBox[{
                   TagBox["\"Picture: \"", "SummaryItemAnnotation"], 
                   "\[InvisibleSpace]", 
                   TagBox["\"Schr\[ODoubleDot]dinger\"", "SummaryItem"]}], 
                 RowBox[{
                   TagBox["\"Arity: \"", "SummaryItemAnnotation"], 
                   "\[InvisibleSpace]", 
                   TagBox["2", "SummaryItem"]}]}, {
                 RowBox[{
                   TagBox["\"Dimension: \"", "SummaryItemAnnotation"], 
                   "\[InvisibleSpace]", 
                   TagBox[
                    
                    TemplateBox[{"4", "\"\[RightArrow]\"", "4"}, 
                    "RowDefault"], "SummaryItem"]}], 
                 RowBox[{
                   TagBox["\"Qudits: \"", "SummaryItemAnnotation"], 
                   "\[InvisibleSpace]", 
                   TagBox[
                    
                    TemplateBox[{"2", "\"\[RightArrow]\"", "2"}, 
                    "RowDefault"], "SummaryItem"]}]}, {
                 RowBox[{
                   TagBox["\"Hermitian: \"", "SummaryItemAnnotation"], 
                   "\[InvisibleSpace]", 
                   TagBox["True", "SummaryItem"]}], 
                 RowBox[{
                   TagBox["\"Order: \"", "SummaryItemAnnotation"], 
                   "\[InvisibleSpace]", 
                   TagBox[
                    TemplateBox[{
                    RowBox[{"{", 
                    RowBox[{"1", ",", "2"}], "}"}], "\"\[RightArrow]\"", 
                    RowBox[{"{", 
                    RowBox[{"1", ",", "2"}], "}"}]}, "RowDefault"], 
                    "SummaryItem"]}]}, {
                 RowBox[{
                   TagBox["\"Unitary: \"", "SummaryItemAnnotation"], 
                   "\[InvisibleSpace]", 
                   TagBox["False", "SummaryItem"]}], 
                 RowBox[{
                   TagBox["\"Dimensions: \"", "SummaryItemAnnotation"], 
                   "\[InvisibleSpace]", 
                   TagBox[
                    TemplateBox[{
                    RowBox[{"{", 
                    RowBox[{"2", ",", "2"}], "}"}], "\"\[RightArrow]\"", 
                    RowBox[{"{", 
                    RowBox[{"2", ",", "2"}], "}"}]}, "RowDefault"], 
                    "SummaryItem"]}]}, {
                 RowBox[{
                   TagBox["\"ParameterArity: \"", "SummaryItemAnnotation"], 
                   "\[InvisibleSpace]", 
                   TagBox["0", "SummaryItem"]}], 
                 RowBox[{
                   TagBox["\"Parameters: \"", "SummaryItemAnnotation"], 
                   "\[InvisibleSpace]", 
                   TagBox[
                    RowBox[{"{", "}"}], "SummaryItem"]}]}}, 
               GridBoxAlignment -> {
                "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, AutoDelete -> 
               False, GridBoxItemSize -> {
                "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
               GridBoxSpacings -> {
                "Columns" -> {{2}}, "Rows" -> {{Automatic}}}, 
               BaseStyle -> {
                ShowStringCharacters -> False, NumberMarks -> False, 
                 PrintPrecision -> 3, ShowSyntaxStyles -> False}]}}, 
            GridBoxAlignment -> {"Columns" -> {{Left}}, "Rows" -> {{Top}}}, 
            AutoDelete -> False, 
            GridBoxItemSize -> {
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
            BaselinePosition -> {1, 1}]}, 
         Dynamic[Typeset`open$$], ImageSize -> Automatic]},
       "SummaryPanel"],
      DynamicModuleValues:>{}], "]"}],
    Wolfram`QuantumFramework`QuantumOperator[
     Wolfram`QuantumFramework`QuantumState[
      SparseArray[
      Automatic, {16}, 0, {1, {{0, 3}, {{6}, {11}, {16}}}, {1, 2, 3}}], 
      Wolfram`QuantumFramework`QuantumBasis[<|
       "Input" -> Wolfram`QuantumFramework`QuditBasis[<|{
             Wolfram`QuantumFramework`QuditName[
              Subscript["\[Psi]", 
               Subscript["x", "-"]], "Dual" -> True], 1} -> 
           SparseArray[
            Automatic, {2}, 0, {
             1, {{0, 2}, {{1}, {2}}}, {-2^Rational[-1, 2], 2^
               Rational[-1, 2]}}], {
             Wolfram`QuantumFramework`QuditName[
              Subscript["\[Psi]", 
               Subscript["x", "+"]], "Dual" -> True], 1} -> 
           SparseArray[
            Automatic, {2}, 0, {
             1, {{0, 2}, {{1}, {2}}}, {
              2^Rational[-1, 2], 2^Rational[-1, 2]}}], {
             Wolfram`QuantumFramework`QuditName[
              Subscript["F", 1], "Dual" -> True], 2} -> 
           SparseArray[
            Automatic, {2}, 0, {
             1, {{0, 2}, {{1}, {2}}}, {
              2^Rational[-1, 2], 2^Rational[-1, 2]}}], {
             Wolfram`QuantumFramework`QuditName[
              Subscript["F", 2], "Dual" -> True], 2} -> 
           SparseArray[
            Automatic, {2}, 0, {
             1, {{0, 2}, {{1}, {2}}}, {
              2^Rational[-1, 2], -2^Rational[-1, 2]}}]|>], "Output" -> 
        Wolfram`QuantumFramework`QuditBasis[<|{
             Wolfram`QuantumFramework`QuditName[
              Subscript["\[Psi]", 
               Subscript["x", "-"]], "Dual" -> False], 1} -> 
           SparseArray[
            Automatic, {2}, 0, {
             1, {{0, 2}, {{1}, {2}}}, {-2^Rational[-1, 2], 2^
               Rational[-1, 2]}}], {
             Wolfram`QuantumFramework`QuditName[
              Subscript["\[Psi]", 
               Subscript["x", "+"]], "Dual" -> False], 1} -> 
           SparseArray[
            Automatic, {2}, 0, {
             1, {{0, 2}, {{1}, {2}}}, {
              2^Rational[-1, 2], 2^Rational[-1, 2]}}], {
             Wolfram`QuantumFramework`QuditName[
              Subscript["F", 1], "Dual" -> False], 2} -> 
           SparseArray[
            Automatic, {2}, 0, {
             1, {{0, 2}, {{1}, {2}}}, {
              2^Rational[-1, 2], 2^Rational[-1, 2]}}], {
             Wolfram`QuantumFramework`QuditName[
              Subscript["F", 2], "Dual" -> False], 2} -> 
           SparseArray[
            Automatic, {2}, 0, {
             1, {{0, 2}, {{1}, {2}}}, {
              2^Rational[-1, 2], -2^Rational[-1, 2]}}]|>], "Picture" -> 
        "Schr\[ODoubleDot]dinger", "Label" -> "Computational", 
        "ParameterSpec" -> {}|>]], {{1, 2}, {1, 2}}],
    Editable->False,
    SelectWithContents->True,
    Selectable->False], ",", 
   RowBox[{"{", 
    RowBox[{"2", ",", "1"}], "}"}]}], "}"}]], "Output",
 CellChangeTimes->{{3.8582842966398077`*^9, 3.858284318289072*^9}, 
   3.858285728269292*^9},
 CellLabel->
  "Out[223]=",ExpressionUUID->"0befd90f-1a28-46bb-ab5f-0a1667d15f59"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{"QuantumMeasurementOperator", "[", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{"\"\<PauliX\>\"", ",", "\"\<Fourier\>\""}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"2", ",", "1"}], "}"}]}], "]"}], "\[IndentingNewLine]", 
 RowBox[{"Dataset", "@", 
  RowBox[{"AssociationMap", "[", 
   RowBox[{"%", ",", 
    RowBox[{"%", "[", "\"\<Properties\>\"", "]"}]}], "]"}]}]}], "Input",
 CellChangeTimes->{{3.841077723202887*^9, 3.841077740391921*^9}, {
   3.8582834957533903`*^9, 3.858283496447378*^9}, 3.85828432187926*^9},
 CellLabel->
  "In[224]:=",ExpressionUUID->"a41c201a-441f-48a5-98d5-6450d9884554"],

Cell[BoxData[
 InterpretationBox[
  RowBox[{
   TagBox["QuantumMeasurementOperator",
    "SummaryHead"], "[", 
   DynamicModuleBox[{Typeset`open$$ = False, Typeset`embedState$$ = "Ready"}, 
    
    TemplateBox[{
      PaneSelectorBox[{False -> GridBox[{{
            PaneBox[
             ButtonBox[
              DynamicBox[
               FEPrivate`FrontEndResource["FEBitmaps", "SummaryBoxOpener"]], 
              ButtonFunction :> (Typeset`open$$ = True), Appearance -> None, 
              BaseStyle -> {}, Evaluator -> Automatic, Method -> 
              "Preemptive"], Alignment -> {Center, Center}, ImageSize -> 
             Dynamic[{
               Automatic, 
                3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                 Magnification])}]], 
            GraphicsBox[
             RasterBox[CompressedData["
1:eJxTTMoPSmVmYGBggWIQGwI+2KPTLF/PxHm+fW2/4N21SUcXPLb/4LZSZo/t
XvsWGZ7yM6uv2fNKub+refTYft6klSaJz1/C9T2sElnn/vCWPcxkXObgsheX
ObjsJdU9pPqXVPeQ6l8AFsCOAA==
              "], {{0, 0}, {4, 4}}, {0, 1}], 
             Frame -> False, FrameLabel -> {None, None}, 
             FrameTicks -> {{None, None}, {None, None}}, GridLinesStyle -> 
             Directive[
               GrayLevel[0.5, 0.4]], ImageSize -> 
             Dynamic[{
               Automatic, 
                3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                 Magnification])}], 
             Method -> {
              "AxisPadding" -> Scaled[0.02], "DefaultBoundaryStyle" -> 
               Automatic, 
               "DefaultGraphicsInteraction" -> {
                "Version" -> 1.2, "TrackMousePosition" -> {True, False}, 
                 "Effects" -> {
                  "Highlight" -> {"ratio" -> 2}, 
                   "HighlightPoint" -> {"ratio" -> 2}, 
                   "Droplines" -> {
                    "freeformCursorMode" -> True, 
                    "placement" -> {"x" -> "All", "y" -> "None"}}}}, 
               "DefaultPlotStyle" -> Automatic, "DomainPadding" -> 
               Scaled[0.02], "RangePadding" -> Scaled[0.05]}], 
            GridBox[{{
               RowBox[{
                 TagBox["\"Measurement Type: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox["\"Projection\"", "SummaryItem"]}], 
               RowBox[{
                 TagBox["\"Target: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox[
                  RowBox[{"{", 
                    RowBox[{"2", ",", "1"}], "}"}], "SummaryItem"]}]}, {
               RowBox[{
                 TagBox["\"Dimension: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox[
                  TemplateBox[{"4", "\"\[RightArrow]\"", "4"}, "RowDefault"], 
                  "SummaryItem"]}], 
               RowBox[{
                 TagBox["\"Qudits: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox[
                  TemplateBox[{"2", "\"\[RightArrow]\"", "2"}, "RowDefault"], 
                  "SummaryItem"]}]}}, 
             GridBoxAlignment -> {
              "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, AutoDelete -> 
             False, GridBoxItemSize -> {
              "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
             GridBoxSpacings -> {"Columns" -> {{2}}, "Rows" -> {{Automatic}}},
              BaseStyle -> {
              ShowStringCharacters -> False, NumberMarks -> False, 
               PrintPrecision -> 3, ShowSyntaxStyles -> False}]}}, 
          GridBoxAlignment -> {"Columns" -> {{Left}}, "Rows" -> {{Top}}}, 
          AutoDelete -> False, 
          GridBoxItemSize -> {
           "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
          BaselinePosition -> {1, 1}], True -> GridBox[{{
            PaneBox[
             ButtonBox[
              DynamicBox[
               FEPrivate`FrontEndResource["FEBitmaps", "SummaryBoxCloser"]], 
              ButtonFunction :> (Typeset`open$$ = False), Appearance -> None, 
              BaseStyle -> {}, Evaluator -> Automatic, Method -> 
              "Preemptive"], Alignment -> {Center, Center}, ImageSize -> 
             Dynamic[{
               Automatic, 
                3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                 Magnification])}]], 
            GraphicsBox[
             RasterBox[CompressedData["
1:eJxTTMoPSmVmYGBggWIQGwI+2KPTLF/PxHm+fW2/4N21SUcXPLb/4LZSZo/t
XvsWGZ7yM6uv2fNKub+refTYft6klSaJz1/C9T2sElnn/vCWPcxkXObgsheX
ObjsJdU9pPqXVPeQ6l8AFsCOAA==
              "], {{0, 0}, {4, 4}}, {0, 1}], 
             Frame -> False, FrameLabel -> {None, None}, 
             FrameTicks -> {{None, None}, {None, None}}, GridLinesStyle -> 
             Directive[
               GrayLevel[0.5, 0.4]], ImageSize -> 
             Dynamic[{
               Automatic, 
                3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                 Magnification])}], 
             Method -> {
              "AxisPadding" -> Scaled[0.02], "DefaultBoundaryStyle" -> 
               Automatic, 
               "DefaultGraphicsInteraction" -> {
                "Version" -> 1.2, "TrackMousePosition" -> {True, False}, 
                 "Effects" -> {
                  "Highlight" -> {"ratio" -> 2}, 
                   "HighlightPoint" -> {"ratio" -> 2}, 
                   "Droplines" -> {
                    "freeformCursorMode" -> True, 
                    "placement" -> {"x" -> "All", "y" -> "None"}}}}, 
               "DefaultPlotStyle" -> Automatic, "DomainPadding" -> 
               Scaled[0.02], "RangePadding" -> Scaled[0.05]}], 
            GridBox[{{
               RowBox[{
                 TagBox["\"Measurement Type: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox["\"Projection\"", "SummaryItem"]}], 
               RowBox[{
                 TagBox["\"Target: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox[
                  RowBox[{"{", 
                    RowBox[{"2", ",", "1"}], "}"}], "SummaryItem"]}]}, {
               RowBox[{
                 TagBox["\"Dimension: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox[
                  TemplateBox[{"4", "\"\[RightArrow]\"", "4"}, "RowDefault"], 
                  "SummaryItem"]}], 
               RowBox[{
                 TagBox["\"Qudits: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox[
                  TemplateBox[{"2", "\"\[RightArrow]\"", "2"}, "RowDefault"], 
                  "SummaryItem"]}]}, {
               RowBox[{
                 TagBox["\"Hermitian: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox["True", "SummaryItem"]}], 
               RowBox[{
                 TagBox["\"Order: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox[
                  TemplateBox[{
                    RowBox[{"{", 
                    RowBox[{"1", ",", "2"}], "}"}], "\"\[RightArrow]\"", 
                    RowBox[{"{", 
                    RowBox[{"1", ",", "2"}], "}"}]}, "RowDefault"], 
                  "SummaryItem"]}]}, {
               RowBox[{
                 TagBox["\"Unitary: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox["False", "SummaryItem"]}], 
               RowBox[{
                 TagBox["\"Dimensions: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox[
                  TemplateBox[{
                    RowBox[{"{", 
                    RowBox[{"2", ",", "2"}], "}"}], "\"\[RightArrow]\"", 
                    RowBox[{"{", 
                    RowBox[{"2", ",", "2"}], "}"}]}, "RowDefault"], 
                  "SummaryItem"]}]}}, 
             GridBoxAlignment -> {
              "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, AutoDelete -> 
             False, GridBoxItemSize -> {
              "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
             GridBoxSpacings -> {"Columns" -> {{2}}, "Rows" -> {{Automatic}}},
              BaseStyle -> {
              ShowStringCharacters -> False, NumberMarks -> False, 
               PrintPrecision -> 3, ShowSyntaxStyles -> False}]}}, 
          GridBoxAlignment -> {"Columns" -> {{Left}}, "Rows" -> {{Top}}}, 
          AutoDelete -> False, 
          GridBoxItemSize -> {
           "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
          BaselinePosition -> {1, 1}]}, 
       Dynamic[Typeset`open$$], ImageSize -> Automatic]},
     "SummaryPanel"],
    DynamicModuleValues:>{}], "]"}],
  Wolfram`QuantumFramework`QuantumMeasurementOperator[
   Wolfram`QuantumFramework`QuantumOperator[
    Wolfram`QuantumFramework`QuantumState[
     SparseArray[
     Automatic, {16}, 0, {1, {{0, 3}, {{6}, {11}, {16}}}, {1, 2, 3}}], 
     Wolfram`QuantumFramework`QuantumBasis[<|
      "Input" -> Wolfram`QuantumFramework`QuditBasis[<|{
            Wolfram`QuantumFramework`QuditName[
             Subscript["\[Psi]", 
              Subscript["x", "-"]], "Dual" -> True], 1} -> 
          SparseArray[
           Automatic, {2}, 0, {
            1, {{0, 2}, {{1}, {2}}}, {-2^Rational[-1, 2], 2^
              Rational[-1, 2]}}], {
            Wolfram`QuantumFramework`QuditName[
             Subscript["\[Psi]", 
              Subscript["x", "+"]], "Dual" -> True], 1} -> 
          SparseArray[
           Automatic, {2}, 0, {
            1, {{0, 2}, {{1}, {2}}}, {
             2^Rational[-1, 2], 2^Rational[-1, 2]}}], {
            Wolfram`QuantumFramework`QuditName[
             Subscript["F", 1], "Dual" -> True], 2} -> 
          SparseArray[
           Automatic, {2}, 0, {
            1, {{0, 2}, {{1}, {2}}}, {
             2^Rational[-1, 2], 2^Rational[-1, 2]}}], {
            Wolfram`QuantumFramework`QuditName[
             Subscript["F", 2], "Dual" -> True], 2} -> 
          SparseArray[
           Automatic, {2}, 0, {
            1, {{0, 2}, {{1}, {2}}}, {
             2^Rational[-1, 2], -2^Rational[-1, 2]}}]|>], "Output" -> 
       Wolfram`QuantumFramework`QuditBasis[<|{
            Wolfram`QuantumFramework`QuditName[
             Subscript["\[Psi]", 
              Subscript["x", "-"]], "Dual" -> False], 1} -> 
          SparseArray[
           Automatic, {2}, 0, {
            1, {{0, 2}, {{1}, {2}}}, {-2^Rational[-1, 2], 2^
              Rational[-1, 2]}}], {
            Wolfram`QuantumFramework`QuditName[
             Subscript["\[Psi]", 
              Subscript["x", "+"]], "Dual" -> False], 1} -> 
          SparseArray[
           Automatic, {2}, 0, {
            1, {{0, 2}, {{1}, {2}}}, {
             2^Rational[-1, 2], 2^Rational[-1, 2]}}], {
            Wolfram`QuantumFramework`QuditName[
             Subscript["F", 1], "Dual" -> False], 2} -> 
          SparseArray[
           Automatic, {2}, 0, {
            1, {{0, 2}, {{1}, {2}}}, {
             2^Rational[-1, 2], 2^Rational[-1, 2]}}], {
            Wolfram`QuantumFramework`QuditName[
             Subscript["F", 2], "Dual" -> False], 2} -> 
          SparseArray[
           Automatic, {2}, 0, {
            1, {{0, 2}, {{1}, {2}}}, {
             2^Rational[-1, 2], -2^Rational[-1, 2]}}]|>], "Picture" -> 
       "Schr\[ODoubleDot]dinger", "Label" -> "Computational", 
       "ParameterSpec" -> {}|>]], {{1, 2}, {1, 2}}], {2, 1}],
  Editable->False,
  SelectWithContents->True,
  Selectable->False]], "Output",
 CellChangeTimes->{{3.841077728170124*^9, 3.841077740803186*^9}, 
   3.841077854940721*^9, {3.841077904649407*^9, 3.8410779165679502`*^9}, 
   3.84107796326167*^9, 3.841078036008335*^9, {3.841078436446044*^9, 
   3.841078476531876*^9}, 3.841078546141102*^9, 3.8410788827042294`*^9, 
   3.841079042088892*^9, 3.841079079021996*^9, 3.841080865386832*^9, 
   3.841088589502322*^9, 3.8429050865083237`*^9, 3.843147064142391*^9, 
   3.8431476155385323`*^9, {3.8582834795374393`*^9, 3.85828349700819*^9}, 
   3.858284268477192*^9, 3.858284322381987*^9, 3.8582857284150333`*^9},
 CellLabel->
  "Out[224]=",ExpressionUUID->"4969c2de-6643-443c-ad87-b57bd97c3794"],

Cell[BoxData[
 TagBox[
  TemplateBox[{
    TagBox[
     DynamicModuleBox[{
      TypeSystem`NestedGrid`PackagePrivate`$state$$ = <|
        "InitialData" -> 
         TypeSystem`CacheKey[
          6377513863853947570445973937375824629227757196535793739616], 
         "AllowEmbedding" -> True, "InitialShape" -> 
         TypeSystem`PackageScope`Limited[
           TypeSystem`PackageScope`ColumnShape[
            TypeSystem`PackageScope`KeyValueShape[
             TypeSystem`PackageScope`AtomShape[257.6], 
             TypeSystem`PackageScope`UnknownShape[False]]], 20, 
           DirectedInfinity[1], {}], "InitialType" -> TypeSystem`Assoc[
           TypeSystem`Atom[String], TypeSystem`AnyType, 161], "Meta" -> <||>, 
         "RowTarget" -> 20, "ColumnTarget" -> 10, "Shape" -> 
         TypeSystem`PackageScope`Limited[
           TypeSystem`PackageScope`ColumnShape[
            TypeSystem`PackageScope`KeyValueShape[
             TypeSystem`PackageScope`AtomShape[257.6], 
             TypeSystem`PackageScope`UnknownShape[False]]], 20, 
           DirectedInfinity[1], {}], "Type" -> TypeSystem`Assoc[
           TypeSystem`Atom[String], TypeSystem`AnyType, 161], "Path" -> {}, 
         "DisplayedRowCount" -> 20, "DisplayedColumnCount" -> 1, 
         "DataRowCount" -> 161, "DataColumnCount" -> 1, "SortPaths" -> {}, 
         "SortDirections" -> {}, "HiddenItemsMap" -> Null, "UpdateType" -> 
         1|>, TypeSystem`NestedGrid`PackagePrivate`$outputID$$, 
       TypeSystem`NestedGrid`PackagePrivate`$path$$ = {}, 
       TypeSystem`NestedGrid`PackagePrivate`$vPos$$ = 1, 
       TypeSystem`NestedGrid`PackagePrivate`$hPos$$ = 1, 
       TypeSystem`NestedGrid`PackagePrivate`$grid$$ = 
       DynamicModule[{
         TypeSystem`NestedGrid`PackagePrivate`renderedGrid = Deploy[
            Style[
             Grid[{{
                Item[
                 Pane[
                  Annotation[
                   EventHandler[
                    MouseAppearance[
                    Mouseover["Arity", 
                    Style[
                    "Arity", FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                    If[
                    TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                    TypeSystem`NestedGrid`PackagePrivate`updateState[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                    Key["Arity"]}, 1]]], 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                    Key["Arity"]}, "RowHeader", False], "Mouse"], 
                  ImageSize -> {{257.6, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
                 GrayLevel[0.95], Alignment -> {Left, Baseline}], 
                Item[
                 Pane[
                  Annotation[
                   RawBoxes["2"], 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                    Key["Arity"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{34, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}]}, {
                Item[
                 Pane[
                  Annotation[
                   EventHandler[
                    MouseAppearance[
                    Mouseover["Basis", 
                    Style[
                    "Basis", FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                    If[
                    TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                    TypeSystem`NestedGrid`PackagePrivate`updateState[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                    Key["Basis"]}, 1]]], 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                    Key["Basis"]}, "RowHeader", False], "Mouse"], 
                  ImageSize -> {{257.6, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
                 GrayLevel[0.95], Alignment -> {Left, Baseline}], 
                Item[
                 Pane[
                  Annotation[
                   RawBoxes[
                    StyleBox[
                    RowBox[{
                    TagBox["QuantumBasis", "SummaryHead"], "[", 
                    TemplateBox[{
                    GridBox[{{
                    GridBox[{{
                    RowBox[{
                    TagBox["\"Picture: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox["\"Schr\[ODoubleDot]dinger\"", "SummaryItem"]}], 
                    RowBox[{
                    TagBox["\"Rank: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox["4", "SummaryItem"]}]}, {
                    RowBox[{
                    TagBox["\"Dimension: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox["16", "SummaryItem"]}], ""}}, 
                    GridBoxAlignment -> {
                    "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, 
                    AutoDelete -> False, 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {
                    "Columns" -> {{2}}, "Rows" -> {{Automatic}}}, 
                    BaseStyle -> {
                    ShowStringCharacters -> False, NumberMarks -> False, 
                    PrintPrecision -> 3, ShowSyntaxStyles -> False}]}}, 
                    GridBoxAlignment -> {
                    "Columns" -> {{Left}}, "Rows" -> {{Top}}}, AutoDelete -> 
                    False, GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                    BaselinePosition -> {1, 1}]}, "SummaryPanel"], "]"}], 
                    FontFamily -> Dynamic[
                    CurrentValue[{"StyleHints", "CodeFont"}]], 
                    ShowStringCharacters -> True]], 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                    Key["Basis"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{60, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}]}, {
                Item[
                 Pane[
                  Annotation[
                   EventHandler[
                    MouseAppearance[
                    Mouseover["Canonical", 
                    Style[
                    "Canonical", FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                    If[
                    TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                    TypeSystem`NestedGrid`PackagePrivate`updateState[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                    Key["Canonical"]}, 1]]], 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                    Key["Canonical"]}, "RowHeader", False], "Mouse"], 
                  ImageSize -> {{257.6, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
                 GrayLevel[0.95], Alignment -> {Left, Baseline}], 
                Item[
                 Pane[
                  Annotation[
                   EventHandler[
                    MouseAppearance[
                    Mouseover[
                    Style["\[Ellipsis]", 
                    GrayLevel[0.5]], 
                    Style[
                    Style["\[Ellipsis]", 
                    GrayLevel[0.5]], FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                    If[
                    TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                    TypeSystem`NestedGrid`PackagePrivate`updateState[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                    Key["Canonical"]}, 4]]], 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                    Key["Canonical"]}, "Item", False], "Mouse"], 
                  ImageMargins -> {{5, 3}, {4, 5}}], BaseStyle -> {
                   GrayLevel[0.5], Bold}]}, {
                Item[
                 Pane[
                  Annotation[
                   EventHandler[
                    MouseAppearance[
                    Mouseover["CanonicalBasis", 
                    Style[
                    "CanonicalBasis", FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                    If[
                    TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                    TypeSystem`NestedGrid`PackagePrivate`updateState[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                    Key["CanonicalBasis"]}, 1]]], 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                    Key["CanonicalBasis"]}, "RowHeader", False], "Mouse"], 
                  ImageSize -> {{257.6, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
                 GrayLevel[0.95], Alignment -> {Left, Baseline}], 
                Item[
                 Pane[
                  Annotation[
                   RawBoxes[
                    StyleBox[
                    RowBox[{
                    TagBox["QuantumBasis", "SummaryHead"], "[", 
                    TemplateBox[{
                    GridBox[{{
                    GridBox[{{
                    RowBox[{
                    TagBox["\"Picture: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox["\"Schr\[ODoubleDot]dinger\"", "SummaryItem"]}], 
                    RowBox[{
                    TagBox["\"Rank: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox["6", "SummaryItem"]}]}, {
                    RowBox[{
                    TagBox["\"Dimension: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox["64", "SummaryItem"]}], ""}}, 
                    GridBoxAlignment -> {
                    "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, 
                    AutoDelete -> False, 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {
                    "Columns" -> {{2}}, "Rows" -> {{Automatic}}}, 
                    BaseStyle -> {
                    ShowStringCharacters -> False, NumberMarks -> False, 
                    PrintPrecision -> 3, ShowSyntaxStyles -> False}]}}, 
                    GridBoxAlignment -> {
                    "Columns" -> {{Left}}, "Rows" -> {{Top}}}, AutoDelete -> 
                    False, GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                    BaselinePosition -> {1, 1}]}, "SummaryPanel"], "]"}], 
                    FontFamily -> Dynamic[
                    CurrentValue[{"StyleHints", "CodeFont"}]], 
                    ShowStringCharacters -> True]], 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                    Key["CanonicalBasis"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{60, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}]}, {
                Item[
                 Pane[
                  Annotation[
                   EventHandler[
                    MouseAppearance[
                    Mouseover["Computational", 
                    Style[
                    "Computational", FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                    If[
                    TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                    TypeSystem`NestedGrid`PackagePrivate`updateState[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                    Key["Computational"]}, 1]]], 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                    Key["Computational"]}, "RowHeader", False], "Mouse"], 
                  ImageSize -> {{257.6, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
                 GrayLevel[0.95], Alignment -> {Left, Baseline}], 
                Item[
                 Pane[
                  Annotation[
                   EventHandler[
                    MouseAppearance[
                    Mouseover[
                    Style["\[Ellipsis]", 
                    GrayLevel[0.5]], 
                    Style[
                    Style["\[Ellipsis]", 
                    GrayLevel[0.5]], FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                    If[
                    TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                    TypeSystem`NestedGrid`PackagePrivate`updateState[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                    Key["Computational"]}, 4]]], 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                    Key["Computational"]}, "Item", False], "Mouse"], 
                  ImageMargins -> {{5, 3}, {4, 5}}], BaseStyle -> {
                   GrayLevel[0.5], Bold}]}, {
                Item[
                 Pane[
                  Annotation[
                   EventHandler[
                    MouseAppearance[
                    Mouseover["ConjugateTranspose", 
                    Style[
                    "ConjugateTranspose", FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                    If[
                    TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                    TypeSystem`NestedGrid`PackagePrivate`updateState[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                    Key["ConjugateTranspose"]}, 1]]], 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                    Key["ConjugateTranspose"]}, "RowHeader", False], "Mouse"],
                   ImageSize -> {{257.6, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
                 GrayLevel[0.95], Alignment -> {Left, Baseline}], 
                Item[
                 Pane[
                  Annotation[
                   EventHandler[
                    MouseAppearance[
                    Mouseover[
                    Style["\[Ellipsis]", 
                    GrayLevel[0.5]], 
                    Style[
                    Style["\[Ellipsis]", 
                    GrayLevel[0.5]], FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                    If[
                    TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                    TypeSystem`NestedGrid`PackagePrivate`updateState[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                    Key["ConjugateTranspose"]}, 4]]], 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                    Key["ConjugateTranspose"]}, "Item", False], "Mouse"], 
                  ImageMargins -> {{5, 3}, {4, 5}}], BaseStyle -> {
                   GrayLevel[0.5], Bold}]}, {
                Item[
                 Pane[
                  Annotation[
                   EventHandler[
                    MouseAppearance[
                    Mouseover["ControlOrder", 
                    Style[
                    "ControlOrder", FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                    If[
                    TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                    TypeSystem`NestedGrid`PackagePrivate`updateState[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                    Key["ControlOrder"]}, 1]]], 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                    Key["ControlOrder"]}, "RowHeader", False], "Mouse"], 
                  ImageSize -> {{257.6, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
                 GrayLevel[0.95], Alignment -> {Left, Baseline}], 
                Item[
                 Pane[
                  Annotation[
                   Style["\[LongDash]", 
                    GrayLevel[0.75]], 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                    Key["ControlOrder"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{60, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}]}, {
                Item[
                 Pane[
                  Annotation[
                   EventHandler[
                    MouseAppearance[
                    Mouseover["Dagger", 
                    Style[
                    "Dagger", FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                    If[
                    TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                    TypeSystem`NestedGrid`PackagePrivate`updateState[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                    Key["Dagger"]}, 1]]], 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                    Key["Dagger"]}, "RowHeader", False], "Mouse"], 
                  ImageSize -> {{257.6, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
                 GrayLevel[0.95], Alignment -> {Left, Baseline}], 
                Item[
                 Pane[
                  Annotation[
                   EventHandler[
                    MouseAppearance[
                    Mouseover[
                    Style["\[Ellipsis]", 
                    GrayLevel[0.5]], 
                    Style[
                    Style["\[Ellipsis]", 
                    GrayLevel[0.5]], FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                    If[
                    TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                    TypeSystem`NestedGrid`PackagePrivate`updateState[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                    Key["Dagger"]}, 4]]], 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                    Key["Dagger"]}, "Item", False], "Mouse"], 
                  ImageMargins -> {{5, 3}, {4, 5}}], BaseStyle -> {
                   GrayLevel[0.5], Bold}]}, {
                Item[
                 Pane[
                  Annotation[
                   EventHandler[
                    MouseAppearance[
                    Mouseover["Dimensions", 
                    Style[
                    "Dimensions", FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                    If[
                    TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                    TypeSystem`NestedGrid`PackagePrivate`updateState[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                    Key["Dimensions"]}, 1]]], 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                    Key["Dimensions"]}, "RowHeader", False], "Mouse"], 
                  ImageSize -> {{257.6, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
                 GrayLevel[0.95], Alignment -> {Left, Baseline}], 
                Item[
                 Pane[
                  Annotation[
                   EventHandler[
                    MouseAppearance[
                    Mouseover[
                    Style[{2, 2, 2, 2}, ShowStringCharacters -> False], 
                    Style[
                    Style[{2, 2, 2, 2}, ShowStringCharacters -> False], 
                    FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                    If[
                    TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                    TypeSystem`NestedGrid`PackagePrivate`updateState[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                    Key["Dimensions"]}, 4]]], 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                    Key["Dimensions"]}, "Item", False], "Mouse"], 
                  ImageMargins -> {{5, 3}, {4, 5}}]]}, {
                Item[
                 Pane[
                  Annotation[
                   EventHandler[
                    MouseAppearance[
                    Mouseover["Dual", 
                    Style[
                    "Dual", FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                    If[
                    TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                    TypeSystem`NestedGrid`PackagePrivate`updateState[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                    Key["Dual"]}, 1]]], 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                    Key["Dual"]}, "RowHeader", False], "Mouse"], 
                  ImageSize -> {{257.6, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
                 GrayLevel[0.95], Alignment -> {Left, Baseline}], 
                Item[
                 Pane[
                  Annotation[
                   EventHandler[
                    MouseAppearance[
                    Mouseover[
                    Style["\[Ellipsis]", 
                    GrayLevel[0.5]], 
                    Style[
                    Style["\[Ellipsis]", 
                    GrayLevel[0.5]], FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                    If[
                    TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                    TypeSystem`NestedGrid`PackagePrivate`updateState[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                    Key["Dual"]}, 4]]], 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                    Key["Dual"]}, "Item", False], "Mouse"], 
                  ImageMargins -> {{5, 3}, {4, 5}}], BaseStyle -> {
                   GrayLevel[0.5], Bold}]}, {
                Item[
                 Pane[
                  Annotation[
                   EventHandler[
                    MouseAppearance[
                    Mouseover["Eigendimension", 
                    Style[
                    "Eigendimension", FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                    If[
                    TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                    TypeSystem`NestedGrid`PackagePrivate`updateState[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                    Key["Eigendimension"]}, 1]]], 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                    Key["Eigendimension"]}, "RowHeader", False], "Mouse"], 
                  ImageSize -> {{257.6, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
                 GrayLevel[0.95], Alignment -> {Left, Baseline}], 
                Item[
                 Pane[
                  Annotation[
                   RawBoxes["4"], 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                    Key["Eigendimension"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{34, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}]}, {
                Item[
                 Pane[
                  Annotation[
                   EventHandler[
                    MouseAppearance[
                    Mouseover["Eigendimensions", 
                    Style[
                    "Eigendimensions", FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                    If[
                    TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                    TypeSystem`NestedGrid`PackagePrivate`updateState[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                    Key["Eigendimensions"]}, 1]]], 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                    Key["Eigendimensions"]}, "RowHeader", False], "Mouse"], 
                  ImageSize -> {{257.6, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
                 GrayLevel[0.95], Alignment -> {Left, Baseline}], 
                Item[
                 Pane[
                  Annotation[
                   EventHandler[
                    MouseAppearance[
                    Mouseover[
                    Style[{2, 2}, ShowStringCharacters -> False], 
                    Style[
                    Style[{2, 2}, ShowStringCharacters -> False], FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                    If[
                    TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                    TypeSystem`NestedGrid`PackagePrivate`updateState[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                    Key["Eigendimensions"]}, 4]]], 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                    Key["Eigendimensions"]}, "Item", False], "Mouse"], 
                  ImageMargins -> {{5, 3}, {4, 5}}]]}, {
                Item[
                 Pane[
                  Annotation[
                   EventHandler[
                    MouseAppearance[
                    Mouseover["Eigenqudits", 
                    Style[
                    "Eigenqudits", FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                    If[
                    TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                    TypeSystem`NestedGrid`PackagePrivate`updateState[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                    Key["Eigenqudits"]}, 1]]], 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                    Key["Eigenqudits"]}, "RowHeader", False], "Mouse"], 
                  ImageSize -> {{257.6, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
                 GrayLevel[0.95], Alignment -> {Left, Baseline}], 
                Item[
                 Pane[
                  Annotation[
                   RawBoxes["1"], 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                    Key["Eigenqudits"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{34, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}]}, {
                Item[
                 Pane[
                  Annotation[
                   EventHandler[
                    MouseAppearance[
                    Mouseover["Eigensystem", 
                    Style[
                    "Eigensystem", FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                    If[
                    TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                    TypeSystem`NestedGrid`PackagePrivate`updateState[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                    Key["Eigensystem"]}, 1]]], 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                    Key["Eigensystem"]}, "RowHeader", False], "Mouse"], 
                  ImageSize -> {{257.6, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
                 GrayLevel[0.95], Alignment -> {Left, Baseline}], 
                Item[
                 Pane[
                  Annotation[
                   EventHandler[
                    MouseAppearance[
                    Mouseover[
                    Style[
                    Row[{"\[ThinSpace]{ ", 
                    Subscript["\[Ellipsis]", 2], " }\[ThinSpace]"}], 
                    GrayLevel[0.5]], 
                    Style[
                    Style[
                    Row[{"\[ThinSpace]{ ", 
                    Subscript["\[Ellipsis]", 2], " }\[ThinSpace]"}], 
                    GrayLevel[0.5]], FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                    If[
                    TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                    TypeSystem`NestedGrid`PackagePrivate`updateState[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                    Key["Eigensystem"]}, 4]]], 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                    Key["Eigensystem"]}, "Item", False], "Mouse"], 
                  ImageMargins -> {{5, 3}, {4, 5}}], BaseStyle -> {
                   GrayLevel[0.5]}]}, {
                Item[
                 Pane[
                  Annotation[
                   EventHandler[
                    MouseAppearance[
                    Mouseover["Eigenvalues", 
                    Style[
                    "Eigenvalues", FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                    If[
                    TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                    TypeSystem`NestedGrid`PackagePrivate`updateState[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                    Key["Eigenvalues"]}, 1]]], 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                    Key["Eigenvalues"]}, "RowHeader", False], "Mouse"], 
                  ImageSize -> {{257.6, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
                 GrayLevel[0.95], Alignment -> {Left, Baseline}], 
                Item[
                 Pane[
                  Annotation[
                   EventHandler[
                    MouseAppearance[
                    Mouseover[
                    Style[{3, 2, 1, 0}, ShowStringCharacters -> False], 
                    Style[
                    Style[{3, 2, 1, 0}, ShowStringCharacters -> False], 
                    FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                    If[
                    TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                    TypeSystem`NestedGrid`PackagePrivate`updateState[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                    Key["Eigenvalues"]}, 4]]], 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                    Key["Eigenvalues"]}, "Item", False], "Mouse"], 
                  ImageMargins -> {{5, 3}, {4, 5}}]]}, {
                Item[
                 Pane[
                  Annotation[
                   EventHandler[
                    MouseAppearance[
                    Mouseover["Eigenvectors", 
                    Style[
                    "Eigenvectors", FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                    If[
                    TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                    TypeSystem`NestedGrid`PackagePrivate`updateState[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                    Key["Eigenvectors"]}, 1]]], 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                    Key["Eigenvectors"]}, "RowHeader", False], "Mouse"], 
                  ImageSize -> {{257.6, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
                 GrayLevel[0.95], Alignment -> {Left, Baseline}], 
                Item[
                 Pane[
                  Annotation[
                   EventHandler[
                    MouseAppearance[
                    Mouseover[
                    Style[
                    Row[{"\[ThinSpace]{ ", 
                    Subscript["\[Ellipsis]", 4], " }\[ThinSpace]"}], 
                    GrayLevel[0.5]], 
                    Style[
                    Style[
                    Row[{"\[ThinSpace]{ ", 
                    Subscript["\[Ellipsis]", 4], " }\[ThinSpace]"}], 
                    GrayLevel[0.5]], FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                    If[
                    TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                    TypeSystem`NestedGrid`PackagePrivate`updateState[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                    Key["Eigenvectors"]}, 4]]], 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                    Key["Eigenvectors"]}, "Item", False], "Mouse"], 
                  ImageMargins -> {{5, 3}, {4, 5}}], BaseStyle -> {
                   GrayLevel[0.5]}]}, {
                Item[
                 Pane[
                  Annotation[
                   EventHandler[
                    MouseAppearance[
                    Mouseover["FirstInputQudit", 
                    Style[
                    "FirstInputQudit", FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                    If[
                    TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                    TypeSystem`NestedGrid`PackagePrivate`updateState[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                    Key["FirstInputQudit"]}, 1]]], 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                    Key["FirstInputQudit"]}, "RowHeader", False], "Mouse"], 
                  ImageSize -> {{257.6, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
                 GrayLevel[0.95], Alignment -> {Left, Baseline}], 
                Item[
                 Pane[
                  Annotation[
                   RawBoxes["1"], 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                    Key["FirstInputQudit"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{34, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}]}, {
                Item[
                 Pane[
                  Annotation[
                   EventHandler[
                    MouseAppearance[
                    Mouseover["FirstOutputQudit", 
                    Style[
                    "FirstOutputQudit", FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                    If[
                    TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                    TypeSystem`NestedGrid`PackagePrivate`updateState[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                    Key["FirstOutputQudit"]}, 1]]], 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                    Key["FirstOutputQudit"]}, "RowHeader", False], "Mouse"], 
                  ImageSize -> {{257.6, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
                 GrayLevel[0.95], Alignment -> {Left, Baseline}], 
                Item[
                 Pane[
                  Annotation[
                   RawBoxes["1"], 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                    Key["FirstOutputQudit"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{34, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}]}, {
                Item[
                 Pane[
                  Annotation[
                   EventHandler[
                    MouseAppearance[
                    Mouseover["FullArity", 
                    Style[
                    "FullArity", FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                    If[
                    TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                    TypeSystem`NestedGrid`PackagePrivate`updateState[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                    Key["FullArity"]}, 1]]], 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                    Key["FullArity"]}, "RowHeader", False], "Mouse"], 
                  ImageSize -> {{257.6, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
                 GrayLevel[0.95], Alignment -> {Left, Baseline}], 
                Item[
                 Pane[
                  Annotation[
                   RawBoxes["2"], 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                    Key["FullArity"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{34, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}]}, {
                Item[
                 Pane[
                  Annotation[
                   EventHandler[
                    MouseAppearance[
                    Mouseover["FullInputOrder", 
                    Style[
                    "FullInputOrder", FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                    If[
                    TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                    TypeSystem`NestedGrid`PackagePrivate`updateState[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                    Key["FullInputOrder"]}, 1]]], 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                    Key["FullInputOrder"]}, "RowHeader", False], "Mouse"], 
                  ImageSize -> {{257.6, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
                 GrayLevel[0.95], Alignment -> {Left, Baseline}], 
                Item[
                 Pane[
                  Annotation[
                   EventHandler[
                    MouseAppearance[
                    Mouseover[
                    Style[{1, 2}, ShowStringCharacters -> False], 
                    Style[
                    Style[{1, 2}, ShowStringCharacters -> False], FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                    If[
                    TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                    TypeSystem`NestedGrid`PackagePrivate`updateState[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                    Key["FullInputOrder"]}, 4]]], 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                    Key["FullInputOrder"]}, "Item", False], "Mouse"], 
                  ImageMargins -> {{5, 3}, {4, 5}}]]}, {
                Item[
                 Deploy[
                  Pane[
                   Row[{
                    Spacer[2], 
                    Style[
                    Row[{
                    Button[
                    MouseAppearance[
                    Mouseover[
                    Graphics[{{
                    EdgeForm[None], 
                    FaceForm[None], 
                    Rectangle[{0, 0}, {18, 18}, RoundingRadius -> 2]}, 
                    Rotate[
                    Translate[{
                    CapForm[Round], 
                    Line[{{0, 0}, {4, 5}, {8, 0}}], 
                    Line[{{0, 5}, {8, 5}}]}, {5, 6.5}], 0, {9, 9}]}, 
                    ImageSize -> (1 -> 1), ImagePadding -> {{0, 1}, {1, 0}}, 
                    BaselinePosition -> Scaled[0.35], BaseStyle -> 
                    RGBColor[0.5372549019607843, 0.5372549019607843, 
                    0.5372549019607843]], 
                    Graphics[{{
                    EdgeForm[
                    RGBColor[
                    0.27450980392156865`, 0.5411764705882353, 
                    0.796078431372549]], 
                    FaceForm[None], 
                    Rectangle[{0, 0}, {18, 18}, RoundingRadius -> 2]}, 
                    Rotate[
                    Translate[{
                    CapForm[Round], 
                    RGBColor[
                    0.27450980392156865`, 0.5411764705882353, 
                    0.796078431372549], 
                    Line[{{0, 0}, {4, 5}, {8, 0}}], 
                    Line[{{0, 5}, {8, 5}}]}, {5, 6.5}], 0, {9, 9}]}, 
                    ImageSize -> (1 -> 1), ImagePadding -> {{0, 1}, {1, 0}}, 
                    BaselinePosition -> Scaled[0.35]]], "LinkHand"], 
                    If[
                    TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$ = 
                    Clip[TypeSystem`NestedGrid`PackagePrivate`$vPos$$ + (-20) 
                    If[True, 161, 1], {1, 161 - -20 + 1}]; 
                    TypeSystem`NestedGrid`PackagePrivate`updateState[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]], True][
                    TypeSystem`NestedGrid`PackagePrivate`$path$$]], 
                    Appearance -> None], 
                    Button[
                    MouseAppearance[
                    Mouseover[
                    Graphics[{{
                    EdgeForm[None], 
                    FaceForm[None], 
                    Rectangle[{0, 0}, {18, 18}, RoundingRadius -> 2]}, 
                    Rotate[
                    Translate[{
                    CapForm[Round], 
                    Line[{{0, 0}, {4, 5}, {8, 0}}]}, {5, 6.5}], 0, {9, 9}]}, 
                    ImageSize -> (1 -> 1), ImagePadding -> {{0, 1}, {1, 0}}, 
                    BaselinePosition -> Scaled[0.35], BaseStyle -> 
                    RGBColor[0.5372549019607843, 0.5372549019607843, 
                    0.5372549019607843]], 
                    Graphics[{{
                    EdgeForm[
                    RGBColor[
                    0.27450980392156865`, 0.5411764705882353, 
                    0.796078431372549]], 
                    FaceForm[None], 
                    Rectangle[{0, 0}, {18, 18}, RoundingRadius -> 2]}, 
                    Rotate[
                    Translate[{
                    CapForm[Round], 
                    RGBColor[
                    0.27450980392156865`, 0.5411764705882353, 
                    0.796078431372549], 
                    Line[{{0, 0}, {4, 5}, {8, 0}}]}, {5, 6.5}], 0, {9, 9}]}, 
                    ImageSize -> (1 -> 1), ImagePadding -> {{0, 1}, {1, 0}}, 
                    BaselinePosition -> Scaled[0.35]]], "LinkHand"], 
                    If[
                    TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$ = 
                    Clip[TypeSystem`NestedGrid`PackagePrivate`$vPos$$ + (-20) 
                    If[False, 161, 1], {1, 161 - -20 + 1}]; 
                    TypeSystem`NestedGrid`PackagePrivate`updateState[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]], True][
                    TypeSystem`NestedGrid`PackagePrivate`$path$$]], 
                    Appearance -> None], " ", 
                    Style[
                    Mouseover[
                    Style[
                    Row[{"rows ", 1, "\[Dash]", 20, " of ", 
                    Style[161, FontWeight -> Bold]}], FontSize -> 
                    9.333333333333332, FontColor -> 
                    RGBColor[
                    0.5098039215686274, 0.5098039215686274, 
                    0.5098039215686274]], 
                    Style[
                    Row[{"rows ", 1, "\[Dash]", 20, " of ", 
                    Style[161, FontWeight -> Bold]}], FontSize -> 
                    9.333333333333332, FontColor -> 
                    RGBColor[
                    0.5098039215686274, 0.5098039215686274, 
                    0.5098039215686274]]], ContextMenu -> {
                    MenuItem["Hide", 
                    KernelExecute[
                    
                    TypeSystem`NestedGrid`PackagePrivate`adjustLimits[{
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]}, 
                    "Rows", 1, {}]], MenuEvaluator -> Automatic], 
                    MenuItem["Show up to 10 Rows", 
                    KernelExecute[
                    
                    TypeSystem`NestedGrid`PackagePrivate`adjustLimits[{
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]}, 
                    "Rows", 10, {}]], MenuEvaluator -> Automatic], 
                    MenuItem["Show up to 30 Rows", 
                    KernelExecute[
                    
                    TypeSystem`NestedGrid`PackagePrivate`adjustLimits[{
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]}, 
                    "Rows", 30, {}]], MenuEvaluator -> Automatic], 
                    MenuItem["Show up to 100 Rows", 
                    KernelExecute[
                    
                    TypeSystem`NestedGrid`PackagePrivate`adjustLimits[{
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]}, 
                    "Rows", 100, {}]], MenuEvaluator -> Automatic], 
                    MenuItem["Show All", 
                    KernelExecute[
                    
                    TypeSystem`NestedGrid`PackagePrivate`adjustLimits[{
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]}, 
                    "Rows", 100000000, {}]], MenuEvaluator -> Automatic]}], 
                    " ", 
                    Button[
                    MouseAppearance[
                    Mouseover[
                    Graphics[{{
                    EdgeForm[None], 
                    FaceForm[None], 
                    Rectangle[{0, 0}, {18, 18}, RoundingRadius -> 2]}, 
                    Rotate[
                    Translate[{
                    CapForm[Round], 
                    Line[{{0, 0}, {4, 5}, {8, 0}}]}, {5, 6.5}], 180 Degree, {
                    9, 9}]}, ImageSize -> (1 -> 1), 
                    ImagePadding -> {{0, 1}, {1, 0}}, BaselinePosition -> 
                    Scaled[0.35], BaseStyle -> 
                    RGBColor[0.5372549019607843, 0.5372549019607843, 
                    0.5372549019607843]], 
                    Graphics[{{
                    EdgeForm[
                    RGBColor[
                    0.27450980392156865`, 0.5411764705882353, 
                    0.796078431372549]], 
                    FaceForm[None], 
                    Rectangle[{0, 0}, {18, 18}, RoundingRadius -> 2]}, 
                    Rotate[
                    Translate[{
                    CapForm[Round], 
                    RGBColor[
                    0.27450980392156865`, 0.5411764705882353, 
                    0.796078431372549], 
                    Line[{{0, 0}, {4, 5}, {8, 0}}]}, {5, 6.5}], 180 Degree, {
                    9, 9}]}, ImageSize -> (1 -> 1), 
                    ImagePadding -> {{0, 1}, {1, 0}}, BaselinePosition -> 
                    Scaled[0.35]]], "LinkHand"], 
                    If[
                    TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$ = 
                    Clip[TypeSystem`NestedGrid`PackagePrivate`$vPos$$ + 
                    20 If[False, 161, 1], {1, 161 - 20 + 1}]; 
                    TypeSystem`NestedGrid`PackagePrivate`updateState[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]], True][
                    TypeSystem`NestedGrid`PackagePrivate`$path$$]], 
                    Appearance -> None], 
                    Button[
                    MouseAppearance[
                    Mouseover[
                    Graphics[{{
                    EdgeForm[None], 
                    FaceForm[None], 
                    Rectangle[{0, 0}, {18, 18}, RoundingRadius -> 2]}, 
                    Rotate[
                    Translate[{
                    CapForm[Round], 
                    Line[{{0, 0}, {4, 5}, {8, 0}}], 
                    Line[{{0, 5}, {8, 5}}]}, {5, 6.5}], 180 Degree, {9, 9}]}, 
                    ImageSize -> (1 -> 1), ImagePadding -> {{0, 1}, {1, 0}}, 
                    BaselinePosition -> Scaled[0.35], BaseStyle -> 
                    RGBColor[0.5372549019607843, 0.5372549019607843, 
                    0.5372549019607843]], 
                    Graphics[{{
                    EdgeForm[
                    RGBColor[
                    0.27450980392156865`, 0.5411764705882353, 
                    0.796078431372549]], 
                    FaceForm[None], 
                    Rectangle[{0, 0}, {18, 18}, RoundingRadius -> 2]}, 
                    Rotate[
                    Translate[{
                    CapForm[Round], 
                    RGBColor[
                    0.27450980392156865`, 0.5411764705882353, 
                    0.796078431372549], 
                    Line[{{0, 0}, {4, 5}, {8, 0}}], 
                    Line[{{0, 5}, {8, 5}}]}, {5, 6.5}], 180 Degree, {9, 9}]}, 
                    ImageSize -> (1 -> 1), ImagePadding -> {{0, 1}, {1, 0}}, 
                    BaselinePosition -> Scaled[0.35]]], "LinkHand"], 
                    If[
                    TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$ = 
                    Clip[TypeSystem`NestedGrid`PackagePrivate`$vPos$$ + 
                    20 If[True, 161, 1], {1, 161 - 20 + 1}]; 
                    TypeSystem`NestedGrid`PackagePrivate`updateState[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]], True][
                    TypeSystem`NestedGrid`PackagePrivate`$path$$]], 
                    Appearance -> None]}], ContextMenu -> {}]}], 
                   ImageMargins -> {{0, -1}, {-1, 1}}]], Background -> 
                 RGBColor[
                  0.9764705882352941, 0.9764705882352941, 0.9764705882352941],
                  Alignment -> {Left, Top}], SpanFromLeft}}, 
              BaseStyle -> {
               ContextMenu -> 
                Dynamic[
                 TypeSystem`NestedGrid`PackagePrivate`$contextMenuTrigger; 
                  Which[TypeSystem`NestedGrid`PackagePrivate`$lastOutputID =!= 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$], {}, 
                    TypeSystem`NestedGrid`PackagePrivate`$contextMenuTrigger === 
                    TypeSystem`NestedGrid`PackagePrivate`$\
lastContextMenuTrigger, TypeSystem`NestedGrid`PackagePrivate`$lastContextMenu,
                     True, TypeSystem`NestedGrid`PackagePrivate`$\
lastContextMenuTrigger = 
                    TypeSystem`NestedGrid`PackagePrivate`$contextMenuTrigger; 
                    TypeSystem`NestedGrid`PackagePrivate`$lastContextMenu = 
                    Block[{TypeSystem`NestedGrid`PackagePrivate`$\
globalScrollPos = {TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$}}, 
                    
                    With[{TypeSystem`NestedGrid`PackagePrivate`lastPath$ = 
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath, 
                    TypeSystem`NestedGrid`PackagePrivate`lastPathType$ = 
                    TypeSystem`NestedGrid`PackagePrivate`$lastPathType, 
                    TypeSystem`NestedGrid`PackagePrivate`isLeafHeader$ = 
                    TypeSystem`NestedGrid`PackagePrivate`$\
lastPathIsLeafHeader, TypeSystem`NestedGrid`PackagePrivate`headerHidden$ = And[
                    MatchQ[TypeSystem`NestedGrid`PackagePrivate`$lastPathType, 
                    Alternatives["RowHeader", "ColumnHeader"]], 
                    TypeSystem`NestedGrid`PackagePrivate`headerHiddenQ[
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath, 
                    TypeSystem`NestedGrid`PackagePrivate`$state$$]], 
                    TypeSystem`NestedGrid`PackagePrivate`allHidden$ = 
                    TypeSystem`NestedGrid`PackagePrivate`allHiddenQ[
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath, 
                    TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                    TypeSystem`NestedGrid`PackagePrivate`anyHidden$ = 
                    TypeSystem`NestedGrid`PackagePrivate`anyHiddenQ[
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath, 
                    TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                    TypeSystem`NestedGrid`PackagePrivate`sortDirection$ = 
                    TypeSystem`NestedGrid`PackagePrivate`columnSortDirection[
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath, 
                    TypeSystem`NestedGrid`PackagePrivate`$state$$[
                    "SortPaths"], 
                    TypeSystem`NestedGrid`PackagePrivate`$state$$[
                    "SortDirections"]], 
                    TypeSystem`NestedGrid`PackagePrivate`haveData$ = Not[
                    FailureQ[
                    TypeSystem`NestedGrid`PackagePrivate`datasetInitialData[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$]]], 
                    TypeSystem`NestedGrid`PackagePrivate`isKeyDummy$ = Not[
                    FreeQ[
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath, Keys]]}, 
                    Join[{
                    If[
                    Or[
                    Not[TypeSystem`NestedGrid`PackagePrivate`haveData$], 
                    Not[TypeSystem`NestedGrid`PackagePrivate`anyHidden$], 
                    TypeSystem`NestedGrid`PackagePrivate`isKeyDummy$], 
                    Nothing, 
                    MenuItem[
                    "Show " <> Which[
                    TypeSystem`NestedGrid`PackagePrivate`lastPathType$ == 
                    "Item", "", 
                    TypeSystem`NestedGrid`PackagePrivate`lastPathType$ == 
                    "RowHeader", "Row", 
                    TypeSystem`NestedGrid`PackagePrivate`lastPathType$ == 
                    "ColumnHeader", "Column", True, ""], 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`updateHiddenItems[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][
                    TypeSystem`NestedGrid`PackagePrivate`lastPath$, 
                    "remove"]], MenuEvaluator -> Automatic]], 
                    If[
                    Or[
                    Not[TypeSystem`NestedGrid`PackagePrivate`haveData$], 
                    TypeSystem`NestedGrid`PackagePrivate`pathEmptyQ[
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath, 
                    TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                    TypeSystem`NestedGrid`PackagePrivate`isKeyDummy$, 
                    And[
                    TypeSystem`NestedGrid`PackagePrivate`allHidden$, 
                    TypeSystem`NestedGrid`PackagePrivate`headerHidden$]], 
                    Nothing, 
                    MenuItem[
                    "Hide " <> Which[
                    TypeSystem`NestedGrid`PackagePrivate`lastPathType$ == 
                    "Item", "", 
                    TypeSystem`NestedGrid`PackagePrivate`lastPathType$ == 
                    "RowHeader", "Row", 
                    TypeSystem`NestedGrid`PackagePrivate`lastPathType$ == 
                    "ColumnHeader", "Column", True, ""], 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`updateHiddenItems[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][
                    TypeSystem`NestedGrid`PackagePrivate`lastPath$, "add"]], 
                    MenuEvaluator -> Automatic]], Delimiter}, 
                    If[
                    And[TypeSystem`NestedGrid`PackagePrivate`haveData$, 
                    MatchQ[TypeSystem`NestedGrid`PackagePrivate`lastPathType$, 
                    Alternatives["ColumnHeader", "KeyDummy"]], 
                    TypeSystem`NestedGrid`PackagePrivate`isLeafHeader$, 
                    Not[TypeSystem`NestedGrid`PackagePrivate`allHidden$]], {
                    If[
                    TypeSystem`NestedGrid`PackagePrivate`sortDirection$ =!= 
                    "Ascending", 
                    MenuItem["Sort", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`updateSort[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][
                    TypeSystem`NestedGrid`PackagePrivate`lastPath$, 
                    "Ascending"]], MenuEvaluator -> Automatic], Nothing], 
                    If[
                    TypeSystem`NestedGrid`PackagePrivate`sortDirection$ =!= 
                    "Descending", 
                    MenuItem["Reverse Sort", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`updateSort[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][
                    TypeSystem`NestedGrid`PackagePrivate`lastPath$, 
                    "Descending"]], MenuEvaluator -> Automatic], Nothing], 
                    If[TypeSystem`NestedGrid`PackagePrivate`sortDirection$ =!= 
                    None, 
                    MenuItem["Unsort", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`updateSort[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][
                    TypeSystem`NestedGrid`PackagePrivate`lastPath$, None]], 
                    MenuEvaluator -> Automatic], Nothing], Delimiter}, {}], {
                    MenuItem["Copy Position to Clipboard", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`toCurrentPosition[
                    TypeSystem`NestedGrid`PackagePrivate`copyClip]], 
                    MenuEvaluator -> Automatic], 
                    If[TypeSystem`NestedGrid`PackagePrivate`haveData$, 
                    MenuItem["Copy Data to Clipboard", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`toCurrentData[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`copyClip]], 
                    MenuEvaluator -> Automatic], Nothing], Delimiter, 
                    MenuItem["Paste Position in New Cell", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`toCurrentPosition[
                    TypeSystem`NestedGrid`PackagePrivate`cellPaste]], 
                    MenuEvaluator -> Automatic], 
                    If[TypeSystem`NestedGrid`PackagePrivate`haveData$, 
                    MenuItem["Paste Data in New Cell", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`toCurrentData[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`cellPaste]], 
                    MenuEvaluator -> Automatic], Nothing]}]]]]], FontFamily -> 
                "Source Sans Pro", FontSize -> 14, FontWeight -> Plain}, 
              Dividers -> All, FrameStyle -> GrayLevel[0.7490196078431373], 
              Spacings -> {0, 0}, Alignment -> Left, 
              BaseStyle -> {
               FontFamily -> "Source Sans Pro", FontSize -> 14, FontWeight -> 
                Plain}], LineBreakWithin -> False, ContextMenu -> {}, 
             NumberMarks -> False, ShowAutoStyles -> False]], 
          TypeSystem`NestedGrid`PackagePrivate`initialQ = True}, 
         Dynamic[
          TypeSystem`NestedGrid`PackagePrivate`setupViewPath[
          TypeSystem`NestedGrid`PackagePrivate`$path$$, If[
             Not[TypeSystem`NestedGrid`PackagePrivate`initialQ], 
             
             Module[{TypeSystem`NestedGrid`PackagePrivate`tmpGrid$ = $Failed, 
               TypeSystem`NestedGrid`PackagePrivate`tmpData$ = 
               TypeSystem`NestedGrid`PackagePrivate`datasetData[
                TypeSystem`NestedGrid`PackagePrivate`$state$$]}, 
              TypeSystem`NestedGrid`PackagePrivate`tmpGrid$ = If[
                 FailureQ[TypeSystem`NestedGrid`PackagePrivate`tmpData$], 
                 TypeSystem`NestedGrid`PackagePrivate`renderedGrid, 
                 TypeSystem`NestedGrid`PackagePrivate`renderGrid[
                 TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                  TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                  TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                  TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                  TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                  TypeSystem`NestedGrid`PackagePrivate`localHold[
                  TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][
                 TypeSystem`NestedGrid`PackagePrivate`tmpData$]]; If[
                Not[
                 FailureQ[TypeSystem`NestedGrid`PackagePrivate`tmpGrid$]], 
                TypeSystem`NestedGrid`PackagePrivate`renderedGrid = 
                TypeSystem`NestedGrid`PackagePrivate`tmpGrid$]; Null]]; 
           TypeSystem`NestedGrid`PackagePrivate`initialQ = False; 
           TypeSystem`NestedGrid`PackagePrivate`$vPos$$; 
           TypeSystem`NestedGrid`PackagePrivate`$hPos$$; If[
             FailureQ[TypeSystem`NestedGrid`PackagePrivate`renderedGrid], 
             TypeSystem`SparseGrid[
              TypeSystem`H["(data no longer present)"]], 
             TypeSystem`NestedGrid`PackagePrivate`renderedGrid]], 
          TrackedSymbols :> {
           TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
            TypeSystem`NestedGrid`PackagePrivate`$hPos$$}], 
         DynamicModuleValues :> {}], 
       TypeSystem`NestedGrid`PackagePrivate`$topBar$$ = Dynamic[
         TypeSystem`NestedGrid`PackagePrivate`makeFramedBar[
          TypeSystem`PackageScope`SubViewPathbar[
          TypeSystem`NestedGrid`PackagePrivate`$path$$, 
           TypeSystem`NestedGrid`PackagePrivate`updateState[
           TypeSystem`NestedGrid`PackagePrivate`$state$$, 
            TypeSystem`NestedGrid`PackagePrivate`$path$$, 
            TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
            TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
            TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
            TypeSystem`NestedGrid`PackagePrivate`localHold[
            TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]]], 
         TrackedSymbols :> {TypeSystem`NestedGrid`PackagePrivate`$path$$}], 
       TypeSystem`NestedGrid`PackagePrivate`$bottomBar$$ = Style[
         Framed[
          Dynamic[
           Replace[
           TypeSystem`NestedGrid`PackagePrivate`mouseAnnotation$$, {
            TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
               TypeSystem`NestedGrid`PackagePrivate`localHold[
               TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][Null, 
               Blank[]] -> "", 
             TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
               TypeSystem`NestedGrid`PackagePrivate`localHold[
               TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][
               Pattern[TypeSystem`NestedGrid`PackagePrivate`path$, 
                Blank[]], 
               Pattern[TypeSystem`NestedGrid`PackagePrivate`pathType$, 
                Blank[]], 
               Pattern[TypeSystem`NestedGrid`PackagePrivate`isLeafHeader$, 
                Blank[]]] :> (
              Increment[
               TypeSystem`NestedGrid`PackagePrivate`$contextMenuTrigger]; 
              TypeSystem`NestedGrid`PackagePrivate`$lastPath = 
               TypeSystem`NestedGrid`PackagePrivate`path$; 
              TypeSystem`NestedGrid`PackagePrivate`$lastPathType = 
               TypeSystem`NestedGrid`PackagePrivate`pathType$; 
              TypeSystem`NestedGrid`PackagePrivate`$lastPathIsLeafHeader = 
               TypeSystem`NestedGrid`PackagePrivate`isLeafHeader$; 
              TypeSystem`NestedGrid`PackagePrivate`$lastOutputID = 
               TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]; 
              TypeSystem`NestedGrid`PackagePrivate`makePathTrail[
               TypeSystem`NestedGrid`PackagePrivate`path$, 
                TypeSystem`NestedGrid`PackagePrivate`makePathElements]), Null :> 
             Spacer[10], Blank[] :> Spacer[10]}], 
           TrackedSymbols :> {
            TypeSystem`NestedGrid`PackagePrivate`mouseAnnotation$$}], 
          FrameStyle -> None, ImageMargins -> 0, FrameMargins -> 0, Alignment -> 
          Top, ImageSize -> {Automatic, 15}], FontSize -> 1], 
       TypeSystem`NestedGrid`PackagePrivate`mouseAnnotation$$ = Null}, 
      DynamicWrapperBox[
       DynamicBox[
        ToBoxes[
         Dataset`DatasetContent[
         2, "Path" -> Hold[TypeSystem`NestedGrid`PackagePrivate`$path$$], 
          "Grid" -> Hold[TypeSystem`NestedGrid`PackagePrivate`$grid$$], 
          "State" -> Hold[TypeSystem`NestedGrid`PackagePrivate`$state$$], 
          "VPos" -> Hold[TypeSystem`NestedGrid`PackagePrivate`$vPos$$], 
          "HPos" -> Hold[TypeSystem`NestedGrid`PackagePrivate`$hPos$$], 
          "TopBar" -> Hold[TypeSystem`NestedGrid`PackagePrivate`$topBar$$], 
          "BottomBar" -> 
          Hold[TypeSystem`NestedGrid`PackagePrivate`$bottomBar$$], "OutputID" -> 
          Hold[
            TypeSystem`NestedGrid`PackagePrivate`localHold[
            TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]], 
         StandardForm], 
        ImageSizeCache -> {600., {319.634033203125, 325.365966796875}}, 
        TrackedSymbols :> {
         TypeSystem`NestedGrid`PackagePrivate`$state$$, 
          TypeSystem`NestedGrid`PackagePrivate`$grid$$}], 
       TypeSystem`NestedGrid`PackagePrivate`mouseAnnotation$$ = 
       MouseAnnotation[], 
       ImageSizeCache -> {600., {319.634033203125, 325.365966796875}}], 
      BaseStyle -> {LineBreakWithin -> False}, DynamicModuleValues :> {}, 
      Initialization :> (TypeSystem`NestedGrid`PackagePrivate`$outputID$$ = 
       CreateUUID[]), 
      UnsavedVariables :> {TypeSystem`NestedGrid`PackagePrivate`$outputID$$}],
      Deploy, DefaultBaseStyle -> "Deploy"]},
   "CopyTag",
   DisplayFunction->(#& ),
   InterpretationFunction->("Dataset[<>]"& )],
  False,
  BoxID -> 6377513863853947570445973937375824629227757196535793739616,
  Editable->False,
  SelectWithContents->True,
  Selectable->False]], "Output",
 CellChangeTimes->{{3.841077728170124*^9, 3.841077740803186*^9}, 
   3.841077854940721*^9, {3.841077904649407*^9, 3.8410779165679502`*^9}, 
   3.84107796326167*^9, 3.841078036008335*^9, {3.841078436446044*^9, 
   3.841078476531876*^9}, 3.841078546141102*^9, 3.8410788827042294`*^9, 
   3.841079042088892*^9, 3.841079079021996*^9, 3.841080865386832*^9, 
   3.841088589502322*^9, 3.8429050865083237`*^9, 3.843147064142391*^9, 
   3.8431476155385323`*^9, {3.8582834795374393`*^9, 3.85828349700819*^9}, 
   3.858284268477192*^9, 3.858284322381987*^9, 3.858285730636817*^9},
 CellLabel->
  "Out[225]=",ExpressionUUID->"478699cc-c5f9-452b-bb3b-68346d581871"]
}, Open  ]],

Cell["\<\
Eigenqudits are qudits with non-positive order, they represent measured \
target qudits.
POVM is an operator with eigenqudits, not necessarily with the same dimension \
as target qudits dimension.\
\>", "Text",
 CellChangeTimes->{{3.858284411824053*^9, 
  3.85828458201204*^9}},ExpressionUUID->"43cf6372-d855-47a2-8f01-\
9370aa3518a9"]
}, Open  ]],

Cell[CellGroupData[{

Cell["QuantumMeasurement", "Section",
 CellChangeTimes->{{3.8410793931380243`*^9, 
  3.841079396053041*^9}},ExpressionUUID->"729ba810-3e13-45a4-8d2d-\
3c0d3db2a4d4"],

Cell["\<\
QuantumMeasurement is nothing more than a QuantumMasurementOperator with \
special properties:\
\>", "Text",
 CellChangeTimes->{{3.842905106992136*^9, 3.842905199356041*^9}, {
  3.858281747226684*^9, 3.85828176392192*^9}, {3.8582843377613287`*^9, 
  3.858284362621746*^9}, {3.8582843964556637`*^9, 
  3.85828439799401*^9}},ExpressionUUID->"880c6a9c-3e2e-4876-92c7-\
e31a6b7a5fb1"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"List", "@@", 
  RowBox[{
   RowBox[{"QuantumMeasurementOperator", "[", "\"\<PauliZBasis\>\"", "]"}], 
   "[", 
   RowBox[{"QuantumState", "[", "\"\<Minus\>\"", "]"}], "]"}]}]], "Input",
 CellChangeTimes->{{3.8582843741420507`*^9, 3.858284375016962*^9}},
 CellLabel->
  "In[226]:=",ExpressionUUID->"22b247c6-d6af-40f0-a6e0-bccaacfbfc8e"],

Cell[BoxData[
 RowBox[{"{", 
  InterpretationBox[
   RowBox[{
    TagBox["QuantumMeasurementOperator",
     "SummaryHead"], "[", 
    DynamicModuleBox[{Typeset`open$$ = False, Typeset`embedState$$ = "Ready"}, 
     TemplateBox[{
       PaneSelectorBox[{False -> GridBox[{{
             PaneBox[
              ButtonBox[
               DynamicBox[
                FEPrivate`FrontEndResource["FEBitmaps", "SummaryBoxOpener"]], 
               ButtonFunction :> (Typeset`open$$ = True), Appearance -> None, 
               BaseStyle -> {}, Evaluator -> Automatic, Method -> 
               "Preemptive"], Alignment -> {Center, Center}, ImageSize -> 
              Dynamic[{
                Automatic, 
                 3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                  Magnification])}]], 
             GraphicsBox[
              
              RasterBox[{{{1., 0.42, 0.}}, {{0.260487, 0.356, 0.891569}}}, {{
               0, 0}, {1, 2}}, {0, 1}], Frame -> False, 
              FrameLabel -> {None, None}, 
              FrameTicks -> {{None, None}, {None, None}}, GridLinesStyle -> 
              Directive[
                GrayLevel[0.5, 0.4]], ImageSize -> 
              Dynamic[{
                Automatic, 
                 3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                  Magnification])}], 
              Method -> {
               "AxisPadding" -> Scaled[0.02], "DefaultBoundaryStyle" -> 
                Automatic, 
                "DefaultGraphicsInteraction" -> {
                 "Version" -> 1.2, "TrackMousePosition" -> {True, False}, 
                  "Effects" -> {
                   "Highlight" -> {"ratio" -> 2}, 
                    "HighlightPoint" -> {"ratio" -> 2}, 
                    "Droplines" -> {
                    "freeformCursorMode" -> True, 
                    "placement" -> {"x" -> "All", "y" -> "None"}}}}, 
                "DefaultPlotStyle" -> Automatic, "DomainPadding" -> 
                Scaled[0.02], "RangePadding" -> Scaled[0.05]}], 
             GridBox[{{
                RowBox[{
                  TagBox["\"Measurement Type: \"", "SummaryItemAnnotation"], 
                  "\[InvisibleSpace]", 
                  TagBox["\"POVM\"", "SummaryItem"]}], 
                RowBox[{
                  TagBox["\"Target: \"", "SummaryItemAnnotation"], 
                  "\[InvisibleSpace]", 
                  TagBox[
                   RowBox[{"{", "1", "}"}], "SummaryItem"]}]}, {
                RowBox[{
                  TagBox["\"Dimension: \"", "SummaryItemAnnotation"], 
                  "\[InvisibleSpace]", 
                  TagBox[
                   TemplateBox[{"1", "\"\[RightArrow]\"", "4"}, "RowDefault"],
                    "SummaryItem"]}], 
                RowBox[{
                  TagBox["\"Qudits: \"", "SummaryItemAnnotation"], 
                  "\[InvisibleSpace]", 
                  TagBox[
                   TemplateBox[{"0", "\"\[RightArrow]\"", "2"}, "RowDefault"],
                    "SummaryItem"]}]}}, 
              GridBoxAlignment -> {
               "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, AutoDelete -> 
              False, GridBoxItemSize -> {
               "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
              GridBoxSpacings -> {
               "Columns" -> {{2}}, "Rows" -> {{Automatic}}}, 
              BaseStyle -> {
               ShowStringCharacters -> False, NumberMarks -> False, 
                PrintPrecision -> 3, ShowSyntaxStyles -> False}]}}, 
           GridBoxAlignment -> {"Columns" -> {{Left}}, "Rows" -> {{Top}}}, 
           AutoDelete -> False, 
           GridBoxItemSize -> {
            "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
           BaselinePosition -> {1, 1}], True -> GridBox[{{
             PaneBox[
              ButtonBox[
               DynamicBox[
                FEPrivate`FrontEndResource["FEBitmaps", "SummaryBoxCloser"]], 
               ButtonFunction :> (Typeset`open$$ = False), Appearance -> None,
                BaseStyle -> {}, Evaluator -> Automatic, Method -> 
               "Preemptive"], Alignment -> {Center, Center}, ImageSize -> 
              Dynamic[{
                Automatic, 
                 3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                  Magnification])}]], 
             GraphicsBox[
              
              RasterBox[{{{1., 0.42, 0.}}, {{0.260487, 0.356, 0.891569}}}, {{
               0, 0}, {1, 2}}, {0, 1}], Frame -> False, 
              FrameLabel -> {None, None}, 
              FrameTicks -> {{None, None}, {None, None}}, GridLinesStyle -> 
              Directive[
                GrayLevel[0.5, 0.4]], ImageSize -> 
              Dynamic[{
                Automatic, 
                 3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                  Magnification])}], 
              Method -> {
               "AxisPadding" -> Scaled[0.02], "DefaultBoundaryStyle" -> 
                Automatic, 
                "DefaultGraphicsInteraction" -> {
                 "Version" -> 1.2, "TrackMousePosition" -> {True, False}, 
                  "Effects" -> {
                   "Highlight" -> {"ratio" -> 2}, 
                    "HighlightPoint" -> {"ratio" -> 2}, 
                    "Droplines" -> {
                    "freeformCursorMode" -> True, 
                    "placement" -> {"x" -> "All", "y" -> "None"}}}}, 
                "DefaultPlotStyle" -> Automatic, "DomainPadding" -> 
                Scaled[0.02], "RangePadding" -> Scaled[0.05]}], 
             GridBox[{{
                RowBox[{
                  TagBox["\"Measurement Type: \"", "SummaryItemAnnotation"], 
                  "\[InvisibleSpace]", 
                  TagBox["\"POVM\"", "SummaryItem"]}], 
                RowBox[{
                  TagBox["\"Target: \"", "SummaryItemAnnotation"], 
                  "\[InvisibleSpace]", 
                  TagBox[
                   RowBox[{"{", "1", "}"}], "SummaryItem"]}]}, {
                RowBox[{
                  TagBox["\"Dimension: \"", "SummaryItemAnnotation"], 
                  "\[InvisibleSpace]", 
                  TagBox[
                   TemplateBox[{"1", "\"\[RightArrow]\"", "4"}, "RowDefault"],
                    "SummaryItem"]}], 
                RowBox[{
                  TagBox["\"Qudits: \"", "SummaryItemAnnotation"], 
                  "\[InvisibleSpace]", 
                  TagBox[
                   TemplateBox[{"0", "\"\[RightArrow]\"", "2"}, "RowDefault"],
                    "SummaryItem"]}]}, {
                RowBox[{
                  TagBox["\"Hermitian: \"", "SummaryItemAnnotation"], 
                  "\[InvisibleSpace]", 
                  TagBox["False", "SummaryItem"]}], 
                RowBox[{
                  TagBox["\"Order: \"", "SummaryItemAnnotation"], 
                  "\[InvisibleSpace]", 
                  TagBox[
                   TemplateBox[{
                    RowBox[{"{", "}"}], "\"\[RightArrow]\"", 
                    RowBox[{"{", 
                    RowBox[{"0", ",", "1"}], "}"}]}, "RowDefault"], 
                   "SummaryItem"]}]}, {
                RowBox[{
                  TagBox["\"Unitary: \"", "SummaryItemAnnotation"], 
                  "\[InvisibleSpace]", 
                  TagBox["True", "SummaryItem"]}], 
                RowBox[{
                  TagBox["\"Dimensions: \"", "SummaryItemAnnotation"], 
                  "\[InvisibleSpace]", 
                  TagBox[
                   TemplateBox[{
                    RowBox[{"{", "1", "}"}], "\"\[RightArrow]\"", 
                    RowBox[{"{", 
                    RowBox[{"2", ",", "2"}], "}"}]}, "RowDefault"], 
                   "SummaryItem"]}]}}, 
              GridBoxAlignment -> {
               "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, AutoDelete -> 
              False, GridBoxItemSize -> {
               "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
              GridBoxSpacings -> {
               "Columns" -> {{2}}, "Rows" -> {{Automatic}}}, 
              BaseStyle -> {
               ShowStringCharacters -> False, NumberMarks -> False, 
                PrintPrecision -> 3, ShowSyntaxStyles -> False}]}}, 
           GridBoxAlignment -> {"Columns" -> {{Left}}, "Rows" -> {{Top}}}, 
           AutoDelete -> False, 
           GridBoxItemSize -> {
            "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
           BaselinePosition -> {1, 1}]}, 
        Dynamic[Typeset`open$$], ImageSize -> Automatic]},
      "SummaryPanel"],
     DynamicModuleValues:>{}], "]"}],
   Wolfram`QuantumFramework`QuantumMeasurementOperator[
    Wolfram`QuantumFramework`QuantumOperator[
     Wolfram`QuantumFramework`QuantumState[
      SparseArray[
      Automatic, {4}, 0, {
       1, {{0, 2}, {{1}, {4}}}, {2^Rational[-1, 2], -2^Rational[-1, 2]}}], 
      Wolfram`QuantumFramework`QuantumBasis[<|
       "Input" -> Wolfram`QuantumFramework`QuditBasis[<|{
             
             Wolfram`QuantumFramework`QuditName[\[FormalCapitalI], "Dual" -> 
              False], 1} -> 1|>], "Output" -> 
        Wolfram`QuantumFramework`QuditBasis[<|{
             Wolfram`QuantumFramework`QuditName[
              Interpretation[
               Tooltip[
                Style[0, Bold], "Eigenvalue 1"], {0, {1}}], "Dual" -> False], 
             1} -> SparseArray[Automatic, {2}, 0, {1, {{0, 1}, {{2}}}, {1}}], {
             Wolfram`QuantumFramework`QuditName[
              Interpretation[
               Tooltip[
                Style[1, Bold], "Eigenvalue 2"], {1, {2}}], "Dual" -> False], 
             1} -> SparseArray[Automatic, {2}, 0, {1, {{0, 1}, {{1}}}, {1}}], {
             Wolfram`QuantumFramework`QuditName[
              Subscript["\[Psi]", 
               Subscript["z", "-"]], "Dual" -> False], 2} -> 
           SparseArray[Automatic, {2}, 0, {1, {{0, 1}, {{2}}}, {1}}], {
             Wolfram`QuantumFramework`QuditName[
              Subscript["\[Psi]", 
               Subscript["z", "+"]], "Dual" -> False], 2} -> 
           SparseArray[Automatic, {2}, 0, {1, {{0, 1}, {{1}}}, {1}}]|>], 
        "Picture" -> "Schr\[ODoubleDot]dinger", "Label" -> 
        Composition["PauliZ", "-"], "ParameterSpec" -> {}|>]], {{0, 
      1}, {}}], {1}],
   Editable->False,
   SelectWithContents->True,
   Selectable->False], "}"}]], "Output",
 CellChangeTimes->{3.858284375502804*^9, 3.8582857310682707`*^9},
 CellLabel->
  "Out[226]=",ExpressionUUID->"1eb507ae-2f08-477c-91bf-29341c5e57b8"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{
  RowBox[{"QuantumMeasurementOperator", "[", "\"\<PauliZBasis\>\"", "]"}], 
  "[", 
  RowBox[{"QuantumState", "[", "\"\<Minus\>\"", "]"}], 
  "]"}], "\[IndentingNewLine]", 
 RowBox[{"Dataset", "@", 
  RowBox[{"AssociationMap", "[", 
   RowBox[{"%", ",", 
    RowBox[{"%", "[", "\"\<Properties\>\"", "]"}]}], "]"}]}]}], "Input",
 CellChangeTimes->{{3.841079353937048*^9, 3.8410793902406597`*^9}, {
  3.858285046211129*^9, 3.8582850469494047`*^9}, {3.8582854432003393`*^9, 
  3.8582854433896847`*^9}},
 CellLabel->
  "In[227]:=",ExpressionUUID->"508a53ca-25d6-4e86-878b-08fb07de7389"],

Cell[BoxData[
 InterpretationBox[
  RowBox[{
   TagBox["QuantumMeasurement",
    "SummaryHead"], "[", 
   DynamicModuleBox[{Typeset`open$$ = False, Typeset`embedState$$ = "Ready"}, 
    
    TemplateBox[{
      PaneSelectorBox[{False -> GridBox[{{
            PaneBox[
             ButtonBox[
              DynamicBox[
               FEPrivate`FrontEndResource["FEBitmaps", "SummaryBoxOpener"]], 
              ButtonFunction :> (Typeset`open$$ = True), Appearance -> None, 
              BaseStyle -> {}, Evaluator -> Automatic, Method -> 
              "Preemptive"], Alignment -> {Center, Center}, ImageSize -> 
             Dynamic[{
               Automatic, 
                3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                 Magnification])}]], 
            GraphicsBox[{{
               Opacity[0], 
               
               PointBox[{{-0.8428550619082302, 0.}, {3.8048069919883467`, 
                0.}}]}, {{}, {
                Directive[
                 EdgeForm[
                  Directive[
                   Thickness[Small], 
                   Opacity[0.6859999999999999]]], 
                 RGBColor[0.982864, 0.7431472, 0.3262672]], {{
                  Directive[
                   EdgeForm[
                    Directive[
                    Thickness[Small], 
                    Opacity[0.6859999999999999]]], 
                   RGBColor[0.982864, 0.7431472, 0.3262672]], 
                  TagBox[
                   TooltipBox[
                    TagBox[
                    TagBox[
                    DynamicBox[{
                    FEPrivate`If[
                    CurrentValue["MouseOver"], 
                    EdgeForm[{
                    GrayLevel[0.5], 
                    AbsoluteThickness[1.5], 
                    Opacity[0.66]}], {}, {}], 
                    
                    RectangleBox[{0.5487982520029133, 0.}, {
                    1.4512017479970867`, 0.5}, "RoundingRadius" -> 0]}], 
                    "DelayedMouseEffectStyle"], StatusArea[#, 0.5]& , 
                    TagBoxNote -> "0.5"], 
                    StyleBox["0.5`", {}, StripOnInput -> False]], 
                   Annotation[#, 
                    Style[0.5, {}], "Tooltip"]& ]}, {
                  Directive[
                   EdgeForm[
                    Directive[
                    Thickness[Small], 
                    Opacity[0.6859999999999999]]], 
                   RGBColor[0.982864, 0.7431472, 0.3262672]], 
                  TagBox[
                   TooltipBox[
                    TagBox[
                    TagBox[
                    DynamicBox[{
                    FEPrivate`If[
                    CurrentValue["MouseOver"], 
                    EdgeForm[{
                    GrayLevel[0.5], 
                    AbsoluteThickness[1.5], 
                    Opacity[0.66]}], {}, {}], 
                    
                    RectangleBox[{1.5487982520029133`, 0.}, {
                    2.4512017479970867`, 0.5}, "RoundingRadius" -> 0]}], 
                    "DelayedMouseEffectStyle"], StatusArea[#, 0.5]& , 
                    TagBoxNote -> "0.5"], 
                    StyleBox["0.5`", {}, StripOnInput -> False]], 
                   Annotation[#, 
                    Style[0.5, {}], 
                    "Tooltip"]& ]}}}, {}, {}}, {}, {}, {}, {}, {}}, {
             ImageSize -> 
              Dynamic[{
                Automatic, 
                 3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                  Magnification])}], DisplayFunction -> Identity, AspectRatio -> 
              NCache[GoldenRatio^(-1), 0.6180339887498948], 
              Axes -> {False, False}, AxesLabel -> {None, None}, 
              AxesOrigin -> {-0.8428550619082302, 0.}, 
              CoordinatesToolOptions -> {"DisplayFunction" -> ({
                  Identity[
                   Part[#, 1]], 
                  Identity[
                   Part[#, 2]]}& ), "CopiedValueFunction" -> ({
                  Identity[
                   Part[#, 1]], 
                  Identity[
                   Part[#, 2]]}& )}, Frame -> {{True, False}, {True, False}}, 
              FrameLabel -> {{None, None}, {None, None}}, 
              FrameTicks -> {{None, None}, {None, None}}, 
              GridLines -> {None, None}, GridLinesStyle -> Directive[
                GrayLevel[0.5, 0.4]], PlotRange -> {{All, All}, {All, All}}, 
              PlotRangePadding -> {{
                 Scaled[0.02], 
                 Scaled[0.02]}, {None, 
                 Scaled[0.05]}}, Ticks -> {None, Automatic}}], 
            GridBox[{{
               RowBox[{
                 TagBox["\"Target: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox[
                  RowBox[{"{", "1", "}"}], "SummaryItem"]}]}, {
               RowBox[{
                 TagBox[
                 "\"Measurement Outcomes: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox["2", "SummaryItem"]}]}}, 
             GridBoxAlignment -> {
              "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, AutoDelete -> 
             False, GridBoxItemSize -> {
              "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
             GridBoxSpacings -> {"Columns" -> {{2}}, "Rows" -> {{Automatic}}},
              BaseStyle -> {
              ShowStringCharacters -> False, NumberMarks -> False, 
               PrintPrecision -> 3, ShowSyntaxStyles -> False}]}}, 
          GridBoxAlignment -> {"Columns" -> {{Left}}, "Rows" -> {{Top}}}, 
          AutoDelete -> False, 
          GridBoxItemSize -> {
           "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
          BaselinePosition -> {1, 1}], True -> GridBox[{{
            PaneBox[
             ButtonBox[
              DynamicBox[
               FEPrivate`FrontEndResource["FEBitmaps", "SummaryBoxCloser"]], 
              ButtonFunction :> (Typeset`open$$ = False), Appearance -> None, 
              BaseStyle -> {}, Evaluator -> Automatic, Method -> 
              "Preemptive"], Alignment -> {Center, Center}, ImageSize -> 
             Dynamic[{
               Automatic, 
                3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                 Magnification])}]], 
            GraphicsBox[{{
               Opacity[0], 
               
               PointBox[{{-0.8428550619082302, 0.}, {3.8048069919883467`, 
                0.}}]}, {{}, {
                Directive[
                 EdgeForm[
                  Directive[
                   Thickness[Small], 
                   Opacity[0.6859999999999999]]], 
                 RGBColor[0.982864, 0.7431472, 0.3262672]], {{
                  Directive[
                   EdgeForm[
                    Directive[
                    Thickness[Small], 
                    Opacity[0.6859999999999999]]], 
                   RGBColor[0.982864, 0.7431472, 0.3262672]], 
                  TagBox[
                   TooltipBox[
                    TagBox[
                    TagBox[
                    DynamicBox[{
                    FEPrivate`If[
                    CurrentValue["MouseOver"], 
                    EdgeForm[{
                    GrayLevel[0.5], 
                    AbsoluteThickness[1.5], 
                    Opacity[0.66]}], {}, {}], 
                    
                    RectangleBox[{0.5487982520029133, 0.}, {
                    1.4512017479970867`, 0.5}, "RoundingRadius" -> 0]}], 
                    "DelayedMouseEffectStyle"], StatusArea[#, 0.5]& , 
                    TagBoxNote -> "0.5"], 
                    StyleBox["0.5`", {}, StripOnInput -> False]], 
                   Annotation[#, 
                    Style[0.5, {}], "Tooltip"]& ]}, {
                  Directive[
                   EdgeForm[
                    Directive[
                    Thickness[Small], 
                    Opacity[0.6859999999999999]]], 
                   RGBColor[0.982864, 0.7431472, 0.3262672]], 
                  TagBox[
                   TooltipBox[
                    TagBox[
                    TagBox[
                    DynamicBox[{
                    FEPrivate`If[
                    CurrentValue["MouseOver"], 
                    EdgeForm[{
                    GrayLevel[0.5], 
                    AbsoluteThickness[1.5], 
                    Opacity[0.66]}], {}, {}], 
                    
                    RectangleBox[{1.5487982520029133`, 0.}, {
                    2.4512017479970867`, 0.5}, "RoundingRadius" -> 0]}], 
                    "DelayedMouseEffectStyle"], StatusArea[#, 0.5]& , 
                    TagBoxNote -> "0.5"], 
                    StyleBox["0.5`", {}, StripOnInput -> False]], 
                   Annotation[#, 
                    Style[0.5, {}], 
                    "Tooltip"]& ]}}}, {}, {}}, {}, {}, {}, {}, {}}, {
             ImageSize -> 
              Dynamic[{
                Automatic, 
                 3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                  Magnification])}], DisplayFunction -> Identity, AspectRatio -> 
              NCache[GoldenRatio^(-1), 0.6180339887498948], 
              Axes -> {False, False}, AxesLabel -> {None, None}, 
              AxesOrigin -> {-0.8428550619082302, 0.}, 
              CoordinatesToolOptions -> {"DisplayFunction" -> ({
                  Identity[
                   Part[#, 1]], 
                  Identity[
                   Part[#, 2]]}& ), "CopiedValueFunction" -> ({
                  Identity[
                   Part[#, 1]], 
                  Identity[
                   Part[#, 2]]}& )}, Frame -> {{True, False}, {True, False}}, 
              FrameLabel -> {{None, None}, {None, None}}, 
              FrameTicks -> {{None, None}, {None, None}}, 
              GridLines -> {None, None}, GridLinesStyle -> Directive[
                GrayLevel[0.5, 0.4]], PlotRange -> {{All, All}, {All, All}}, 
              PlotRangePadding -> {{
                 Scaled[0.02], 
                 Scaled[0.02]}, {None, 
                 Scaled[0.05]}}, Ticks -> {None, Automatic}}], 
            GridBox[{{
               RowBox[{
                 TagBox["\"Target: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox[
                  RowBox[{"{", "1", "}"}], "SummaryItem"]}]}, {
               RowBox[{
                 TagBox[
                 "\"Measurement Outcomes: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox["2", "SummaryItem"]}]}, {
               RowBox[{
                 TagBox["\"Entropy: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox[
                  
                  TemplateBox[{"1.`", "\"b\"", "bits", "\"Bits\""}, 
                   "Quantity", SyntaxForm -> Mod], "SummaryItem"]}]}}, 
             GridBoxAlignment -> {
              "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, AutoDelete -> 
             False, GridBoxItemSize -> {
              "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
             GridBoxSpacings -> {"Columns" -> {{2}}, "Rows" -> {{Automatic}}},
              BaseStyle -> {
              ShowStringCharacters -> False, NumberMarks -> False, 
               PrintPrecision -> 3, ShowSyntaxStyles -> False}]}}, 
          GridBoxAlignment -> {"Columns" -> {{Left}}, "Rows" -> {{Top}}}, 
          AutoDelete -> False, 
          GridBoxItemSize -> {
           "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
          BaselinePosition -> {1, 1}]}, 
       Dynamic[Typeset`open$$], ImageSize -> Automatic]},
     "SummaryPanel"],
    DynamicModuleValues:>{}], "]"}],
  Wolfram`QuantumFramework`QuantumMeasurement[
   Wolfram`QuantumFramework`QuantumMeasurementOperator[
    Wolfram`QuantumFramework`QuantumOperator[
     Wolfram`QuantumFramework`QuantumState[
      SparseArray[
      Automatic, {4}, 0, {
       1, {{0, 2}, {{1}, {4}}}, {2^Rational[-1, 2], -2^Rational[-1, 2]}}], 
      Wolfram`QuantumFramework`QuantumBasis[<|
       "Input" -> Wolfram`QuantumFramework`QuditBasis[<|{
             
             Wolfram`QuantumFramework`QuditName[\[FormalCapitalI], "Dual" -> 
              False], 1} -> 1|>], "Output" -> 
        Wolfram`QuantumFramework`QuditBasis[<|{
             Wolfram`QuantumFramework`QuditName[
              Interpretation[
               Tooltip[
                Style[0, Bold], "Eigenvalue 1"], {0, {1}}], "Dual" -> False], 
             1} -> SparseArray[Automatic, {2}, 0, {1, {{0, 1}, {{2}}}, {1}}], {
             Wolfram`QuantumFramework`QuditName[
              Interpretation[
               Tooltip[
                Style[1, Bold], "Eigenvalue 2"], {1, {2}}], "Dual" -> False], 
             1} -> SparseArray[Automatic, {2}, 0, {1, {{0, 1}, {{1}}}, {1}}], {
             Wolfram`QuantumFramework`QuditName[
              Subscript["\[Psi]", 
               Subscript["z", "-"]], "Dual" -> False], 2} -> 
           SparseArray[Automatic, {2}, 0, {1, {{0, 1}, {{2}}}, {1}}], {
             Wolfram`QuantumFramework`QuditName[
              Subscript["\[Psi]", 
               Subscript["z", "+"]], "Dual" -> False], 2} -> 
           SparseArray[Automatic, {2}, 0, {1, {{0, 1}, {{1}}}, {1}}]|>], 
        "Picture" -> "Schr\[ODoubleDot]dinger", "Label" -> 
        Composition["PauliZ", "-"], "ParameterSpec" -> {}|>]], {{0, 
      1}, {}}], {1}]],
  Editable->False,
  SelectWithContents->True,
  Selectable->False]], "Output",
 CellChangeTimes->{{3.8410793640703773`*^9, 3.8410793766715107`*^9}, {
   3.841080743541553*^9, 3.841080781009994*^9}, 3.841080870129435*^9, 
   3.841088590780034*^9, 3.842905098863139*^9, 3.842905190933632*^9, 
   3.8431470659120207`*^9, 3.843147618317444*^9, {3.858285026275942*^9, 
   3.858285047455681*^9}, 3.85828525714677*^9, 3.858285434771381*^9, 
   3.8582857311991158`*^9},
 CellLabel->
  "Out[227]=",ExpressionUUID->"76181a08-e8ae-4fb1-8cdc-3c2b7fda4dbf"],

Cell[BoxData[
 TemplateBox[{
  "QuantumOperator", "undefprop", 
   "\"property \\!\\(\\*RowBox[{\\\"\\\\\\\"Eigensystem\\\\\\\"\\\"}]\\) is \
undefined for this state\"", 2, 228, 424, 18741828798127836441, "Local", 
   "Wolfram`QuantumFramework`QuantumOperator"},
  "MessageTemplate2"]], "Message", "MSG",
 CellChangeTimes->{3.8582852572721243`*^9, 3.858285434922768*^9, 
  3.8582857312977753`*^9},
 CellLabel->
  "During evaluation of \
In[227]:=",ExpressionUUID->"b41e1fa7-626a-438e-b20a-c8d9ea6b2f25"],

Cell[BoxData[
 TemplateBox[{
  "QuantumOperator", "undefprop", 
   "\"property \\!\\(\\*RowBox[{\\\"\\\\\\\"UnstackInput\\\\\\\"\\\"}]\\) is \
undefined for this state\"", 2, 228, 425, 18741828798127836441, "Local", 
   "Wolfram`QuantumFramework`QuantumOperator"},
  "MessageTemplate2"]], "Message", "MSG",
 CellChangeTimes->{3.8582852572721243`*^9, 3.858285434922768*^9, 
  3.858285731365033*^9},
 CellLabel->
  "During evaluation of \
In[227]:=",ExpressionUUID->"21f005cc-b840-498f-bd74-471b8174f6a4"],

Cell[BoxData[
 TagBox[
  TagBox[
   DynamicModuleBox[{TypeSystem`NestedGrid`PackagePrivate`$state$$ = <|
    "InitialData" -> <|
      "QuantumOperator" -> Wolfram`QuantumFramework`QuantumMeasurementOperator[
         Wolfram`QuantumFramework`QuantumOperator[
          Wolfram`QuantumFramework`QuantumState[
           SparseArray[
           Automatic, {4}, 0, {
            1, {{0, 2}, {{1}, {4}}}, {
             2^Rational[-1, 2], -2^Rational[-1, 2]}}], 
           
           Wolfram`QuantumFramework`QuantumBasis[<|
            "Input" -> Wolfram`QuantumFramework`QuditBasis[<|{
                  
                  Wolfram`QuantumFramework`QuditName[\[FormalCapitalI], 
                   "Dual" -> False], 1} -> 1|>], "Output" -> 
             Wolfram`QuantumFramework`QuditBasis[<|{
                  Wolfram`QuantumFramework`QuditName[
                   Interpretation[
                    Tooltip[
                    Style[0, Bold], "Eigenvalue 1"], {0, {1}}], "Dual" -> 
                   False], 1} -> 
                SparseArray[Automatic, {2}, 0, {1, {{0, 1}, {{2}}}, {1}}], {
                  Wolfram`QuantumFramework`QuditName[
                   Interpretation[
                    Tooltip[
                    Style[1, Bold], "Eigenvalue 2"], {1, {2}}], "Dual" -> 
                   False], 1} -> 
                SparseArray[Automatic, {2}, 0, {1, {{0, 1}, {{1}}}, {1}}], {
                  Wolfram`QuantumFramework`QuditName[
                   Subscript["\[Psi]", 
                    Subscript["z", "-"]], "Dual" -> False], 2} -> 
                SparseArray[Automatic, {2}, 0, {1, {{0, 1}, {{2}}}, {1}}], {
                  Wolfram`QuantumFramework`QuditName[
                   Subscript["\[Psi]", 
                    Subscript["z", "+"]], "Dual" -> False], 2} -> 
                SparseArray[Automatic, {2}, 0, {1, {{0, 1}, {{1}}}, {1}}]|>], 
             "Picture" -> "Schr\[ODoubleDot]dinger", "Label" -> 
             Composition["PauliZ", "-"], "ParameterSpec" -> {}|>]], {{0, 
           1}, {}}], {1}], "Distribution" -> 
       CategoricalDistribution[<|
         "Probabilities" -> {0.5, 0.5}, 
          "Index" -> <|Wolfram`QuantumFramework`QuditName[
              Subscript["\[Psi]", 
               Subscript["z", "-"]], "Dual" -> False] -> 1, 
            Wolfram`QuantumFramework`QuditName[
              Subscript["\[Psi]", 
               Subscript["z", "+"]], "Dual" -> False] -> 2|>|>], "Outcomes" -> {
         Wolfram`QuantumFramework`QuditName[
          Subscript["\[Psi]", 
           Subscript["z", "-"]], "Dual" -> False], 
         Wolfram`QuantumFramework`QuditName[
          Subscript["\[Psi]", 
           Subscript["z", "+"]], "Dual" -> False]}, 
       "Probabilities" -> <|Wolfram`QuantumFramework`QuditName[
           Subscript["\[Psi]", 
            Subscript["z", "-"]], "Dual" -> False] -> Rational[1, 2], 
         Wolfram`QuantumFramework`QuditName[
           Subscript["\[Psi]", 
            Subscript["z", "+"]], "Dual" -> False] -> Rational[1, 2]|>, 
       "Mean" -> Rational[1, 2] Wolfram`QuantumFramework`QuditName[
           Interpretation[
            Tooltip[
             Style[0, Bold], "Eigenvalue 1"], {0, {1}}], "Dual" -> False] + 
        Rational[1, 2] Wolfram`QuantumFramework`QuditName[
           Interpretation[
            Tooltip[
             Style[1, Bold], "Eigenvalue 2"], {1, {2}}], "Dual" -> False], 
       "States" -> {
         Wolfram`QuantumFramework`QuantumState[
          SparseArray[
          Automatic, {2}, 0, {1, {{0, 1}, {{1}}}, {2^Rational[-1, 2]}}], 
          
          Wolfram`QuantumFramework`QuantumBasis[<|
           "Input" -> Wolfram`QuantumFramework`QuditBasis[<|{
                 
                 Wolfram`QuantumFramework`QuditName[\[FormalCapitalI], "Dual" -> 
                  False], 1} -> 1|>], "Output" -> 
            Wolfram`QuantumFramework`QuditBasis[<|{
                 Wolfram`QuantumFramework`QuditName[
                  Subscript["\[Psi]", 
                   Subscript["z", "-"]], "Dual" -> False], 1} -> 
               SparseArray[Automatic, {2}, 0, {1, {{0, 1}, {{2}}}, {1}}], {
                 Wolfram`QuantumFramework`QuditName[
                  Subscript["\[Psi]", 
                   Subscript["z", "+"]], "Dual" -> False], 1} -> 
               SparseArray[Automatic, {2}, 0, {1, {{0, 1}, {{1}}}, {1}}]|>], 
            "Picture" -> "Schr\[ODoubleDot]dinger", "Label" -> 
            Composition["PauliZ", "-"], "ParameterSpec" -> {}|>]], 
         Wolfram`QuantumFramework`QuantumState[
          SparseArray[
          Automatic, {2}, 0, {1, {{0, 1}, {{2}}}, {-2^Rational[-1, 2]}}], 
          
          Wolfram`QuantumFramework`QuantumBasis[<|
           "Input" -> Wolfram`QuantumFramework`QuditBasis[<|{
                 
                 Wolfram`QuantumFramework`QuditName[\[FormalCapitalI], "Dual" -> 
                  False], 1} -> 1|>], "Output" -> 
            Wolfram`QuantumFramework`QuditBasis[<|{
                 Wolfram`QuantumFramework`QuditName[
                  Subscript["\[Psi]", 
                   Subscript["z", "-"]], "Dual" -> False], 1} -> 
               SparseArray[Automatic, {2}, 0, {1, {{0, 1}, {{2}}}, {1}}], {
                 Wolfram`QuantumFramework`QuditName[
                  Subscript["\[Psi]", 
                   Subscript["z", "+"]], "Dual" -> False], 1} -> 
               SparseArray[Automatic, {2}, 0, {1, {{0, 1}, {{1}}}, {1}}]|>], 
            "Picture" -> "Schr\[ODoubleDot]dinger", "Label" -> 
            Composition["PauliZ", "-"], "ParameterSpec" -> {}|>]]}, 
       "StateAssociation" -> <|Wolfram`QuantumFramework`QuditName[
           Subscript["\[Psi]", 
            Subscript["z", "-"]], "Dual" -> False] -> 
         Wolfram`QuantumFramework`QuantumState[
           SparseArray[
           Automatic, {2}, 0, {1, {{0, 1}, {{1}}}, {2^Rational[-1, 2]}}], 
           
           Wolfram`QuantumFramework`QuantumBasis[<|
            "Input" -> Wolfram`QuantumFramework`QuditBasis[<|{
                  
                  Wolfram`QuantumFramework`QuditName[\[FormalCapitalI], 
                   "Dual" -> False], 1} -> 1|>], "Output" -> 
             Wolfram`QuantumFramework`QuditBasis[<|{
                  Wolfram`QuantumFramework`QuditName[
                   Subscript["\[Psi]", 
                    Subscript["z", "-"]], "Dual" -> False], 1} -> 
                SparseArray[Automatic, {2}, 0, {1, {{0, 1}, {{2}}}, {1}}], {
                  Wolfram`QuantumFramework`QuditName[
                   Subscript["\[Psi]", 
                    Subscript["z", "+"]], "Dual" -> False], 1} -> 
                SparseArray[Automatic, {2}, 0, {1, {{0, 1}, {{1}}}, {1}}]|>], 
             "Picture" -> "Schr\[ODoubleDot]dinger", "Label" -> 
             Composition["PauliZ", "-"], "ParameterSpec" -> {}|>]], 
         Wolfram`QuantumFramework`QuditName[
           Subscript["\[Psi]", 
            Subscript["z", "+"]], "Dual" -> False] -> 
         Wolfram`QuantumFramework`QuantumState[
           SparseArray[
           Automatic, {2}, 0, {1, {{0, 1}, {{2}}}, {-2^Rational[-1, 2]}}], 
           
           Wolfram`QuantumFramework`QuantumBasis[<|
            "Input" -> Wolfram`QuantumFramework`QuditBasis[<|{
                  
                  Wolfram`QuantumFramework`QuditName[\[FormalCapitalI], 
                   "Dual" -> False], 1} -> 1|>], "Output" -> 
             Wolfram`QuantumFramework`QuditBasis[<|{
                  Wolfram`QuantumFramework`QuditName[
                   Subscript["\[Psi]", 
                    Subscript["z", "-"]], "Dual" -> False], 1} -> 
                SparseArray[Automatic, {2}, 0, {1, {{0, 1}, {{2}}}, {1}}], {
                  Wolfram`QuantumFramework`QuditName[
                   Subscript["\[Psi]", 
                    Subscript["z", "+"]], "Dual" -> False], 1} -> 
                SparseArray[Automatic, {2}, 0, {1, {{0, 1}, {{1}}}, {1}}]|>], 
             "Picture" -> "Schr\[ODoubleDot]dinger", "Label" -> 
             Composition["PauliZ", "-"], "ParameterSpec" -> {}|>]]|>, 
       "Entropy" -> Quantity[1., "Bits"], "PostMeasurementState" -> 
       Wolfram`QuantumFramework`QuantumState[
        SparseArray[
         Automatic, {2, 2}, 0, {
          1, {{0, 1, 2}, {{1}, {2}}}, {Rational[1, 2], Rational[1, 2]}}], 
         Wolfram`QuantumFramework`QuantumBasis[<|
          "Input" -> Wolfram`QuantumFramework`QuditBasis[<|{
                
                Wolfram`QuantumFramework`QuditName[\[FormalCapitalI], "Dual" -> 
                 False], 1} -> 1|>], "Output" -> 
           Wolfram`QuantumFramework`QuditBasis[<|{
                Wolfram`QuantumFramework`QuditName[
                 Subscript["\[Psi]", 
                  Subscript["z", "-"]], "Dual" -> False], 1} -> 
              SparseArray[Automatic, {2}, 0, {1, {{0, 1}, {{2}}}, {1}}], {
                Wolfram`QuantumFramework`QuditName[
                 Subscript["\[Psi]", 
                  Subscript["z", "+"]], "Dual" -> False], 1} -> 
              SparseArray[Automatic, {2}, 0, {1, {{0, 1}, {{1}}}, {1}}]|>], 
           "Picture" -> "Schr\[ODoubleDot]dinger", "Label" -> "Computational",
            "ParameterSpec" -> {}|>]], "Arity" -> 1, "Basis" -> 
       Wolfram`QuantumFramework`QuantumBasis[<|
         "Input" -> Wolfram`QuantumFramework`QuditBasis[<|{
               
               Wolfram`QuantumFramework`QuditName[\[FormalCapitalI], "Dual" -> 
                False], 1} -> 1|>], "Output" -> 
          Wolfram`QuantumFramework`QuditBasis[<|{
               Wolfram`QuantumFramework`QuditName[
                Interpretation[
                 Tooltip[
                  Style[0, Bold], "Eigenvalue 1"], {0, {1}}], "Dual" -> 
                False], 1} -> 
             SparseArray[Automatic, {2}, 0, {1, {{0, 1}, {{2}}}, {1}}], {
               Wolfram`QuantumFramework`QuditName[
                Interpretation[
                 Tooltip[
                  Style[1, Bold], "Eigenvalue 2"], {1, {2}}], "Dual" -> 
                False], 1} -> 
             SparseArray[Automatic, {2}, 0, {1, {{0, 1}, {{1}}}, {1}}], {
               Wolfram`QuantumFramework`QuditName[
                Subscript["\[Psi]", 
                 Subscript["z", "-"]], "Dual" -> False], 2} -> 
             SparseArray[Automatic, {2}, 0, {1, {{0, 1}, {{2}}}, {1}}], {
               Wolfram`QuantumFramework`QuditName[
                Subscript["\[Psi]", 
                 Subscript["z", "+"]], "Dual" -> False], 2} -> 
             SparseArray[Automatic, {2}, 0, {1, {{0, 1}, {{1}}}, {1}}]|>], 
          "Picture" -> "Schr\[ODoubleDot]dinger", "Label" -> 
          Composition["PauliZ", "-"], "ParameterSpec" -> {}|>], "Canonical" -> 
       Wolfram`QuantumFramework`QuantumMeasurement[
         Wolfram`QuantumFramework`QuantumMeasurementOperator[
          Wolfram`QuantumFramework`QuantumOperator[
           Wolfram`QuantumFramework`QuantumState[
            SparseArray[
            Automatic, {4}, 0, {
             1, {{0, 2}, {{1}, {4}}}, {
              2^Rational[-1, 2], -2^Rational[-1, 2]}}], 
            
            Wolfram`QuantumFramework`QuantumBasis[<|
             "Input" -> Wolfram`QuantumFramework`QuditBasis[<|{
                   
                   Wolfram`QuantumFramework`QuditName[\[FormalCapitalI], 
                    "Dual" -> False], 1} -> 1|>], "Output" -> 
              Wolfram`QuantumFramework`QuditBasis[<|{
                   Wolfram`QuantumFramework`QuditName[
                    Subscript["\[Psi]", 
                    Subscript["z", "-"]], "Dual" -> False], 1} -> 
                 SparseArray[Automatic, {2}, 0, {1, {{0, 1}, {{2}}}, {1}}], {
                   Wolfram`QuantumFramework`QuditName[
                    Subscript["\[Psi]", 
                    Subscript["z", "+"]], "Dual" -> False], 1} -> 
                 SparseArray[Automatic, {2}, 0, {1, {{0, 1}, {{1}}}, {1}}], {
                   Wolfram`QuantumFramework`QuditName[
                    Subscript["\[Psi]", 
                    Subscript["z", "-"]], "Dual" -> False], 2} -> 
                 SparseArray[Automatic, {2}, 0, {1, {{0, 1}, {{2}}}, {1}}], {
                   Wolfram`QuantumFramework`QuditName[
                    Subscript["\[Psi]", 
                    Subscript["z", "+"]], "Dual" -> False], 2} -> 
                 SparseArray[Automatic, {2}, 0, {1, {{0, 1}, {{1}}}, {1}}]|>],
               "Picture" -> "Schr\[ODoubleDot]dinger", "Label" -> 
              Composition["PauliZ", "-"], "ParameterSpec" -> {}|>]], {{0, 
            1}, {}}], {1}]], "CanonicalBasis" -> 
       Wolfram`QuantumFramework`QuantumBasis[<|
         "Input" -> Wolfram`QuantumFramework`QuditBasis[<|{
               
               Wolfram`QuantumFramework`QuditName[\[FormalCapitalI], "Dual" -> 
                False], 1} -> 1|>], "Output" -> 
          Wolfram`QuantumFramework`QuditBasis[<|{
               Wolfram`QuantumFramework`QuditName[
                Subscript["\[Psi]", 
                 Subscript["z", "-"]], "Dual" -> False], 1} -> 
             SparseArray[Automatic, {2}, 0, {1, {{0, 1}, {{2}}}, {1}}], {
               Wolfram`QuantumFramework`QuditName[
                Subscript["\[Psi]", 
                 Subscript["z", "+"]], "Dual" -> False], 1} -> 
             SparseArray[Automatic, {2}, 0, {1, {{0, 1}, {{1}}}, {1}}], {
               Wolfram`QuantumFramework`QuditName[
                Subscript["\[Psi]", 
                 Subscript["z", "-"]], "Dual" -> False], 2} -> 
             SparseArray[Automatic, {2}, 0, {1, {{0, 1}, {{2}}}, {1}}], {
               Wolfram`QuantumFramework`QuditName[
                Subscript["\[Psi]", 
                 Subscript["z", "+"]], "Dual" -> False], 2} -> 
             SparseArray[Automatic, {2}, 0, {1, {{0, 1}, {{1}}}, {1}}]|>], 
          "Picture" -> "Schr\[ODoubleDot]dinger", "Label" -> 
          Composition["PauliZ", "-"], "ParameterSpec" -> {}|>], 
       "Computational" -> Wolfram`QuantumFramework`QuantumMeasurement[
         Wolfram`QuantumFramework`QuantumMeasurementOperator[
          Wolfram`QuantumFramework`QuantumOperator[
           Wolfram`QuantumFramework`QuantumState[
            SparseArray[
            Automatic, {4}, 0, {
             1, {{0, 2}, {{1}, {4}}}, {-2^Rational[-1, 2], 2^
               Rational[-1, 2]}}], 
            
            Wolfram`QuantumFramework`QuantumBasis[<|
             "Input" -> Wolfram`QuantumFramework`QuditBasis[<|{
                   
                   Wolfram`QuantumFramework`QuditName[\[FormalCapitalI], 
                    "Dual" -> False], 1} -> 1|>], "Output" -> 
              Wolfram`QuantumFramework`QuditBasis[<|{
                   Wolfram`QuantumFramework`QuditName[0, "Dual" -> False], 1} -> 
                 SparseArray[Automatic, {2}, 0, {1, {{0, 1}, {{1}}}, {1}}], {
                   Wolfram`QuantumFramework`QuditName[1, "Dual" -> False], 1} -> 
                 SparseArray[Automatic, {2}, 0, {1, {{0, 1}, {{2}}}, {1}}], {
                   Wolfram`QuantumFramework`QuditName[0, "Dual" -> False], 2} -> 
                 SparseArray[Automatic, {2}, 0, {1, {{0, 1}, {{1}}}, {1}}], {
                   Wolfram`QuantumFramework`QuditName[1, "Dual" -> False], 2} -> 
                 SparseArray[Automatic, {2}, 0, {1, {{0, 1}, {{2}}}, {1}}]|>],
               "Picture" -> "Schr\[ODoubleDot]dinger", "Label" -> 
              "Computational", "ParameterSpec" -> {}|>]], {{0, 1}, {}}], {
          1}]], "ConjugateTranspose" -> 
       Wolfram`QuantumFramework`QuantumOperator[
         Wolfram`QuantumFramework`QuantumState[
          SparseArray[
          Automatic, {4}, 0, {
           1, {{0, 2}, {{1}, {4}}}, {2^Rational[-1, 2], -2^Rational[-1, 2]}}], 
          
          Wolfram`QuantumFramework`QuantumBasis[<|
           "Input" -> Wolfram`QuantumFramework`QuditBasis[<|{
                 Wolfram`QuantumFramework`QuditName[
                  Interpretation[
                   Tooltip[
                    Style[0, Bold], "Eigenvalue 1"], {0, {1}}], "Dual" -> 
                  True], 1} -> 
               SparseArray[Automatic, {2}, 0, {1, {{0, 1}, {{2}}}, {1}}], {
                 Wolfram`QuantumFramework`QuditName[
                  Interpretation[
                   Tooltip[
                    Style[1, Bold], "Eigenvalue 2"], {1, {2}}], "Dual" -> 
                  True], 1} -> 
               SparseArray[Automatic, {2}, 0, {1, {{0, 1}, {{1}}}, {1}}], {
                 Wolfram`QuantumFramework`QuditName[
                  Subscript["\[Psi]", 
                   Subscript["z", "-"]], "Dual" -> True], 2} -> 
               SparseArray[Automatic, {2}, 0, {1, {{0, 1}, {{2}}}, {1}}], {
                 Wolfram`QuantumFramework`QuditName[
                  Subscript["\[Psi]", 
                   Subscript["z", "+"]], "Dual" -> True], 2} -> 
               SparseArray[Automatic, {2}, 0, {1, {{0, 1}, {{1}}}, {1}}]|>], 
            "Output" -> Wolfram`QuantumFramework`QuditBasis[<|{
                 
                 Wolfram`QuantumFramework`QuditName[\[FormalCapitalI], "Dual" -> 
                  False], 1} -> 1|>], "Picture" -> "Schr\[ODoubleDot]dinger", 
            "Label" -> Superscript[
              Composition["PauliZ", "-"], "\[Dagger]"], 
            "ParameterSpec" -> {}|>]], {{}, {0, 1}}], "ControlOrder" -> 
       Missing["ControlOrder"], "Dagger" -> 
       Wolfram`QuantumFramework`QuantumOperator[
         Wolfram`QuantumFramework`QuantumState[
          SparseArray[
          Automatic, {4}, 0, {
           1, {{0, 2}, {{1}, {4}}}, {2^Rational[-1, 2], -2^Rational[-1, 2]}}], 
          
          Wolfram`QuantumFramework`QuantumBasis[<|
           "Input" -> Wolfram`QuantumFramework`QuditBasis[<|{
                 Wolfram`QuantumFramework`QuditName[
                  Interpretation[
                   Tooltip[
                    Style[0, Bold], "Eigenvalue 1"], {0, {1}}], "Dual" -> 
                  True], 1} -> 
               SparseArray[Automatic, {2}, 0, {1, {{0, 1}, {{2}}}, {1}}], {
                 Wolfram`QuantumFramework`QuditName[
                  Interpretation[
                   Tooltip[
                    Style[1, Bold], "Eigenvalue 2"], {1, {2}}], "Dual" -> 
                  True], 1} -> 
               SparseArray[Automatic, {2}, 0, {1, {{0, 1}, {{1}}}, {1}}], {
                 Wolfram`QuantumFramework`QuditName[
                  Subscript["\[Psi]", 
                   Subscript["z", "-"]], "Dual" -> True], 2} -> 
               SparseArray[Automatic, {2}, 0, {1, {{0, 1}, {{2}}}, {1}}], {
                 Wolfram`QuantumFramework`QuditName[
                  Subscript["\[Psi]", 
                   Subscript["z", "+"]], "Dual" -> True], 2} -> 
               SparseArray[Automatic, {2}, 0, {1, {{0, 1}, {{1}}}, {1}}]|>], 
            "Output" -> Wolfram`QuantumFramework`QuditBasis[<|{
                 
                 Wolfram`QuantumFramework`QuditName[\[FormalCapitalI], "Dual" -> 
                  False], 1} -> 1|>], "Picture" -> "Schr\[ODoubleDot]dinger", 
            "Label" -> Superscript[
              Composition["PauliZ", "-"], "\[Dagger]"], 
            "ParameterSpec" -> {}|>]], {{}, {0, 1}}], "Dimensions" -> {2, 2}, 
       "Dual" -> Wolfram`QuantumFramework`QuantumOperator[
         Wolfram`QuantumFramework`QuantumState[
          SparseArray[
          Automatic, {4}, 0, {
           1, {{0, 2}, {{1}, {4}}}, {2^Rational[-1, 2], -2^Rational[-1, 2]}}], 
          
          Wolfram`QuantumFramework`QuantumBasis[<|
           "Input" -> Wolfram`QuantumFramework`QuditBasis[<|{
                 Wolfram`QuantumFramework`QuditName[\[FormalCapitalI], "Dual" -> 
                  False], 1} -> 1|>], "Output" -> 
            Wolfram`QuantumFramework`QuditBasis[<|{
                 Wolfram`QuantumFramework`QuditName[
                  Interpretation[
                   Tooltip[
                    Style[0, Bold], "Eigenvalue 1"], {0, {1}}], "Dual" -> 
                  True], 1} -> 
               SparseArray[Automatic, {2}, 0, {1, {{0, 1}, {{2}}}, {1}}], {
                 Wolfram`QuantumFramework`QuditName[
                  Interpretation[
                   Tooltip[
                    Style[1, Bold], "Eigenvalue 2"], {1, {2}}], "Dual" -> 
                  True], 1} -> 
               SparseArray[Automatic, {2}, 0, {1, {{0, 1}, {{1}}}, {1}}], {
                 Wolfram`QuantumFramework`QuditName[
                  Subscript["\[Psi]", 
                   Subscript["z", "-"]], "Dual" -> True], 2} -> 
               SparseArray[Automatic, {2}, 0, {1, {{0, 1}, {{2}}}, {1}}], {
                 Wolfram`QuantumFramework`QuditName[
                  Subscript["\[Psi]", 
                   Subscript["z", "+"]], "Dual" -> True], 2} -> 
               SparseArray[Automatic, {2}, 0, {1, {{0, 1}, {{1}}}, {1}}]|>], 
            "Picture" -> "Schr\[ODoubleDot]dinger", "Label" -> 
            Composition["PauliZ", "-"], "ParameterSpec" -> {}|>]], {{0, 
          1}, {}}], "Eigendimension" -> 2, "Eigendimensions" -> {2}, 
       "Eigenqudits" -> 1, "Eigensystem" -> 
       Wolfram`QuantumFramework`QuantumOperator[
         Wolfram`QuantumFramework`QuantumState[
          SparseArray[
          Automatic, {4}, 0, {
           1, {{0, 2}, {{1}, {4}}}, {2^Rational[-1, 2], -2^Rational[-1, 2]}}], 
          
          Wolfram`QuantumFramework`QuantumBasis[<|
           "Input" -> Wolfram`QuantumFramework`QuditBasis[<|{
                 
                 Wolfram`QuantumFramework`QuditName[\[FormalCapitalI], "Dual" -> 
                  False], 1} -> 1|>], "Output" -> 
            Wolfram`QuantumFramework`QuditBasis[<|{
                 Wolfram`QuantumFramework`QuditName[
                  Interpretation[
                   Tooltip[
                    Style[0, Bold], "Eigenvalue 1"], {0, {1}}], "Dual" -> 
                  False], 1} -> 
               SparseArray[Automatic, {2}, 0, {1, {{0, 1}, {{2}}}, {1}}], {
                 Wolfram`QuantumFramework`QuditName[
                  Interpretation[
                   Tooltip[
                    Style[1, Bold], "Eigenvalue 2"], {1, {2}}], "Dual" -> 
                  False], 1} -> 
               SparseArray[Automatic, {2}, 0, {1, {{0, 1}, {{1}}}, {1}}], {
                 Wolfram`QuantumFramework`QuditName[
                  Subscript["\[Psi]", 
                   Subscript["z", "-"]], "Dual" -> False], 2} -> 
               SparseArray[Automatic, {2}, 0, {1, {{0, 1}, {{2}}}, {1}}], {
                 Wolfram`QuantumFramework`QuditName[
                  Subscript["\[Psi]", 
                   Subscript["z", "+"]], "Dual" -> False], 2} -> 
               SparseArray[Automatic, {2}, 0, {1, {{0, 1}, {{1}}}, {1}}]|>], 
            "Picture" -> "Schr\[ODoubleDot]dinger", "Label" -> 
            Composition["PauliZ", "-"], "ParameterSpec" -> {}|>]], {{0, 
          1}, {}}]["Eigensystem"], "Eigenvalues" -> {
         Wolfram`QuantumFramework`QuditName[
          Interpretation[
           Tooltip[
            Style[0, Bold], "Eigenvalue 1"], {0, {1}}], "Dual" -> False], 
         Wolfram`QuantumFramework`QuditName[
          Interpretation[
           Tooltip[
            Style[1, Bold], "Eigenvalue 2"], {1, {2}}], "Dual" -> False]}, 
       "Eigenvectors" -> {{-1, 0, 0, 1}, {1, 0, 0, 1}, {0, 0, 1, 0}, {0, 1, 0,
         0}}, "FirstInputQudit" -> DirectedInfinity[1], "FirstOutputQudit" -> 
       0, "FullArity" -> 0, "FullInputOrder" -> {}, 
       "FullOutputOrder" -> {0, 1}, "HermitianQ" -> False, "InputOrder" -> {},
        "InputOrderQuditMapping" -> {}, "InputQuditOrder" -> {}, 
       "LastInputQudit" -> DirectedInfinity[-1], "LastOutputQudit" -> 1, 
       "Matrix" -> 
       SparseArray[
        Automatic, {4, 1}, 0, {
         1, {{0, 1, 1, 1, 2}, {{1}, {1}}}, {
          2^Rational[-1, 2], -2^Rational[-1, 2]}}], "MatrixRepresentation" -> 
       SparseArray[
        Automatic, {4, 1}, 0, {
         1, {{0, 1, 1, 1, 2}, {{1}, {1}}}, {-2^Rational[-1, 2], 2^
           Rational[-1, 2]}}], "MaxArity" -> 0, "Operator" -> 
       Wolfram`QuantumFramework`QuantumOperator[
         Wolfram`QuantumFramework`QuantumState[
          SparseArray[
          Automatic, {4}, 0, {
           1, {{0, 2}, {{1}, {4}}}, {2^Rational[-1, 2], -2^Rational[-1, 2]}}], 
          
          Wolfram`QuantumFramework`QuantumBasis[<|
           "Input" -> Wolfram`QuantumFramework`QuditBasis[<|{
                 
                 Wolfram`QuantumFramework`QuditName[\[FormalCapitalI], "Dual" -> 
                  False], 1} -> 1|>], "Output" -> 
            Wolfram`QuantumFramework`QuditBasis[<|{
                 Wolfram`QuantumFramework`QuditName[
                  Interpretation[
                   Tooltip[
                    Style[0, Bold], "Eigenvalue 1"], {0, {1}}], "Dual" -> 
                  False], 1} -> 
               SparseArray[Automatic, {2}, 0, {1, {{0, 1}, {{2}}}, {1}}], {
                 Wolfram`QuantumFramework`QuditName[
                  Interpretation[
                   Tooltip[
                    Style[1, Bold], "Eigenvalue 2"], {1, {2}}], "Dual" -> 
                  False], 1} -> 
               SparseArray[Automatic, {2}, 0, {1, {{0, 1}, {{1}}}, {1}}], {
                 Wolfram`QuantumFramework`QuditName[
                  Subscript["\[Psi]", 
                   Subscript["z", "-"]], "Dual" -> False], 2} -> 
               SparseArray[Automatic, {2}, 0, {1, {{0, 1}, {{2}}}, {1}}], {
                 Wolfram`QuantumFramework`QuditName[
                  Subscript["\[Psi]", 
                   Subscript["z", "+"]], "Dual" -> False], 2} -> 
               SparseArray[Automatic, {2}, 0, {1, {{0, 1}, {{1}}}, {1}}]|>], 
            "Picture" -> "Schr\[ODoubleDot]dinger", "Label" -> 
            Composition["PauliZ", "-"], "ParameterSpec" -> {}|>]], {{0, 
          1}, {}}], "Order" -> {{0, 1}, {}}, "Ordered" -> 
       Wolfram`QuantumFramework`QuantumMeasurementOperator[
         Wolfram`QuantumFramework`QuantumOperator[
          Wolfram`QuantumFramework`QuantumState[
           SparseArray[
           Automatic, {4}, 0, {
            1, {{0, 2}, {{1}, {4}}}, {
             2^Rational[-1, 2], -2^Rational[-1, 2]}}], 
           
           Wolfram`QuantumFramework`QuantumBasis[<|
            "Input" -> Wolfram`QuantumFramework`QuditBasis[<|{
                  
                  Wolfram`QuantumFramework`QuditName[\[FormalCapitalI], 
                   "Dual" -> False], 1} -> 1|>], "Output" -> 
             Wolfram`QuantumFramework`QuditBasis[<|{
                  Wolfram`QuantumFramework`QuditName[
                   Interpretation[
                    Tooltip[
                    Style[0, Bold], "Eigenvalue 1"], {0, {1}}], "Dual" -> 
                   False], 1} -> 
                SparseArray[Automatic, {2}, 0, {1, {{0, 1}, {{2}}}, {1}}], {
                  Wolfram`QuantumFramework`QuditName[
                   Interpretation[
                    Tooltip[
                    Style[1, Bold], "Eigenvalue 2"], {1, {2}}], "Dual" -> 
                   False], 1} -> 
                SparseArray[Automatic, {2}, 0, {1, {{0, 1}, {{1}}}, {1}}], {
                  Wolfram`QuantumFramework`QuditName[
                   Subscript["\[Psi]", 
                    Subscript["z", "-"]], "Dual" -> False], 2} -> 
                SparseArray[Automatic, {2}, 0, {1, {{0, 1}, {{2}}}, {1}}], {
                  Wolfram`QuantumFramework`QuditName[
                   Subscript["\[Psi]", 
                    Subscript["z", "+"]], "Dual" -> False], 2} -> 
                SparseArray[Automatic, {2}, 0, {1, {{0, 1}, {{1}}}, {1}}]|>], 
             "Picture" -> "Schr\[ODoubleDot]dinger", "Label" -> 
             Composition["PauliZ", "-"], "ParameterSpec" -> {}|>]], {{0, 
           1}, {}}], {1}], "OrderedInput" -> 
       Wolfram`QuantumFramework`QuantumOperator[
         Wolfram`QuantumFramework`QuantumState[
          SparseArray[
          Automatic, {4}, 0, {
           1, {{0, 2}, {{1}, {4}}}, {2^Rational[-1, 2], -2^Rational[-1, 2]}}], 
          
          Wolfram`QuantumFramework`QuantumBasis[<|
           "Input" -> Wolfram`QuantumFramework`QuditBasis[<|{
                 
                 Wolfram`QuantumFramework`QuditName[\[FormalCapitalI], "Dual" -> 
                  False], 1} -> 1|>], "Output" -> 
            Wolfram`QuantumFramework`QuditBasis[<|{
                 Wolfram`QuantumFramework`QuditName[
                  Interpretation[
                   Tooltip[
                    Style[0, Bold], "Eigenvalue 1"], {0, {1}}], "Dual" -> 
                  False], 1} -> 
               SparseArray[Automatic, {2}, 0, {1, {{0, 1}, {{2}}}, {1}}], {
                 Wolfram`QuantumFramework`QuditName[
                  Interpretation[
                   Tooltip[
                    Style[1, Bold], "Eigenvalue 2"], {1, {2}}], "Dual" -> 
                  False], 1} -> 
               SparseArray[Automatic, {2}, 0, {1, {{0, 1}, {{1}}}, {1}}], {
                 Wolfram`QuantumFramework`QuditName[
                  Subscript["\[Psi]", 
                   Subscript["z", "-"]], "Dual" -> False], 2} -> 
               SparseArray[Automatic, {2}, 0, {1, {{0, 1}, {{2}}}, {1}}], {
                 Wolfram`QuantumFramework`QuditName[
                  Subscript["\[Psi]", 
                   Subscript["z", "+"]], "Dual" -> False], 2} -> 
               SparseArray[Automatic, {2}, 0, {1, {{0, 1}, {{1}}}, {1}}]|>], 
            "Picture" -> "Schr\[ODoubleDot]dinger", "Label" -> 
            Composition["PauliZ", "-"], "ParameterSpec" -> {}|>]], {{0, 
          1}, {}}], "OrderedMatrix" -> 
       SparseArray[
        Automatic, {4, 1}, 0, {
         1, {{0, 1, 1, 1, 2}, {{1}, {1}}}, {
          2^Rational[-1, 2], -2^Rational[-1, 2]}}], 
       "OrderedMatrixRepresentation" -> 
       SparseArray[
        Automatic, {4, 1}, 0, {
         1, {{0, 1, 1, 1, 2}, {{1}, {1}}}, {-2^Rational[-1, 2], 2^
           Rational[-1, 2]}}], "OrderedOutput" -> 
       Wolfram`QuantumFramework`QuantumOperator[
         Wolfram`QuantumFramework`QuantumState[
          SparseArray[
          Automatic, {4}, 0, {
           1, {{0, 2}, {{1}, {4}}}, {-2^Rational[-1, 2], 2^Rational[-1, 2]}}], 
          
          Wolfram`QuantumFramework`QuantumBasis[<|
           "Input" -> Wolfram`QuantumFramework`QuditBasis[<|{
                 
                 Wolfram`QuantumFramework`QuditName[\[FormalCapitalI], "Dual" -> 
                  False], 1} -> 1|>], "Output" -> 
            Wolfram`QuantumFramework`QuditBasis[<|{
                 Wolfram`QuantumFramework`QuditName[0, "Dual" -> False], 1} -> 
               SparseArray[Automatic, {2}, 0, {1, {{0, 1}, {{1}}}, {1}}], {
                 Wolfram`QuantumFramework`QuditName[1, "Dual" -> False], 1} -> 
               SparseArray[Automatic, {2}, 0, {1, {{0, 1}, {{2}}}, {1}}], {
                 Wolfram`QuantumFramework`QuditName[0, "Dual" -> False], 2} -> 
               SparseArray[Automatic, {2}, 0, {1, {{0, 1}, {{1}}}, {1}}], {
                 Wolfram`QuantumFramework`QuditName[1, "Dual" -> False], 2} -> 
               SparseArray[Automatic, {2}, 0, {1, {{0, 1}, {{2}}}, {1}}]|>], 
            "Picture" -> "Schr\[ODoubleDot]dinger", "Label" -> 
            Composition["PauliZ", "-"], "ParameterSpec" -> {}|>]], {{0, 
          1}, {}}], "OrderedPOVMElements" -> 
       SparseArray[
        Automatic, {2, 2}, 0, {
         1, {{0, 1, 2}, {{1}, {2}}}, {
          2^Rational[-1, 2], -2^Rational[-1, 2]}}], "OrderedTensor" -> 
       SparseArray[
        Automatic, {2, 2}, 0, {
         1, {{0, 1, 2}, {{1}, {2}}}, {
          2^Rational[-1, 2], -2^Rational[-1, 2]}}], 
       "OrderedTensorRepresentation" -> 
       SparseArray[
        Automatic, {2, 2}, 0, {
         1, {{0, 1, 2}, {{1}, {2}}}, {-2^Rational[-1, 2], 2^
           Rational[-1, 2]}}], "OutputOrder" -> {0, 1}, 
       "OutputQuditOrder" -> {1, 2}, "POVM" -> 
       Wolfram`QuantumFramework`QuantumMeasurementOperator[
         Wolfram`QuantumFramework`QuantumOperator[
          Wolfram`QuantumFramework`QuantumState[
           SparseArray[
           Automatic, {4}, 0, {
            1, {{0, 2}, {{1}, {4}}}, {
             2^Rational[-1, 2], -2^Rational[-1, 2]}}], 
           
           Wolfram`QuantumFramework`QuantumBasis[<|
            "Input" -> Wolfram`QuantumFramework`QuditBasis[<|{
                  
                  Wolfram`QuantumFramework`QuditName[\[FormalCapitalI], 
                   "Dual" -> False], 1} -> 1|>], "Output" -> 
             Wolfram`QuantumFramework`QuditBasis[<|{
                  Wolfram`QuantumFramework`QuditName[
                   Interpretation[
                    Tooltip[
                    Style[0, Bold], "Eigenvalue 1"], {0, {1}}], "Dual" -> 
                   False], 1} -> 
                SparseArray[Automatic, {2}, 0, {1, {{0, 1}, {{2}}}, {1}}], {
                  Wolfram`QuantumFramework`QuditName[
                   Interpretation[
                    Tooltip[
                    Style[1, Bold], "Eigenvalue 2"], {1, {2}}], "Dual" -> 
                   False], 1} -> 
                SparseArray[Automatic, {2}, 0, {1, {{0, 1}, {{1}}}, {1}}], {
                  Wolfram`QuantumFramework`QuditName[
                   Subscript["\[Psi]", 
                    Subscript["z", "-"]], "Dual" -> False], 2} -> 
                SparseArray[Automatic, {2}, 0, {1, {{0, 1}, {{2}}}, {1}}], {
                  Wolfram`QuantumFramework`QuditName[
                   Subscript["\[Psi]", 
                    Subscript["z", "+"]], "Dual" -> False], 2} -> 
                SparseArray[Automatic, {2}, 0, {1, {{0, 1}, {{1}}}, {1}}]|>], 
             "Picture" -> "Schr\[ODoubleDot]dinger", "Label" -> 
             Composition["PauliZ", "-"], "ParameterSpec" -> {}|>]], {{0, 
           1}, {}}], {1}], "POVMElements" -> 
       SparseArray[
        Automatic, {2, 2}, 0, {
         1, {{0, 1, 2}, {{1}, {2}}}, {
          2^Rational[-1, 2], -2^Rational[-1, 2]}}], "POVMQ" -> True, 
       "ProjectionQ" -> False, 
       "Projectors" -> {{{1, 0, 0, -1}, {0, 0, 0, 0}, {0, 0, 0, 0}, {-1, 0, 0,
         1}}, {{1, 0, 0, 1}, {0, 0, 0, 0}, {0, 0, 0, 0}, {1, 0, 0, 1}}, {{0, 
        0, 0, 0}, {0, 0, 0, 0}, {0, 0, 1, 0}, {0, 0, 0, 0}}, {{0, 0, 0, 0}, {
        0, 1, 0, 0}, {0, 0, 0, 0}, {0, 0, 0, 0}}}, "Range" -> 
       DirectedInfinity[-1], "Sort" -> 
       Wolfram`QuantumFramework`QuantumMeasurementOperator[
         Wolfram`QuantumFramework`QuantumOperator[
          Wolfram`QuantumFramework`QuantumState[
           SparseArray[
           Automatic, {4}, 0, {
            1, {{0, 2}, {{1}, {4}}}, {
             2^Rational[-1, 2], -2^Rational[-1, 2]}}], 
           
           Wolfram`QuantumFramework`QuantumBasis[<|
            "Input" -> Wolfram`QuantumFramework`QuditBasis[<|{
                  
                  Wolfram`QuantumFramework`QuditName[\[FormalCapitalI], 
                   "Dual" -> False], 1} -> 1|>], "Output" -> 
             Wolfram`QuantumFramework`QuditBasis[<|{
                  Wolfram`QuantumFramework`QuditName[
                   Interpretation[
                    Tooltip[
                    Style[0, Bold], "Eigenvalue 1"], {0, {1}}], "Dual" -> 
                   False], 1} -> 
                SparseArray[Automatic, {2}, 0, {1, {{0, 1}, {{2}}}, {1}}], {
                  Wolfram`QuantumFramework`QuditName[
                   Interpretation[
                    Tooltip[
                    Style[1, Bold], "Eigenvalue 2"], {1, {2}}], "Dual" -> 
                   False], 1} -> 
                SparseArray[Automatic, {2}, 0, {1, {{0, 1}, {{1}}}, {1}}], {
                  Wolfram`QuantumFramework`QuditName[
                   Subscript["\[Psi]", 
                    Subscript["z", "-"]], "Dual" -> False], 2} -> 
                SparseArray[Automatic, {2}, 0, {1, {{0, 1}, {{2}}}, {1}}], {
                  Wolfram`QuantumFramework`QuditName[
                   Subscript["\[Psi]", 
                    Subscript["z", "+"]], "Dual" -> False], 2} -> 
                SparseArray[Automatic, {2}, 0, {1, {{0, 1}, {{1}}}, {1}}]|>], 
             "Picture" -> "Schr\[ODoubleDot]dinger", "Label" -> 
             Composition["PauliZ", "-"], "ParameterSpec" -> {}|>]], {{0, 
           1}, {}}], {1}], "SortInput" -> 
       Wolfram`QuantumFramework`QuantumOperator[
         Wolfram`QuantumFramework`QuantumState[
          SparseArray[
          Automatic, {4}, 0, {
           1, {{0, 2}, {{1}, {4}}}, {2^Rational[-1, 2], -2^Rational[-1, 2]}}], 
          
          Wolfram`QuantumFramework`QuantumBasis[<|
           "Input" -> Wolfram`QuantumFramework`QuditBasis[<|{
                 
                 Wolfram`QuantumFramework`QuditName[\[FormalCapitalI], "Dual" -> 
                  False], 1} -> 1|>], "Output" -> 
            Wolfram`QuantumFramework`QuditBasis[<|{
                 Wolfram`QuantumFramework`QuditName[
                  Interpretation[
                   Tooltip[
                    Style[0, Bold], "Eigenvalue 1"], {0, {1}}], "Dual" -> 
                  False], 1} -> 
               SparseArray[Automatic, {2}, 0, {1, {{0, 1}, {{2}}}, {1}}], {
                 Wolfram`QuantumFramework`QuditName[
                  Interpretation[
                   Tooltip[
                    Style[1, Bold], "Eigenvalue 2"], {1, {2}}], "Dual" -> 
                  False], 1} -> 
               SparseArray[Automatic, {2}, 0, {1, {{0, 1}, {{1}}}, {1}}], {
                 Wolfram`QuantumFramework`QuditName[
                  Subscript["\[Psi]", 
                   Subscript["z", "-"]], "Dual" -> False], 2} -> 
               SparseArray[Automatic, {2}, 0, {1, {{0, 1}, {{2}}}, {1}}], {
                 Wolfram`QuantumFramework`QuditName[
                  Subscript["\[Psi]", 
                   Subscript["z", "+"]], "Dual" -> False], 2} -> 
               SparseArray[Automatic, {2}, 0, {1, {{0, 1}, {{1}}}, {1}}]|>], 
            "Picture" -> "Schr\[ODoubleDot]dinger", "Label" -> 
            Composition["PauliZ", "-"], "ParameterSpec" -> {}|>]], {{0, 
          1}, {}}], "SortOutput" -> Wolfram`QuantumFramework`QuantumOperator[
         Wolfram`QuantumFramework`QuantumState[
          SparseArray[
          Automatic, {4}, 0, {
           1, {{0, 2}, {{1}, {4}}}, {2^Rational[-1, 2], -2^Rational[-1, 2]}}], 
          
          Wolfram`QuantumFramework`QuantumBasis[<|
           "Input" -> Wolfram`QuantumFramework`QuditBasis[<|{
                 
                 Wolfram`QuantumFramework`QuditName[\[FormalCapitalI], "Dual" -> 
                  False], 1} -> 1|>], "Output" -> 
            Wolfram`QuantumFramework`QuditBasis[<|{
                 Wolfram`QuantumFramework`QuditName[
                  Interpretation[
                   Tooltip[
                    Style[0, Bold], "Eigenvalue 1"], {0, {1}}], "Dual" -> 
                  False], 1} -> 
               SparseArray[Automatic, {2}, 0, {1, {{0, 1}, {{2}}}, {1}}], {
                 Wolfram`QuantumFramework`QuditName[
                  Interpretation[
                   Tooltip[
                    Style[1, Bold], "Eigenvalue 2"], {1, {2}}], "Dual" -> 
                  False], 1} -> 
               SparseArray[Automatic, {2}, 0, {1, {{0, 1}, {{1}}}, {1}}], {
                 Wolfram`QuantumFramework`QuditName[
                  Subscript["\[Psi]", 
                   Subscript["z", "-"]], "Dual" -> False], 2} -> 
               SparseArray[Automatic, {2}, 0, {1, {{0, 1}, {{2}}}, {1}}], {
                 Wolfram`QuantumFramework`QuditName[
                  Subscript["\[Psi]", 
                   Subscript["z", "+"]], "Dual" -> False], 2} -> 
               SparseArray[Automatic, {2}, 0, {1, {{0, 1}, {{1}}}, {1}}]|>], 
            "Picture" -> "Schr\[ODoubleDot]dinger", "Label" -> 
            Composition["PauliZ", "-"], "ParameterSpec" -> {}|>]], {{0, 
          1}, {}}], "StateBasis" -> 
       Wolfram`QuantumFramework`QuantumBasis[<|
         "Input" -> Wolfram`QuantumFramework`QuditBasis[<|{
               
               Wolfram`QuantumFramework`QuditName[\[FormalCapitalI], "Dual" -> 
                False], 1} -> 1|>], "Output" -> 
          Wolfram`QuantumFramework`QuditBasis[<|{
               Wolfram`QuantumFramework`QuditName[
                Subscript["\[Psi]", 
                 Subscript["z", "-"]], "Dual" -> False], 1} -> 
             SparseArray[Automatic, {2}, 0, {1, {{0, 1}, {{2}}}, {1}}], {
               Wolfram`QuantumFramework`QuditName[
                Subscript["\[Psi]", 
                 Subscript["z", "+"]], "Dual" -> False], 1} -> 
             SparseArray[Automatic, {2}, 0, {1, {{0, 1}, {{1}}}, {1}}]|>], 
          "Picture" -> "Schr\[ODoubleDot]dinger", "Label" -> 
          Composition["PauliZ", "-"], "ParameterSpec" -> {}|>], 
       "StateDimension" -> 2, "StateDimensions" -> {2}, "StateQudits" -> 1, 
       "SuperOperator" -> Wolfram`QuantumFramework`QuantumOperator[
         Wolfram`QuantumFramework`QuantumState[
          SparseArray[
          Automatic, {4}, 0, {
           1, {{0, 2}, {{1}, {4}}}, {2^Rational[-1, 2], -2^Rational[-1, 2]}}], 
          
          Wolfram`QuantumFramework`QuantumBasis[<|
           "Input" -> Wolfram`QuantumFramework`QuditBasis[<|{
                 
                 Wolfram`QuantumFramework`QuditName[\[FormalCapitalI], "Dual" -> 
                  False], 1} -> 1|>], "Output" -> 
            Wolfram`QuantumFramework`QuditBasis[<|{
                 Wolfram`QuantumFramework`QuditName[
                  Interpretation[
                   Tooltip[
                    Style[0, Bold], "Eigenvalue 1"], {0, {1}}], "Dual" -> 
                  False], 1} -> 
               SparseArray[Automatic, {2}, 0, {1, {{0, 1}, {{2}}}, {1}}], {
                 Wolfram`QuantumFramework`QuditName[
                  Interpretation[
                   Tooltip[
                    Style[1, Bold], "Eigenvalue 2"], {1, {2}}], "Dual" -> 
                  False], 1} -> 
               SparseArray[Automatic, {2}, 0, {1, {{0, 1}, {{1}}}, {1}}], {
                 Wolfram`QuantumFramework`QuditName[
                  Subscript["\[Psi]", 
                   Subscript["z", "-"]], "Dual" -> False], 2} -> 
               SparseArray[Automatic, {2}, 0, {1, {{0, 1}, {{2}}}, {1}}], {
                 Wolfram`QuantumFramework`QuditName[
                  Subscript["\[Psi]", 
                   Subscript["z", "+"]], "Dual" -> False], 2} -> 
               SparseArray[Automatic, {2}, 0, {1, {{0, 1}, {{1}}}, {1}}]|>], 
            "Picture" -> "Schr\[ODoubleDot]dinger", "Label" -> 
            Composition["PauliZ", "-"], "ParameterSpec" -> {}|>]], {{0, 
          1}, {}}], "Target" -> {1}, "TargetArity" -> 0, "TargetBasis" -> 
       Wolfram`QuantumFramework`QuditBasis[<|{
            Wolfram`QuantumFramework`QuditName[
             Subscript["\[Psi]", 
              Subscript["z", "-"]], "Dual" -> False], 1} -> 
          SparseArray[Automatic, {2}, 0, {1, {{0, 1}, {{2}}}, {1}}], {
            Wolfram`QuantumFramework`QuditName[
             Subscript["\[Psi]", 
              Subscript["z", "+"]], "Dual" -> False], 1} -> 
          SparseArray[Automatic, {2}, 0, {1, {{0, 1}, {{1}}}, {1}}]|>], 
       "TargetDimension" -> 2, "TargetDimensions" -> {2}, 
       "TargetIndex" -> {2}, "TargetOrder" -> {}, "Targets" -> 1, "Tensor" -> 
       SparseArray[
        Automatic, {2, 2}, 0, {
         1, {{0, 1, 2}, {{1}, {2}}}, {
          2^Rational[-1, 2], -2^Rational[-1, 2]}}], "TensorRepresentation" -> 
       SparseArray[
        Automatic, {2, 2}, 0, {
         1, {{0, 1, 2}, {{1}, {2}}}, {-2^Rational[-1, 2], 2^
           Rational[-1, 2]}}], "UnitaryQ" -> True, "UnstackInput" -> 
       Wolfram`QuantumFramework`QuantumOperator[
         Wolfram`QuantumFramework`QuantumState[
          SparseArray[
          Automatic, {4}, 0, {
           1, {{0, 2}, {{1}, {4}}}, {2^Rational[-1, 2], -2^Rational[-1, 2]}}], 
          
          Wolfram`QuantumFramework`QuantumBasis[<|
           "Input" -> Wolfram`QuantumFramework`QuditBasis[<|{
                 
                 Wolfram`QuantumFramework`QuditName[\[FormalCapitalI], "Dual" -> 
                  False], 1} -> 1|>], "Output" -> 
            Wolfram`QuantumFramework`QuditBasis[<|{
                 Wolfram`QuantumFramework`QuditName[
                  Interpretation[
                   Tooltip[
                    Style[0, Bold], "Eigenvalue 1"], {0, {1}}], "Dual" -> 
                  False], 1} -> 
               SparseArray[Automatic, {2}, 0, {1, {{0, 1}, {{2}}}, {1}}], {
                 Wolfram`QuantumFramework`QuditName[
                  Interpretation[
                   Tooltip[
                    Style[1, Bold], "Eigenvalue 2"], {1, {2}}], "Dual" -> 
                  False], 1} -> 
               SparseArray[Automatic, {2}, 0, {1, {{0, 1}, {{1}}}, {1}}], {
                 Wolfram`QuantumFramework`QuditName[
                  Subscript["\[Psi]", 
                   Subscript["z", "-"]], "Dual" -> False], 2} -> 
               SparseArray[Automatic, {2}, 0, {1, {{0, 1}, {{2}}}, {1}}], {
                 Wolfram`QuantumFramework`QuditName[
                  Subscript["\[Psi]", 
                   Subscript["z", "+"]], "Dual" -> False], 2} -> 
               SparseArray[Automatic, {2}, 0, {1, {{0, 1}, {{1}}}, {1}}]|>], 
            "Picture" -> "Schr\[ODoubleDot]dinger", "Label" -> 
            Composition["PauliZ", "-"], "ParameterSpec" -> {}|>]], {{0, 
          1}, {}}]["UnstackInput"], "UnstackOutput" -> {
         Wolfram`QuantumFramework`QuantumOperator[
          Wolfram`QuantumFramework`QuantumState[
           SparseArray[
           Automatic, {2}, 0, {1, {{0, 1}, {{1}}}, {2^Rational[-1, 2]}}], 
           
           Wolfram`QuantumFramework`QuantumBasis[<|
            "Input" -> Wolfram`QuantumFramework`QuditBasis[<|{
                  
                  Wolfram`QuantumFramework`QuditName[\[FormalCapitalI], 
                   "Dual" -> False], 1} -> 1|>], "Output" -> 
             Wolfram`QuantumFramework`QuditBasis[<|{
                  Wolfram`QuantumFramework`QuditName[
                   Subscript["\[Psi]", 
                    Subscript["z", "-"]], "Dual" -> False], 1} -> 
                SparseArray[Automatic, {2}, 0, {1, {{0, 1}, {{2}}}, {1}}], {
                  Wolfram`QuantumFramework`QuditName[
                   Subscript["\[Psi]", 
                    Subscript["z", "+"]], "Dual" -> False], 1} -> 
                SparseArray[Automatic, {2}, 0, {1, {{0, 1}, {{1}}}, {1}}]|>], 
             "Picture" -> "Schr\[ODoubleDot]dinger", "Label" -> 
             Composition["PauliZ", "-"], "ParameterSpec" -> {}|>]], {{
           1}, {}}], 
         Wolfram`QuantumFramework`QuantumOperator[
          Wolfram`QuantumFramework`QuantumState[
           SparseArray[
           Automatic, {2}, 0, {1, {{0, 1}, {{2}}}, {-2^Rational[-1, 2]}}], 
           
           Wolfram`QuantumFramework`QuantumBasis[<|
            "Input" -> Wolfram`QuantumFramework`QuditBasis[<|{
                  
                  Wolfram`QuantumFramework`QuditName[\[FormalCapitalI], 
                   "Dual" -> False], 1} -> 1|>], "Output" -> 
             Wolfram`QuantumFramework`QuditBasis[<|{
                  Wolfram`QuantumFramework`QuditName[
                   Subscript["\[Psi]", 
                    Subscript["z", "-"]], "Dual" -> False], 1} -> 
                SparseArray[Automatic, {2}, 0, {1, {{0, 1}, {{2}}}, {1}}], {
                  Wolfram`QuantumFramework`QuditName[
                   Subscript["\[Psi]", 
                    Subscript["z", "+"]], "Dual" -> False], 1} -> 
                SparseArray[Automatic, {2}, 0, {1, {{0, 1}, {{1}}}, {1}}]|>], 
             "Picture" -> "Schr\[ODoubleDot]dinger", "Label" -> 
             Composition["PauliZ", "-"], "ParameterSpec" -> {}|>]], {{
           1}, {}}]}, "Amplitudes" -> <|Wolfram`QuantumFramework`QuditName[{
            Interpretation[
             Tooltip[
              Style[0, Bold], "Eigenvalue 1"], {0, {1}}], 
            Subscript["\[Psi]", 
             Subscript["z", "-"]]}, "Dual" -> False] -> 2^Rational[-1, 2], 
         Wolfram`QuantumFramework`QuditName[{
            Interpretation[
             Tooltip[
              Style[0, Bold], "Eigenvalue 1"], {0, {1}}], 
            Subscript["\[Psi]", 
             Subscript["z", "+"]]}, "Dual" -> False] -> 0, 
         Wolfram`QuantumFramework`QuditName[{
            Interpretation[
             Tooltip[
              Style[1, Bold], "Eigenvalue 2"], {1, {2}}], 
            Subscript["\[Psi]", 
             Subscript["z", "-"]]}, "Dual" -> False] -> 0, 
         Wolfram`QuantumFramework`QuditName[{
            Interpretation[
             Tooltip[
              Style[1, Bold], "Eigenvalue 2"], {1, {2}}], 
            Subscript["\[Psi]", 
             Subscript["z", "+"]]}, "Dual" -> False] -> -2^Rational[-1, 2]|>, 
       "Association" -> <|Wolfram`QuantumFramework`QuditName[{
            Interpretation[
             Tooltip[
              Style[0, Bold], "Eigenvalue 1"], {0, {1}}], 
            Subscript["\[Psi]", 
             Subscript["z", "-"]]}, "Dual" -> False] -> 
         SparseArray[Automatic, {2, 2}, 0, {1, {{0, 0, 1}, {{2}}}, {1}}], 
         Wolfram`QuantumFramework`QuditName[{
            Interpretation[
             Tooltip[
              Style[0, Bold], "Eigenvalue 1"], {0, {1}}], 
            Subscript["\[Psi]", 
             Subscript["z", "+"]]}, "Dual" -> False] -> 
         SparseArray[Automatic, {2, 2}, 0, {1, {{0, 0, 1}, {{1}}}, {1}}], 
         Wolfram`QuantumFramework`QuditName[{
            Interpretation[
             Tooltip[
              Style[1, Bold], "Eigenvalue 2"], {1, {2}}], 
            Subscript["\[Psi]", 
             Subscript["z", "-"]]}, "Dual" -> False] -> 
         SparseArray[Automatic, {2, 2}, 0, {1, {{0, 1, 1}, {{2}}}, {1}}], 
         Wolfram`QuantumFramework`QuditName[{
            Interpretation[
             Tooltip[
              Style[1, Bold], "Eigenvalue 2"], {1, {2}}], 
            Subscript["\[Psi]", 
             Subscript["z", "+"]]}, "Dual" -> False] -> 
         SparseArray[Automatic, {2, 2}, 0, {1, {{0, 1, 1}, {{1}}}, {1}}]|>, 
       "DensityMatrix" -> 
       SparseArray[
        Automatic, {4, 4}, 0, {
         1, {{0, 2, 2, 2, 4}, {{1}, {4}, {1}, {4}}}, {
          Rational[1, 2], Rational[-1, 2], Rational[-1, 2], Rational[1, 2]}}],
        "Diagram" -> Graphics[{
          GeometricTransformation[{
            Line[{{0, 
               Rational[1, 2]}, {2, 
               Rational[1, 2]}, {1, 0}, {0, 
               Rational[1, 2]}}], {
             PointSize[
             0.2 Dynamic[
               3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                 Magnification])]], 
             Point[{{
                Rational[2, 3], 
                Rational[1, 2]}, {
                Rational[4, 3], 
                Rational[1, 2]}}], 
             Point[{}]}, {
             Arrowheads[
             0.001 Dynamic[
               3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                 Magnification])]], {
              Arrow[{{
                 Rational[2, 3], 
                 Rational[1, 2]}, {
                 Rational[2, 3], 
                 Rational[3, 5]}}], 
              Arrow[{{
                 Rational[4, 3], 
                 Rational[1, 2]}, {
                 Rational[4, 3], 
                 Rational[3, 5]}}]}, {}}}, {{{1, 0}, {0, 1}}, {0, 0}}], 
          Text[
           Style[
            Composition["PauliZ", "-"], {
            FontSize -> 24, FontFamily -> "Times"}], {1, 
            Rational[1, 4]}]}], "Dimension" -> 4, "Eigenstates" -> {
         Wolfram`QuantumFramework`QuantumState[
          SparseArray[Automatic, {4}, 0, {1, {{0, 2}, {{1}, {4}}}, {-1, 1}}], 
          
          
          Wolfram`QuantumFramework`QuantumBasis[<|
           "Input" -> Wolfram`QuantumFramework`QuditBasis[<|{
                 
                 Wolfram`QuantumFramework`QuditName[\[FormalCapitalI], "Dual" -> 
                  False], 1} -> 1|>], "Output" -> 
            Wolfram`QuantumFramework`QuditBasis[<|{
                 Wolfram`QuantumFramework`QuditName[
                  Interpretation[
                   Tooltip[
                    Style[0, Bold], "Eigenvalue 1"], {0, {1}}], "Dual" -> 
                  False], 1} -> 
               SparseArray[Automatic, {2}, 0, {1, {{0, 1}, {{2}}}, {1}}], {
                 Wolfram`QuantumFramework`QuditName[
                  Interpretation[
                   Tooltip[
                    Style[1, Bold], "Eigenvalue 2"], {1, {2}}], "Dual" -> 
                  False], 1} -> 
               SparseArray[Automatic, {2}, 0, {1, {{0, 1}, {{1}}}, {1}}], {
                 Wolfram`QuantumFramework`QuditName[
                  Subscript["\[Psi]", 
                   Subscript["z", "-"]], "Dual" -> False], 2} -> 
               SparseArray[Automatic, {2}, 0, {1, {{0, 1}, {{2}}}, {1}}], {
                 Wolfram`QuantumFramework`QuditName[
                  Subscript["\[Psi]", 
                   Subscript["z", "+"]], "Dual" -> False], 2} -> 
               SparseArray[Automatic, {2}, 0, {1, {{0, 1}, {{1}}}, {1}}]|>], 
            "Picture" -> "Schr\[ODoubleDot]dinger", "Label" -> 
            Composition["PauliZ", "-"], "ParameterSpec" -> {}|>]], 
         Wolfram`QuantumFramework`QuantumState[
          SparseArray[Automatic, {4}, 0, {1, {{0, 2}, {{1}, {4}}}, {1, 1}}], 
          
          Wolfram`QuantumFramework`QuantumBasis[<|
           "Input" -> Wolfram`QuantumFramework`QuditBasis[<|{
                 
                 Wolfram`QuantumFramework`QuditName[\[FormalCapitalI], "Dual" -> 
                  False], 1} -> 1|>], "Output" -> 
            Wolfram`QuantumFramework`QuditBasis[<|{
                 Wolfram`QuantumFramework`QuditName[
                  Interpretation[
                   Tooltip[
                    Style[0, Bold], "Eigenvalue 1"], {0, {1}}], "Dual" -> 
                  False], 1} -> 
               SparseArray[Automatic, {2}, 0, {1, {{0, 1}, {{2}}}, {1}}], {
                 Wolfram`QuantumFramework`QuditName[
                  Interpretation[
                   Tooltip[
                    Style[1, Bold], "Eigenvalue 2"], {1, {2}}], "Dual" -> 
                  False], 1} -> 
               SparseArray[Automatic, {2}, 0, {1, {{0, 1}, {{1}}}, {1}}], {
                 Wolfram`QuantumFramework`QuditName[
                  Subscript["\[Psi]", 
                   Subscript["z", "-"]], "Dual" -> False], 2} -> 
               SparseArray[Automatic, {2}, 0, {1, {{0, 1}, {{2}}}, {1}}], {
                 Wolfram`QuantumFramework`QuditName[
                  Subscript["\[Psi]", 
                   Subscript["z", "+"]], "Dual" -> False], 2} -> 
               SparseArray[Automatic, {2}, 0, {1, {{0, 1}, {{1}}}, {1}}]|>], 
            "Picture" -> "Schr\[ODoubleDot]dinger", "Label" -> 
            Composition["PauliZ", "-"], "ParameterSpec" -> {}|>]], 
         Wolfram`QuantumFramework`QuantumState[
          SparseArray[Automatic, {4}, 0, {1, {{0, 1}, {{3}}}, {1}}], 
          
          Wolfram`QuantumFramework`QuantumBasis[<|
           "Input" -> Wolfram`QuantumFramework`QuditBasis[<|{
                 
                 Wolfram`QuantumFramework`QuditName[\[FormalCapitalI], "Dual" -> 
                  False], 1} -> 1|>], "Output" -> 
            Wolfram`QuantumFramework`QuditBasis[<|{
                 Wolfram`QuantumFramework`QuditName[
                  Interpretation[
                   Tooltip[
                    Style[0, Bold], "Eigenvalue 1"], {0, {1}}], "Dual" -> 
                  False], 1} -> 
               SparseArray[Automatic, {2}, 0, {1, {{0, 1}, {{2}}}, {1}}], {
                 Wolfram`QuantumFramework`QuditName[
                  Interpretation[
                   Tooltip[
                    Style[1, Bold], "Eigenvalue 2"], {1, {2}}], "Dual" -> 
                  False], 1} -> 
               SparseArray[Automatic, {2}, 0, {1, {{0, 1}, {{1}}}, {1}}], {
                 Wolfram`QuantumFramework`QuditName[
                  Subscript["\[Psi]", 
                   Subscript["z", "-"]], "Dual" -> False], 2} -> 
               SparseArray[Automatic, {2}, 0, {1, {{0, 1}, {{2}}}, {1}}], {
                 Wolfram`QuantumFramework`QuditName[
                  Subscript["\[Psi]", 
                   Subscript["z", "+"]], "Dual" -> False], 2} -> 
               SparseArray[Automatic, {2}, 0, {1, {{0, 1}, {{1}}}, {1}}]|>], 
            "Picture" -> "Schr\[ODoubleDot]dinger", "Label" -> 
            Composition["PauliZ", "-"], "ParameterSpec" -> {}|>]], 
         Wolfram`QuantumFramework`QuantumState[
          SparseArray[Automatic, {4}, 0, {1, {{0, 1}, {{2}}}, {1}}], 
          
          Wolfram`QuantumFramework`QuantumBasis[<|
           "Input" -> Wolfram`QuantumFramework`QuditBasis[<|{
                 
                 Wolfram`QuantumFramework`QuditName[\[FormalCapitalI], "Dual" -> 
                  False], 1} -> 1|>], "Output" -> 
            Wolfram`QuantumFramework`QuditBasis[<|{
                 Wolfram`QuantumFramework`QuditName[
                  Interpretation[
                   Tooltip[
                    Style[0, Bold], "Eigenvalue 1"], {0, {1}}], "Dual" -> 
                  False], 1} -> 
               SparseArray[Automatic, {2}, 0, {1, {{0, 1}, {{2}}}, {1}}], {
                 Wolfram`QuantumFramework`QuditName[
                  Interpretation[
                   Tooltip[
                    Style[1, Bold], "Eigenvalue 2"], {1, {2}}], "Dual" -> 
                  False], 1} -> 
               SparseArray[Automatic, {2}, 0, {1, {{0, 1}, {{1}}}, {1}}], {
                 Wolfram`QuantumFramework`QuditName[
                  Subscript["\[Psi]", 
                   Subscript["z", "-"]], "Dual" -> False], 2} -> 
               SparseArray[Automatic, {2}, 0, {1, {{0, 1}, {{2}}}, {1}}], {
                 Wolfram`QuantumFramework`QuditName[
                  Subscript["\[Psi]", 
                   Subscript["z", "+"]], "Dual" -> False], 2} -> 
               SparseArray[Automatic, {2}, 0, {1, {{0, 1}, {{1}}}, {1}}]|>], 
            "Picture" -> "Schr\[ODoubleDot]dinger", "Label" -> 
            Composition["PauliZ", "-"], "ParameterSpec" -> {}|>]]}, 
       "ElementAssociation" -> <|Wolfram`QuantumFramework`QuditName[{
            Interpretation[
             Tooltip[
              Style[0, Bold], "Eigenvalue 1"], {0, {1}}], 
            Subscript["\[Psi]", 
             Subscript["z", "-"]]}, "Dual" -> False] -> 
         SparseArray[Automatic, {2, 2}, 0, {1, {{0, 0, 1}, {{2}}}, {1}}], 
         Wolfram`QuantumFramework`QuditName[{
            Interpretation[
             Tooltip[
              Style[0, Bold], "Eigenvalue 1"], {0, {1}}], 
            Subscript["\[Psi]", 
             Subscript["z", "+"]]}, "Dual" -> False] -> 
         SparseArray[Automatic, {2, 2}, 0, {1, {{0, 0, 1}, {{1}}}, {1}}], 
         Wolfram`QuantumFramework`QuditName[{
            Interpretation[
             Tooltip[
              Style[1, Bold], "Eigenvalue 2"], {1, {2}}], 
            Subscript["\[Psi]", 
             Subscript["z", "-"]]}, "Dual" -> False] -> 
         SparseArray[Automatic, {2, 2}, 0, {1, {{0, 1, 1}, {{2}}}, {1}}], 
         Wolfram`QuantumFramework`QuditName[{
            Interpretation[
             Tooltip[
              Style[1, Bold], "Eigenvalue 2"], {1, {2}}], 
            Subscript["\[Psi]", 
             Subscript["z", "+"]]}, "Dual" -> False] -> 
         SparseArray[Automatic, {2, 2}, 0, {1, {{0, 1, 1}, {{1}}}, {1}}]|>, 
       "ElementDimension" -> 4, "ElementDimensions" -> {2, 2}, "ElementNames" -> {
         Wolfram`QuantumFramework`QuditName[{
           Interpretation[
            Tooltip[
             Style[0, Bold], "Eigenvalue 1"], {0, {1}}], 
           Subscript["\[Psi]", 
            Subscript["z", "-"]]}, "Dual" -> False], 
         Wolfram`QuantumFramework`QuditName[{
           Interpretation[
            Tooltip[
             Style[0, Bold], "Eigenvalue 1"], {0, {1}}], 
           Subscript["\[Psi]", 
            Subscript["z", "+"]]}, "Dual" -> False], 
         Wolfram`QuantumFramework`QuditName[{
           Interpretation[
            Tooltip[
             Style[1, Bold], "Eigenvalue 2"], {1, {2}}], 
           Subscript["\[Psi]", 
            Subscript["z", "-"]]}, "Dual" -> False], 
         Wolfram`QuantumFramework`QuditName[{
           Interpretation[
            Tooltip[
             Style[1, Bold], "Eigenvalue 2"], {1, {2}}], 
           Subscript["\[Psi]", 
            Subscript["z", "+"]]}, "Dual" -> False]}, "Elements" -> 
       SparseArray[
        Automatic, {4, 2, 2}, 0, {
         1, {{0, 1, 2, 3, 4}, {{2, 2}, {2, 1}, {1, 2}, {1, 1}}}, {1, 1, 1, 
          1}}], "FinalParameters" -> {}, "Formula" -> 
       2^Rational[-1, 2] Wolfram`QuantumFramework`QuditName[{
            Interpretation[
             Tooltip[
              Style[0, Bold], "Eigenvalue 1"], {0, {1}}], 
            Subscript["\[Psi]", 
             Subscript["z", "-"]]}, "Dual" -> False] - 2^Rational[-1, 2] 
        Wolfram`QuantumFramework`QuditName[{
           Interpretation[
            Tooltip[
             Style[1, Bold], "Eigenvalue 2"], {1, {2}}], 
           Subscript["\[Psi]", 
            Subscript["z", "+"]]}, "Dual" -> False], "HasInputQ" -> False, 
       "InitialParameters" -> {}, "Input" -> 
       Wolfram`QuantumFramework`QuditBasis[<|{
            
            Wolfram`QuantumFramework`QuditName[\[FormalCapitalI], "Dual" -> 
             False], 1} -> 1|>], "InputBasis" -> 
       Wolfram`QuantumFramework`QuantumBasis[<|
         "Input" -> Wolfram`QuantumFramework`QuditBasis[<|{
               
               Wolfram`QuantumFramework`QuditName[\[FormalCapitalI], "Dual" -> 
                False], 1} -> 1|>], "Output" -> 
          Wolfram`QuantumFramework`QuditBasis[<|{
               
               Wolfram`QuantumFramework`QuditName[\[FormalCapitalI], "Dual" -> 
                False], 1} -> 1|>], "Picture" -> "Schr\[ODoubleDot]dinger", 
          "Label" -> Composition["PauliZ", "-"], "ParameterSpec" -> {}|>], 
       "InputDimension" -> 1, "InputDimensions" -> {1}, 
       "InputElementDimensions" -> {}, "InputElementNames" -> {
         Wolfram`QuantumFramework`QuditName[\[FormalCapitalI], "Dual" -> 
          False]}, "InputElements" -> 
       SparseArray[Automatic, {1}, 0, {1, {{0, 1}, {{1}}}, {1}}], 
       "InputMatrix" -> 
       SparseArray[Automatic, {1, 1}, 0, {1, {{0, 1}, {{1}}}, {1}}], 
       "InputNameDimension" -> 1, "InputNameDimensions" -> {1}, "InputQudits" -> 
       0, "InputRank" -> 0, "InputSize" -> 1, "InputTensor" -> 
       SparseArray[Automatic, {1}, 0, {1, {{0, 1}, {{1}}}, {1}}], "Label" -> 
       Composition["PauliZ", "-"], "LabelHead" -> Composition, 
       "MatrixDimensions" -> {4, 4}, "MatrixElementDimensions" -> {4, 1}, 
       "MatrixNameDimensions" -> {4, 1}, "Mixed" -> 
       Wolfram`QuantumFramework`QuantumState[
        SparseArray[
         Automatic, {2, 2}, 0, {
          1, {{0, 1, 2}, {{1}, {2}}}, {
           2^Rational[-1, 2], -2^Rational[-1, 2]}}], 
         Wolfram`QuantumFramework`QuantumBasis[<|
          "Input" -> Wolfram`QuantumFramework`QuditBasis[<|{
                
                Wolfram`QuantumFramework`QuditName[\[FormalCapitalI], "Dual" -> 
                 False], 1} -> 1|>], "Output" -> 
           Wolfram`QuantumFramework`QuditBasis[<|{
                Wolfram`QuantumFramework`QuditName[
                 Interpretation[
                  Tooltip[
                   Style[0, Bold], "Eigenvalue 1"], {0, {1}}], "Dual" -> 
                 False], 1} -> 
              SparseArray[Automatic, {2}, 0, {1, {{0, 1}, {{2}}}, {1}}], {
                Wolfram`QuantumFramework`QuditName[
                 Interpretation[
                  Tooltip[
                   Style[1, Bold], "Eigenvalue 2"], {1, {2}}], "Dual" -> 
                 False], 1} -> 
              SparseArray[Automatic, {2}, 0, {1, {{0, 1}, {{1}}}, {1}}]|>], 
           "Picture" -> "Schr\[ODoubleDot]dinger", "Label" -> "Computational",
            "ParameterSpec" -> {}|>]], "MixedStateQ" -> False, 
       "NameDimensions" -> {2, 2}, "Names" -> {
         Wolfram`QuantumFramework`QuditName[{
           Interpretation[
            Tooltip[
             Style[0, Bold], "Eigenvalue 1"], {0, {1}}], 
           Subscript["\[Psi]", 
            Subscript["z", "-"]]}, "Dual" -> False], 
         Wolfram`QuantumFramework`QuditName[{
           Interpretation[
            Tooltip[
             Style[0, Bold], "Eigenvalue 1"], {0, {1}}], 
           Subscript["\[Psi]", 
            Subscript["z", "+"]]}, "Dual" -> False], 
         Wolfram`QuantumFramework`QuditName[{
           Interpretation[
            Tooltip[
             Style[1, Bold], "Eigenvalue 2"], {1, {2}}], 
           Subscript["\[Psi]", 
            Subscript["z", "-"]]}, "Dual" -> False], 
         Wolfram`QuantumFramework`QuditName[{
           Interpretation[
            Tooltip[
             Style[1, Bold], "Eigenvalue 2"], {1, {2}}], 
           Subscript["\[Psi]", 
            Subscript["z", "+"]]}, "Dual" -> False]}, "Norm" -> 1, 
       "NormalElementNames" -> {{
          Wolfram`QuantumFramework`QuditName[
           Interpretation[
            Tooltip[
             Style[0, Bold], "Eigenvalue 1"], {0, {1}}], "Dual" -> False], 
          Wolfram`QuantumFramework`QuditName[
           Subscript["\[Psi]", 
            Subscript["z", "-"]], "Dual" -> False]}, {
          Wolfram`QuantumFramework`QuditName[
           Interpretation[
            Tooltip[
             Style[0, Bold], "Eigenvalue 1"], {0, {1}}], "Dual" -> False], 
          Wolfram`QuantumFramework`QuditName[
           Subscript["\[Psi]", 
            Subscript["z", "+"]], "Dual" -> False]}, {
          Wolfram`QuantumFramework`QuditName[
           Interpretation[
            Tooltip[
             Style[1, Bold], "Eigenvalue 2"], {1, {2}}], "Dual" -> False], 
          Wolfram`QuantumFramework`QuditName[
           Subscript["\[Psi]", 
            Subscript["z", "-"]], "Dual" -> False]}, {
          Wolfram`QuantumFramework`QuditName[
           Interpretation[
            Tooltip[
             Style[1, Bold], "Eigenvalue 2"], {1, {2}}], "Dual" -> False], 
          Wolfram`QuantumFramework`QuditName[
           Subscript["\[Psi]", 
            Subscript["z", "+"]], "Dual" -> False]}}, 
       "NormalizedAmplitudes" -> <|Wolfram`QuantumFramework`QuditName[{
            Interpretation[
             Tooltip[
              Style[0, Bold], "Eigenvalue 1"], {0, {1}}], 
            Subscript["\[Psi]", 
             Subscript["z", "-"]]}, "Dual" -> False] -> 2^Rational[-1, 2], 
         Wolfram`QuantumFramework`QuditName[{
            Interpretation[
             Tooltip[
              Style[0, Bold], "Eigenvalue 1"], {0, {1}}], 
            Subscript["\[Psi]", 
             Subscript["z", "+"]]}, "Dual" -> False] -> 0, 
         Wolfram`QuantumFramework`QuditName[{
            Interpretation[
             Tooltip[
              Style[1, Bold], "Eigenvalue 2"], {1, {2}}], 
            Subscript["\[Psi]", 
             Subscript["z", "-"]]}, "Dual" -> False] -> 0, 
         Wolfram`QuantumFramework`QuditName[{
            Interpretation[
             Tooltip[
              Style[1, Bold], "Eigenvalue 2"], {1, {2}}], 
            Subscript["\[Psi]", 
             Subscript["z", "+"]]}, "Dual" -> False] -> -2^Rational[-1, 2]|>, 
       "NormalizedDensityMatrix" -> 
       SparseArray[
        Automatic, {4, 4}, 0, {
         1, {{0, 2, 2, 2, 4}, {{1}, {4}, {1}, {4}}}, {
          Rational[1, 2], Rational[-1, 2], Rational[-1, 2], Rational[1, 2]}}],
        "NormalizedOperator" -> <|Wolfram`QuantumFramework`QuditName[
           Wolfram`QuantumFramework`QuditName[{
             Interpretation[
              Tooltip[
               Style[0, Bold], "Eigenvalue 1"], {0, {1}}], 
             Subscript["\[Psi]", 
              Subscript["z", "-"]]}, "Dual" -> False], 
           Wolfram`QuantumFramework`QuditName[{
             Interpretation[
              Tooltip[
               Style[0, Bold], "Eigenvalue 1"], {0, {1}}], 
             Subscript["\[Psi]", 
              Subscript["z", "-"]]}, "Dual" -> True]] -> Rational[1, 2], 
         Wolfram`QuantumFramework`QuditName[
           Wolfram`QuantumFramework`QuditName[{
             Interpretation[
              Tooltip[
               Style[0, Bold], "Eigenvalue 1"], {0, {1}}], 
             Subscript["\[Psi]", 
              Subscript["z", "-"]]}, "Dual" -> False], 
           Wolfram`QuantumFramework`QuditName[{
             Interpretation[
              Tooltip[
               Style[0, Bold], "Eigenvalue 1"], {0, {1}}], 
             Subscript["\[Psi]", 
              Subscript["z", "+"]]}, "Dual" -> True]] -> 0, 
         Wolfram`QuantumFramework`QuditName[
           Wolfram`QuantumFramework`QuditName[{
             Interpretation[
              Tooltip[
               Style[0, Bold], "Eigenvalue 1"], {0, {1}}], 
             Subscript["\[Psi]", 
              Subscript["z", "-"]]}, "Dual" -> False], 
           Wolfram`QuantumFramework`QuditName[{
             Interpretation[
              Tooltip[
               Style[1, Bold], "Eigenvalue 2"], {1, {2}}], 
             Subscript["\[Psi]", 
              Subscript["z", "-"]]}, "Dual" -> True]] -> 0, 
         Wolfram`QuantumFramework`QuditName[
           Wolfram`QuantumFramework`QuditName[{
             Interpretation[
              Tooltip[
               Style[0, Bold], "Eigenvalue 1"], {0, {1}}], 
             Subscript["\[Psi]", 
              Subscript["z", "-"]]}, "Dual" -> False], 
           Wolfram`QuantumFramework`QuditName[{
             Interpretation[
              Tooltip[
               Style[1, Bold], "Eigenvalue 2"], {1, {2}}], 
             Subscript["\[Psi]", 
              Subscript["z", "+"]]}, "Dual" -> True]] -> Rational[-1, 2], 
         Wolfram`QuantumFramework`QuditName[
           Wolfram`QuantumFramework`QuditName[{
             Interpretation[
              Tooltip[
               Style[0, Bold], "Eigenvalue 1"], {0, {1}}], 
             Subscript["\[Psi]", 
              Subscript["z", "+"]]}, "Dual" -> False], 
           Wolfram`QuantumFramework`QuditName[{
             Interpretation[
              Tooltip[
               Style[0, Bold], "Eigenvalue 1"], {0, {1}}], 
             Subscript["\[Psi]", 
              Subscript["z", "-"]]}, "Dual" -> True]] -> 0, 
         Wolfram`QuantumFramework`QuditName[
           Wolfram`QuantumFramework`QuditName[{
             Interpretation[
              Tooltip[
               Style[0, Bold], "Eigenvalue 1"], {0, {1}}], 
             Subscript["\[Psi]", 
              Subscript["z", "+"]]}, "Dual" -> False], 
           Wolfram`QuantumFramework`QuditName[{
             Interpretation[
              Tooltip[
               Style[0, Bold], "Eigenvalue 1"], {0, {1}}], 
             Subscript["\[Psi]", 
              Subscript["z", "+"]]}, "Dual" -> True]] -> 0, 
         Wolfram`QuantumFramework`QuditName[
           Wolfram`QuantumFramework`QuditName[{
             Interpretation[
              Tooltip[
               Style[0, Bold], "Eigenvalue 1"], {0, {1}}], 
             Subscript["\[Psi]", 
              Subscript["z", "+"]]}, "Dual" -> False], 
           Wolfram`QuantumFramework`QuditName[{
             Interpretation[
              Tooltip[
               Style[1, Bold], "Eigenvalue 2"], {1, {2}}], 
             Subscript["\[Psi]", 
              Subscript["z", "-"]]}, "Dual" -> True]] -> 0, 
         Wolfram`QuantumFramework`QuditName[
           Wolfram`QuantumFramework`QuditName[{
             Interpretation[
              Tooltip[
               Style[0, Bold], "Eigenvalue 1"], {0, {1}}], 
             Subscript["\[Psi]", 
              Subscript["z", "+"]]}, "Dual" -> False], 
           Wolfram`QuantumFramework`QuditName[{
             Interpretation[
              Tooltip[
               Style[1, Bold], "Eigenvalue 2"], {1, {2}}], 
             Subscript["\[Psi]", 
              Subscript["z", "+"]]}, "Dual" -> True]] -> 0, 
         Wolfram`QuantumFramework`QuditName[
           Wolfram`QuantumFramework`QuditName[{
             Interpretation[
              Tooltip[
               Style[1, Bold], "Eigenvalue 2"], {1, {2}}], 
             Subscript["\[Psi]", 
              Subscript["z", "-"]]}, "Dual" -> False], 
           Wolfram`QuantumFramework`QuditName[{
             Interpretation[
              Tooltip[
               Style[0, Bold], "Eigenvalue 1"], {0, {1}}], 
             Subscript["\[Psi]", 
              Subscript["z", "-"]]}, "Dual" -> True]] -> 0, 
         Wolfram`QuantumFramework`QuditName[
           Wolfram`QuantumFramework`QuditName[{
             Interpretation[
              Tooltip[
               Style[1, Bold], "Eigenvalue 2"], {1, {2}}], 
             Subscript["\[Psi]", 
              Subscript["z", "-"]]}, "Dual" -> False], 
           Wolfram`QuantumFramework`QuditName[{
             Interpretation[
              Tooltip[
               Style[0, Bold], "Eigenvalue 1"], {0, {1}}], 
             Subscript["\[Psi]", 
              Subscript["z", "+"]]}, "Dual" -> True]] -> 0, 
         Wolfram`QuantumFramework`QuditName[
           Wolfram`QuantumFramework`QuditName[{
             Interpretation[
              Tooltip[
               Style[1, Bold], "Eigenvalue 2"], {1, {2}}], 
             Subscript["\[Psi]", 
              Subscript["z", "-"]]}, "Dual" -> False], 
           Wolfram`QuantumFramework`QuditName[{
             Interpretation[
              Tooltip[
               Style[1, Bold], "Eigenvalue 2"], {1, {2}}], 
             Subscript["\[Psi]", 
              Subscript["z", "-"]]}, "Dual" -> True]] -> 0, 
         Wolfram`QuantumFramework`QuditName[
           Wolfram`QuantumFramework`QuditName[{
             Interpretation[
              Tooltip[
               Style[1, Bold], "Eigenvalue 2"], {1, {2}}], 
             Subscript["\[Psi]", 
              Subscript["z", "-"]]}, "Dual" -> False], 
           Wolfram`QuantumFramework`QuditName[{
             Interpretation[
              Tooltip[
               Style[1, Bold], "Eigenvalue 2"], {1, {2}}], 
             Subscript["\[Psi]", 
              Subscript["z", "+"]]}, "Dual" -> True]] -> 0, 
         Wolfram`QuantumFramework`QuditName[
           Wolfram`QuantumFramework`QuditName[{
             Interpretation[
              Tooltip[
               Style[1, Bold], "Eigenvalue 2"], {1, {2}}], 
             Subscript["\[Psi]", 
              Subscript["z", "+"]]}, "Dual" -> False], 
           Wolfram`QuantumFramework`QuditName[{
             Interpretation[
              Tooltip[
               Style[0, Bold], "Eigenvalue 1"], {0, {1}}], 
             Subscript["\[Psi]", 
              Subscript["z", "-"]]}, "Dual" -> True]] -> Rational[-1, 2], 
         Wolfram`QuantumFramework`QuditName[
           Wolfram`QuantumFramework`QuditName[{
             Interpretation[
              Tooltip[
               Style[1, Bold], "Eigenvalue 2"], {1, {2}}], 
             Subscript["\[Psi]", 
              Subscript["z", "+"]]}, "Dual" -> False], 
           Wolfram`QuantumFramework`QuditName[{
             Interpretation[
              Tooltip[
               Style[0, Bold], "Eigenvalue 1"], {0, {1}}], 
             Subscript["\[Psi]", 
              Subscript["z", "+"]]}, "Dual" -> True]] -> 0, 
         Wolfram`QuantumFramework`QuditName[
           Wolfram`QuantumFramework`QuditName[{
             Interpretation[
              Tooltip[
               Style[1, Bold], "Eigenvalue 2"], {1, {2}}], 
             Subscript["\[Psi]", 
              Subscript["z", "+"]]}, "Dual" -> False], 
           Wolfram`QuantumFramework`QuditName[{
             Interpretation[
              Tooltip[
               Style[1, Bold], "Eigenvalue 2"], {1, {2}}], 
             Subscript["\[Psi]", 
              Subscript["z", "-"]]}, "Dual" -> True]] -> 0, 
         Wolfram`QuantumFramework`QuditName[
           Wolfram`QuantumFramework`QuditName[{
             Interpretation[
              Tooltip[
               Style[1, Bold], "Eigenvalue 2"], {1, {2}}], 
             Subscript["\[Psi]", 
              Subscript["z", "+"]]}, "Dual" -> False], 
           Wolfram`QuantumFramework`QuditName[{
             Interpretation[
              Tooltip[
               Style[1, Bold], "Eigenvalue 2"], {1, {2}}], 
             Subscript["\[Psi]", 
              Subscript["z", "+"]]}, "Dual" -> True]] -> Rational[1, 2]|>, 
       "NormalizedProjector" -> Wolfram`QuantumFramework`QuantumState[
         SparseArray[
         Automatic, {16}, 0, {1, {{0, 4}, {{1}, {4}, {13}, {16}}}, {
            Rational[1, 2], 
            Rational[-1, 2], 
            Rational[-1, 2], 
            Rational[1, 2]}}], 
         Wolfram`QuantumFramework`QuantumBasis[<|
          "Input" -> Wolfram`QuantumFramework`QuditBasis[<|{
                Wolfram`QuantumFramework`QuditName[
                 Interpretation[
                  Tooltip[
                   Style[0, Bold], "Eigenvalue 1"], {0, {1}}], "Dual" -> 
                 True], 1} -> 
              SparseArray[Automatic, {2}, 0, {1, {{0, 1}, {{2}}}, {1}}], {
                Wolfram`QuantumFramework`QuditName[
                 Interpretation[
                  Tooltip[
                   Style[1, Bold], "Eigenvalue 2"], {1, {2}}], "Dual" -> 
                 True], 1} -> 
              SparseArray[Automatic, {2}, 0, {1, {{0, 1}, {{1}}}, {1}}], {
                Wolfram`QuantumFramework`QuditName[
                 Subscript["\[Psi]", 
                  Subscript["z", "-"]], "Dual" -> True], 2} -> 
              SparseArray[Automatic, {2}, 0, {1, {{0, 1}, {{2}}}, {1}}], {
                Wolfram`QuantumFramework`QuditName[
                 Subscript["\[Psi]", 
                  Subscript["z", "+"]], "Dual" -> True], 2} -> 
              SparseArray[Automatic, {2}, 0, {1, {{0, 1}, {{1}}}, {1}}]|>], 
           "Output" -> Wolfram`QuantumFramework`QuditBasis[<|{
                Wolfram`QuantumFramework`QuditName[
                 Interpretation[
                  Tooltip[
                   Style[0, Bold], "Eigenvalue 1"], {0, {1}}], "Dual" -> 
                 False], 1} -> 
              SparseArray[Automatic, {2}, 0, {1, {{0, 1}, {{2}}}, {1}}], {
                Wolfram`QuantumFramework`QuditName[
                 Interpretation[
                  Tooltip[
                   Style[1, Bold], "Eigenvalue 2"], {1, {2}}], "Dual" -> 
                 False], 1} -> 
              SparseArray[Automatic, {2}, 0, {1, {{0, 1}, {{1}}}, {1}}], {
                Wolfram`QuantumFramework`QuditName[
                 Subscript["\[Psi]", 
                  Subscript["z", "-"]], "Dual" -> False], 2} -> 
              SparseArray[Automatic, {2}, 0, {1, {{0, 1}, {{2}}}, {1}}], {
                Wolfram`QuantumFramework`QuditName[
                 Subscript["\[Psi]", 
                  Subscript["z", "+"]], "Dual" -> False], 2} -> 
              SparseArray[Automatic, {2}, 0, {1, {{0, 1}, {{1}}}, {1}}]|>], 
           "Picture" -> "Schr\[ODoubleDot]dinger", "Label" -> 
           Composition["PauliZ", "-"], "ParameterSpec" -> {}|>]], 
       "NormalizedQ" -> True, "NormalizedState" -> 
       Wolfram`QuantumFramework`QuantumState[
         SparseArray[
         Automatic, {4}, 0, {
          1, {{0, 2}, {{1}, {4}}}, {2^Rational[-1, 2], -2^Rational[-1, 2]}}], 
         
         Wolfram`QuantumFramework`QuantumBasis[<|
          "Input" -> Wolfram`QuantumFramework`QuditBasis[<|{
                
                Wolfram`QuantumFramework`QuditName[\[FormalCapitalI], "Dual" -> 
                 False], 1} -> 1|>], "Output" -> 
           Wolfram`QuantumFramework`QuditBasis[<|{
                Wolfram`QuantumFramework`QuditName[
                 Interpretation[
                  Tooltip[
                   Style[0, Bold], "Eigenvalue 1"], {0, {1}}], "Dual" -> 
                 False], 1} -> 
              SparseArray[Automatic, {2}, 0, {1, {{0, 1}, {{2}}}, {1}}], {
                Wolfram`QuantumFramework`QuditName[
                 Interpretation[
                  Tooltip[
                   Style[1, Bold], "Eigenvalue 2"], {1, {2}}], "Dual" -> 
                 False], 1} -> 
              SparseArray[Automatic, {2}, 0, {1, {{0, 1}, {{1}}}, {1}}], {
                Wolfram`QuantumFramework`QuditName[
                 Subscript["\[Psi]", 
                  Subscript["z", "-"]], "Dual" -> False], 2} -> 
              SparseArray[Automatic, {2}, 0, {1, {{0, 1}, {{2}}}, {1}}], {
                Wolfram`QuantumFramework`QuditName[
                 Subscript["\[Psi]", 
                  Subscript["z", "+"]], "Dual" -> False], 2} -> 
              SparseArray[Automatic, {2}, 0, {1, {{0, 1}, {{1}}}, {1}}]|>], 
           "Picture" -> "Schr\[ODoubleDot]dinger", "Label" -> 
           Composition["PauliZ", "-"], "ParameterSpec" -> {}|>]], 
       "NormalizedStateVector" -> 
       SparseArray[
        Automatic, {4}, 0, {
         1, {{0, 2}, {{1}, {4}}}, {2^Rational[-1, 2], -2^Rational[-1, 2]}}], 
       "OrthogonalElements" -> {{{0, 0}, {0, 1}}, {{0, 0}, {1, 0}}, {{0, 1}, {
        0, 0}}, {{1, 0}, {0, 0}}}, "Output" -> 
       Wolfram`QuantumFramework`QuditBasis[<|{
            Wolfram`QuantumFramework`QuditName[
             Interpretation[
              Tooltip[
               Style[0, Bold], "Eigenvalue 1"], {0, {1}}], "Dual" -> False], 
            1} -> SparseArray[Automatic, {2}, 0, {1, {{0, 1}, {{2}}}, {1}}], {
           
            Wolfram`QuantumFramework`QuditName[
             Interpretation[
              Tooltip[
               Style[1, Bold], "Eigenvalue 2"], {1, {2}}], "Dual" -> False], 
            1} -> SparseArray[Automatic, {2}, 0, {1, {{0, 1}, {{1}}}, {1}}], {
           
            Wolfram`QuantumFramework`QuditName[
             Subscript["\[Psi]", 
              Subscript["z", "-"]], "Dual" -> False], 2} -> 
          SparseArray[Automatic, {2}, 0, {1, {{0, 1}, {{2}}}, {1}}], {
            Wolfram`QuantumFramework`QuditName[
             Subscript["\[Psi]", 
              Subscript["z", "+"]], "Dual" -> False], 2} -> 
          SparseArray[Automatic, {2}, 0, {1, {{0, 1}, {{1}}}, {1}}]|>], 
       "OutputBasis" -> 
       Wolfram`QuantumFramework`QuantumBasis[<|
         "Input" -> Wolfram`QuantumFramework`QuditBasis[<|{
               
               Wolfram`QuantumFramework`QuditName[\[FormalCapitalI], "Dual" -> 
                False], 1} -> 1|>], "Output" -> 
          Wolfram`QuantumFramework`QuditBasis[<|{
               Wolfram`QuantumFramework`QuditName[
                Interpretation[
                 Tooltip[
                  Style[0, Bold], "Eigenvalue 1"], {0, {1}}], "Dual" -> 
                False], 1} -> 
             SparseArray[Automatic, {2}, 0, {1, {{0, 1}, {{2}}}, {1}}], {
               Wolfram`QuantumFramework`QuditName[
                Interpretation[
                 Tooltip[
                  Style[1, Bold], "Eigenvalue 2"], {1, {2}}], "Dual" -> 
                False], 1} -> 
             SparseArray[Automatic, {2}, 0, {1, {{0, 1}, {{1}}}, {1}}], {
               Wolfram`QuantumFramework`QuditName[
                Subscript["\[Psi]", 
                 Subscript["z", "-"]], "Dual" -> False], 2} -> 
             SparseArray[Automatic, {2}, 0, {1, {{0, 1}, {{2}}}, {1}}], {
               Wolfram`QuantumFramework`QuditName[
                Subscript["\[Psi]", 
                 Subscript["z", "+"]], "Dual" -> False], 2} -> 
             SparseArray[Automatic, {2}, 0, {1, {{0, 1}, {{1}}}, {1}}]|>], 
          "Picture" -> "Schr\[ODoubleDot]dinger", "Label" -> 
          Composition["PauliZ", "-"], "ParameterSpec" -> {}|>], 
       "OutputDimension" -> 4, "OutputDimensions" -> {2, 2}, 
       "OutputElementDimensions" -> {2, 2}, "OutputElementNames" -> {
         Wolfram`QuantumFramework`QuditName[{
           Interpretation[
            Tooltip[
             Style[0, Bold], "Eigenvalue 1"], {0, {1}}], 
           Subscript["\[Psi]", 
            Subscript["z", "-"]]}, "Dual" -> False], 
         Wolfram`QuantumFramework`QuditName[{
           Interpretation[
            Tooltip[
             Style[0, Bold], "Eigenvalue 1"], {0, {1}}], 
           Subscript["\[Psi]", 
            Subscript["z", "+"]]}, "Dual" -> False], 
         Wolfram`QuantumFramework`QuditName[{
           Interpretation[
            Tooltip[
             Style[1, Bold], "Eigenvalue 2"], {1, {2}}], 
           Subscript["\[Psi]", 
            Subscript["z", "-"]]}, "Dual" -> False], 
         Wolfram`QuantumFramework`QuditName[{
           Interpretation[
            Tooltip[
             Style[1, Bold], "Eigenvalue 2"], {1, {2}}], 
           Subscript["\[Psi]", 
            Subscript["z", "+"]]}, "Dual" -> False]}, "OutputElements" -> 
       SparseArray[
        Automatic, {4, 2, 2}, 0, {
         1, {{0, 1, 2, 3, 4}, {{2, 2}, {2, 1}, {1, 2}, {1, 1}}}, {1, 1, 1, 
          1}}], "OutputMatrix" -> 
       SparseArray[
        Automatic, {4, 4}, 0, {
         1, {{0, 1, 2, 3, 4}, {{4}, {3}, {2}, {1}}}, {1, 1, 1, 1}}], 
       "OutputNameDimension" -> 4, "OutputNameDimensions" -> {2, 2}, 
       "OutputQudits" -> 2, "OutputRank" -> 2, "OutputSize" -> 4, 
       "OutputTensor" -> 
       SparseArray[
        Automatic, {2, 2, 2, 2}, 0, {
         1, {{0, 2, 4}, {{1, 2, 2}, {2, 2, 1}, {1, 1, 2}, {2, 1, 1}}}, {1, 1, 
          1, 1}}], "ParameterArity" -> 0, "Parameters" -> {}, 
       "ParameterSpec" -> {}, "Picture" -> "Schr\[ODoubleDot]dinger", 
       "Projector" -> Wolfram`QuantumFramework`QuantumState[
         SparseArray[
         Automatic, {16}, 0, {1, {{0, 4}, {{1}, {4}, {13}, {16}}}, {
            Rational[1, 2], 
            Rational[-1, 2], 
            Rational[-1, 2], 
            Rational[1, 2]}}], 
         Wolfram`QuantumFramework`QuantumBasis[<|
          "Input" -> Wolfram`QuantumFramework`QuditBasis[<|{
                Wolfram`QuantumFramework`QuditName[
                 Interpretation[
                  Tooltip[
                   Style[0, Bold], "Eigenvalue 1"], {0, {1}}], "Dual" -> 
                 True], 1} -> 
              SparseArray[Automatic, {2}, 0, {1, {{0, 1}, {{2}}}, {1}}], {
                Wolfram`QuantumFramework`QuditName[
                 Interpretation[
                  Tooltip[
                   Style[1, Bold], "Eigenvalue 2"], {1, {2}}], "Dual" -> 
                 True], 1} -> 
              SparseArray[Automatic, {2}, 0, {1, {{0, 1}, {{1}}}, {1}}], {
                Wolfram`QuantumFramework`QuditName[
                 Subscript["\[Psi]", 
                  Subscript["z", "-"]], "Dual" -> True], 2} -> 
              SparseArray[Automatic, {2}, 0, {1, {{0, 1}, {{2}}}, {1}}], {
                Wolfram`QuantumFramework`QuditName[
                 Subscript["\[Psi]", 
                  Subscript["z", "+"]], "Dual" -> True], 2} -> 
              SparseArray[Automatic, {2}, 0, {1, {{0, 1}, {{1}}}, {1}}]|>], 
           "Output" -> Wolfram`QuantumFramework`QuditBasis[<|{
                Wolfram`QuantumFramework`QuditName[
                 Interpretation[
                  Tooltip[
                   Style[0, Bold], "Eigenvalue 1"], {0, {1}}], "Dual" -> 
                 False], 1} -> 
              SparseArray[Automatic, {2}, 0, {1, {{0, 1}, {{2}}}, {1}}], {
                Wolfram`QuantumFramework`QuditName[
                 Interpretation[
                  Tooltip[
                   Style[1, Bold], "Eigenvalue 2"], {1, {2}}], "Dual" -> 
                 False], 1} -> 
              SparseArray[Automatic, {2}, 0, {1, {{0, 1}, {{1}}}, {1}}], {
                Wolfram`QuantumFramework`QuditName[
                 Subscript["\[Psi]", 
                  Subscript["z", "-"]], "Dual" -> False], 2} -> 
              SparseArray[Automatic, {2}, 0, {1, {{0, 1}, {{2}}}, {1}}], {
                Wolfram`QuantumFramework`QuditName[
                 Subscript["\[Psi]", 
                  Subscript["z", "+"]], "Dual" -> False], 2} -> 
              SparseArray[Automatic, {2}, 0, {1, {{0, 1}, {{1}}}, {1}}]|>], 
           "Picture" -> "Schr\[ODoubleDot]dinger", "Label" -> 
           Composition["PauliZ", "-"], "ParameterSpec" -> {}|>]], "Pure" -> 
       Wolfram`QuantumFramework`QuantumState[
         SparseArray[
         Automatic, {4}, 0, {
          1, {{0, 2}, {{1}, {4}}}, {2^Rational[-1, 2], -2^Rational[-1, 2]}}], 
         
         Wolfram`QuantumFramework`QuantumBasis[<|
          "Input" -> Wolfram`QuantumFramework`QuditBasis[<|{
                
                Wolfram`QuantumFramework`QuditName[\[FormalCapitalI], "Dual" -> 
                 False], 1} -> 1|>], "Output" -> 
           Wolfram`QuantumFramework`QuditBasis[<|{
                Wolfram`QuantumFramework`QuditName[
                 Interpretation[
                  Tooltip[
                   Style[0, Bold], "Eigenvalue 1"], {0, {1}}], "Dual" -> 
                 False], 1} -> 
              SparseArray[Automatic, {2}, 0, {1, {{0, 1}, {{2}}}, {1}}], {
                Wolfram`QuantumFramework`QuditName[
                 Interpretation[
                  Tooltip[
                   Style[1, Bold], "Eigenvalue 2"], {1, {2}}], "Dual" -> 
                 False], 1} -> 
              SparseArray[Automatic, {2}, 0, {1, {{0, 1}, {{1}}}, {1}}], {
                Wolfram`QuantumFramework`QuditName[
                 Subscript["\[Psi]", 
                  Subscript["z", "-"]], "Dual" -> False], 2} -> 
              SparseArray[Automatic, {2}, 0, {1, {{0, 1}, {{2}}}, {1}}], {
                Wolfram`QuantumFramework`QuditName[
                 Subscript["\[Psi]", 
                  Subscript["z", "+"]], "Dual" -> False], 2} -> 
              SparseArray[Automatic, {2}, 0, {1, {{0, 1}, {{1}}}, {1}}]|>], 
           "Picture" -> "Schr\[ODoubleDot]dinger", "Label" -> 
           Composition["PauliZ", "-"], "ParameterSpec" -> {}|>]], 
       "PureEffects" -> {
         Wolfram`QuantumFramework`QuantumState[
          SparseArray[Automatic, {4}, 0, {1, {{0, 1}, {{1}}}, {1}}], 
          
          Wolfram`QuantumFramework`QuantumBasis[<|
           "Input" -> Wolfram`QuantumFramework`QuditBasis[<|{
                 
                 Wolfram`QuantumFramework`QuditName[\[FormalCapitalI], "Dual" -> 
                  False], 1} -> 1|>], "Output" -> 
            Wolfram`QuantumFramework`QuditBasis[<|{
                 Wolfram`QuantumFramework`QuditName[
                  Interpretation[
                   Tooltip[
                    Style[0, Bold], "Eigenvalue 1"], {0, {1}}], "Dual" -> 
                  False], 1} -> 
               SparseArray[Automatic, {2}, 0, {1, {{0, 1}, {{2}}}, {1}}], {
                 Wolfram`QuantumFramework`QuditName[
                  Interpretation[
                   Tooltip[
                    Style[1, Bold], "Eigenvalue 2"], {1, {2}}], "Dual" -> 
                  False], 1} -> 
               SparseArray[Automatic, {2}, 0, {1, {{0, 1}, {{1}}}, {1}}], {
                 Wolfram`QuantumFramework`QuditName[
                  Subscript["\[Psi]", 
                   Subscript["z", "-"]], "Dual" -> False], 2} -> 
               SparseArray[Automatic, {2}, 0, {1, {{0, 1}, {{2}}}, {1}}], {
                 Wolfram`QuantumFramework`QuditName[
                  Subscript["\[Psi]", 
                   Subscript["z", "+"]], "Dual" -> False], 2} -> 
               SparseArray[Automatic, {2}, 0, {1, {{0, 1}, {{1}}}, {1}}]|>], 
            "Picture" -> "Schr\[ODoubleDot]dinger", "Label" -> 
            Composition["PauliZ", "-"], "ParameterSpec" -> {}|>]]}, 
       "PureMaps" -> {{
          Wolfram`QuantumFramework`QuantumState[
           SparseArray[Automatic, {4}, 0, {1, {{0, 1}, {{1}}}, {1}}], 
           
           Wolfram`QuantumFramework`QuantumBasis[<|
            "Input" -> Wolfram`QuantumFramework`QuditBasis[<|{
                  
                  Wolfram`QuantumFramework`QuditName[\[FormalCapitalI], 
                   "Dual" -> False], 1} -> 1|>], "Output" -> 
             Wolfram`QuantumFramework`QuditBasis[<|{
                  Wolfram`QuantumFramework`QuditName[
                   Interpretation[
                    Tooltip[
                    Style[0, Bold], "Eigenvalue 1"], {0, {1}}], "Dual" -> 
                   False], 1} -> 
                SparseArray[Automatic, {2}, 0, {1, {{0, 1}, {{2}}}, {1}}], {
                  Wolfram`QuantumFramework`QuditName[
                   Interpretation[
                    Tooltip[
                    Style[1, Bold], "Eigenvalue 2"], {1, {2}}], "Dual" -> 
                   False], 1} -> 
                SparseArray[Automatic, {2}, 0, {1, {{0, 1}, {{1}}}, {1}}], {
                  Wolfram`QuantumFramework`QuditName[
                   Subscript["\[Psi]", 
                    Subscript["z", "-"]], "Dual" -> False], 2} -> 
                SparseArray[Automatic, {2}, 0, {1, {{0, 1}, {{2}}}, {1}}], {
                  Wolfram`QuantumFramework`QuditName[
                   Subscript["\[Psi]", 
                    Subscript["z", "+"]], "Dual" -> False], 2} -> 
                SparseArray[Automatic, {2}, 0, {1, {{0, 1}, {{1}}}, {1}}]|>], 
             "Picture" -> "Schr\[ODoubleDot]dinger", "Label" -> 
             Composition["PauliZ", "-"], "ParameterSpec" -> {}|>]]}, {
          Wolfram`QuantumFramework`QuantumState[
           SparseArray[Automatic, {4}, 0, {1, {{0, 1}, {{2}}}, {1}}], 
           
           Wolfram`QuantumFramework`QuantumBasis[<|
            "Input" -> Wolfram`QuantumFramework`QuditBasis[<|{
                  
                  Wolfram`QuantumFramework`QuditName[\[FormalCapitalI], 
                   "Dual" -> False], 1} -> 1|>], "Output" -> 
             Wolfram`QuantumFramework`QuditBasis[<|{
                  Wolfram`QuantumFramework`QuditName[
                   Interpretation[
                    Tooltip[
                    Style[0, Bold], "Eigenvalue 1"], {0, {1}}], "Dual" -> 
                   False], 1} -> 
                SparseArray[Automatic, {2}, 0, {1, {{0, 1}, {{2}}}, {1}}], {
                  Wolfram`QuantumFramework`QuditName[
                   Interpretation[
                    Tooltip[
                    Style[1, Bold], "Eigenvalue 2"], {1, {2}}], "Dual" -> 
                   False], 1} -> 
                SparseArray[Automatic, {2}, 0, {1, {{0, 1}, {{1}}}, {1}}], {
                  Wolfram`QuantumFramework`QuditName[
                   Subscript["\[Psi]", 
                    Subscript["z", "-"]], "Dual" -> False], 2} -> 
                SparseArray[Automatic, {2}, 0, {1, {{0, 1}, {{2}}}, {1}}], {
                  Wolfram`QuantumFramework`QuditName[
                   Subscript["\[Psi]", 
                    Subscript["z", "+"]], "Dual" -> False], 2} -> 
                SparseArray[Automatic, {2}, 0, {1, {{0, 1}, {{1}}}, {1}}]|>], 
             "Picture" -> "Schr\[ODoubleDot]dinger", "Label" -> 
             Composition["PauliZ", "-"], "ParameterSpec" -> {}|>]]}, {
          Wolfram`QuantumFramework`QuantumState[
           SparseArray[Automatic, {4}, 0, {1, {{0, 1}, {{3}}}, {1}}], 
           Wolfram`QuantumFramework`QuantumBasis[<|
            "Input" -> Wolfram`QuantumFramework`QuditBasis[<|{
                  
                  Wolfram`QuantumFramework`QuditName[\[FormalCapitalI], 
                   "Dual" -> False], 1} -> 1|>], "Output" -> 
             Wolfram`QuantumFramework`QuditBasis[<|{
                  Wolfram`QuantumFramework`QuditName[
                   Interpretation[
                    Tooltip[
                    Style[0, Bold], "Eigenvalue 1"], {0, {1}}], "Dual" -> 
                   False], 1} -> 
                SparseArray[Automatic, {2}, 0, {1, {{0, 1}, {{2}}}, {1}}], {
                  Wolfram`QuantumFramework`QuditName[
                   Interpretation[
                    Tooltip[
                    Style[1, Bold], "Eigenvalue 2"], {1, {2}}], "Dual" -> 
                   False], 1} -> 
                SparseArray[Automatic, {2}, 0, {1, {{0, 1}, {{1}}}, {1}}], {
                  Wolfram`QuantumFramework`QuditName[
                   Subscript["\[Psi]", 
                    Subscript["z", "-"]], "Dual" -> False], 2} -> 
                SparseArray[Automatic, {2}, 0, {1, {{0, 1}, {{2}}}, {1}}], {
                  Wolfram`QuantumFramework`QuditName[
                   Subscript["\[Psi]", 
                    Subscript["z", "+"]], "Dual" -> False], 2} -> 
                SparseArray[Automatic, {2}, 0, {1, {{0, 1}, {{1}}}, {1}}]|>], 
             "Picture" -> "Schr\[ODoubleDot]dinger", "Label" -> 
             Composition["PauliZ", "-"], "ParameterSpec" -> {}|>]]}, {
          Wolfram`QuantumFramework`QuantumState[
           SparseArray[Automatic, {4}, 0, {1, {{0, 1}, {{4}}}, {1}}], 
           
           Wolfram`QuantumFramework`QuantumBasis[<|
            "Input" -> Wolfram`QuantumFramework`QuditBasis[<|{
                  
                  Wolfram`QuantumFramework`QuditName[\[FormalCapitalI], 
                   "Dual" -> False], 1} -> 1|>], "Output" -> 
             Wolfram`QuantumFramework`QuditBasis[<|{
                  Wolfram`QuantumFramework`QuditName[
                   Interpretation[
                    Tooltip[
                    Style[0, Bold], "Eigenvalue 1"], {0, {1}}], "Dual" -> 
                   False], 1} -> 
                SparseArray[Automatic, {2}, 0, {1, {{0, 1}, {{2}}}, {1}}], {
                  Wolfram`QuantumFramework`QuditName[
                   Interpretation[
                    Tooltip[
                    Style[1, Bold], "Eigenvalue 2"], {1, {2}}], "Dual" -> 
                   False], 1} -> 
                SparseArray[Automatic, {2}, 0, {1, {{0, 1}, {{1}}}, {1}}], {
                  Wolfram`QuantumFramework`QuditName[
                   Subscript["\[Psi]", 
                    Subscript["z", "-"]], "Dual" -> False], 2} -> 
                SparseArray[Automatic, {2}, 0, {1, {{0, 1}, {{2}}}, {1}}], {
                  Wolfram`QuantumFramework`QuditName[
                   Subscript["\[Psi]", 
                    Subscript["z", "+"]], "Dual" -> False], 2} -> 
                SparseArray[Automatic, {2}, 0, {1, {{0, 1}, {{1}}}, {1}}]|>], 
             "Picture" -> "Schr\[ODoubleDot]dinger", "Label" -> 
             Composition["PauliZ", "-"], "ParameterSpec" -> {}|>]]}}, 
       "PureStateQ" -> True, "PureStates" -> {
         Wolfram`QuantumFramework`QuantumState[
          SparseArray[Automatic, {4}, 0, {1, {{0, 1}, {{1}}}, {1}}], 
          
          Wolfram`QuantumFramework`QuantumBasis[<|
           "Input" -> Wolfram`QuantumFramework`QuditBasis[<|{
                 
                 Wolfram`QuantumFramework`QuditName[\[FormalCapitalI], "Dual" -> 
                  False], 1} -> 1|>], "Output" -> 
            Wolfram`QuantumFramework`QuditBasis[<|{
                 Wolfram`QuantumFramework`QuditName[
                  Interpretation[
                   Tooltip[
                    Style[0, Bold], "Eigenvalue 1"], {0, {1}}], "Dual" -> 
                  False], 1} -> 
               SparseArray[Automatic, {2}, 0, {1, {{0, 1}, {{2}}}, {1}}], {
                 Wolfram`QuantumFramework`QuditName[
                  Interpretation[
                   Tooltip[
                    Style[1, Bold], "Eigenvalue 2"], {1, {2}}], "Dual" -> 
                  False], 1} -> 
               SparseArray[Automatic, {2}, 0, {1, {{0, 1}, {{1}}}, {1}}], {
                 Wolfram`QuantumFramework`QuditName[
                  Subscript["\[Psi]", 
                   Subscript["z", "-"]], "Dual" -> False], 2} -> 
               SparseArray[Automatic, {2}, 0, {1, {{0, 1}, {{2}}}, {1}}], {
                 Wolfram`QuantumFramework`QuditName[
                  Subscript["\[Psi]", 
                   Subscript["z", "+"]], "Dual" -> False], 2} -> 
               SparseArray[Automatic, {2}, 0, {1, {{0, 1}, {{1}}}, {1}}]|>], 
            "Picture" -> "Schr\[ODoubleDot]dinger", "Label" -> 
            Composition["PauliZ", "-"], "ParameterSpec" -> {}|>]], 
         Wolfram`QuantumFramework`QuantumState[
          SparseArray[Automatic, {4}, 0, {1, {{0, 1}, {{2}}}, {1}}], 
          
          Wolfram`QuantumFramework`QuantumBasis[<|
           "Input" -> Wolfram`QuantumFramework`QuditBasis[<|{
                 
                 Wolfram`QuantumFramework`QuditName[\[FormalCapitalI], "Dual" -> 
                  False], 1} -> 1|>], "Output" -> 
            Wolfram`QuantumFramework`QuditBasis[<|{
                 Wolfram`QuantumFramework`QuditName[
                  Interpretation[
                   Tooltip[
                    Style[0, Bold], "Eigenvalue 1"], {0, {1}}], "Dual" -> 
                  False], 1} -> 
               SparseArray[Automatic, {2}, 0, {1, {{0, 1}, {{2}}}, {1}}], {
                 Wolfram`QuantumFramework`QuditName[
                  Interpretation[
                   Tooltip[
                    Style[1, Bold], "Eigenvalue 2"], {1, {2}}], "Dual" -> 
                  False], 1} -> 
               SparseArray[Automatic, {2}, 0, {1, {{0, 1}, {{1}}}, {1}}], {
                 Wolfram`QuantumFramework`QuditName[
                  Subscript["\[Psi]", 
                   Subscript["z", "-"]], "Dual" -> False], 2} -> 
               SparseArray[Automatic, {2}, 0, {1, {{0, 1}, {{2}}}, {1}}], {
                 Wolfram`QuantumFramework`QuditName[
                  Subscript["\[Psi]", 
                   Subscript["z", "+"]], "Dual" -> False], 2} -> 
               SparseArray[Automatic, {2}, 0, {1, {{0, 1}, {{1}}}, {1}}]|>], 
            "Picture" -> "Schr\[ODoubleDot]dinger", "Label" -> 
            Composition["PauliZ", "-"], "ParameterSpec" -> {}|>]], 
         Wolfram`QuantumFramework`QuantumState[
          SparseArray[Automatic, {4}, 0, {1, {{0, 1}, {{3}}}, {1}}], 
          
          Wolfram`QuantumFramework`QuantumBasis[<|
           "Input" -> Wolfram`QuantumFramework`QuditBasis[<|{
                 
                 Wolfram`QuantumFramework`QuditName[\[FormalCapitalI], "Dual" -> 
                  False], 1} -> 1|>], "Output" -> 
            Wolfram`QuantumFramework`QuditBasis[<|{
                 Wolfram`QuantumFramework`QuditName[
                  Interpretation[
                   Tooltip[
                    Style[0, Bold], "Eigenvalue 1"], {0, {1}}], "Dual" -> 
                  False], 1} -> 
               SparseArray[Automatic, {2}, 0, {1, {{0, 1}, {{2}}}, {1}}], {
                 Wolfram`QuantumFramework`QuditName[
                  Interpretation[
                   Tooltip[
                    Style[1, Bold], "Eigenvalue 2"], {1, {2}}], "Dual" -> 
                  False], 1} -> 
               SparseArray[Automatic, {2}, 0, {1, {{0, 1}, {{1}}}, {1}}], {
                 Wolfram`QuantumFramework`QuditName[
                  Subscript["\[Psi]", 
                   Subscript["z", "-"]], "Dual" -> False], 2} -> 
               SparseArray[Automatic, {2}, 0, {1, {{0, 1}, {{2}}}, {1}}], {
                 Wolfram`QuantumFramework`QuditName[
                  Subscript["\[Psi]", 
                   Subscript["z", "+"]], "Dual" -> False], 2} -> 
               SparseArray[Automatic, {2}, 0, {1, {{0, 1}, {{1}}}, {1}}]|>], 
            "Picture" -> "Schr\[ODoubleDot]dinger", "Label" -> 
            Composition["PauliZ", "-"], "ParameterSpec" -> {}|>]], 
         Wolfram`QuantumFramework`QuantumState[
          SparseArray[Automatic, {4}, 0, {1, {{0, 1}, {{4}}}, {1}}], 
          
          Wolfram`QuantumFramework`QuantumBasis[<|
           "Input" -> Wolfram`QuantumFramework`QuditBasis[<|{
                 
                 Wolfram`QuantumFramework`QuditName[\[FormalCapitalI], "Dual" -> 
                  False], 1} -> 1|>], "Output" -> 
            Wolfram`QuantumFramework`QuditBasis[<|{
                 Wolfram`QuantumFramework`QuditName[
                  Interpretation[
                   Tooltip[
                    Style[0, Bold], "Eigenvalue 1"], {0, {1}}], "Dual" -> 
                  False], 1} -> 
               SparseArray[Automatic, {2}, 0, {1, {{0, 1}, {{2}}}, {1}}], {
                 Wolfram`QuantumFramework`QuditName[
                  Interpretation[
                   Tooltip[
                    Style[1, Bold], "Eigenvalue 2"], {1, {2}}], "Dual" -> 
                  False], 1} -> 
               SparseArray[Automatic, {2}, 0, {1, {{0, 1}, {{1}}}, {1}}], {
                 Wolfram`QuantumFramework`QuditName[
                  Subscript["\[Psi]", 
                   Subscript["z", "-"]], "Dual" -> False], 2} -> 
               SparseArray[Automatic, {2}, 0, {1, {{0, 1}, {{2}}}, {1}}], {
                 Wolfram`QuantumFramework`QuditName[
                  Subscript["\[Psi]", 
                   Subscript["z", "+"]], "Dual" -> False], 2} -> 
               SparseArray[Automatic, {2}, 0, {1, {{0, 1}, {{1}}}, {1}}]|>], 
            "Picture" -> "Schr\[ODoubleDot]dinger", "Label" -> 
            Composition["PauliZ", "-"], "ParameterSpec" -> {}|>]]}, "Purity" -> 
       1, "QuditBasis" -> Wolfram`QuantumFramework`QuditBasis[<|{
            Wolfram`QuantumFramework`QuditName[
             Interpretation[
              Tooltip[
               Style[0, Bold], "Eigenvalue 1"], {0, {1}}], "Dual" -> False], 
            1} -> SparseArray[Automatic, {2}, 0, {1, {{0, 1}, {{2}}}, {1}}], {
           
            Wolfram`QuantumFramework`QuditName[
             Interpretation[
              Tooltip[
               Style[1, Bold], "Eigenvalue 2"], {1, {2}}], "Dual" -> False], 
            1} -> SparseArray[Automatic, {2}, 0, {1, {{0, 1}, {{1}}}, {1}}], {
           
            Wolfram`QuantumFramework`QuditName[
             Subscript["\[Psi]", 
              Subscript["z", "-"]], "Dual" -> False], 2} -> 
          SparseArray[Automatic, {2}, 0, {1, {{0, 1}, {{2}}}, {1}}], {
            Wolfram`QuantumFramework`QuditName[
             Subscript["\[Psi]", 
              Subscript["z", "+"]], "Dual" -> False], 2} -> 
          SparseArray[Automatic, {2}, 0, {1, {{0, 1}, {{1}}}, {1}}]|>], 
       "Qudits" -> 2, "Rank" -> 2, "SchmidtBasis" -> 
       Wolfram`QuantumFramework`QuantumOperator[
         Wolfram`QuantumFramework`QuantumState[
          SparseArray[Automatic, {4}, 0, {1, {{0, 1}, {{1}}}, {1}}], 
          
          Wolfram`QuantumFramework`QuantumBasis[<|
           "Input" -> Wolfram`QuantumFramework`QuditBasis[<|{
                 Wolfram`QuantumFramework`QuditName[
                  Subscript["v", 1], "Dual" -> False], 1} -> 
               SparseArray[Automatic, {1}, 0, {1, {{0, 1}, {{1}}}, {1}}]|>], 
            "Output" -> Wolfram`QuantumFramework`QuditBasis[<|{
                 Wolfram`QuantumFramework`QuditName[
                  Subscript["u", 1], "Dual" -> False], 1} -> 
               SparseArray[
                Automatic, {4}, 0, {
                 1, {{0, 2}, {{1}, {4}}}, {-2^Rational[-1, 2], 2^
                   Rational[-1, 2]}}], {
                 Wolfram`QuantumFramework`QuditName[
                  Subscript["u", 2], "Dual" -> False], 1} -> 
               SparseArray[
                Automatic, {4}, 0, {
                 1, {{0, 2}, {{1}, {4}}}, {
                  2^Rational[-1, 2], 2^Rational[-1, 2]}}], {
                 Wolfram`QuantumFramework`QuditName[
                  Subscript["u", 3], "Dual" -> False], 1} -> 
               SparseArray[Automatic, {4}, 0, {1, {{0, 1}, {{3}}}, {1}}], {
                 Wolfram`QuantumFramework`QuditName[
                  Subscript["u", 4], "Dual" -> False], 1} -> 
               SparseArray[Automatic, {4}, 0, {1, {{0, 1}, {{2}}}, {1}}]|>], 
            "Picture" -> "Schr\[ODoubleDot]dinger", "Label" -> 
            "Computational", "ParameterSpec" -> {}|>]], {{0, 1}, {}}], "Size" -> 
       5, "SpectralBasis" -> Wolfram`QuantumFramework`QuantumOperator[
         Wolfram`QuantumFramework`QuantumState[
          SparseArray[Automatic, {4}, 0, {1, {{0, 1}, {{1}}}, {1}}], 
          
          Wolfram`QuantumFramework`QuantumBasis[<|
           "Input" -> Wolfram`QuantumFramework`QuditBasis[<|{
                 Wolfram`QuantumFramework`QuditName[\[FormalCapitalI], "Dual" -> 
                  False], 1} -> 1|>], "Output" -> 
            Wolfram`QuantumFramework`QuditBasis[<|{
                 Wolfram`QuantumFramework`QuditName[
                  Subscript["s", 1], "Dual" -> False], 1} -> 
               SparseArray[
                Automatic, {4}, 0, {1, {{0, 2}, {{1}, {4}}}, {-1, 1}}], {
                 Wolfram`QuantumFramework`QuditName[
                  Subscript["s", 2], "Dual" -> False], 1} -> 
               SparseArray[
                Automatic, {4}, 0, {1, {{0, 2}, {{1}, {4}}}, {1, 1}}], {
                 Wolfram`QuantumFramework`QuditName[
                  Subscript["s", 3], "Dual" -> False], 1} -> 
               SparseArray[Automatic, {4}, 0, {1, {{0, 1}, {{3}}}, {1}}], {
                 Wolfram`QuantumFramework`QuditName[
                  Subscript["s", 4], "Dual" -> False], 1} -> 
               SparseArray[Automatic, {4}, 0, {1, {{0, 1}, {{2}}}, {1}}]|>], 
            "Picture" -> "Schr\[ODoubleDot]dinger", "Label" -> None, 
            "ParameterSpec" -> {}|>]], {{0, 1}, {}}], "State" -> 
       Wolfram`QuantumFramework`QuantumState[
         SparseArray[
         Automatic, {4}, 0, {
          1, {{0, 2}, {{1}, {4}}}, {2^Rational[-1, 2], -2^Rational[-1, 2]}}], 
         
         Wolfram`QuantumFramework`QuantumBasis[<|
          "Input" -> Wolfram`QuantumFramework`QuditBasis[<|{
                
                Wolfram`QuantumFramework`QuditName[\[FormalCapitalI], "Dual" -> 
                 False], 1} -> 1|>], "Output" -> 
           Wolfram`QuantumFramework`QuditBasis[<|{
                Wolfram`QuantumFramework`QuditName[
                 Interpretation[
                  Tooltip[
                   Style[0, Bold], "Eigenvalue 1"], {0, {1}}], "Dual" -> 
                 False], 1} -> 
              SparseArray[Automatic, {2}, 0, {1, {{0, 1}, {{2}}}, {1}}], {
                Wolfram`QuantumFramework`QuditName[
                 Interpretation[
                  Tooltip[
                   Style[1, Bold], "Eigenvalue 2"], {1, {2}}], "Dual" -> 
                 False], 1} -> 
              SparseArray[Automatic, {2}, 0, {1, {{0, 1}, {{1}}}, {1}}], {
                Wolfram`QuantumFramework`QuditName[
                 Subscript["\[Psi]", 
                  Subscript["z", "-"]], "Dual" -> False], 2} -> 
              SparseArray[Automatic, {2}, 0, {1, {{0, 1}, {{2}}}, {1}}], {
                Wolfram`QuantumFramework`QuditName[
                 Subscript["\[Psi]", 
                  Subscript["z", "+"]], "Dual" -> False], 2} -> 
              SparseArray[Automatic, {2}, 0, {1, {{0, 1}, {{1}}}, {1}}]|>], 
           "Picture" -> "Schr\[ODoubleDot]dinger", "Label" -> 
           Composition["PauliZ", "-"], "ParameterSpec" -> {}|>]], 
       "StateMatrix" -> 
       SparseArray[
        Automatic, {4, 1}, 0, {
         1, {{0, 1, 1, 1, 2}, {{1}, {1}}}, {
          2^Rational[-1, 2], -2^Rational[-1, 2]}}], "StateTensor" -> 
       SparseArray[
        Automatic, {2, 2}, 0, {
         1, {{0, 1, 2}, {{1}, {2}}}, {
          2^Rational[-1, 2], -2^Rational[-1, 2]}}], "StateType" -> "Vector", 
       "StateVector" -> 
       SparseArray[
        Automatic, {4}, 0, {
         1, {{0, 2}, {{1}, {4}}}, {2^Rational[-1, 2], -2^Rational[-1, 2]}}], 
       "TensorDimensions" -> {2, 2, 2, 2}, "Transpose" -> 
       Wolfram`QuantumFramework`QuantumOperator[
         Wolfram`QuantumFramework`QuantumState[
          SparseArray[
          Automatic, {4}, 0, {
           1, {{0, 2}, {{1}, {4}}}, {2^Rational[-1, 2], -2^Rational[-1, 2]}}], 
          
          Wolfram`QuantumFramework`QuantumBasis[<|
           "Input" -> Wolfram`QuantumFramework`QuditBasis[<|{
                 Wolfram`QuantumFramework`QuditName[
                  Interpretation[
                   Tooltip[
                    Style[0, Bold], "Eigenvalue 1"], {0, {1}}], "Dual" -> 
                  False], 1} -> 
               SparseArray[Automatic, {2}, 0, {1, {{0, 1}, {{2}}}, {1}}], {
                 Wolfram`QuantumFramework`QuditName[
                  Interpretation[
                   Tooltip[
                    Style[1, Bold], "Eigenvalue 2"], {1, {2}}], "Dual" -> 
                  False], 1} -> 
               SparseArray[Automatic, {2}, 0, {1, {{0, 1}, {{1}}}, {1}}], {
                 Wolfram`QuantumFramework`QuditName[
                  Subscript["\[Psi]", 
                   Subscript["z", "-"]], "Dual" -> False], 2} -> 
               SparseArray[Automatic, {2}, 0, {1, {{0, 1}, {{2}}}, {1}}], {
                 Wolfram`QuantumFramework`QuditName[
                  Subscript["\[Psi]", 
                   Subscript["z", "+"]], "Dual" -> False], 2} -> 
               SparseArray[Automatic, {2}, 0, {1, {{0, 1}, {{1}}}, {1}}]|>], 
            "Output" -> Wolfram`QuantumFramework`QuditBasis[<|{
                 
                 Wolfram`QuantumFramework`QuditName[\[FormalCapitalI], "Dual" -> 
                  False], 1} -> 1|>], "Picture" -> "Schr\[ODoubleDot]dinger", 
            "Label" -> Superscript[
              Composition["PauliZ", "-"], "T"], 
            "ParameterSpec" -> {}|>]], {{}, {0, 1}}], "Type" -> "POVM", 
       "VonNeumannEntropy" -> Quantity[0, "Bits"], "Weights" -> 
       SparseArray[Automatic, {4}, 0, {1, {{0, 2}, {{1}, {4}}}, {
           Rational[1, 2], 
           Rational[1, 2]}}]|>, "AllowEmbedding" -> True, "InitialShape" -> 
     TypeSystem`PackageScope`Limited[
       TypeSystem`PackageScope`ColumnShape[
        TypeSystem`PackageScope`KeyValueShape[
         TypeSystem`PackageScope`AtomShape[224.00000000000003`], 
         TypeSystem`PackageScope`UnknownShape[False]]], 20, 
       DirectedInfinity[1], {}], "InitialType" -> TypeSystem`Assoc[
       TypeSystem`Atom[String], TypeSystem`AnyType, 167], "Meta" -> <||>, 
     "RowTarget" -> 20, "ColumnTarget" -> 10, "Shape" -> 
     TypeSystem`PackageScope`Limited[
       TypeSystem`PackageScope`ColumnShape[
        TypeSystem`PackageScope`KeyValueShape[
         TypeSystem`PackageScope`AtomShape[224.00000000000003`], 
         TypeSystem`PackageScope`UnknownShape[False]]], 20, 
       DirectedInfinity[1], {}], "Type" -> TypeSystem`Assoc[
       TypeSystem`Atom[String], TypeSystem`AnyType, 167], "Path" -> {}, 
     "DisplayedRowCount" -> 20, "DisplayedColumnCount" -> 1, "DataRowCount" -> 
     167, "DataColumnCount" -> 1, "SortPaths" -> {}, "SortDirections" -> {}, 
     "HiddenItemsMap" -> Null, "UpdateType" -> 1|>, 
    TypeSystem`NestedGrid`PackagePrivate`$outputID$$, 
    TypeSystem`NestedGrid`PackagePrivate`$path$$ = {}, 
    TypeSystem`NestedGrid`PackagePrivate`$vPos$$ = 1, 
    TypeSystem`NestedGrid`PackagePrivate`$hPos$$ = 1, 
    TypeSystem`NestedGrid`PackagePrivate`$grid$$ = 
    DynamicModule[{
     TypeSystem`NestedGrid`PackagePrivate`renderedGrid = Deploy[
        Style[
         Grid[{{
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover["QuantumOperator", 
                  Style[
                  "QuantumOperator", FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                If[
                  TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                    Key["QuantumOperator"]}, 1]]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key["QuantumOperator"]}, "RowHeader", False], "Mouse"], 
              ImageSize -> {{224.00000000000003`, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
             GrayLevel[0.95], Alignment -> {Left, Baseline}], 
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover[
                  Style["\[Ellipsis]", 
                   GrayLevel[0.5]], 
                  Style[
                   Style["\[Ellipsis]", 
                    GrayLevel[0.5]], FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                If[
                  TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                    Key["QuantumOperator"]}, 4]]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key["QuantumOperator"]}, "Item", False], "Mouse"], 
              ImageMargins -> {{5, 3}, {4, 5}}], BaseStyle -> {
               GrayLevel[0.5], Bold}]}, {
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover["Distribution", 
                  Style[
                  "Distribution", FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                If[
                  TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                    Key["Distribution"]}, 1]]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key["Distribution"]}, "RowHeader", False], "Mouse"], 
              ImageSize -> {{224.00000000000003`, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
             GrayLevel[0.95], Alignment -> {Left, Baseline}], 
            Item[
             Pane[
              Annotation[
               RawBoxes[
                StyleBox[
                 RowBox[{
                   TagBox["CategoricalDistribution", "SummaryHead"], "[", 
                   TemplateBox[{
                    GridBox[{{
                    GridBox[{{
                    RowBox[{
                    TagBox["\"Input type: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox["\"Scalar\"", "SummaryItem"]}]}, {
                    RowBox[{
                    TagBox["\"Categories: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox[
                    TagBox[
                    GridBox[{{
                    InterpretationBox[
                    TemplateBox[{
                    RowBox[{
                    SubscriptBox["\"\[Psi]\"", 
                    SubscriptBox["\"z\"", "\"-\""]]}]}, "Ket"], 
                    Wolfram`QuantumFramework`QuditName[
                    Subscript["\[Psi]", 
                    Subscript["z", "-"]], "Dual" -> False]], 
                    InterpretationBox[
                    TemplateBox[{
                    RowBox[{
                    SubscriptBox["\"\[Psi]\"", 
                    SubscriptBox["\"z\"", "\"+\""]]}]}, "Ket"], 
                    Wolfram`QuantumFramework`QuditName[
                    Subscript["\[Psi]", 
                    Subscript["z", "+"]], "Dual" -> False]]}}, AutoDelete -> 
                    False, GridBoxFrame -> {
                    "Columns" -> {{True}}, "Rows" -> {{True}}}, 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                    FrameStyle -> GrayLevel[0.8]], "Grid"], 
                    "SummaryItem"]}]}}, 
                    GridBoxAlignment -> {
                    "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, 
                    AutoDelete -> False, 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {
                    "Columns" -> {{2}}, "Rows" -> {{Automatic}}}, 
                    BaseStyle -> {
                    ShowStringCharacters -> False, NumberMarks -> False, 
                    PrintPrecision -> 3, ShowSyntaxStyles -> False}]}}, 
                    GridBoxAlignment -> {
                    "Columns" -> {{Left}}, "Rows" -> {{Top}}}, AutoDelete -> 
                    False, GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                    BaselinePosition -> {1, 1}]}, "SummaryPanel"], "]"}], 
                 FontFamily -> Dynamic[
                   CurrentValue[{"StyleHints", "CodeFont"}]], 
                 ShowStringCharacters -> True]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key["Distribution"]}, "Item", False], "Mouse"], 
              ImageSize -> {{60, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}]}, {
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover["Outcomes", 
                  Style[
                  "Outcomes", FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                If[
                  TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                    Key["Outcomes"]}, 1]]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key["Outcomes"]}, "RowHeader", False], "Mouse"], 
              ImageSize -> {{224.00000000000003`, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
             GrayLevel[0.95], Alignment -> {Left, Baseline}], 
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover[
                  Style[{
                    Wolfram`QuantumFramework`QuditName[
                    Subscript["\[Psi]", 
                    Subscript["z", "-"]], "Dual" -> False], 
                    Wolfram`QuantumFramework`QuditName[
                    Subscript["\[Psi]", 
                    Subscript["z", "+"]], "Dual" -> False]}, 
                   ShowStringCharacters -> False], 
                  Style[
                   Style[{
                    Wolfram`QuantumFramework`QuditName[
                    Subscript["\[Psi]", 
                    Subscript["z", "-"]], "Dual" -> False], 
                    Wolfram`QuantumFramework`QuditName[
                    Subscript["\[Psi]", 
                    Subscript["z", "+"]], "Dual" -> False]}, 
                    ShowStringCharacters -> False], FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                If[
                  TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                    Key["Outcomes"]}, 4]]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key["Outcomes"]}, "Item", False], "Mouse"], 
              ImageMargins -> {{5, 3}, {4, 5}}]]}, {
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover["Probabilities", 
                  Style[
                  "Probabilities", FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                If[
                  TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                    Key["Probabilities"]}, 1]]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key["Probabilities"]}, "RowHeader", False], "Mouse"], 
              ImageSize -> {{224.00000000000003`, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
             GrayLevel[0.95], Alignment -> {Left, Baseline}], 
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover[
                  Style[<|Wolfram`QuantumFramework`QuditName[
                    Subscript["\[Psi]", 
                    Subscript["z", "-"]], "Dual" -> False] -> Rational[1, 2], 
                    Wolfram`QuantumFramework`QuditName[
                    Subscript["\[Psi]", 
                    Subscript["z", "+"]], "Dual" -> False] -> 
                    Rational[1, 2]|>, ShowStringCharacters -> False], 
                  Style[
                   Style[<|Wolfram`QuantumFramework`QuditName[
                    Subscript["\[Psi]", 
                    Subscript["z", "-"]], "Dual" -> False] -> Rational[1, 2], 
                    Wolfram`QuantumFramework`QuditName[
                    Subscript["\[Psi]", 
                    Subscript["z", "+"]], "Dual" -> False] -> 
                    Rational[1, 2]|>, ShowStringCharacters -> False], 
                   FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                If[
                  TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                    Key["Probabilities"]}, 4]]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key["Probabilities"]}, "Item", False], "Mouse"], 
              ImageMargins -> {{5, 3}, {4, 5}}]]}, {
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover["Mean", 
                  Style[
                  "Mean", FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                If[
                  TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                    Key["Mean"]}, 1]]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key["Mean"]}, "RowHeader", False], "Mouse"], 
              ImageSize -> {{224.00000000000003`, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
             GrayLevel[0.95], Alignment -> {Left, Baseline}], 
            Item[
             Pane[
              Annotation[
               RawBoxes[
                StyleBox[
                 RowBox[{
                   FractionBox[
                    InterpretationBox[
                    TemplateBox[{
                    RowBox[{
                    InterpretationBox[
                    TagBox[
                    TooltipBox[
                    StyleBox["0", Bold, StripOnInput -> False], 
                    "\"Eigenvalue 1\"", LabelStyle -> "TextStyling"], 
                    Annotation[#, "Eigenvalue 1", "Tooltip"]& ], {0, {1}}]}]},
                     "Ket"], 
                    Wolfram`QuantumFramework`QuditName[
                    Interpretation[
                    Tooltip[
                    Style[0, Bold], "Eigenvalue 1"], {0, {1}}], "Dual" -> 
                    False]], "2"], "+", 
                   FractionBox[
                    InterpretationBox[
                    TemplateBox[{
                    RowBox[{
                    InterpretationBox[
                    TagBox[
                    TooltipBox[
                    StyleBox["1", Bold, StripOnInput -> False], 
                    "\"Eigenvalue 2\"", LabelStyle -> "TextStyling"], 
                    Annotation[#, "Eigenvalue 2", "Tooltip"]& ], {1, {2}}]}]},
                     "Ket"], 
                    Wolfram`QuantumFramework`QuditName[
                    Interpretation[
                    Tooltip[
                    Style[1, Bold], "Eigenvalue 2"], {1, {2}}], "Dual" -> 
                    False]], "2"]}], FontFamily -> Dynamic[
                   CurrentValue[{"StyleHints", "CodeFont"}]], 
                 ShowStringCharacters -> True]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key["Mean"]}, "Item", False], "Mouse"], 
              ImageSize -> {{60, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}]}, {
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover["States", 
                  Style[
                  "States", FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                If[
                  TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                    Key["States"]}, 1]]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key["States"]}, "RowHeader", False], "Mouse"], 
              ImageSize -> {{224.00000000000003`, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
             GrayLevel[0.95], Alignment -> {Left, Baseline}], 
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover[
                  Style[
                   Row[{"\[ThinSpace]{ ", 
                    Subscript["\[Ellipsis]", 2], " }\[ThinSpace]"}], 
                   GrayLevel[0.5]], 
                  Style[
                   Style[
                    Row[{"\[ThinSpace]{ ", 
                    Subscript["\[Ellipsis]", 2], " }\[ThinSpace]"}], 
                    GrayLevel[0.5]], FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                If[
                  TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                    Key["States"]}, 4]]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key["States"]}, "Item", False], "Mouse"], 
              ImageMargins -> {{5, 3}, {4, 5}}], BaseStyle -> {
               GrayLevel[0.5]}]}, {
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover["StateAssociation", 
                  Style[
                  "StateAssociation", FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                If[
                  TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                    Key["StateAssociation"]}, 1]]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key["StateAssociation"]}, "RowHeader", False], "Mouse"], 
              ImageSize -> {{224.00000000000003`, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
             GrayLevel[0.95], Alignment -> {Left, Baseline}], 
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover[
                  Style[
                   Row[{"\[LeftAssociation] ", 
                    Subscript["\[Ellipsis]", 2], "\[RightAssociation]"}], 
                   GrayLevel[0.5]], 
                  Style[
                   Style[
                    Row[{"\[LeftAssociation] ", 
                    Subscript["\[Ellipsis]", 2], "\[RightAssociation]"}], 
                    GrayLevel[0.5]], FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                If[
                  TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                    Key["StateAssociation"]}, 4]]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key["StateAssociation"]}, "Item", False], "Mouse"], 
              ImageMargins -> {{5, 3}, {4, 5}}], BaseStyle -> {
               GrayLevel[0.5]}]}, {
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover["Entropy", 
                  Style[
                  "Entropy", FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                If[
                  TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                    Key["Entropy"]}, 1]]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key["Entropy"]}, "RowHeader", False], "Mouse"], 
              ImageSize -> {{224.00000000000003`, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
             GrayLevel[0.95], Alignment -> {Left, Baseline}], 
            Item[
             Pane[
              Annotation[
               RawBoxes[
                RowBox[{"1.`", "\"b\""}]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key["Entropy"]}, "Item", False], "Mouse"], 
              ImageSize -> {{75, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}]}, {
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover["PostMeasurementState", 
                  Style[
                  "PostMeasurementState", FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                If[
                  TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                    Key["PostMeasurementState"]}, 1]]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key["PostMeasurementState"]}, "RowHeader", False], "Mouse"], 
              ImageSize -> {{224.00000000000003`, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
             GrayLevel[0.95], Alignment -> {Left, Baseline}], 
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover[
                  Style["\[Ellipsis]", 
                   GrayLevel[0.5]], 
                  Style[
                   Style["\[Ellipsis]", 
                    GrayLevel[0.5]], FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                If[
                  TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                    Key["PostMeasurementState"]}, 4]]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key["PostMeasurementState"]}, "Item", False], "Mouse"], 
              ImageMargins -> {{5, 3}, {4, 5}}], BaseStyle -> {
               GrayLevel[0.5], Bold}]}, {
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover["Arity", 
                  Style[
                  "Arity", FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                If[
                  TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                    Key["Arity"]}, 1]]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key["Arity"]}, "RowHeader", False], "Mouse"], 
              ImageSize -> {{224.00000000000003`, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
             GrayLevel[0.95], Alignment -> {Left, Baseline}], 
            Item[
             Pane[
              Annotation[
               RawBoxes["1"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key["Arity"]}, "Item", False], "Mouse"], 
              ImageSize -> {{34, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}]}, {
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover["Basis", 
                  Style[
                  "Basis", FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                If[
                  TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                    Key["Basis"]}, 1]]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key["Basis"]}, "RowHeader", False], "Mouse"], 
              ImageSize -> {{224.00000000000003`, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
             GrayLevel[0.95], Alignment -> {Left, Baseline}], 
            Item[
             Pane[
              Annotation[
               RawBoxes[
                StyleBox[
                 RowBox[{
                   TagBox["QuantumBasis", "SummaryHead"], "[", 
                   TemplateBox[{
                    GridBox[{{
                    GridBox[{{
                    RowBox[{
                    TagBox["\"Picture: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox["\"Schr\[ODoubleDot]dinger\"", "SummaryItem"]}], 
                    RowBox[{
                    TagBox["\"Rank: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox["2", "SummaryItem"]}]}, {
                    RowBox[{
                    TagBox["\"Dimension: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox["4", "SummaryItem"]}], ""}}, 
                    GridBoxAlignment -> {
                    "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, 
                    AutoDelete -> False, 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {
                    "Columns" -> {{2}}, "Rows" -> {{Automatic}}}, 
                    BaseStyle -> {
                    ShowStringCharacters -> False, NumberMarks -> False, 
                    PrintPrecision -> 3, ShowSyntaxStyles -> False}]}}, 
                    GridBoxAlignment -> {
                    "Columns" -> {{Left}}, "Rows" -> {{Top}}}, AutoDelete -> 
                    False, GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                    BaselinePosition -> {1, 1}]}, "SummaryPanel"], "]"}], 
                 FontFamily -> Dynamic[
                   CurrentValue[{"StyleHints", "CodeFont"}]], 
                 ShowStringCharacters -> True]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key["Basis"]}, "Item", False], "Mouse"], 
              ImageSize -> {{60, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}]}, {
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover["Canonical", 
                  Style[
                  "Canonical", FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                If[
                  TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                    Key["Canonical"]}, 1]]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key["Canonical"]}, "RowHeader", False], "Mouse"], 
              ImageSize -> {{224.00000000000003`, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
             GrayLevel[0.95], Alignment -> {Left, Baseline}], 
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover[
                  Style["\[Ellipsis]", 
                   GrayLevel[0.5]], 
                  Style[
                   Style["\[Ellipsis]", 
                    GrayLevel[0.5]], FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                If[
                  TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                    Key["Canonical"]}, 4]]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key["Canonical"]}, "Item", False], "Mouse"], 
              ImageMargins -> {{5, 3}, {4, 5}}], BaseStyle -> {
               GrayLevel[0.5], Bold}]}, {
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover["CanonicalBasis", 
                  Style[
                  "CanonicalBasis", FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                If[
                  TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                    Key["CanonicalBasis"]}, 1]]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key["CanonicalBasis"]}, "RowHeader", False], "Mouse"], 
              ImageSize -> {{224.00000000000003`, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
             GrayLevel[0.95], Alignment -> {Left, Baseline}], 
            Item[
             Pane[
              Annotation[
               RawBoxes[
                StyleBox[
                 RowBox[{
                   TagBox["QuantumBasis", "SummaryHead"], "[", 
                   TemplateBox[{
                    GridBox[{{
                    GridBox[{{
                    RowBox[{
                    TagBox["\"Picture: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox["\"Schr\[ODoubleDot]dinger\"", "SummaryItem"]}], 
                    RowBox[{
                    TagBox["\"Rank: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox["2", "SummaryItem"]}]}, {
                    RowBox[{
                    TagBox["\"Dimension: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox["4", "SummaryItem"]}], ""}}, 
                    GridBoxAlignment -> {
                    "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, 
                    AutoDelete -> False, 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {
                    "Columns" -> {{2}}, "Rows" -> {{Automatic}}}, 
                    BaseStyle -> {
                    ShowStringCharacters -> False, NumberMarks -> False, 
                    PrintPrecision -> 3, ShowSyntaxStyles -> False}]}}, 
                    GridBoxAlignment -> {
                    "Columns" -> {{Left}}, "Rows" -> {{Top}}}, AutoDelete -> 
                    False, GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                    BaselinePosition -> {1, 1}]}, "SummaryPanel"], "]"}], 
                 FontFamily -> Dynamic[
                   CurrentValue[{"StyleHints", "CodeFont"}]], 
                 ShowStringCharacters -> True]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key["CanonicalBasis"]}, "Item", False], "Mouse"], 
              ImageSize -> {{60, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}]}, {
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover["Computational", 
                  Style[
                  "Computational", FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                If[
                  TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                    Key["Computational"]}, 1]]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key["Computational"]}, "RowHeader", False], "Mouse"], 
              ImageSize -> {{224.00000000000003`, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
             GrayLevel[0.95], Alignment -> {Left, Baseline}], 
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover[
                  Style["\[Ellipsis]", 
                   GrayLevel[0.5]], 
                  Style[
                   Style["\[Ellipsis]", 
                    GrayLevel[0.5]], FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                If[
                  TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                    Key["Computational"]}, 4]]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key["Computational"]}, "Item", False], "Mouse"], 
              ImageMargins -> {{5, 3}, {4, 5}}], BaseStyle -> {
               GrayLevel[0.5], Bold}]}, {
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover["ConjugateTranspose", 
                  Style[
                  "ConjugateTranspose", FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                If[
                  TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                    Key["ConjugateTranspose"]}, 1]]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key["ConjugateTranspose"]}, "RowHeader", False], "Mouse"], 
              ImageSize -> {{224.00000000000003`, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
             GrayLevel[0.95], Alignment -> {Left, Baseline}], 
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover[
                  Style["\[Ellipsis]", 
                   GrayLevel[0.5]], 
                  Style[
                   Style["\[Ellipsis]", 
                    GrayLevel[0.5]], FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                If[
                  TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                    Key["ConjugateTranspose"]}, 4]]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key["ConjugateTranspose"]}, "Item", False], "Mouse"], 
              ImageMargins -> {{5, 3}, {4, 5}}], BaseStyle -> {
               GrayLevel[0.5], Bold}]}, {
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover["ControlOrder", 
                  Style[
                  "ControlOrder", FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                If[
                  TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                    Key["ControlOrder"]}, 1]]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key["ControlOrder"]}, "RowHeader", False], "Mouse"], 
              ImageSize -> {{224.00000000000003`, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
             GrayLevel[0.95], Alignment -> {Left, Baseline}], 
            Item[
             Pane[
              Annotation[
               Style["\[LongDash]", 
                GrayLevel[0.75]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key["ControlOrder"]}, "Item", False], "Mouse"], 
              ImageSize -> {{60, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}]}, {
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover["Dagger", 
                  Style[
                  "Dagger", FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                If[
                  TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                    Key["Dagger"]}, 1]]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key["Dagger"]}, "RowHeader", False], "Mouse"], 
              ImageSize -> {{224.00000000000003`, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
             GrayLevel[0.95], Alignment -> {Left, Baseline}], 
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover[
                  Style["\[Ellipsis]", 
                   GrayLevel[0.5]], 
                  Style[
                   Style["\[Ellipsis]", 
                    GrayLevel[0.5]], FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                If[
                  TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                    Key["Dagger"]}, 4]]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key["Dagger"]}, "Item", False], "Mouse"], 
              ImageMargins -> {{5, 3}, {4, 5}}], BaseStyle -> {
               GrayLevel[0.5], Bold}]}, {
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover["Dimensions", 
                  Style[
                  "Dimensions", FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                If[
                  TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                    Key["Dimensions"]}, 1]]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key["Dimensions"]}, "RowHeader", False], "Mouse"], 
              ImageSize -> {{224.00000000000003`, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
             GrayLevel[0.95], Alignment -> {Left, Baseline}], 
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover[
                  Style[{2, 2}, ShowStringCharacters -> False], 
                  Style[
                   Style[{2, 2}, ShowStringCharacters -> False], FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                If[
                  TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                    Key["Dimensions"]}, 4]]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key["Dimensions"]}, "Item", False], "Mouse"], 
              ImageMargins -> {{5, 3}, {4, 5}}]]}, {
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover["Dual", 
                  Style[
                  "Dual", FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                If[
                  TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                    Key["Dual"]}, 1]]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key["Dual"]}, "RowHeader", False], "Mouse"], 
              ImageSize -> {{224.00000000000003`, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
             GrayLevel[0.95], Alignment -> {Left, Baseline}], 
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover[
                  Style["\[Ellipsis]", 
                   GrayLevel[0.5]], 
                  Style[
                   Style["\[Ellipsis]", 
                    GrayLevel[0.5]], FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                If[
                  TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                    Key["Dual"]}, 4]]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key["Dual"]}, "Item", False], "Mouse"], 
              ImageMargins -> {{5, 3}, {4, 5}}], BaseStyle -> {
               GrayLevel[0.5], Bold}]}, {
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover["Eigendimension", 
                  Style[
                  "Eigendimension", FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                If[
                  TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                    Key["Eigendimension"]}, 1]]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key["Eigendimension"]}, "RowHeader", False], "Mouse"], 
              ImageSize -> {{224.00000000000003`, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
             GrayLevel[0.95], Alignment -> {Left, Baseline}], 
            Item[
             Pane[
              Annotation[
               RawBoxes["2"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key["Eigendimension"]}, "Item", False], "Mouse"], 
              ImageSize -> {{34, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}]}, {
            Item[
             Deploy[
              Pane[
               Row[{
                 Spacer[2], 
                 Style[
                  Row[{
                    Button[
                    MouseAppearance[
                    Mouseover[
                    Graphics[{{
                    EdgeForm[None], 
                    FaceForm[None], 
                    Rectangle[{0, 0}, {18, 18}, RoundingRadius -> 2]}, 
                    Rotate[
                    Translate[{
                    CapForm[Round], 
                    Line[{{0, 0}, {4, 5}, {8, 0}}], 
                    Line[{{0, 5}, {8, 5}}]}, {5, 6.5}], 0, {9, 9}]}, 
                    ImageSize -> (1 -> 1), ImagePadding -> {{0, 1}, {1, 0}}, 
                    BaselinePosition -> Scaled[0.35], BaseStyle -> 
                    RGBColor[
                    0.5372549019607843, 0.5372549019607843, 
                    0.5372549019607843]], 
                    Graphics[{{
                    EdgeForm[
                    RGBColor[
                    0.27450980392156865`, 0.5411764705882353, 
                    0.796078431372549]], 
                    FaceForm[None], 
                    Rectangle[{0, 0}, {18, 18}, RoundingRadius -> 2]}, 
                    Rotate[
                    Translate[{
                    CapForm[Round], 
                    RGBColor[
                    0.27450980392156865`, 0.5411764705882353, 
                    0.796078431372549], 
                    Line[{{0, 0}, {4, 5}, {8, 0}}], 
                    Line[{{0, 5}, {8, 5}}]}, {5, 6.5}], 0, {9, 9}]}, 
                    ImageSize -> (1 -> 1), ImagePadding -> {{0, 1}, {1, 0}}, 
                    BaselinePosition -> Scaled[0.35]]], "LinkHand"], 
                    If[
                    TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$ = 
                    Clip[TypeSystem`NestedGrid`PackagePrivate`$vPos$$ + (-20) 
                    If[True, 167, 1], {1, 167 - -20 + 1}]; 
                    TypeSystem`NestedGrid`PackagePrivate`updateState[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]], True][
                    TypeSystem`NestedGrid`PackagePrivate`$path$$]], 
                    Appearance -> None], 
                    Button[
                    MouseAppearance[
                    Mouseover[
                    Graphics[{{
                    EdgeForm[None], 
                    FaceForm[None], 
                    Rectangle[{0, 0}, {18, 18}, RoundingRadius -> 2]}, 
                    Rotate[
                    Translate[{
                    CapForm[Round], 
                    Line[{{0, 0}, {4, 5}, {8, 0}}]}, {5, 6.5}], 0, {9, 9}]}, 
                    ImageSize -> (1 -> 1), ImagePadding -> {{0, 1}, {1, 0}}, 
                    BaselinePosition -> Scaled[0.35], BaseStyle -> 
                    RGBColor[
                    0.5372549019607843, 0.5372549019607843, 
                    0.5372549019607843]], 
                    Graphics[{{
                    EdgeForm[
                    RGBColor[
                    0.27450980392156865`, 0.5411764705882353, 
                    0.796078431372549]], 
                    FaceForm[None], 
                    Rectangle[{0, 0}, {18, 18}, RoundingRadius -> 2]}, 
                    Rotate[
                    Translate[{
                    CapForm[Round], 
                    RGBColor[
                    0.27450980392156865`, 0.5411764705882353, 
                    0.796078431372549], 
                    Line[{{0, 0}, {4, 5}, {8, 0}}]}, {5, 6.5}], 0, {9, 9}]}, 
                    ImageSize -> (1 -> 1), ImagePadding -> {{0, 1}, {1, 0}}, 
                    BaselinePosition -> Scaled[0.35]]], "LinkHand"], 
                    If[
                    TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$ = 
                    Clip[TypeSystem`NestedGrid`PackagePrivate`$vPos$$ + (-20) 
                    If[False, 167, 1], {1, 167 - -20 + 1}]; 
                    TypeSystem`NestedGrid`PackagePrivate`updateState[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]], True][
                    TypeSystem`NestedGrid`PackagePrivate`$path$$]], 
                    Appearance -> None], " ", 
                    Style[
                    Mouseover[
                    Style[
                    Row[{"rows ", 1, "\[Dash]", 20, " of ", 
                    Style[167, FontWeight -> Bold]}], FontSize -> 
                    9.333333333333332, FontColor -> 
                    RGBColor[
                    0.5098039215686274, 0.5098039215686274, 
                    0.5098039215686274]], 
                    Style[
                    Row[{"rows ", 1, "\[Dash]", 20, " of ", 
                    Style[167, FontWeight -> Bold]}], FontSize -> 
                    9.333333333333332, FontColor -> 
                    RGBColor[
                    0.5098039215686274, 0.5098039215686274, 
                    0.5098039215686274]]], ContextMenu -> {
                    MenuItem["Hide", 
                    KernelExecute[
                    
                    TypeSystem`NestedGrid`PackagePrivate`adjustLimits[{
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]}, 
                    "Rows", 1, {}]], MenuEvaluator -> Automatic], 
                    MenuItem["Show up to 10 Rows", 
                    KernelExecute[
                    
                    TypeSystem`NestedGrid`PackagePrivate`adjustLimits[{
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]}, 
                    "Rows", 10, {}]], MenuEvaluator -> Automatic], 
                    MenuItem["Show up to 30 Rows", 
                    KernelExecute[
                    
                    TypeSystem`NestedGrid`PackagePrivate`adjustLimits[{
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]}, 
                    "Rows", 30, {}]], MenuEvaluator -> Automatic], 
                    MenuItem["Show up to 100 Rows", 
                    KernelExecute[
                    
                    TypeSystem`NestedGrid`PackagePrivate`adjustLimits[{
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]}, 
                    "Rows", 100, {}]], MenuEvaluator -> Automatic], 
                    MenuItem["Show All", 
                    KernelExecute[
                    
                    TypeSystem`NestedGrid`PackagePrivate`adjustLimits[{
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]}, 
                    "Rows", 100000000, {}]], MenuEvaluator -> Automatic]}], 
                    " ", 
                    Button[
                    MouseAppearance[
                    Mouseover[
                    Graphics[{{
                    EdgeForm[None], 
                    FaceForm[None], 
                    Rectangle[{0, 0}, {18, 18}, RoundingRadius -> 2]}, 
                    Rotate[
                    Translate[{
                    CapForm[Round], 
                    Line[{{0, 0}, {4, 5}, {8, 0}}]}, {5, 6.5}], 180 Degree, {
                    9, 9}]}, ImageSize -> (1 -> 1), 
                    ImagePadding -> {{0, 1}, {1, 0}}, BaselinePosition -> 
                    Scaled[0.35], BaseStyle -> 
                    RGBColor[
                    0.5372549019607843, 0.5372549019607843, 
                    0.5372549019607843]], 
                    Graphics[{{
                    EdgeForm[
                    RGBColor[
                    0.27450980392156865`, 0.5411764705882353, 
                    0.796078431372549]], 
                    FaceForm[None], 
                    Rectangle[{0, 0}, {18, 18}, RoundingRadius -> 2]}, 
                    Rotate[
                    Translate[{
                    CapForm[Round], 
                    RGBColor[
                    0.27450980392156865`, 0.5411764705882353, 
                    0.796078431372549], 
                    Line[{{0, 0}, {4, 5}, {8, 0}}]}, {5, 6.5}], 180 Degree, {
                    9, 9}]}, ImageSize -> (1 -> 1), 
                    ImagePadding -> {{0, 1}, {1, 0}}, BaselinePosition -> 
                    Scaled[0.35]]], "LinkHand"], 
                    If[
                    TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$ = 
                    Clip[TypeSystem`NestedGrid`PackagePrivate`$vPos$$ + 
                    20 If[False, 167, 1], {1, 167 - 20 + 1}]; 
                    TypeSystem`NestedGrid`PackagePrivate`updateState[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]], True][
                    TypeSystem`NestedGrid`PackagePrivate`$path$$]], 
                    Appearance -> None], 
                    Button[
                    MouseAppearance[
                    Mouseover[
                    Graphics[{{
                    EdgeForm[None], 
                    FaceForm[None], 
                    Rectangle[{0, 0}, {18, 18}, RoundingRadius -> 2]}, 
                    Rotate[
                    Translate[{
                    CapForm[Round], 
                    Line[{{0, 0}, {4, 5}, {8, 0}}], 
                    Line[{{0, 5}, {8, 5}}]}, {5, 6.5}], 180 Degree, {9, 9}]}, 
                    ImageSize -> (1 -> 1), ImagePadding -> {{0, 1}, {1, 0}}, 
                    BaselinePosition -> Scaled[0.35], BaseStyle -> 
                    RGBColor[
                    0.5372549019607843, 0.5372549019607843, 
                    0.5372549019607843]], 
                    Graphics[{{
                    EdgeForm[
                    RGBColor[
                    0.27450980392156865`, 0.5411764705882353, 
                    0.796078431372549]], 
                    FaceForm[None], 
                    Rectangle[{0, 0}, {18, 18}, RoundingRadius -> 2]}, 
                    Rotate[
                    Translate[{
                    CapForm[Round], 
                    RGBColor[
                    0.27450980392156865`, 0.5411764705882353, 
                    0.796078431372549], 
                    Line[{{0, 0}, {4, 5}, {8, 0}}], 
                    Line[{{0, 5}, {8, 5}}]}, {5, 6.5}], 180 Degree, {9, 9}]}, 
                    ImageSize -> (1 -> 1), ImagePadding -> {{0, 1}, {1, 0}}, 
                    BaselinePosition -> Scaled[0.35]]], "LinkHand"], 
                    If[
                    TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$ = 
                    Clip[TypeSystem`NestedGrid`PackagePrivate`$vPos$$ + 
                    20 If[True, 167, 1], {1, 167 - 20 + 1}]; 
                    TypeSystem`NestedGrid`PackagePrivate`updateState[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]], True][
                    TypeSystem`NestedGrid`PackagePrivate`$path$$]], 
                    Appearance -> None]}], ContextMenu -> {}]}], 
               ImageMargins -> {{0, -1}, {-1, 1}}]], Background -> 
             RGBColor[
              0.9764705882352941, 0.9764705882352941, 0.9764705882352941], 
             Alignment -> {Left, Top}], SpanFromLeft}}, 
          BaseStyle -> {
           ContextMenu -> 
            Dynamic[TypeSystem`NestedGrid`PackagePrivate`$contextMenuTrigger; 
              Which[TypeSystem`NestedGrid`PackagePrivate`$lastOutputID =!= 
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                 TypeSystem`NestedGrid`PackagePrivate`$outputID$$], {}, 
                TypeSystem`NestedGrid`PackagePrivate`$contextMenuTrigger === 
                TypeSystem`NestedGrid`PackagePrivate`$lastContextMenuTrigger, 
                TypeSystem`NestedGrid`PackagePrivate`$lastContextMenu, True, 
                TypeSystem`NestedGrid`PackagePrivate`$lastContextMenuTrigger = 
                 TypeSystem`NestedGrid`PackagePrivate`$contextMenuTrigger; 
                TypeSystem`NestedGrid`PackagePrivate`$lastContextMenu = 
                 Block[{TypeSystem`NestedGrid`PackagePrivate`$globalScrollPos = \
{TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$}}, 
                   
                   With[{TypeSystem`NestedGrid`PackagePrivate`lastPath$ = 
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath, 
                    TypeSystem`NestedGrid`PackagePrivate`lastPathType$ = 
                    TypeSystem`NestedGrid`PackagePrivate`$lastPathType, 
                    TypeSystem`NestedGrid`PackagePrivate`isLeafHeader$ = 
                    TypeSystem`NestedGrid`PackagePrivate`$\
lastPathIsLeafHeader, TypeSystem`NestedGrid`PackagePrivate`headerHidden$ = And[
                    MatchQ[TypeSystem`NestedGrid`PackagePrivate`$lastPathType, 
                    Alternatives["RowHeader", "ColumnHeader"]], 
                    TypeSystem`NestedGrid`PackagePrivate`headerHiddenQ[
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath, 
                    TypeSystem`NestedGrid`PackagePrivate`$state$$]], 
                    TypeSystem`NestedGrid`PackagePrivate`allHidden$ = 
                    TypeSystem`NestedGrid`PackagePrivate`allHiddenQ[
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath, 
                    TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                    TypeSystem`NestedGrid`PackagePrivate`anyHidden$ = 
                    TypeSystem`NestedGrid`PackagePrivate`anyHiddenQ[
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath, 
                    TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                    TypeSystem`NestedGrid`PackagePrivate`sortDirection$ = 
                    TypeSystem`NestedGrid`PackagePrivate`columnSortDirection[
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath, 
                    TypeSystem`NestedGrid`PackagePrivate`$state$$[
                    "SortPaths"], 
                    TypeSystem`NestedGrid`PackagePrivate`$state$$[
                    "SortDirections"]], 
                    TypeSystem`NestedGrid`PackagePrivate`haveData$ = Not[
                    FailureQ[
                    TypeSystem`NestedGrid`PackagePrivate`datasetInitialData[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$]]], 
                    TypeSystem`NestedGrid`PackagePrivate`isKeyDummy$ = Not[
                    FreeQ[
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath, Keys]]}, 
                    Join[{
                    If[
                    Or[
                    Not[TypeSystem`NestedGrid`PackagePrivate`haveData$], 
                    Not[TypeSystem`NestedGrid`PackagePrivate`anyHidden$], 
                    TypeSystem`NestedGrid`PackagePrivate`isKeyDummy$], 
                    Nothing, 
                    MenuItem[
                    "Show " <> 
                    Which[TypeSystem`NestedGrid`PackagePrivate`lastPathType$ == 
                    "Item", "", 
                    TypeSystem`NestedGrid`PackagePrivate`lastPathType$ == 
                    "RowHeader", "Row", 
                    TypeSystem`NestedGrid`PackagePrivate`lastPathType$ == 
                    "ColumnHeader", "Column", True, ""], 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`updateHiddenItems[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][
                    TypeSystem`NestedGrid`PackagePrivate`lastPath$, 
                    "remove"]], MenuEvaluator -> Automatic]], 
                    If[
                    Or[
                    Not[TypeSystem`NestedGrid`PackagePrivate`haveData$], 
                    TypeSystem`NestedGrid`PackagePrivate`pathEmptyQ[
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath, 
                    TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                    TypeSystem`NestedGrid`PackagePrivate`isKeyDummy$, 
                    And[
                    TypeSystem`NestedGrid`PackagePrivate`allHidden$, 
                    TypeSystem`NestedGrid`PackagePrivate`headerHidden$]], 
                    Nothing, 
                    MenuItem[
                    "Hide " <> 
                    Which[TypeSystem`NestedGrid`PackagePrivate`lastPathType$ == 
                    "Item", "", 
                    TypeSystem`NestedGrid`PackagePrivate`lastPathType$ == 
                    "RowHeader", "Row", 
                    TypeSystem`NestedGrid`PackagePrivate`lastPathType$ == 
                    "ColumnHeader", "Column", True, ""], 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`updateHiddenItems[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][
                    TypeSystem`NestedGrid`PackagePrivate`lastPath$, "add"]], 
                    MenuEvaluator -> Automatic]], Delimiter}, 
                    If[
                    And[TypeSystem`NestedGrid`PackagePrivate`haveData$, 
                    MatchQ[TypeSystem`NestedGrid`PackagePrivate`lastPathType$, 
                    Alternatives["ColumnHeader", "KeyDummy"]], 
                    TypeSystem`NestedGrid`PackagePrivate`isLeafHeader$, 
                    Not[TypeSystem`NestedGrid`PackagePrivate`allHidden$]], {
                    If[
                    TypeSystem`NestedGrid`PackagePrivate`sortDirection$ =!= 
                    "Ascending", 
                    MenuItem["Sort", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`updateSort[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][
                    TypeSystem`NestedGrid`PackagePrivate`lastPath$, 
                    "Ascending"]], MenuEvaluator -> Automatic], Nothing], 
                    If[
                    TypeSystem`NestedGrid`PackagePrivate`sortDirection$ =!= 
                    "Descending", 
                    MenuItem["Reverse Sort", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`updateSort[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][
                    TypeSystem`NestedGrid`PackagePrivate`lastPath$, 
                    "Descending"]], MenuEvaluator -> Automatic], Nothing], 
                    If[
                    TypeSystem`NestedGrid`PackagePrivate`sortDirection$ =!= 
                    None, 
                    MenuItem["Unsort", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`updateSort[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][
                    TypeSystem`NestedGrid`PackagePrivate`lastPath$, None]], 
                    MenuEvaluator -> Automatic], Nothing], Delimiter}, {}], {
                    MenuItem["Copy Position to Clipboard", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`toCurrentPosition[
                    TypeSystem`NestedGrid`PackagePrivate`copyClip]], 
                    MenuEvaluator -> Automatic], 
                    If[TypeSystem`NestedGrid`PackagePrivate`haveData$, 
                    MenuItem["Copy Data to Clipboard", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`toCurrentData[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`copyClip]], 
                    MenuEvaluator -> Automatic], Nothing], Delimiter, 
                    MenuItem["Paste Position in New Cell", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`toCurrentPosition[
                    TypeSystem`NestedGrid`PackagePrivate`cellPaste]], 
                    MenuEvaluator -> Automatic], 
                    If[TypeSystem`NestedGrid`PackagePrivate`haveData$, 
                    MenuItem["Paste Data in New Cell", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`toCurrentData[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`cellPaste]], 
                    MenuEvaluator -> Automatic], Nothing]}]]]]], FontFamily -> 
            "Source Sans Pro", FontSize -> 14, FontWeight -> Plain}, Dividers -> 
          All, FrameStyle -> GrayLevel[0.7490196078431373], 
          Spacings -> {0, 0}, Alignment -> Left, 
          BaseStyle -> {
           FontFamily -> "Source Sans Pro", FontSize -> 14, FontWeight -> 
            Plain}], LineBreakWithin -> False, ContextMenu -> {}, NumberMarks -> 
         False, ShowAutoStyles -> False]], 
      TypeSystem`NestedGrid`PackagePrivate`initialQ = True}, 
     Dynamic[
      TypeSystem`NestedGrid`PackagePrivate`setupViewPath[
      TypeSystem`NestedGrid`PackagePrivate`$path$$, If[
         Not[TypeSystem`NestedGrid`PackagePrivate`initialQ], 
         Module[{
          TypeSystem`NestedGrid`PackagePrivate`tmpGrid$ = $Failed, 
           TypeSystem`NestedGrid`PackagePrivate`tmpData$ = 
           TypeSystem`NestedGrid`PackagePrivate`datasetData[
            TypeSystem`NestedGrid`PackagePrivate`$state$$]}, 
          TypeSystem`NestedGrid`PackagePrivate`tmpGrid$ = If[
             FailureQ[TypeSystem`NestedGrid`PackagePrivate`tmpData$], 
             TypeSystem`NestedGrid`PackagePrivate`renderedGrid, 
             TypeSystem`NestedGrid`PackagePrivate`renderGrid[
             TypeSystem`NestedGrid`PackagePrivate`$state$$, 
              TypeSystem`NestedGrid`PackagePrivate`$path$$, 
              TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
              TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
              TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
              TypeSystem`NestedGrid`PackagePrivate`localHold[
              TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][
             TypeSystem`NestedGrid`PackagePrivate`tmpData$]]; If[
            Not[
             FailureQ[TypeSystem`NestedGrid`PackagePrivate`tmpGrid$]], 
            TypeSystem`NestedGrid`PackagePrivate`renderedGrid = 
            TypeSystem`NestedGrid`PackagePrivate`tmpGrid$]; Null]]; 
       TypeSystem`NestedGrid`PackagePrivate`initialQ = False; 
       TypeSystem`NestedGrid`PackagePrivate`$vPos$$; 
       TypeSystem`NestedGrid`PackagePrivate`$hPos$$; If[
         FailureQ[TypeSystem`NestedGrid`PackagePrivate`renderedGrid], 
         TypeSystem`SparseGrid[
          TypeSystem`H["(data no longer present)"]], 
         TypeSystem`NestedGrid`PackagePrivate`renderedGrid]], 
      TrackedSymbols :> {
       TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
        TypeSystem`NestedGrid`PackagePrivate`$hPos$$}], 
     DynamicModuleValues :> {}], 
    TypeSystem`NestedGrid`PackagePrivate`$topBar$$ = Dynamic[
     TypeSystem`NestedGrid`PackagePrivate`makeFramedBar[
      TypeSystem`PackageScope`SubViewPathbar[
      TypeSystem`NestedGrid`PackagePrivate`$path$$, 
       TypeSystem`NestedGrid`PackagePrivate`updateState[
       TypeSystem`NestedGrid`PackagePrivate`$state$$, 
        TypeSystem`NestedGrid`PackagePrivate`$path$$, 
        TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
        TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
        TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
        TypeSystem`NestedGrid`PackagePrivate`localHold[
        TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]]], 
     TrackedSymbols :> {TypeSystem`NestedGrid`PackagePrivate`$path$$}], 
    TypeSystem`NestedGrid`PackagePrivate`$bottomBar$$ = Style[
     Framed[
      Dynamic[
       Replace[
       TypeSystem`NestedGrid`PackagePrivate`mouseAnnotation$$, {
        TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
           TypeSystem`NestedGrid`PackagePrivate`localHold[
           TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][Null, 
           Blank[]] -> "", TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
           TypeSystem`NestedGrid`PackagePrivate`localHold[
           TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][
           Pattern[TypeSystem`NestedGrid`PackagePrivate`path$, 
            Blank[]], 
           Pattern[TypeSystem`NestedGrid`PackagePrivate`pathType$, 
            Blank[]], 
           Pattern[TypeSystem`NestedGrid`PackagePrivate`isLeafHeader$, 
            Blank[]]] :> (
          Increment[TypeSystem`NestedGrid`PackagePrivate`$contextMenuTrigger]; 
          TypeSystem`NestedGrid`PackagePrivate`$lastPath = 
           TypeSystem`NestedGrid`PackagePrivate`path$; 
          TypeSystem`NestedGrid`PackagePrivate`$lastPathType = 
           TypeSystem`NestedGrid`PackagePrivate`pathType$; 
          TypeSystem`NestedGrid`PackagePrivate`$lastPathIsLeafHeader = 
           TypeSystem`NestedGrid`PackagePrivate`isLeafHeader$; 
          TypeSystem`NestedGrid`PackagePrivate`$lastOutputID = 
           TypeSystem`NestedGrid`PackagePrivate`localHold[
            TypeSystem`NestedGrid`PackagePrivate`$outputID$$]; 
          TypeSystem`NestedGrid`PackagePrivate`makePathTrail[
           TypeSystem`NestedGrid`PackagePrivate`path$, 
            TypeSystem`NestedGrid`PackagePrivate`makePathElements]), Null :> 
         Spacer[10], Blank[] :> Spacer[10]}], 
       TrackedSymbols :> {
        TypeSystem`NestedGrid`PackagePrivate`mouseAnnotation$$}], FrameStyle -> 
      None, ImageMargins -> 0, FrameMargins -> 0, Alignment -> Top, 
      ImageSize -> {Automatic, 15}], FontSize -> 1], 
    TypeSystem`NestedGrid`PackagePrivate`mouseAnnotation$$ = Null}, 
    DynamicWrapperBox[
     DynamicBox[ToBoxes[
       Dataset`DatasetContent[
       2, "Path" -> Hold[TypeSystem`NestedGrid`PackagePrivate`$path$$], 
        "Grid" -> Hold[TypeSystem`NestedGrid`PackagePrivate`$grid$$], "State" -> 
        Hold[TypeSystem`NestedGrid`PackagePrivate`$state$$], "VPos" -> 
        Hold[TypeSystem`NestedGrid`PackagePrivate`$vPos$$], "HPos" -> 
        Hold[TypeSystem`NestedGrid`PackagePrivate`$hPos$$], "TopBar" -> 
        Hold[TypeSystem`NestedGrid`PackagePrivate`$topBar$$], "BottomBar" -> 
        Hold[TypeSystem`NestedGrid`PackagePrivate`$bottomBar$$], "OutputID" -> 
        Hold[
          TypeSystem`NestedGrid`PackagePrivate`localHold[
          TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]], StandardForm],
      ImageSizeCache->{620., {347.634033203125, 353.365966796875}},
      TrackedSymbols:>{
       TypeSystem`NestedGrid`PackagePrivate`$state$$, 
        TypeSystem`NestedGrid`PackagePrivate`$grid$$}], 
     TypeSystem`NestedGrid`PackagePrivate`mouseAnnotation$$ = 
     MouseAnnotation[],
     ImageSizeCache->{620., {347.634033203125, 353.365966796875}}],
    BaseStyle->{LineBreakWithin -> False},
    DynamicModuleValues:>{},
    Initialization:>(TypeSystem`NestedGrid`PackagePrivate`$outputID$$ = 
     CreateUUID[]),
    UnsavedVariables:>{TypeSystem`NestedGrid`PackagePrivate`$outputID$$}],
   Deploy,
   DefaultBaseStyle->"Deploy"],
  Dataset`InterpretDataset[1],
  Editable->False,
  SelectWithContents->True,
  Selectable->False]], "Output",
 CellChangeTimes->{{3.8410793640703773`*^9, 3.8410793766715107`*^9}, {
   3.841080743541553*^9, 3.841080781009994*^9}, 3.841080870129435*^9, 
   3.841088590780034*^9, 3.842905098863139*^9, 3.842905190933632*^9, 
   3.8431470659120207`*^9, 3.843147618317444*^9, {3.858285026275942*^9, 
   3.858285047455681*^9}, 3.85828525714677*^9, 3.858285434771381*^9, 
   3.858285731461228*^9},
 CellLabel->
  "Out[228]=",ExpressionUUID->"3a2ab101-616f-4fa0-8d20-fd570ddef6b6"]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["QuantumCircuit", "Section",
 CellChangeTimes->{
  3.841079401308134*^9},ExpressionUUID->"a1300449-668a-4e5f-be63-\
95eefee2318e"],

Cell["QuantumCircuit is a list of Quantum*Operators", "Text",
 CellChangeTimes->{{3.841079091566011*^9, 3.84107909602635*^9}, {
  3.841079126235744*^9, 
  3.841079136584433*^9}},ExpressionUUID->"c67ac79d-e629-435d-a2da-\
81991e4cfaf5"],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{"circuit", "=", 
  RowBox[{"QuantumCircuitOperator", "[", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"QuantumOperator", "[", 
      RowBox[{"\"\<CX\>\"", ",", 
       RowBox[{"{", 
        RowBox[{"1", ",", "2"}], "}"}]}], "]"}], ",", 
     RowBox[{"QuantumOperator", "[", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{"\"\<Controlled\>\"", ",", "\"\<Fourier\>\""}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{"2", ",", "1"}], "}"}]}], "]"}], ",", 
     RowBox[{"QuantumOperator", "[", 
      RowBox[{"\"\<CNOT\>\"", ",", 
       RowBox[{"{", 
        RowBox[{"2", ",", "1"}], "}"}]}], "]"}], ",", 
     RowBox[{"QuantumOperator", "[", 
      RowBox[{"\"\<CSWAP\>\"", ",", 
       RowBox[{"{", 
        RowBox[{"1", ",", "3", ",", "2"}], "}"}]}], "]"}], ",", 
     RowBox[{"QuantumOperator", "[", 
      RowBox[{"\"\<Hadamard\>\"", ",", 
       RowBox[{"{", "2", "}"}]}], "]"}]}], "}"}], 
   "]"}]}], "\[IndentingNewLine]", 
 RowBox[{"circuit", "[", "\"\<Diagram\>\"", "]"}]}], "Input",
 CellChangeTimes->{{3.841079088286063*^9, 3.841079119436447*^9}, {
  3.858285465390471*^9, 3.8582854786424503`*^9}},
 CellLabel->
  "In[229]:=",ExpressionUUID->"48d88c5d-bf7e-4d34-911d-4bd51f317652"],

Cell[BoxData[
 InterpretationBox[
  RowBox[{
   TagBox["QuantumCircuitOperator",
    "SummaryHead"], "[", 
   DynamicModuleBox[{Typeset`open$$ = False, Typeset`embedState$$ = "Ready"}, 
    
    TemplateBox[{
      PaneSelectorBox[{False -> GridBox[{{
            PaneBox[
             ButtonBox[
              DynamicBox[
               FEPrivate`FrontEndResource["FEBitmaps", "SummaryBoxOpener"]], 
              ButtonFunction :> (Typeset`open$$ = True), Appearance -> None, 
              BaseStyle -> {}, Evaluator -> Automatic, Method -> 
              "Preemptive"], Alignment -> {Center, Center}, ImageSize -> 
             Dynamic[{
               Automatic, 
                3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                 Magnification])}]], 
            StyleBox[
             GraphicsBox[{{{
                 BSplineCurveBox[{{0, -5}, {36, -5}}, SplineDegree -> 3]}, {
                 BSplineCurveBox[{{0, -10}, {36, -10}}, SplineDegree -> 3]}, {
                
                 BSplineCurveBox[{{0, -15}, {36, -15}}, SplineDegree -> 3]}, {
                
                 InsetBox[
                  FormBox[
                   StyleBox[
                   "1", {FontSize -> 12, FontSize -> 24, FontFamily -> 
                    "Times", FontSize -> 12}, StripOnInput -> False], 
                   TraditionalForm], {-1, -5}]}, {
                 InsetBox[
                  FormBox[
                   StyleBox[
                   "2", {FontSize -> 12, FontSize -> 24, FontFamily -> 
                    "Times", FontSize -> 12}, StripOnInput -> False], 
                   TraditionalForm], {-1, -10}]}, {
                 InsetBox[
                  FormBox[
                   StyleBox[
                   "3", {FontSize -> 12, FontSize -> 24, FontFamily -> 
                    "Times", FontSize -> 12}, StripOnInput -> False], 
                   TraditionalForm], {-1, -15}]}}, {{
                 LineBox[{{4, -5.5}, {4, -10}}]}, {{
                  EdgeForm[
                   GrayLevel[0]], 
                  FaceForm[
                   GrayLevel[0]], 
                  DiskBox[{4, -5}, 0.5]}}}, {{
                 EdgeForm[
                  Thickness[
                  0.25 Dynamic[
                    0.26 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                    Magnification])]]], 
                 GrayLevel[1], 
                 RectangleBox[
                  NCache[{2, 
                    Rational[-23, 2]}, {2, -11.5}], 
                  NCache[{6, 
                    Rational[-17, 2]}, {6, -8.5}]]}, 
                InsetBox[
                 FormBox[
                  StyleBox[
                  "\"X\"", {
                   FontSize -> 12, FontSize -> 24, FontFamily -> "Times"}, 
                   StripOnInput -> False], TraditionalForm], {4, -10}]}, {{
                 LineBox[{{10, -9.5}, {10, -5}}]}, {{
                  EdgeForm[
                   GrayLevel[0]], 
                  FaceForm[
                   GrayLevel[0]], 
                  DiskBox[{10, -10}, 0.5]}}}, {{
                 EdgeForm[
                  Thickness[
                  0.25 Dynamic[
                    0.26 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                    Magnification])]]], 
                 GrayLevel[1], 
                 RectangleBox[
                  NCache[{8, 
                    Rational[-13, 2]}, {8, -6.5}], 
                  NCache[{12, 
                    Rational[-7, 2]}, {12, -3.5}]]}, 
                InsetBox[
                 FormBox[
                  StyleBox[
                  "\"QFT\"", {
                   FontSize -> 12, FontSize -> 24, FontFamily -> "Times"}, 
                   StripOnInput -> False], TraditionalForm], {10, -5}]}, {{
                 LineBox[{{16, -9.5}, {16, -5}}]}, {{
                  EdgeForm[
                   GrayLevel[0]], 
                  FaceForm[
                   GrayLevel[0]], 
                  DiskBox[{16, -10}, 0.5]}}}, {{
                 EdgeForm[
                  Thickness[
                  0.25 Dynamic[
                    0.26 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                    Magnification])]]], 
                 CircleBox[{16, -5}, 0.8]}, {
                 LineBox[{{15.2, -5}, {16.8, -5}}], 
                 LineBox[{{16, -5.8}, {16, -4.2}}]}}, {{
                 LineBox[{{22, -5.5}, {22, -15}}]}, {{
                  EdgeForm[
                   GrayLevel[0]], 
                  FaceForm[
                   GrayLevel[0]], 
                  DiskBox[{22, -5}, 0.5]}}}, {{
                 LineBox[{{21, -11}, {23, -9}}], 
                 LineBox[{{23, -11}, {21, -9}}]}, {
                 LineBox[{{21, -16}, {23, -14}}], 
                 LineBox[{{23, -16}, {21, -14}}]}, 
                LineBox[{{22, -10}, {22, -15}}]}, {{
                 EdgeForm[
                  Thickness[
                  0.25 Dynamic[
                    0.26 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                    Magnification])]]], 
                 GrayLevel[1], 
                 RectangleBox[
                  NCache[{26, 
                    Rational[-23, 2]}, {26, -11.5}], 
                  NCache[{30, 
                    Rational[-17, 2]}, {30, -8.5}]]}, 
                InsetBox[
                 FormBox[
                  StyleBox[
                  "\"H\"", {
                   FontSize -> 12, FontSize -> 24, FontFamily -> "Times"}, 
                   StripOnInput -> False], TraditionalForm], {28, -10}]}}, {
              ImageSize -> {
                 Min[
                 512, 384 
                  Dynamic[
                   0.26 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                    Magnification])]], Automatic}}], Magnification -> 
             0.2 Inherited, StripOnInput -> False], 
            GridBox[{{
               RowBox[{
                 TagBox["\"Gates: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox["5", "SummaryItem"]}]}}, 
             GridBoxAlignment -> {
              "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, AutoDelete -> 
             False, GridBoxItemSize -> {
              "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
             GridBoxSpacings -> {"Columns" -> {{2}}, "Rows" -> {{Automatic}}},
              BaseStyle -> {
              ShowStringCharacters -> False, NumberMarks -> False, 
               PrintPrecision -> 3, ShowSyntaxStyles -> False}]}}, 
          GridBoxAlignment -> {"Columns" -> {{Left}}, "Rows" -> {{Top}}}, 
          AutoDelete -> False, 
          GridBoxItemSize -> {
           "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
          BaselinePosition -> {1, 1}], True -> GridBox[{{
            PaneBox[
             ButtonBox[
              DynamicBox[
               FEPrivate`FrontEndResource["FEBitmaps", "SummaryBoxCloser"]], 
              ButtonFunction :> (Typeset`open$$ = False), Appearance -> None, 
              BaseStyle -> {}, Evaluator -> Automatic, Method -> 
              "Preemptive"], Alignment -> {Center, Center}, ImageSize -> 
             Dynamic[{
               Automatic, 
                3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                 Magnification])}]], 
            StyleBox[
             GraphicsBox[{{{
                 BSplineCurveBox[{{0, -5}, {36, -5}}, SplineDegree -> 3]}, {
                 BSplineCurveBox[{{0, -10}, {36, -10}}, SplineDegree -> 3]}, {
                
                 BSplineCurveBox[{{0, -15}, {36, -15}}, SplineDegree -> 3]}, {
                
                 InsetBox[
                  FormBox[
                   StyleBox[
                   "1", {FontSize -> 12, FontSize -> 24, FontFamily -> 
                    "Times", FontSize -> 12}, StripOnInput -> False], 
                   TraditionalForm], {-1, -5}]}, {
                 InsetBox[
                  FormBox[
                   StyleBox[
                   "2", {FontSize -> 12, FontSize -> 24, FontFamily -> 
                    "Times", FontSize -> 12}, StripOnInput -> False], 
                   TraditionalForm], {-1, -10}]}, {
                 InsetBox[
                  FormBox[
                   StyleBox[
                   "3", {FontSize -> 12, FontSize -> 24, FontFamily -> 
                    "Times", FontSize -> 12}, StripOnInput -> False], 
                   TraditionalForm], {-1, -15}]}}, {{
                 LineBox[{{4, -5.5}, {4, -10}}]}, {{
                  EdgeForm[
                   GrayLevel[0]], 
                  FaceForm[
                   GrayLevel[0]], 
                  DiskBox[{4, -5}, 0.5]}}}, {{
                 EdgeForm[
                  Thickness[
                  0.25 Dynamic[
                    0.26 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                    Magnification])]]], 
                 GrayLevel[1], 
                 RectangleBox[
                  NCache[{2, 
                    Rational[-23, 2]}, {2, -11.5}], 
                  NCache[{6, 
                    Rational[-17, 2]}, {6, -8.5}]]}, 
                InsetBox[
                 FormBox[
                  StyleBox[
                  "\"X\"", {
                   FontSize -> 12, FontSize -> 24, FontFamily -> "Times"}, 
                   StripOnInput -> False], TraditionalForm], {4, -10}]}, {{
                 LineBox[{{10, -9.5}, {10, -5}}]}, {{
                  EdgeForm[
                   GrayLevel[0]], 
                  FaceForm[
                   GrayLevel[0]], 
                  DiskBox[{10, -10}, 0.5]}}}, {{
                 EdgeForm[
                  Thickness[
                  0.25 Dynamic[
                    0.26 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                    Magnification])]]], 
                 GrayLevel[1], 
                 RectangleBox[
                  NCache[{8, 
                    Rational[-13, 2]}, {8, -6.5}], 
                  NCache[{12, 
                    Rational[-7, 2]}, {12, -3.5}]]}, 
                InsetBox[
                 FormBox[
                  StyleBox[
                  "\"QFT\"", {
                   FontSize -> 12, FontSize -> 24, FontFamily -> "Times"}, 
                   StripOnInput -> False], TraditionalForm], {10, -5}]}, {{
                 LineBox[{{16, -9.5}, {16, -5}}]}, {{
                  EdgeForm[
                   GrayLevel[0]], 
                  FaceForm[
                   GrayLevel[0]], 
                  DiskBox[{16, -10}, 0.5]}}}, {{
                 EdgeForm[
                  Thickness[
                  0.25 Dynamic[
                    0.26 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                    Magnification])]]], 
                 CircleBox[{16, -5}, 0.8]}, {
                 LineBox[{{15.2, -5}, {16.8, -5}}], 
                 LineBox[{{16, -5.8}, {16, -4.2}}]}}, {{
                 LineBox[{{22, -5.5}, {22, -15}}]}, {{
                  EdgeForm[
                   GrayLevel[0]], 
                  FaceForm[
                   GrayLevel[0]], 
                  DiskBox[{22, -5}, 0.5]}}}, {{
                 LineBox[{{21, -11}, {23, -9}}], 
                 LineBox[{{23, -11}, {21, -9}}]}, {
                 LineBox[{{21, -16}, {23, -14}}], 
                 LineBox[{{23, -16}, {21, -14}}]}, 
                LineBox[{{22, -10}, {22, -15}}]}, {{
                 EdgeForm[
                  Thickness[
                  0.25 Dynamic[
                    0.26 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                    Magnification])]]], 
                 GrayLevel[1], 
                 RectangleBox[
                  NCache[{26, 
                    Rational[-23, 2]}, {26, -11.5}], 
                  NCache[{30, 
                    Rational[-17, 2]}, {30, -8.5}]]}, 
                InsetBox[
                 FormBox[
                  StyleBox[
                  "\"H\"", {
                   FontSize -> 12, FontSize -> 24, FontFamily -> "Times"}, 
                   StripOnInput -> False], TraditionalForm], {28, -10}]}}, {
              ImageSize -> {
                 Min[
                 512, 384 
                  Dynamic[
                   0.26 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                    Magnification])]], Automatic}}], Magnification -> 
             0.2 Inherited, StripOnInput -> False], 
            GridBox[{{
               RowBox[{
                 TagBox["\"Gates: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox["5", "SummaryItem"]}], "", ""}, {
               RowBox[{
                 TagBox["\"Dimension: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox[
                  TemplateBox[{"8", "\"\[RightArrow]\"", "8"}, "RowDefault"], 
                  "SummaryItem"]}], 
               RowBox[{
                 TagBox["\"Order: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox[
                  TemplateBox[{
                    RowBox[{"{", 
                    RowBox[{"1", ",", "2", ",", "3"}], "}"}], 
                    "\"\[RightArrow]\"", 
                    RowBox[{"{", 
                    RowBox[{"1", ",", "2", ",", "3"}], "}"}]}, "RowDefault"], 
                  "SummaryItem"]}], 
               RowBox[{
                 TagBox["\"Target: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox[
                  RowBox[{"{", "}"}], "SummaryItem"]}]}}, 
             GridBoxAlignment -> {
              "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, AutoDelete -> 
             False, GridBoxItemSize -> {
              "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
             GridBoxSpacings -> {"Columns" -> {{2}}, "Rows" -> {{Automatic}}},
              BaseStyle -> {
              ShowStringCharacters -> False, NumberMarks -> False, 
               PrintPrecision -> 3, ShowSyntaxStyles -> False}]}}, 
          GridBoxAlignment -> {"Columns" -> {{Left}}, "Rows" -> {{Top}}}, 
          AutoDelete -> False, 
          GridBoxItemSize -> {
           "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
          BaselinePosition -> {1, 1}]}, 
       Dynamic[Typeset`open$$], ImageSize -> Automatic]},
     "SummaryPanel"],
    DynamicModuleValues:>{}], "]"}],
  Wolfram`QuantumFramework`QuantumCircuitOperator[{
    Wolfram`QuantumFramework`QuantumOperator[
     Wolfram`QuantumFramework`QuantumState[
      SparseArray[
      Automatic, {16}, 0, {
       1, {{0, 4}, {{1}, {6}, {12}, {15}}}, {1, 1, 1, 1}}], 
      Wolfram`QuantumFramework`QuantumBasis[<|
       "Output" -> Wolfram`QuantumFramework`QuditBasis[<|{
             Wolfram`QuantumFramework`QuditName[0, "Dual" -> False], 1} -> 
           SparseArray[Automatic, {2}, 0, {1, {{0, 1}, {{1}}}, {1}}], {
             Wolfram`QuantumFramework`QuditName[1, "Dual" -> False], 1} -> 
           SparseArray[Automatic, {2}, 0, {1, {{0, 1}, {{2}}}, {1}}], {
             Wolfram`QuantumFramework`QuditName[0, "Dual" -> False], 2} -> 
           SparseArray[Automatic, {2}, 0, {1, {{0, 1}, {{1}}}, {1}}], {
             Wolfram`QuantumFramework`QuditName[1, "Dual" -> False], 2} -> 
           SparseArray[Automatic, {2}, 0, {1, {{0, 1}, {{2}}}, {1}}]|>], 
        "Input" -> Wolfram`QuantumFramework`QuditBasis[<|{
             Wolfram`QuantumFramework`QuditName[0, "Dual" -> True], 1} -> 
           SparseArray[Automatic, {2}, 0, {1, {{0, 1}, {{1}}}, {1}}], {
             Wolfram`QuantumFramework`QuditName[1, "Dual" -> True], 1} -> 
           SparseArray[Automatic, {2}, 0, {1, {{0, 1}, {{2}}}, {1}}], {
             Wolfram`QuantumFramework`QuditName[0, "Dual" -> True], 2} -> 
           SparseArray[Automatic, {2}, 0, {1, {{0, 1}, {{1}}}, {1}}], {
             Wolfram`QuantumFramework`QuditName[1, "Dual" -> True], 2} -> 
           SparseArray[Automatic, {2}, 0, {1, {{0, 1}, {{2}}}, {1}}]|>], 
        "Picture" -> "Schr\[ODoubleDot]dinger", "Label" -> 
        "Controlled"["X", {1}, {}], "ParameterSpec" -> {}|>]], {{1, 2}, {1, 
     2}}], 
    Wolfram`QuantumFramework`QuantumOperator[
     Wolfram`QuantumFramework`QuantumState[
      SparseArray[
      Automatic, {16}, 0, {
       1, {{0, 6}, {{1}, {6}, {11}, {12}, {15}, {16}}}, {
        1, 1, 2^Rational[-1, 2], 2^Rational[-1, 2], 2^
         Rational[-1, 2], -2^Rational[-1, 2]}}], 
      Wolfram`QuantumFramework`QuantumBasis[<|
       "Output" -> Wolfram`QuantumFramework`QuditBasis[<|{
             Wolfram`QuantumFramework`QuditName[0, "Dual" -> False], 1} -> 
           SparseArray[Automatic, {2}, 0, {1, {{0, 1}, {{1}}}, {1}}], {
             Wolfram`QuantumFramework`QuditName[1, "Dual" -> False], 1} -> 
           SparseArray[Automatic, {2}, 0, {1, {{0, 1}, {{2}}}, {1}}], {
             Wolfram`QuantumFramework`QuditName[0, "Dual" -> False], 2} -> 
           SparseArray[Automatic, {2}, 0, {1, {{0, 1}, {{1}}}, {1}}], {
             Wolfram`QuantumFramework`QuditName[1, "Dual" -> False], 2} -> 
           SparseArray[Automatic, {2}, 0, {1, {{0, 1}, {{2}}}, {1}}]|>], 
        "Input" -> Wolfram`QuantumFramework`QuditBasis[<|{
             Wolfram`QuantumFramework`QuditName[0, "Dual" -> True], 1} -> 
           SparseArray[Automatic, {2}, 0, {1, {{0, 1}, {{1}}}, {1}}], {
             Wolfram`QuantumFramework`QuditName[1, "Dual" -> True], 1} -> 
           SparseArray[Automatic, {2}, 0, {1, {{0, 1}, {{2}}}, {1}}], {
             Wolfram`QuantumFramework`QuditName[0, "Dual" -> True], 2} -> 
           SparseArray[Automatic, {2}, 0, {1, {{0, 1}, {{1}}}, {1}}], {
             Wolfram`QuantumFramework`QuditName[1, "Dual" -> True], 2} -> 
           SparseArray[Automatic, {2}, 0, {1, {{0, 1}, {{2}}}, {1}}]|>], 
        "Picture" -> "Schr\[ODoubleDot]dinger", "Label" -> 
        "Controlled"["QFT", {2}, {}], "ParameterSpec" -> {}|>]], {{2, 1}, {2, 
     1}}], 
    Wolfram`QuantumFramework`QuantumOperator[
     Wolfram`QuantumFramework`QuantumState[
      SparseArray[
      Automatic, {16}, 0, {
       1, {{0, 4}, {{1}, {6}, {12}, {15}}}, {1, 1, 1, 1}}], 
      Wolfram`QuantumFramework`QuantumBasis[<|
       "Output" -> Wolfram`QuantumFramework`QuditBasis[<|{
             Wolfram`QuantumFramework`QuditName[0, "Dual" -> False], 1} -> 
           SparseArray[Automatic, {2}, 0, {1, {{0, 1}, {{1}}}, {1}}], {
             Wolfram`QuantumFramework`QuditName[1, "Dual" -> False], 1} -> 
           SparseArray[Automatic, {2}, 0, {1, {{0, 1}, {{2}}}, {1}}], {
             Wolfram`QuantumFramework`QuditName[0, "Dual" -> False], 2} -> 
           SparseArray[Automatic, {2}, 0, {1, {{0, 1}, {{1}}}, {1}}], {
             Wolfram`QuantumFramework`QuditName[1, "Dual" -> False], 2} -> 
           SparseArray[Automatic, {2}, 0, {1, {{0, 1}, {{2}}}, {1}}]|>], 
        "Input" -> Wolfram`QuantumFramework`QuditBasis[<|{
             Wolfram`QuantumFramework`QuditName[0, "Dual" -> True], 1} -> 
           SparseArray[Automatic, {2}, 0, {1, {{0, 1}, {{1}}}, {1}}], {
             Wolfram`QuantumFramework`QuditName[1, "Dual" -> True], 1} -> 
           SparseArray[Automatic, {2}, 0, {1, {{0, 1}, {{2}}}, {1}}], {
             Wolfram`QuantumFramework`QuditName[0, "Dual" -> True], 2} -> 
           SparseArray[Automatic, {2}, 0, {1, {{0, 1}, {{1}}}, {1}}], {
             Wolfram`QuantumFramework`QuditName[1, "Dual" -> True], 2} -> 
           SparseArray[Automatic, {2}, 0, {1, {{0, 1}, {{2}}}, {1}}]|>], 
        "Picture" -> "Schr\[ODoubleDot]dinger", "Label" -> 
        "Controlled"["NOT", {2}, {}], "ParameterSpec" -> {}|>]], {{2, 1}, {2, 
     1}}], 
    Wolfram`QuantumFramework`QuantumOperator[
     Wolfram`QuantumFramework`QuantumState[
      SparseArray[
      Automatic, {64}, 0, {
       1, {{0, 8}, {{1}, {10}, {19}, {28}, {37}, {47}, {54}, {64}}}, {1, 1, 1,
         1, 1, 1, 1, 1}}], 
      Wolfram`QuantumFramework`QuantumBasis[<|
       "Output" -> Wolfram`QuantumFramework`QuditBasis[<|{
             Wolfram`QuantumFramework`QuditName[0, "Dual" -> False], 1} -> 
           SparseArray[Automatic, {2}, 0, {1, {{0, 1}, {{1}}}, {1}}], {
             Wolfram`QuantumFramework`QuditName[1, "Dual" -> False], 1} -> 
           SparseArray[Automatic, {2}, 0, {1, {{0, 1}, {{2}}}, {1}}], {
             Wolfram`QuantumFramework`QuditName[0, "Dual" -> False], 2} -> 
           SparseArray[Automatic, {2}, 0, {1, {{0, 1}, {{1}}}, {1}}], {
             Wolfram`QuantumFramework`QuditName[1, "Dual" -> False], 2} -> 
           SparseArray[Automatic, {2}, 0, {1, {{0, 1}, {{2}}}, {1}}], {
             Wolfram`QuantumFramework`QuditName[0, "Dual" -> False], 3} -> 
           SparseArray[Automatic, {2}, 0, {1, {{0, 1}, {{1}}}, {1}}], {
             Wolfram`QuantumFramework`QuditName[1, "Dual" -> False], 3} -> 
           SparseArray[Automatic, {2}, 0, {1, {{0, 1}, {{2}}}, {1}}]|>], 
        "Input" -> Wolfram`QuantumFramework`QuditBasis[<|{
             Wolfram`QuantumFramework`QuditName[0, "Dual" -> True], 1} -> 
           SparseArray[Automatic, {2}, 0, {1, {{0, 1}, {{1}}}, {1}}], {
             Wolfram`QuantumFramework`QuditName[1, "Dual" -> True], 1} -> 
           SparseArray[Automatic, {2}, 0, {1, {{0, 1}, {{2}}}, {1}}], {
             Wolfram`QuantumFramework`QuditName[0, "Dual" -> True], 2} -> 
           SparseArray[Automatic, {2}, 0, {1, {{0, 1}, {{1}}}, {1}}], {
             Wolfram`QuantumFramework`QuditName[1, "Dual" -> True], 2} -> 
           SparseArray[Automatic, {2}, 0, {1, {{0, 1}, {{2}}}, {1}}], {
             Wolfram`QuantumFramework`QuditName[0, "Dual" -> True], 3} -> 
           SparseArray[Automatic, {2}, 0, {1, {{0, 1}, {{1}}}, {1}}], {
             Wolfram`QuantumFramework`QuditName[1, "Dual" -> True], 3} -> 
           SparseArray[Automatic, {2}, 0, {1, {{0, 1}, {{2}}}, {1}}]|>], 
        "Picture" -> "Schr\[ODoubleDot]dinger", "Label" -> 
        "Controlled"["SWAP", {1}, {}], "ParameterSpec" -> {}|>]], {{1, 3, 
     2}, {1, 3, 2}}], 
    Wolfram`QuantumFramework`QuantumOperator[
     Wolfram`QuantumFramework`QuantumState[
      SparseArray[
      Automatic, {4}, 0, {
       1, {{0, 4}, {{1}, {2}, {3}, {4}}}, {
        2^Rational[-1, 2], 2^Rational[-1, 2], 2^
         Rational[-1, 2], -2^Rational[-1, 2]}}], 
      Wolfram`QuantumFramework`QuantumBasis[<|
       "Input" -> Wolfram`QuantumFramework`QuditBasis[<|{
             Wolfram`QuantumFramework`QuditName[0, "Dual" -> True], 1} -> 
           SparseArray[Automatic, {2}, 0, {1, {{0, 1}, {{1}}}, {1}}], {
             Wolfram`QuantumFramework`QuditName[1, "Dual" -> True], 1} -> 
           SparseArray[Automatic, {2}, 0, {1, {{0, 1}, {{2}}}, {1}}]|>], 
        "Output" -> Wolfram`QuantumFramework`QuditBasis[<|{
             Wolfram`QuantumFramework`QuditName[0, "Dual" -> False], 1} -> 
           SparseArray[Automatic, {2}, 0, {1, {{0, 1}, {{1}}}, {1}}], {
             Wolfram`QuantumFramework`QuditName[1, "Dual" -> False], 1} -> 
           SparseArray[Automatic, {2}, 0, {1, {{0, 1}, {{2}}}, {1}}]|>], 
        "Picture" -> "Schr\[ODoubleDot]dinger", "Label" -> "H", 
        "ParameterSpec" -> {}|>]], {{2}, {2}}]}],
  Editable->False,
  SelectWithContents->True,
  Selectable->False]], "Output",
 CellChangeTimes->{{3.8410791135620823`*^9, 3.841079119639374*^9}, 
   3.841080875274724*^9, 3.841088591156013*^9, 3.84290523636312*^9, 
   3.843147066904872*^9, 3.843147621354397*^9, {3.858285454426736*^9, 
   3.858285479600129*^9}, 3.858285732213553*^9},
 CellLabel->
  "Out[229]=",ExpressionUUID->"b7780b3e-7407-4a04-aaf5-6f923ff5fbbb"],

Cell[BoxData[
 GraphicsBox[{{BSplineCurveBox[{{0, -5}, {36, -5}},
     SplineDegree->3], BSplineCurveBox[{{0, -10}, {36, -10}},
     SplineDegree->3], BSplineCurveBox[{{0, -15}, {36, -15}},
     SplineDegree->3], InsetBox[
     StyleBox["1",
      StripOnInput->False,
      FontFamily->"Times",
      FontSize->24], {-1, -5}], InsetBox[
     StyleBox["2",
      StripOnInput->False,
      FontFamily->"Times",
      FontSize->24], {-1, -10}], InsetBox[
     StyleBox["3",
      StripOnInput->False,
      FontFamily->"Times",
      FontSize->24], {-1, -15}]}, {LineBox[{{4, -5.5}, {4, -10}}], 
    {EdgeForm[GrayLevel[0]], FaceForm[GrayLevel[0]], DiskBox[{4, -5}, 0.5]}}, {
    {GrayLevel[1], EdgeForm[Thickness[
     0.25 Dynamic[
       0.26 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
         Magnification])]]], 
     RectangleBox[NCache[{2, Rational[-23, 2]}, {2, -11.5}], 
      NCache[{6, Rational[-17, 2]}, {6, -8.5}]]}, InsetBox[
     StyleBox["\<\"X\"\>",
      StripOnInput->False,
      FontFamily->"Times",
      FontSize->24], {4, -10}]}, {LineBox[{{10, -9.5}, {10, -5}}], 
    {EdgeForm[GrayLevel[0]], FaceForm[GrayLevel[0]], 
     DiskBox[{10, -10}, 0.5]}}, {
    {GrayLevel[1], EdgeForm[Thickness[
     0.25 Dynamic[
       0.26 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
         Magnification])]]], 
     RectangleBox[NCache[{8, Rational[-13, 2]}, {8, -6.5}], 
      NCache[{12, Rational[-7, 2]}, {12, -3.5}]]}, InsetBox[
     StyleBox["\<\"QFT\"\>",
      StripOnInput->False,
      FontFamily->"Times",
      FontSize->24], {10, -5}]}, {LineBox[{{16, -9.5}, {16, -5}}], 
    {EdgeForm[GrayLevel[0]], FaceForm[GrayLevel[0]], 
     DiskBox[{16, -10}, 0.5]}}, {
    {EdgeForm[Thickness[
     0.25 Dynamic[
       0.26 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
         Magnification])]]], CircleBox[{16, -5}, 0.8]}, {
     LineBox[{{15.2, -5}, {16.8, -5}}], LineBox[{{16, -5.8}, {16, -4.2}}]}}, {
    LineBox[{{22, -5.5}, {22, -15}}], 
    {EdgeForm[GrayLevel[0]], FaceForm[GrayLevel[0]], 
     DiskBox[{22, -5}, 0.5]}}, {{LineBox[{{21, -11}, {23, -9}}], 
     LineBox[{{23, -11}, {21, -9}}]}, {LineBox[{{21, -16}, {23, -14}}], 
     LineBox[{{23, -16}, {21, -14}}]}, LineBox[{{22, -10}, {22, -15}}]}, {
    {GrayLevel[1], EdgeForm[Thickness[
     0.25 Dynamic[
       0.26 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
         Magnification])]]], 
     RectangleBox[NCache[{26, Rational[-23, 2]}, {26, -11.5}], 
      NCache[{30, Rational[-17, 2]}, {30, -8.5}]]}, InsetBox[
     StyleBox["\<\"H\"\>",
      StripOnInput->False,
      FontFamily->"Times",
      FontSize->24], {28, -10}]}},
  ImageSize->{
    Min[512, 384 
     Dynamic[0.26 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
        Magnification])]], Automatic}]], "Output",
 CellChangeTimes->{{3.8410791135620823`*^9, 3.841079119639374*^9}, 
   3.841080875274724*^9, 3.841088591156013*^9, 3.84290523636312*^9, 
   3.843147066904872*^9, 3.843147621354397*^9, {3.858285454426736*^9, 
   3.858285479600129*^9}, 3.858285732722292*^9},
 CellLabel->
  "Out[230]=",ExpressionUUID->"ad0f751c-2b68-414f-93df-fb5b39083ca7"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"List", "@@", "circuit"}]], "Input",
 CellChangeTimes->{{3.858285480186204*^9, 3.858285483333976*^9}},
 CellLabel->
  "In[231]:=",ExpressionUUID->"51bb711b-0fd4-4a1f-9202-3a771ef8a8a3"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"{", 
   RowBox[{
    InterpretationBox[
     RowBox[{
      TagBox["QuantumOperator",
       "SummaryHead"], "[", 
      DynamicModuleBox[{Typeset`open$$ = False, Typeset`embedState$$ = 
       "Ready"}, 
       TemplateBox[{
         PaneSelectorBox[{False -> GridBox[{{
               PaneBox[
                ButtonBox[
                 DynamicBox[
                  FEPrivate`FrontEndResource[
                  "FEBitmaps", "SummaryBoxOpener"]], 
                 ButtonFunction :> (Typeset`open$$ = True), Appearance -> 
                 None, BaseStyle -> {}, Evaluator -> Automatic, Method -> 
                 "Preemptive"], Alignment -> {Center, Center}, ImageSize -> 
                Dynamic[{
                  Automatic, 
                   3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                    Magnification])}]], 
               GraphicsBox[
                RasterBox[CompressedData["
1:eJxTTMoPSmVmYGBggWIQGwI+2JNKP6wSWef+8JY9Awog3Rxa20std9LKvwAZ
4UKI
                 "], {{0, 0}, {4, 4}}, {0, 1}], Frame -> False, 
                FrameLabel -> {None, None}, 
                FrameTicks -> {{None, None}, {None, None}}, GridLinesStyle -> 
                Directive[
                  GrayLevel[0.5, 0.4]], ImageSize -> 
                Dynamic[{
                  Automatic, 
                   3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                    Magnification])}], 
                Method -> {
                 "AxisPadding" -> Scaled[0.02], "DefaultBoundaryStyle" -> 
                  Automatic, 
                  "DefaultGraphicsInteraction" -> {
                   "Version" -> 1.2, "TrackMousePosition" -> {True, False}, 
                    "Effects" -> {
                    "Highlight" -> {"ratio" -> 2}, 
                    "HighlightPoint" -> {"ratio" -> 2}, 
                    "Droplines" -> {
                    "freeformCursorMode" -> True, 
                    "placement" -> {"x" -> "All", "y" -> "None"}}}}, 
                  "DefaultPlotStyle" -> Automatic, "DomainPadding" -> 
                  Scaled[0.02], "RangePadding" -> Scaled[0.05]}], 
               GridBox[{{
                  RowBox[{
                    TagBox["\"Picture: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox["\"Schr\[ODoubleDot]dinger\"", "SummaryItem"]}], 
                  RowBox[{
                    TagBox["\"Arity: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox["2", "SummaryItem"]}]}, {
                  RowBox[{
                    TagBox["\"Dimension: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox[
                    
                    TemplateBox[{"4", "\"\[RightArrow]\"", "4"}, 
                    "RowDefault"], "SummaryItem"]}], 
                  RowBox[{
                    TagBox["\"Qudits: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox[
                    
                    TemplateBox[{"2", "\"\[RightArrow]\"", "2"}, 
                    "RowDefault"], "SummaryItem"]}]}}, 
                GridBoxAlignment -> {
                 "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, AutoDelete -> 
                False, GridBoxItemSize -> {
                 "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                GridBoxSpacings -> {
                 "Columns" -> {{2}}, "Rows" -> {{Automatic}}}, 
                BaseStyle -> {
                 ShowStringCharacters -> False, NumberMarks -> False, 
                  PrintPrecision -> 3, ShowSyntaxStyles -> False}]}}, 
             GridBoxAlignment -> {"Columns" -> {{Left}}, "Rows" -> {{Top}}}, 
             AutoDelete -> False, 
             GridBoxItemSize -> {
              "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
             BaselinePosition -> {1, 1}], True -> GridBox[{{
               PaneBox[
                ButtonBox[
                 DynamicBox[
                  FEPrivate`FrontEndResource[
                  "FEBitmaps", "SummaryBoxCloser"]], 
                 ButtonFunction :> (Typeset`open$$ = False), Appearance -> 
                 None, BaseStyle -> {}, Evaluator -> Automatic, Method -> 
                 "Preemptive"], Alignment -> {Center, Center}, ImageSize -> 
                Dynamic[{
                  Automatic, 
                   3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                    Magnification])}]], 
               GraphicsBox[
                RasterBox[CompressedData["
1:eJxTTMoPSmVmYGBggWIQGwI+2JNKP6wSWef+8JY9Awog3Rxa20std9LKvwAZ
4UKI
                 "], {{0, 0}, {4, 4}}, {0, 1}], Frame -> False, 
                FrameLabel -> {None, None}, 
                FrameTicks -> {{None, None}, {None, None}}, GridLinesStyle -> 
                Directive[
                  GrayLevel[0.5, 0.4]], ImageSize -> 
                Dynamic[{
                  Automatic, 
                   3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                    Magnification])}], 
                Method -> {
                 "AxisPadding" -> Scaled[0.02], "DefaultBoundaryStyle" -> 
                  Automatic, 
                  "DefaultGraphicsInteraction" -> {
                   "Version" -> 1.2, "TrackMousePosition" -> {True, False}, 
                    "Effects" -> {
                    "Highlight" -> {"ratio" -> 2}, 
                    "HighlightPoint" -> {"ratio" -> 2}, 
                    "Droplines" -> {
                    "freeformCursorMode" -> True, 
                    "placement" -> {"x" -> "All", "y" -> "None"}}}}, 
                  "DefaultPlotStyle" -> Automatic, "DomainPadding" -> 
                  Scaled[0.02], "RangePadding" -> Scaled[0.05]}], 
               GridBox[{{
                  RowBox[{
                    TagBox["\"Picture: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox["\"Schr\[ODoubleDot]dinger\"", "SummaryItem"]}], 
                  RowBox[{
                    TagBox["\"Arity: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox["2", "SummaryItem"]}]}, {
                  RowBox[{
                    TagBox["\"Dimension: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox[
                    
                    TemplateBox[{"4", "\"\[RightArrow]\"", "4"}, 
                    "RowDefault"], "SummaryItem"]}], 
                  RowBox[{
                    TagBox["\"Qudits: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox[
                    
                    TemplateBox[{"2", "\"\[RightArrow]\"", "2"}, 
                    "RowDefault"], "SummaryItem"]}]}, {
                  RowBox[{
                    TagBox["\"Hermitian: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox["True", "SummaryItem"]}], 
                  RowBox[{
                    TagBox["\"Order: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox[
                    TemplateBox[{
                    RowBox[{"{", 
                    RowBox[{"1", ",", "2"}], "}"}], "\"\[RightArrow]\"", 
                    RowBox[{"{", 
                    RowBox[{"1", ",", "2"}], "}"}]}, "RowDefault"], 
                    "SummaryItem"]}]}, {
                  RowBox[{
                    TagBox["\"Unitary: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox["True", "SummaryItem"]}], 
                  RowBox[{
                    TagBox["\"Dimensions: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox[
                    TemplateBox[{
                    RowBox[{"{", 
                    RowBox[{"2", ",", "2"}], "}"}], "\"\[RightArrow]\"", 
                    RowBox[{"{", 
                    RowBox[{"2", ",", "2"}], "}"}]}, "RowDefault"], 
                    "SummaryItem"]}]}, {
                  RowBox[{
                    TagBox["\"ParameterArity: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox["0", "SummaryItem"]}], 
                  RowBox[{
                    TagBox["\"Parameters: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox[
                    RowBox[{"{", "}"}], "SummaryItem"]}]}}, 
                GridBoxAlignment -> {
                 "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, AutoDelete -> 
                False, GridBoxItemSize -> {
                 "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                GridBoxSpacings -> {
                 "Columns" -> {{2}}, "Rows" -> {{Automatic}}}, 
                BaseStyle -> {
                 ShowStringCharacters -> False, NumberMarks -> False, 
                  PrintPrecision -> 3, ShowSyntaxStyles -> False}]}}, 
             GridBoxAlignment -> {"Columns" -> {{Left}}, "Rows" -> {{Top}}}, 
             AutoDelete -> False, 
             GridBoxItemSize -> {
              "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
             BaselinePosition -> {1, 1}]}, 
          Dynamic[Typeset`open$$], ImageSize -> Automatic]},
        "SummaryPanel"],
       DynamicModuleValues:>{}], "]"}],
     Wolfram`QuantumFramework`QuantumOperator[
      Wolfram`QuantumFramework`QuantumState[
       SparseArray[
       Automatic, {16}, 0, {
        1, {{0, 4}, {{1}, {6}, {12}, {15}}}, {1, 1, 1, 1}}], 
       Wolfram`QuantumFramework`QuantumBasis[<|
        "Output" -> Wolfram`QuantumFramework`QuditBasis[<|{
              Wolfram`QuantumFramework`QuditName[0, "Dual" -> False], 1} -> 
            SparseArray[Automatic, {2}, 0, {1, {{0, 1}, {{1}}}, {1}}], {
              Wolfram`QuantumFramework`QuditName[1, "Dual" -> False], 1} -> 
            SparseArray[Automatic, {2}, 0, {1, {{0, 1}, {{2}}}, {1}}], {
              Wolfram`QuantumFramework`QuditName[0, "Dual" -> False], 2} -> 
            SparseArray[Automatic, {2}, 0, {1, {{0, 1}, {{1}}}, {1}}], {
              Wolfram`QuantumFramework`QuditName[1, "Dual" -> False], 2} -> 
            SparseArray[Automatic, {2}, 0, {1, {{0, 1}, {{2}}}, {1}}]|>], 
         "Input" -> Wolfram`QuantumFramework`QuditBasis[<|{
              Wolfram`QuantumFramework`QuditName[0, "Dual" -> True], 1} -> 
            SparseArray[Automatic, {2}, 0, {1, {{0, 1}, {{1}}}, {1}}], {
              Wolfram`QuantumFramework`QuditName[1, "Dual" -> True], 1} -> 
            SparseArray[Automatic, {2}, 0, {1, {{0, 1}, {{2}}}, {1}}], {
              Wolfram`QuantumFramework`QuditName[0, "Dual" -> True], 2} -> 
            SparseArray[Automatic, {2}, 0, {1, {{0, 1}, {{1}}}, {1}}], {
              Wolfram`QuantumFramework`QuditName[1, "Dual" -> True], 2} -> 
            SparseArray[Automatic, {2}, 0, {1, {{0, 1}, {{2}}}, {1}}]|>], 
         "Picture" -> "Schr\[ODoubleDot]dinger", "Label" -> 
         "Controlled"["X", {1}, {}], "ParameterSpec" -> {}|>]], {{1, 2}, {1, 
      2}}],
     Editable->False,
     SelectWithContents->True,
     Selectable->False], ",", 
    InterpretationBox[
     RowBox[{
      TagBox["QuantumOperator",
       "SummaryHead"], "[", 
      DynamicModuleBox[{Typeset`open$$ = False, Typeset`embedState$$ = 
       "Ready"}, 
       TemplateBox[{
         PaneSelectorBox[{False -> GridBox[{{
               PaneBox[
                ButtonBox[
                 DynamicBox[
                  FEPrivate`FrontEndResource[
                  "FEBitmaps", "SummaryBoxOpener"]], 
                 ButtonFunction :> (Typeset`open$$ = True), Appearance -> 
                 None, BaseStyle -> {}, Evaluator -> Automatic, Method -> 
                 "Preemptive"], Alignment -> {Center, Center}, ImageSize -> 
                Dynamic[{
                  Automatic, 
                   3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                    Magnification])}]], 
               GraphicsBox[
                RasterBox[CompressedData["
1:eJxTTMoPSmVmYGBggWIQGwI+2KPToqmOb7kevbbfll9/fGb+Y/sZ5st71Cx2
YaiD0YHz/+fyvrhgv/u4c7aEwEN7oWDHZ31nX+FUT4h+WCWyzv3hLXsGFEC8
flLdT0g9pe7BRQMA3RJfQA==
                 "], {{0, 0}, {4, 4}}, {0, 1}], 
                Frame -> False, FrameLabel -> {None, None}, 
                FrameTicks -> {{None, None}, {None, None}}, GridLinesStyle -> 
                Directive[
                  GrayLevel[0.5, 0.4]], ImageSize -> 
                Dynamic[{
                  Automatic, 
                   3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                    Magnification])}], 
                Method -> {
                 "AxisPadding" -> Scaled[0.02], "DefaultBoundaryStyle" -> 
                  Automatic, 
                  "DefaultGraphicsInteraction" -> {
                   "Version" -> 1.2, "TrackMousePosition" -> {True, False}, 
                    "Effects" -> {
                    "Highlight" -> {"ratio" -> 2}, 
                    "HighlightPoint" -> {"ratio" -> 2}, 
                    "Droplines" -> {
                    "freeformCursorMode" -> True, 
                    "placement" -> {"x" -> "All", "y" -> "None"}}}}, 
                  "DefaultPlotStyle" -> Automatic, "DomainPadding" -> 
                  Scaled[0.02], "RangePadding" -> Scaled[0.05]}], 
               GridBox[{{
                  RowBox[{
                    TagBox["\"Picture: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox["\"Schr\[ODoubleDot]dinger\"", "SummaryItem"]}], 
                  RowBox[{
                    TagBox["\"Arity: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox["2", "SummaryItem"]}]}, {
                  RowBox[{
                    TagBox["\"Dimension: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox[
                    
                    TemplateBox[{"4", "\"\[RightArrow]\"", "4"}, 
                    "RowDefault"], "SummaryItem"]}], 
                  RowBox[{
                    TagBox["\"Qudits: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox[
                    
                    TemplateBox[{"2", "\"\[RightArrow]\"", "2"}, 
                    "RowDefault"], "SummaryItem"]}]}}, 
                GridBoxAlignment -> {
                 "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, AutoDelete -> 
                False, GridBoxItemSize -> {
                 "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                GridBoxSpacings -> {
                 "Columns" -> {{2}}, "Rows" -> {{Automatic}}}, 
                BaseStyle -> {
                 ShowStringCharacters -> False, NumberMarks -> False, 
                  PrintPrecision -> 3, ShowSyntaxStyles -> False}]}}, 
             GridBoxAlignment -> {"Columns" -> {{Left}}, "Rows" -> {{Top}}}, 
             AutoDelete -> False, 
             GridBoxItemSize -> {
              "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
             BaselinePosition -> {1, 1}], True -> GridBox[{{
               PaneBox[
                ButtonBox[
                 DynamicBox[
                  FEPrivate`FrontEndResource[
                  "FEBitmaps", "SummaryBoxCloser"]], 
                 ButtonFunction :> (Typeset`open$$ = False), Appearance -> 
                 None, BaseStyle -> {}, Evaluator -> Automatic, Method -> 
                 "Preemptive"], Alignment -> {Center, Center}, ImageSize -> 
                Dynamic[{
                  Automatic, 
                   3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                    Magnification])}]], 
               GraphicsBox[
                RasterBox[CompressedData["
1:eJxTTMoPSmVmYGBggWIQGwI+2KPToqmOb7kevbbfll9/fGb+Y/sZ5st71Cx2
YaiD0YHz/+fyvrhgv/u4c7aEwEN7oWDHZ31nX+FUT4h+WCWyzv3hLXsGFEC8
flLdT0g9pe7BRQMA3RJfQA==
                 "], {{0, 0}, {4, 4}}, {0, 1}], 
                Frame -> False, FrameLabel -> {None, None}, 
                FrameTicks -> {{None, None}, {None, None}}, GridLinesStyle -> 
                Directive[
                  GrayLevel[0.5, 0.4]], ImageSize -> 
                Dynamic[{
                  Automatic, 
                   3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                    Magnification])}], 
                Method -> {
                 "AxisPadding" -> Scaled[0.02], "DefaultBoundaryStyle" -> 
                  Automatic, 
                  "DefaultGraphicsInteraction" -> {
                   "Version" -> 1.2, "TrackMousePosition" -> {True, False}, 
                    "Effects" -> {
                    "Highlight" -> {"ratio" -> 2}, 
                    "HighlightPoint" -> {"ratio" -> 2}, 
                    "Droplines" -> {
                    "freeformCursorMode" -> True, 
                    "placement" -> {"x" -> "All", "y" -> "None"}}}}, 
                  "DefaultPlotStyle" -> Automatic, "DomainPadding" -> 
                  Scaled[0.02], "RangePadding" -> Scaled[0.05]}], 
               GridBox[{{
                  RowBox[{
                    TagBox["\"Picture: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox["\"Schr\[ODoubleDot]dinger\"", "SummaryItem"]}], 
                  RowBox[{
                    TagBox["\"Arity: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox["2", "SummaryItem"]}]}, {
                  RowBox[{
                    TagBox["\"Dimension: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox[
                    
                    TemplateBox[{"4", "\"\[RightArrow]\"", "4"}, 
                    "RowDefault"], "SummaryItem"]}], 
                  RowBox[{
                    TagBox["\"Qudits: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox[
                    
                    TemplateBox[{"2", "\"\[RightArrow]\"", "2"}, 
                    "RowDefault"], "SummaryItem"]}]}, {
                  RowBox[{
                    TagBox["\"Hermitian: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox["True", "SummaryItem"]}], 
                  RowBox[{
                    TagBox["\"Order: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox[
                    TemplateBox[{
                    RowBox[{"{", 
                    RowBox[{"2", ",", "1"}], "}"}], "\"\[RightArrow]\"", 
                    RowBox[{"{", 
                    RowBox[{"2", ",", "1"}], "}"}]}, "RowDefault"], 
                    "SummaryItem"]}]}, {
                  RowBox[{
                    TagBox["\"Unitary: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox["True", "SummaryItem"]}], 
                  RowBox[{
                    TagBox["\"Dimensions: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox[
                    TemplateBox[{
                    RowBox[{"{", 
                    RowBox[{"2", ",", "2"}], "}"}], "\"\[RightArrow]\"", 
                    RowBox[{"{", 
                    RowBox[{"2", ",", "2"}], "}"}]}, "RowDefault"], 
                    "SummaryItem"]}]}, {
                  RowBox[{
                    TagBox["\"ParameterArity: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox["0", "SummaryItem"]}], 
                  RowBox[{
                    TagBox["\"Parameters: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox[
                    RowBox[{"{", "}"}], "SummaryItem"]}]}}, 
                GridBoxAlignment -> {
                 "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, AutoDelete -> 
                False, GridBoxItemSize -> {
                 "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                GridBoxSpacings -> {
                 "Columns" -> {{2}}, "Rows" -> {{Automatic}}}, 
                BaseStyle -> {
                 ShowStringCharacters -> False, NumberMarks -> False, 
                  PrintPrecision -> 3, ShowSyntaxStyles -> False}]}}, 
             GridBoxAlignment -> {"Columns" -> {{Left}}, "Rows" -> {{Top}}}, 
             AutoDelete -> False, 
             GridBoxItemSize -> {
              "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
             BaselinePosition -> {1, 1}]}, 
          Dynamic[Typeset`open$$], ImageSize -> Automatic]},
        "SummaryPanel"],
       DynamicModuleValues:>{}], "]"}],
     Wolfram`QuantumFramework`QuantumOperator[
      Wolfram`QuantumFramework`QuantumState[
       SparseArray[
       Automatic, {16}, 0, {
        1, {{0, 6}, {{1}, {6}, {11}, {12}, {15}, {16}}}, {
         1, 1, 2^Rational[-1, 2], 2^Rational[-1, 2], 2^
          Rational[-1, 2], -2^Rational[-1, 2]}}], 
       Wolfram`QuantumFramework`QuantumBasis[<|
        "Output" -> Wolfram`QuantumFramework`QuditBasis[<|{
              Wolfram`QuantumFramework`QuditName[0, "Dual" -> False], 1} -> 
            SparseArray[Automatic, {2}, 0, {1, {{0, 1}, {{1}}}, {1}}], {
              Wolfram`QuantumFramework`QuditName[1, "Dual" -> False], 1} -> 
            SparseArray[Automatic, {2}, 0, {1, {{0, 1}, {{2}}}, {1}}], {
              Wolfram`QuantumFramework`QuditName[0, "Dual" -> False], 2} -> 
            SparseArray[Automatic, {2}, 0, {1, {{0, 1}, {{1}}}, {1}}], {
              Wolfram`QuantumFramework`QuditName[1, "Dual" -> False], 2} -> 
            SparseArray[Automatic, {2}, 0, {1, {{0, 1}, {{2}}}, {1}}]|>], 
         "Input" -> Wolfram`QuantumFramework`QuditBasis[<|{
              Wolfram`QuantumFramework`QuditName[0, "Dual" -> True], 1} -> 
            SparseArray[Automatic, {2}, 0, {1, {{0, 1}, {{1}}}, {1}}], {
              Wolfram`QuantumFramework`QuditName[1, "Dual" -> True], 1} -> 
            SparseArray[Automatic, {2}, 0, {1, {{0, 1}, {{2}}}, {1}}], {
              Wolfram`QuantumFramework`QuditName[0, "Dual" -> True], 2} -> 
            SparseArray[Automatic, {2}, 0, {1, {{0, 1}, {{1}}}, {1}}], {
              Wolfram`QuantumFramework`QuditName[1, "Dual" -> True], 2} -> 
            SparseArray[Automatic, {2}, 0, {1, {{0, 1}, {{2}}}, {1}}]|>], 
         "Picture" -> "Schr\[ODoubleDot]dinger", "Label" -> 
         "Controlled"["QFT", {2}, {}], "ParameterSpec" -> {}|>]], {{2, 1}, {2,
       1}}],
     Editable->False,
     SelectWithContents->True,
     Selectable->False], ",", 
    InterpretationBox[
     RowBox[{
      TagBox["QuantumOperator",
       "SummaryHead"], "[", 
      DynamicModuleBox[{Typeset`open$$ = False, Typeset`embedState$$ = 
       "Ready"}, 
       TemplateBox[{
         PaneSelectorBox[{False -> GridBox[{{
               PaneBox[
                ButtonBox[
                 DynamicBox[
                  FEPrivate`FrontEndResource[
                  "FEBitmaps", "SummaryBoxOpener"]], 
                 ButtonFunction :> (Typeset`open$$ = True), Appearance -> 
                 None, BaseStyle -> {}, Evaluator -> Automatic, Method -> 
                 "Preemptive"], Alignment -> {Center, Center}, ImageSize -> 
                Dynamic[{
                  Automatic, 
                   3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                    Magnification])}]], 
               GraphicsBox[
                RasterBox[CompressedData["
1:eJxTTMoPSmVmYGBggWIQGwI+2OOiH1aJrHN/eMueAQXgVk8terDZSyv3AAAZ
4UKI
                 "], {{0, 0}, {4, 4}}, {0, 1}], Frame -> False, 
                FrameLabel -> {None, None}, 
                FrameTicks -> {{None, None}, {None, None}}, GridLinesStyle -> 
                Directive[
                  GrayLevel[0.5, 0.4]], ImageSize -> 
                Dynamic[{
                  Automatic, 
                   3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                    Magnification])}], 
                Method -> {
                 "AxisPadding" -> Scaled[0.02], "DefaultBoundaryStyle" -> 
                  Automatic, 
                  "DefaultGraphicsInteraction" -> {
                   "Version" -> 1.2, "TrackMousePosition" -> {True, False}, 
                    "Effects" -> {
                    "Highlight" -> {"ratio" -> 2}, 
                    "HighlightPoint" -> {"ratio" -> 2}, 
                    "Droplines" -> {
                    "freeformCursorMode" -> True, 
                    "placement" -> {"x" -> "All", "y" -> "None"}}}}, 
                  "DefaultPlotStyle" -> Automatic, "DomainPadding" -> 
                  Scaled[0.02], "RangePadding" -> Scaled[0.05]}], 
               GridBox[{{
                  RowBox[{
                    TagBox["\"Picture: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox["\"Schr\[ODoubleDot]dinger\"", "SummaryItem"]}], 
                  RowBox[{
                    TagBox["\"Arity: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox["2", "SummaryItem"]}]}, {
                  RowBox[{
                    TagBox["\"Dimension: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox[
                    TemplateBox[{"4", "\"\[RightArrow]\"", "4"}, 
                    "RowDefault"], "SummaryItem"]}], 
                  RowBox[{
                    TagBox["\"Qudits: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox[
                    
                    TemplateBox[{"2", "\"\[RightArrow]\"", "2"}, 
                    "RowDefault"], "SummaryItem"]}]}}, 
                GridBoxAlignment -> {
                 "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, AutoDelete -> 
                False, GridBoxItemSize -> {
                 "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                GridBoxSpacings -> {
                 "Columns" -> {{2}}, "Rows" -> {{Automatic}}}, 
                BaseStyle -> {
                 ShowStringCharacters -> False, NumberMarks -> False, 
                  PrintPrecision -> 3, ShowSyntaxStyles -> False}]}}, 
             GridBoxAlignment -> {"Columns" -> {{Left}}, "Rows" -> {{Top}}}, 
             AutoDelete -> False, 
             GridBoxItemSize -> {
              "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
             BaselinePosition -> {1, 1}], True -> GridBox[{{
               PaneBox[
                ButtonBox[
                 DynamicBox[
                  FEPrivate`FrontEndResource[
                  "FEBitmaps", "SummaryBoxCloser"]], 
                 ButtonFunction :> (Typeset`open$$ = False), Appearance -> 
                 None, BaseStyle -> {}, Evaluator -> Automatic, Method -> 
                 "Preemptive"], Alignment -> {Center, Center}, ImageSize -> 
                Dynamic[{
                  Automatic, 
                   3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                    Magnification])}]], 
               GraphicsBox[
                RasterBox[CompressedData["
1:eJxTTMoPSmVmYGBggWIQGwI+2OOiH1aJrHN/eMueAQXgVk8terDZSyv3AAAZ
4UKI
                 "], {{0, 0}, {4, 4}}, {0, 1}], Frame -> False, 
                FrameLabel -> {None, None}, 
                FrameTicks -> {{None, None}, {None, None}}, GridLinesStyle -> 
                Directive[
                  GrayLevel[0.5, 0.4]], ImageSize -> 
                Dynamic[{
                  Automatic, 
                   3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                    Magnification])}], 
                Method -> {
                 "AxisPadding" -> Scaled[0.02], "DefaultBoundaryStyle" -> 
                  Automatic, 
                  "DefaultGraphicsInteraction" -> {
                   "Version" -> 1.2, "TrackMousePosition" -> {True, False}, 
                    "Effects" -> {
                    "Highlight" -> {"ratio" -> 2}, 
                    "HighlightPoint" -> {"ratio" -> 2}, 
                    "Droplines" -> {
                    "freeformCursorMode" -> True, 
                    "placement" -> {"x" -> "All", "y" -> "None"}}}}, 
                  "DefaultPlotStyle" -> Automatic, "DomainPadding" -> 
                  Scaled[0.02], "RangePadding" -> Scaled[0.05]}], 
               GridBox[{{
                  RowBox[{
                    TagBox["\"Picture: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox["\"Schr\[ODoubleDot]dinger\"", "SummaryItem"]}], 
                  RowBox[{
                    TagBox["\"Arity: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox["2", "SummaryItem"]}]}, {
                  RowBox[{
                    TagBox["\"Dimension: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox[
                    
                    TemplateBox[{"4", "\"\[RightArrow]\"", "4"}, 
                    "RowDefault"], "SummaryItem"]}], 
                  RowBox[{
                    TagBox["\"Qudits: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox[
                    
                    TemplateBox[{"2", "\"\[RightArrow]\"", "2"}, 
                    "RowDefault"], "SummaryItem"]}]}, {
                  RowBox[{
                    TagBox["\"Hermitian: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox["True", "SummaryItem"]}], 
                  RowBox[{
                    TagBox["\"Order: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox[
                    TemplateBox[{
                    RowBox[{"{", 
                    RowBox[{"2", ",", "1"}], "}"}], "\"\[RightArrow]\"", 
                    RowBox[{"{", 
                    RowBox[{"2", ",", "1"}], "}"}]}, "RowDefault"], 
                    "SummaryItem"]}]}, {
                  RowBox[{
                    TagBox["\"Unitary: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox["True", "SummaryItem"]}], 
                  RowBox[{
                    TagBox["\"Dimensions: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox[
                    TemplateBox[{
                    RowBox[{"{", 
                    RowBox[{"2", ",", "2"}], "}"}], "\"\[RightArrow]\"", 
                    RowBox[{"{", 
                    RowBox[{"2", ",", "2"}], "}"}]}, "RowDefault"], 
                    "SummaryItem"]}]}, {
                  RowBox[{
                    TagBox["\"ParameterArity: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox["0", "SummaryItem"]}], 
                  RowBox[{
                    TagBox["\"Parameters: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox[
                    RowBox[{"{", "}"}], "SummaryItem"]}]}}, 
                GridBoxAlignment -> {
                 "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, AutoDelete -> 
                False, GridBoxItemSize -> {
                 "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                GridBoxSpacings -> {
                 "Columns" -> {{2}}, "Rows" -> {{Automatic}}}, 
                BaseStyle -> {
                 ShowStringCharacters -> False, NumberMarks -> False, 
                  PrintPrecision -> 3, ShowSyntaxStyles -> False}]}}, 
             GridBoxAlignment -> {"Columns" -> {{Left}}, "Rows" -> {{Top}}}, 
             AutoDelete -> False, 
             GridBoxItemSize -> {
              "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
             BaselinePosition -> {1, 1}]}, 
          Dynamic[Typeset`open$$], ImageSize -> Automatic]},
        "SummaryPanel"],
       DynamicModuleValues:>{}], "]"}],
     Wolfram`QuantumFramework`QuantumOperator[
      Wolfram`QuantumFramework`QuantumState[
       SparseArray[
       Automatic, {16}, 0, {
        1, {{0, 4}, {{1}, {6}, {12}, {15}}}, {1, 1, 1, 1}}], 
       Wolfram`QuantumFramework`QuantumBasis[<|
        "Output" -> Wolfram`QuantumFramework`QuditBasis[<|{
              Wolfram`QuantumFramework`QuditName[0, "Dual" -> False], 1} -> 
            SparseArray[Automatic, {2}, 0, {1, {{0, 1}, {{1}}}, {1}}], {
              Wolfram`QuantumFramework`QuditName[1, "Dual" -> False], 1} -> 
            SparseArray[Automatic, {2}, 0, {1, {{0, 1}, {{2}}}, {1}}], {
              Wolfram`QuantumFramework`QuditName[0, "Dual" -> False], 2} -> 
            SparseArray[Automatic, {2}, 0, {1, {{0, 1}, {{1}}}, {1}}], {
              Wolfram`QuantumFramework`QuditName[1, "Dual" -> False], 2} -> 
            SparseArray[Automatic, {2}, 0, {1, {{0, 1}, {{2}}}, {1}}]|>], 
         "Input" -> Wolfram`QuantumFramework`QuditBasis[<|{
              Wolfram`QuantumFramework`QuditName[0, "Dual" -> True], 1} -> 
            SparseArray[Automatic, {2}, 0, {1, {{0, 1}, {{1}}}, {1}}], {
              Wolfram`QuantumFramework`QuditName[1, "Dual" -> True], 1} -> 
            SparseArray[Automatic, {2}, 0, {1, {{0, 1}, {{2}}}, {1}}], {
              Wolfram`QuantumFramework`QuditName[0, "Dual" -> True], 2} -> 
            SparseArray[Automatic, {2}, 0, {1, {{0, 1}, {{1}}}, {1}}], {
              Wolfram`QuantumFramework`QuditName[1, "Dual" -> True], 2} -> 
            SparseArray[Automatic, {2}, 0, {1, {{0, 1}, {{2}}}, {1}}]|>], 
         "Picture" -> "Schr\[ODoubleDot]dinger", "Label" -> 
         "Controlled"["NOT", {2}, {}], "ParameterSpec" -> {}|>]], {{2, 1}, {2,
       1}}],
     Editable->False,
     SelectWithContents->True,
     Selectable->False], ",", 
    InterpretationBox[
     RowBox[{
      TagBox["QuantumOperator",
       "SummaryHead"], "[", 
      DynamicModuleBox[{Typeset`open$$ = False, Typeset`embedState$$ = 
       "Ready"}, 
       TemplateBox[{
         PaneSelectorBox[{False -> GridBox[{{
               PaneBox[
                ButtonBox[
                 DynamicBox[
                  FEPrivate`FrontEndResource[
                  "FEBitmaps", "SummaryBoxOpener"]], 
                 ButtonFunction :> (Typeset`open$$ = True), Appearance -> 
                 None, BaseStyle -> {}, Evaluator -> Automatic, Method -> 
                 "Preemptive"], Alignment -> {Center, Center}, ImageSize -> 
                Dynamic[{
                  Automatic, 
                   3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                    Magnification])}]], 
               GraphicsBox[
                RasterBox[CompressedData["
1:eJxTTMoPSmVmYGDggGIQGwI+2A8V+mGVyDr3h7fsGVDAqHuGu78Gm3tG3Tnq
zqHoTnQaAB7R9QA=
                 "], {{0, 0}, {8, 8}}, {0, 1}], Frame -> 
                False, FrameLabel -> {None, None}, 
                FrameTicks -> {{None, None}, {None, None}}, GridLinesStyle -> 
                Directive[
                  GrayLevel[0.5, 0.4]], ImageSize -> 
                Dynamic[{
                  Automatic, 
                   3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                    Magnification])}], 
                Method -> {
                 "AxisPadding" -> Scaled[0.02], "DefaultBoundaryStyle" -> 
                  Automatic, 
                  "DefaultGraphicsInteraction" -> {
                   "Version" -> 1.2, "TrackMousePosition" -> {True, False}, 
                    "Effects" -> {
                    "Highlight" -> {"ratio" -> 2}, 
                    "HighlightPoint" -> {"ratio" -> 2}, 
                    "Droplines" -> {
                    "freeformCursorMode" -> True, 
                    "placement" -> {"x" -> "All", "y" -> "None"}}}}, 
                  "DefaultPlotStyle" -> Automatic, "DomainPadding" -> 
                  Scaled[0.02], "RangePadding" -> Scaled[0.05]}], 
               GridBox[{{
                  RowBox[{
                    TagBox["\"Picture: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox["\"Schr\[ODoubleDot]dinger\"", "SummaryItem"]}], 
                  RowBox[{
                    TagBox["\"Arity: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox["3", "SummaryItem"]}]}, {
                  RowBox[{
                    TagBox["\"Dimension: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox[
                    
                    TemplateBox[{"8", "\"\[RightArrow]\"", "8"}, 
                    "RowDefault"], "SummaryItem"]}], 
                  RowBox[{
                    TagBox["\"Qudits: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox[
                    TemplateBox[{"3", "\"\[RightArrow]\"", "3"}, 
                    "RowDefault"], "SummaryItem"]}]}}, 
                GridBoxAlignment -> {
                 "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, AutoDelete -> 
                False, GridBoxItemSize -> {
                 "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                GridBoxSpacings -> {
                 "Columns" -> {{2}}, "Rows" -> {{Automatic}}}, 
                BaseStyle -> {
                 ShowStringCharacters -> False, NumberMarks -> False, 
                  PrintPrecision -> 3, ShowSyntaxStyles -> False}]}}, 
             GridBoxAlignment -> {"Columns" -> {{Left}}, "Rows" -> {{Top}}}, 
             AutoDelete -> False, 
             GridBoxItemSize -> {
              "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
             BaselinePosition -> {1, 1}], True -> GridBox[{{
               PaneBox[
                ButtonBox[
                 DynamicBox[
                  FEPrivate`FrontEndResource[
                  "FEBitmaps", "SummaryBoxCloser"]], 
                 ButtonFunction :> (Typeset`open$$ = False), Appearance -> 
                 None, BaseStyle -> {}, Evaluator -> Automatic, Method -> 
                 "Preemptive"], Alignment -> {Center, Center}, ImageSize -> 
                Dynamic[{
                  Automatic, 
                   3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                    Magnification])}]], 
               GraphicsBox[
                RasterBox[CompressedData["
1:eJxTTMoPSmVmYGDggGIQGwI+2A8V+mGVyDr3h7fsGVDAqHuGu78Gm3tG3Tnq
zqHoTnQaAB7R9QA=
                 "], {{0, 0}, {8, 8}}, {0, 1}], Frame -> 
                False, FrameLabel -> {None, None}, 
                FrameTicks -> {{None, None}, {None, None}}, GridLinesStyle -> 
                Directive[
                  GrayLevel[0.5, 0.4]], ImageSize -> 
                Dynamic[{
                  Automatic, 
                   3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                    Magnification])}], 
                Method -> {
                 "AxisPadding" -> Scaled[0.02], "DefaultBoundaryStyle" -> 
                  Automatic, 
                  "DefaultGraphicsInteraction" -> {
                   "Version" -> 1.2, "TrackMousePosition" -> {True, False}, 
                    "Effects" -> {
                    "Highlight" -> {"ratio" -> 2}, 
                    "HighlightPoint" -> {"ratio" -> 2}, 
                    "Droplines" -> {
                    "freeformCursorMode" -> True, 
                    "placement" -> {"x" -> "All", "y" -> "None"}}}}, 
                  "DefaultPlotStyle" -> Automatic, "DomainPadding" -> 
                  Scaled[0.02], "RangePadding" -> Scaled[0.05]}], 
               GridBox[{{
                  RowBox[{
                    TagBox["\"Picture: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox["\"Schr\[ODoubleDot]dinger\"", "SummaryItem"]}], 
                  RowBox[{
                    TagBox["\"Arity: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox["3", "SummaryItem"]}]}, {
                  RowBox[{
                    TagBox["\"Dimension: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox[
                    
                    TemplateBox[{"8", "\"\[RightArrow]\"", "8"}, 
                    "RowDefault"], "SummaryItem"]}], 
                  RowBox[{
                    TagBox["\"Qudits: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox[
                    
                    TemplateBox[{"3", "\"\[RightArrow]\"", "3"}, 
                    "RowDefault"], "SummaryItem"]}]}, {
                  RowBox[{
                    TagBox["\"Hermitian: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox["True", "SummaryItem"]}], 
                  RowBox[{
                    TagBox["\"Order: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox[
                    TemplateBox[{
                    RowBox[{"{", 
                    RowBox[{"1", ",", "3", ",", "2"}], "}"}], 
                    "\"\[RightArrow]\"", 
                    RowBox[{"{", 
                    RowBox[{"1", ",", "3", ",", "2"}], "}"}]}, "RowDefault"], 
                    "SummaryItem"]}]}, {
                  RowBox[{
                    TagBox["\"Unitary: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox["True", "SummaryItem"]}], 
                  RowBox[{
                    TagBox["\"Dimensions: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox[
                    TemplateBox[{
                    RowBox[{"{", 
                    RowBox[{"2", ",", "2", ",", "2"}], "}"}], 
                    "\"\[RightArrow]\"", 
                    RowBox[{"{", 
                    RowBox[{"2", ",", "2", ",", "2"}], "}"}]}, "RowDefault"], 
                    "SummaryItem"]}]}, {
                  RowBox[{
                    TagBox["\"ParameterArity: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox["0", "SummaryItem"]}], 
                  RowBox[{
                    TagBox["\"Parameters: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox[
                    RowBox[{"{", "}"}], "SummaryItem"]}]}}, 
                GridBoxAlignment -> {
                 "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, AutoDelete -> 
                False, GridBoxItemSize -> {
                 "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                GridBoxSpacings -> {
                 "Columns" -> {{2}}, "Rows" -> {{Automatic}}}, 
                BaseStyle -> {
                 ShowStringCharacters -> False, NumberMarks -> False, 
                  PrintPrecision -> 3, ShowSyntaxStyles -> False}]}}, 
             GridBoxAlignment -> {"Columns" -> {{Left}}, "Rows" -> {{Top}}}, 
             AutoDelete -> False, 
             GridBoxItemSize -> {
              "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
             BaselinePosition -> {1, 1}]}, 
          Dynamic[Typeset`open$$], ImageSize -> Automatic]},
        "SummaryPanel"],
       DynamicModuleValues:>{}], "]"}],
     Wolfram`QuantumFramework`QuantumOperator[
      Wolfram`QuantumFramework`QuantumState[
       SparseArray[
       Automatic, {64}, 0, {
        1, {{0, 8}, {{1}, {10}, {19}, {28}, {37}, {47}, {54}, {64}}}, {1, 1, 
         1, 1, 1, 1, 1, 1}}], 
       Wolfram`QuantumFramework`QuantumBasis[<|
        "Output" -> Wolfram`QuantumFramework`QuditBasis[<|{
              Wolfram`QuantumFramework`QuditName[0, "Dual" -> False], 1} -> 
            SparseArray[Automatic, {2}, 0, {1, {{0, 1}, {{1}}}, {1}}], {
              Wolfram`QuantumFramework`QuditName[1, "Dual" -> False], 1} -> 
            SparseArray[Automatic, {2}, 0, {1, {{0, 1}, {{2}}}, {1}}], {
              Wolfram`QuantumFramework`QuditName[0, "Dual" -> False], 2} -> 
            SparseArray[Automatic, {2}, 0, {1, {{0, 1}, {{1}}}, {1}}], {
              Wolfram`QuantumFramework`QuditName[1, "Dual" -> False], 2} -> 
            SparseArray[Automatic, {2}, 0, {1, {{0, 1}, {{2}}}, {1}}], {
              Wolfram`QuantumFramework`QuditName[0, "Dual" -> False], 3} -> 
            SparseArray[Automatic, {2}, 0, {1, {{0, 1}, {{1}}}, {1}}], {
              Wolfram`QuantumFramework`QuditName[1, "Dual" -> False], 3} -> 
            SparseArray[Automatic, {2}, 0, {1, {{0, 1}, {{2}}}, {1}}]|>], 
         "Input" -> Wolfram`QuantumFramework`QuditBasis[<|{
              Wolfram`QuantumFramework`QuditName[0, "Dual" -> True], 1} -> 
            SparseArray[Automatic, {2}, 0, {1, {{0, 1}, {{1}}}, {1}}], {
              Wolfram`QuantumFramework`QuditName[1, "Dual" -> True], 1} -> 
            SparseArray[Automatic, {2}, 0, {1, {{0, 1}, {{2}}}, {1}}], {
              Wolfram`QuantumFramework`QuditName[0, "Dual" -> True], 2} -> 
            SparseArray[Automatic, {2}, 0, {1, {{0, 1}, {{1}}}, {1}}], {
              Wolfram`QuantumFramework`QuditName[1, "Dual" -> True], 2} -> 
            SparseArray[Automatic, {2}, 0, {1, {{0, 1}, {{2}}}, {1}}], {
              Wolfram`QuantumFramework`QuditName[0, "Dual" -> True], 3} -> 
            SparseArray[Automatic, {2}, 0, {1, {{0, 1}, {{1}}}, {1}}], {
              Wolfram`QuantumFramework`QuditName[1, "Dual" -> True], 3} -> 
            SparseArray[Automatic, {2}, 0, {1, {{0, 1}, {{2}}}, {1}}]|>], 
         "Picture" -> "Schr\[ODoubleDot]dinger", "Label" -> 
         "Controlled"["SWAP", {1}, {}], "ParameterSpec" -> {}|>]], {{1, 3, 
      2}, {1, 3, 2}}],
     Editable->False,
     SelectWithContents->True,
     Selectable->False], ",", 
    InterpretationBox[
     RowBox[{
      TagBox["QuantumOperator",
       "SummaryHead"], "[", 
      DynamicModuleBox[{Typeset`open$$ = False, Typeset`embedState$$ = 
       "Ready"}, 
       TemplateBox[{
         PaneSelectorBox[{False -> GridBox[{{
               PaneBox[
                ButtonBox[
                 DynamicBox[
                  FEPrivate`FrontEndResource[
                  "FEBitmaps", "SummaryBoxOpener"]], 
                 ButtonFunction :> (Typeset`open$$ = True), Appearance -> 
                 None, BaseStyle -> {}, Evaluator -> Automatic, Method -> 
                 "Preemptive"], Alignment -> {Center, Center}, ImageSize -> 
                Dynamic[{
                  Automatic, 
                   3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                    Magnification])}]], 
               GraphicsBox[
                
                RasterBox[{{{1., 0.42, 0.}, {0.260487, 0.356, 0.891569}}, {{
                 1., 0.42, 0.}, {1., 0.42, 0.}}}, {{0, 0}, {2, 2}}, {0, 1}], 
                Frame -> False, FrameLabel -> {None, None}, 
                FrameTicks -> {{None, None}, {None, None}}, GridLinesStyle -> 
                Directive[
                  GrayLevel[0.5, 0.4]], ImageSize -> 
                Dynamic[{
                  Automatic, 
                   3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                    Magnification])}], 
                Method -> {
                 "AxisPadding" -> Scaled[0.02], "DefaultBoundaryStyle" -> 
                  Automatic, 
                  "DefaultGraphicsInteraction" -> {
                   "Version" -> 1.2, "TrackMousePosition" -> {True, False}, 
                    "Effects" -> {
                    "Highlight" -> {"ratio" -> 2}, 
                    "HighlightPoint" -> {"ratio" -> 2}, 
                    "Droplines" -> {
                    "freeformCursorMode" -> True, 
                    "placement" -> {"x" -> "All", "y" -> "None"}}}}, 
                  "DefaultPlotStyle" -> Automatic, "DomainPadding" -> 
                  Scaled[0.02], "RangePadding" -> Scaled[0.05]}], 
               GridBox[{{
                  RowBox[{
                    TagBox["\"Picture: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox["\"Schr\[ODoubleDot]dinger\"", "SummaryItem"]}], 
                  RowBox[{
                    TagBox["\"Arity: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox["1", "SummaryItem"]}]}, {
                  RowBox[{
                    TagBox["\"Dimension: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox[
                    
                    TemplateBox[{"2", "\"\[RightArrow]\"", "2"}, 
                    "RowDefault"], "SummaryItem"]}], 
                  RowBox[{
                    TagBox["\"Qudits: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox[
                    
                    TemplateBox[{"1", "\"\[RightArrow]\"", "1"}, 
                    "RowDefault"], "SummaryItem"]}]}}, 
                GridBoxAlignment -> {
                 "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, AutoDelete -> 
                False, GridBoxItemSize -> {
                 "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                GridBoxSpacings -> {
                 "Columns" -> {{2}}, "Rows" -> {{Automatic}}}, 
                BaseStyle -> {
                 ShowStringCharacters -> False, NumberMarks -> False, 
                  PrintPrecision -> 3, ShowSyntaxStyles -> False}]}}, 
             GridBoxAlignment -> {"Columns" -> {{Left}}, "Rows" -> {{Top}}}, 
             AutoDelete -> False, 
             GridBoxItemSize -> {
              "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
             BaselinePosition -> {1, 1}], True -> GridBox[{{
               PaneBox[
                ButtonBox[
                 DynamicBox[
                  FEPrivate`FrontEndResource[
                  "FEBitmaps", "SummaryBoxCloser"]], 
                 ButtonFunction :> (Typeset`open$$ = False), Appearance -> 
                 None, BaseStyle -> {}, Evaluator -> Automatic, Method -> 
                 "Preemptive"], Alignment -> {Center, Center}, ImageSize -> 
                Dynamic[{
                  Automatic, 
                   3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                    Magnification])}]], 
               GraphicsBox[
                
                RasterBox[{{{1., 0.42, 0.}, {0.260487, 0.356, 0.891569}}, {{
                 1., 0.42, 0.}, {1., 0.42, 0.}}}, {{0, 0}, {2, 2}}, {0, 1}], 
                Frame -> False, FrameLabel -> {None, None}, 
                FrameTicks -> {{None, None}, {None, None}}, GridLinesStyle -> 
                Directive[
                  GrayLevel[0.5, 0.4]], ImageSize -> 
                Dynamic[{
                  Automatic, 
                   3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                    Magnification])}], 
                Method -> {
                 "AxisPadding" -> Scaled[0.02], "DefaultBoundaryStyle" -> 
                  Automatic, 
                  "DefaultGraphicsInteraction" -> {
                   "Version" -> 1.2, "TrackMousePosition" -> {True, False}, 
                    "Effects" -> {
                    "Highlight" -> {"ratio" -> 2}, 
                    "HighlightPoint" -> {"ratio" -> 2}, 
                    "Droplines" -> {
                    "freeformCursorMode" -> True, 
                    "placement" -> {"x" -> "All", "y" -> "None"}}}}, 
                  "DefaultPlotStyle" -> Automatic, "DomainPadding" -> 
                  Scaled[0.02], "RangePadding" -> Scaled[0.05]}], 
               GridBox[{{
                  RowBox[{
                    TagBox["\"Picture: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox["\"Schr\[ODoubleDot]dinger\"", "SummaryItem"]}], 
                  RowBox[{
                    TagBox["\"Arity: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox["1", "SummaryItem"]}]}, {
                  RowBox[{
                    TagBox["\"Dimension: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox[
                    
                    TemplateBox[{"2", "\"\[RightArrow]\"", "2"}, 
                    "RowDefault"], "SummaryItem"]}], 
                  RowBox[{
                    TagBox["\"Qudits: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox[
                    
                    TemplateBox[{"1", "\"\[RightArrow]\"", "1"}, 
                    "RowDefault"], "SummaryItem"]}]}, {
                  RowBox[{
                    TagBox["\"Hermitian: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox["True", "SummaryItem"]}], 
                  RowBox[{
                    TagBox["\"Order: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox[
                    TemplateBox[{
                    RowBox[{"{", "2", "}"}], "\"\[RightArrow]\"", 
                    RowBox[{"{", "2", "}"}]}, "RowDefault"], 
                    "SummaryItem"]}]}, {
                  RowBox[{
                    TagBox["\"Unitary: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox["True", "SummaryItem"]}], 
                  RowBox[{
                    TagBox["\"Dimensions: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox[
                    TemplateBox[{
                    RowBox[{"{", "2", "}"}], "\"\[RightArrow]\"", 
                    RowBox[{"{", "2", "}"}]}, "RowDefault"], 
                    "SummaryItem"]}]}, {
                  RowBox[{
                    TagBox["\"ParameterArity: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox["0", "SummaryItem"]}], 
                  RowBox[{
                    TagBox["\"Parameters: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox[
                    RowBox[{"{", "}"}], "SummaryItem"]}]}}, 
                GridBoxAlignment -> {
                 "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, AutoDelete -> 
                False, GridBoxItemSize -> {
                 "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                GridBoxSpacings -> {
                 "Columns" -> {{2}}, "Rows" -> {{Automatic}}}, 
                BaseStyle -> {
                 ShowStringCharacters -> False, NumberMarks -> False, 
                  PrintPrecision -> 3, ShowSyntaxStyles -> False}]}}, 
             GridBoxAlignment -> {"Columns" -> {{Left}}, "Rows" -> {{Top}}}, 
             AutoDelete -> False, 
             GridBoxItemSize -> {
              "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
             BaselinePosition -> {1, 1}]}, 
          Dynamic[Typeset`open$$], ImageSize -> Automatic]},
        "SummaryPanel"],
       DynamicModuleValues:>{}], "]"}],
     Wolfram`QuantumFramework`QuantumOperator[
      Wolfram`QuantumFramework`QuantumState[
       SparseArray[
       Automatic, {4}, 0, {
        1, {{0, 4}, {{1}, {2}, {3}, {4}}}, {
         2^Rational[-1, 2], 2^Rational[-1, 2], 2^
          Rational[-1, 2], -2^Rational[-1, 2]}}], 
       Wolfram`QuantumFramework`QuantumBasis[<|
        "Input" -> Wolfram`QuantumFramework`QuditBasis[<|{
              Wolfram`QuantumFramework`QuditName[0, "Dual" -> True], 1} -> 
            SparseArray[Automatic, {2}, 0, {1, {{0, 1}, {{1}}}, {1}}], {
              Wolfram`QuantumFramework`QuditName[1, "Dual" -> True], 1} -> 
            SparseArray[Automatic, {2}, 0, {1, {{0, 1}, {{2}}}, {1}}]|>], 
         "Output" -> Wolfram`QuantumFramework`QuditBasis[<|{
              Wolfram`QuantumFramework`QuditName[0, "Dual" -> False], 1} -> 
            SparseArray[Automatic, {2}, 0, {1, {{0, 1}, {{1}}}, {1}}], {
              Wolfram`QuantumFramework`QuditName[1, "Dual" -> False], 1} -> 
            SparseArray[Automatic, {2}, 0, {1, {{0, 1}, {{2}}}, {1}}]|>], 
         "Picture" -> "Schr\[ODoubleDot]dinger", "Label" -> "H", 
         "ParameterSpec" -> {}|>]], {{2}, {2}}],
     Editable->False,
     SelectWithContents->True,
     Selectable->False]}], "}"}], "}"}]], "Output",
 CellChangeTimes->{3.8582854840691977`*^9, 3.8582857332805777`*^9},
 CellLabel->
  "Out[231]=",ExpressionUUID->"f60eae9b-7dc9-4758-85fb-a6c78af8f990"]
}, Open  ]]
}, Open  ]]
},
WindowSize->{808, 747},
WindowMargins->{{Automatic, 186}, {39, Automatic}},
PrivateNotebookOptions->{"CloudPublishPath"->"/Published/QuantumFramework.nb"},
FrontEndVersion->"13.0 for Mac OS X ARM (64-bit) (December 6, 2021)",
StyleDefinitions->"Default.nb",
ExpressionUUID->"083eef4a-e954-46d3-8108-0f498540363f"
]
(* End of Notebook Content *)

(* Internal cache information *)
(*CellTagsOutline
CellTagsIndex->{}
*)
(*CellTagsIndex
CellTagsIndex->{}
*)
(*NotebookFileOutline
Notebook[{
Cell[558, 20, 314, 6, 30, "Input",ExpressionUUID->"ba218f66-949c-4cb0-80b7-30bcefccf128"],
Cell[CellGroupData[{
Cell[897, 30, 180, 4, 67, "Section",ExpressionUUID->"f938d78f-b371-45cf-b0fd-9b8205bfdd3e"],
Cell[1080, 36, 323, 6, 35, "Text",ExpressionUUID->"497f79f6-3f58-415e-b030-51b3b387f93d"],
Cell[CellGroupData[{
Cell[1428, 46, 554, 12, 52, "Input",ExpressionUUID->"5fcd8cca-9075-44be-a85e-2e752abbb0d8"],
Cell[1985, 60, 737, 15, 38, "Output",ExpressionUUID->"cce035ce-6bae-44db-bbdc-1ccc9179e590"],
Cell[2725, 77, 30950, 554, 149, "Output",ExpressionUUID->"97215bf8-afec-4819-9e57-49c56508d71c"]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[33724, 637, 138, 2, 67, "Section",ExpressionUUID->"2bd17964-ada8-4518-a755-2644df17d046"],
Cell[33865, 641, 198, 3, 35, "Text",ExpressionUUID->"31d8f2db-4baf-49cb-9d55-30d61a9a0e5d"],
Cell[CellGroupData[{
Cell[34088, 648, 1738, 36, 136, "Input",ExpressionUUID->"dbf199d1-8293-4870-b237-5f66f62d34bc"],
Cell[35829, 686, 1217, 21, 38, "Output",ExpressionUUID->"f0b9845f-74ce-475f-9a45-5c3f53c2808d"],
Cell[37049, 709, 9166, 256, 213, "Output",ExpressionUUID->"74346b27-20bc-4ce6-8bc8-45c28fca3c80"],
Cell[46218, 967, 10713, 218, 76, "Output",ExpressionUUID->"13135f1d-00ef-4a84-a469-b396719b4ea0"],
Cell[56934, 1187, 12168, 244, 63, "Output",ExpressionUUID->"df3d3021-7909-4e69-8bef-ecb1ca2f02ff"],
Cell[69105, 1433, 12220, 257, 63, "Output",ExpressionUUID->"8d135f74-2a53-4ed7-8c5a-55b5c3f8a890"]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[81374, 1696, 131, 3, 67, "Section",ExpressionUUID->"fdf330ef-0c95-4cd2-a86f-b777f78d661e"],
Cell[81508, 1701, 222, 5, 35, "Text",ExpressionUUID->"f14f7f6b-05f1-45ff-99c6-94c974776586"],
Cell[CellGroupData[{
Cell[81755, 1710, 658, 14, 52, "Input",ExpressionUUID->"a63601be-69f6-43d8-8b16-1fae203723ba"],
Cell[82416, 1726, 8387, 233, 163, "Output",ExpressionUUID->"1a05c79d-2267-44cd-ada1-2235c06728bd"],
Cell[90806, 1961, 111250, 2148, 619, "Output",ExpressionUUID->"d3294aa4-19bf-40a1-9c9f-fd32b3933faf"]
}, Open  ]],
Cell[202071, 4112, 222, 5, 35, "Text",ExpressionUUID->"8b06fbb1-fd16-4e67-9034-671a6f29e689"],
Cell[CellGroupData[{
Cell[202318, 4121, 387, 9, 30, "Input",ExpressionUUID->"5075e7f3-ed77-4432-a734-c41229bf0200"],
Cell[202708, 4132, 36731, 773, 228, "Output",ExpressionUUID->"adea654a-6854-49d4-9501-4ad7bb31fd8c"]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[239488, 4911, 133, 3, 67, "Section",ExpressionUUID->"6cdc18d7-d48b-44aa-b3ec-5d96a301cb02"],
Cell[239624, 4916, 402, 8, 35, "Text",ExpressionUUID->"12ab0258-79f5-469b-afdf-0cc590d00acb"],
Cell[CellGroupData[{
Cell[240051, 4928, 454, 10, 30, "Input",ExpressionUUID->"58906b45-c260-48ad-a820-c60ceebfaa00"],
Cell[240508, 4940, 4241, 117, 131, "Output",ExpressionUUID->"22c5f97f-aefb-4124-a89d-c2488f3a19d9"]
}, Open  ]],
Cell[CellGroupData[{
Cell[244786, 5062, 494, 10, 52, "Input",ExpressionUUID->"31f9d612-8f2f-44df-99c4-9099d295165b"],
Cell[245283, 5074, 8678, 182, 63, "Output",ExpressionUUID->"edee4f20-f70c-46c1-900b-b0dacce5a49f"],
Cell[253964, 5258, 117161, 2223, 773, "Output",ExpressionUUID->"27c27dc5-0217-47aa-a955-0b7764ddd232"]
}, Open  ]],
Cell[371140, 7484, 242, 4, 35, "Text",ExpressionUUID->"7de9f940-bf5f-412d-ad64-d0720df01df5"],
Cell[CellGroupData[{
Cell[371407, 7492, 501, 12, 30, "Input",ExpressionUUID->"20e0fb4d-e1b5-470e-a3b1-b5a3cb5305ed"],
Cell[371911, 7506, 1315, 29, 273, "Output",ExpressionUUID->"d4317739-9743-4e90-b125-65bec63e3def"]
}, Open  ]],
Cell[373241, 7538, 260, 5, 35, "Text",ExpressionUUID->"e7767944-4b85-40ce-878c-66fada96b03f"],
Cell[CellGroupData[{
Cell[373526, 7547, 265, 6, 30, "Input",ExpressionUUID->"b7087cb8-8b21-4407-b492-7b951ff6eaf6"],
Cell[373794, 7555, 227, 4, 34, "Output",ExpressionUUID->"7df52b91-3822-4824-90d0-a0b2a101d168"]
}, Open  ]],
Cell[374036, 7562, 189, 3, 35, "Text",ExpressionUUID->"6a4a1ce9-5f82-4166-92b7-91c8025531ce"],
Cell[CellGroupData[{
Cell[374250, 7569, 267, 6, 30, "Input",ExpressionUUID->"a87ad644-70be-483b-af73-4a01d7d04761"],
Cell[374520, 7577, 405, 9, 34, "Output",ExpressionUUID->"9113c70f-0cda-40b8-aca0-d9a193d21a5f"]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[374974, 7592, 159, 3, 67, "Section",ExpressionUUID->"f0153f13-e177-40a2-b070-bf3ebe94767f"],
Cell[375136, 7597, 391, 7, 35, "Text",ExpressionUUID->"fd029149-7f8d-4cc2-8f07-403a58b12305"],
Cell[CellGroupData[{
Cell[375552, 7608, 341, 9, 30, "Input",ExpressionUUID->"12411776-6d6d-4ebc-b2ae-39e598fc1574"],
Cell[375896, 7619, 17515, 364, 63, "Output",ExpressionUUID->"b440d24c-6a75-4f55-8118-bc518af54537"]
}, Open  ]],
Cell[CellGroupData[{
Cell[393448, 7988, 702, 16, 52, "Input",ExpressionUUID->"131466f4-367a-421f-96c3-6f465788af8a"],
Cell[394153, 8006, 10201, 214, 76, "Output",ExpressionUUID->"e90b8728-4596-4841-a9ef-22fa47faf960"],
Cell[404357, 8222, 168953, 3176, 733, "Output",ExpressionUUID->"1bd134be-4f2a-407d-bf8b-19b40344ce75"]
}, Open  ]],
Cell[CellGroupData[{
Cell[573347, 11403, 334, 7, 30, "Input",ExpressionUUID->"d78efb31-15e6-4ff2-93d1-27175c8268bb"],
Cell[573684, 11412, 20050, 414, 63, "Output",ExpressionUUID->"aaf5a950-ac9f-4959-bdaa-2b3a42703480"]
}, Open  ]],
Cell[CellGroupData[{
Cell[593771, 11831, 477, 11, 52, "Input",ExpressionUUID->"d355cb10-2138-4fd0-b4d6-0a7b3c121971"],
Cell[594251, 11844, 10325, 217, 76, "Output",ExpressionUUID->"a54d09e1-3d90-4799-bde8-0027ab2d927f"],
Cell[604579, 12063, 178701, 3357, 715, "Output",ExpressionUUID->"08c00bad-8bf0-4da4-8bab-1f615daafb09"]
}, Open  ]],
Cell[783295, 15423, 289, 6, 58, "Text",ExpressionUUID->"7f6d0ec0-d9dc-4094-a9c8-e32f17cd461d"],
Cell[CellGroupData[{
Cell[783609, 15433, 575, 16, 52, "Input",ExpressionUUID->"4df61233-3659-430d-9121-55de1f969495"],
Cell[784187, 15451, 14282, 290, 76, "Output",ExpressionUUID->"ed1579e0-f21b-402e-96d6-129dd94e5146"]
}, Open  ]],
Cell[798484, 15744, 200, 3, 35, "Text",ExpressionUUID->"e13d80c5-dd8e-40cc-9f3f-c351510f3b78"],
Cell[CellGroupData[{
Cell[798709, 15751, 275, 6, 30, "Input",ExpressionUUID->"33e24015-fd98-4590-9cc1-6d839dbee953"],
Cell[798987, 15759, 9400, 197, 76, "Output",ExpressionUUID->"caf06b3c-3c09-4a54-8405-2ac08c70fb25"]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[808436, 15962, 160, 3, 67, "Section",ExpressionUUID->"a129d358-2f6f-4120-9430-32c3a76464ee"],
Cell[808599, 15967, 449, 9, 35, "Text",ExpressionUUID->"e859ba48-427c-41c2-8c56-216470e67ab0"],
Cell[CellGroupData[{
Cell[809073, 15980, 261, 5, 30, "Input",ExpressionUUID->"993f3fd8-deb0-47bf-a7e8-efc32c8ce0dd"],
Cell[809337, 15987, 10468, 217, 76, "Output",ExpressionUUID->"3478edef-2901-4b28-8f81-f65feb4fedc3"]
}, Open  ]],
Cell[CellGroupData[{
Cell[819842, 16209, 535, 11, 52, "Input",ExpressionUUID->"97368210-3e3a-4dd3-81ef-b877faa45ae4"],
Cell[820380, 16222, 10602, 218, 63, "Output",ExpressionUUID->"ab8b5a04-0436-4e51-ab75-cb872ce0e006"],
Cell[830985, 16442, 179431, 3189, 793, "Output",ExpressionUUID->"6a8f07ec-c7c6-4da8-87c3-f6865f6a2c16"]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[1010465, 19637, 173, 3, 67, "Section",ExpressionUUID->"1011731f-75de-4029-b4cc-f5b8d8f6d0e8"],
Cell[1010641, 19642, 385, 8, 35, "Text",ExpressionUUID->"7d7f11c3-a96e-4568-ace7-3d42e9a1dc0e"],
Cell[CellGroupData[{
Cell[1011051, 19654, 407, 10, 30, "Input",ExpressionUUID->"845ca8c6-c71d-4aea-ba48-e82b6f82bd89"],
Cell[1011461, 19666, 12576, 270, 63, "Output",ExpressionUUID->"0befd90f-1a28-46bb-ab5f-0a1667d15f59"]
}, Open  ]],
Cell[CellGroupData[{
Cell[1024074, 19941, 619, 14, 52, "Input",ExpressionUUID->"a41c201a-441f-48a5-98d5-6450d9884554"],
Cell[1024696, 19957, 12256, 262, 63, "Output",ExpressionUUID->"4969c2de-6643-443c-ad87-b57bd97c3794"],
Cell[1036955, 20221, 100030, 1800, 665, "Output",ExpressionUUID->"478699cc-c5f9-452b-bb3b-68346d581871"]
}, Open  ]],
Cell[1137000, 22024, 345, 8, 58, "Text",ExpressionUUID->"43cf6372-d855-47a2-8f01-9370aa3518a9"]
}, Open  ]],
Cell[CellGroupData[{
Cell[1137382, 22037, 165, 3, 67, "Section",ExpressionUUID->"729ba810-3e13-45a4-8d2d-3c0d3db2a4d4"],
Cell[1137550, 22042, 390, 8, 35, "Text",ExpressionUUID->"880c6a9c-3e2e-4876-92c7-e31a6b7a5fb1"],
Cell[CellGroupData[{
Cell[1137965, 22054, 360, 8, 30, "Input",ExpressionUUID->"22b247c6-d6af-40f0-a6e0-bccaacfbfc8e"],
Cell[1138328, 22064, 10515, 220, 63, "Output",ExpressionUUID->"1eb507ae-2f08-477c-91bf-29341c5e57b8"]
}, Open  ]],
Cell[CellGroupData[{
Cell[1148880, 22289, 607, 14, 52, "Input",ExpressionUUID->"508a53ca-25d6-4e86-878b-08fb07de7389"],
Cell[1149490, 22305, 13995, 307, 63, "Output",ExpressionUUID->"76181a08-e8ae-4fb1-8cdc-3c2b7fda4dbf"],
Cell[1163488, 22614, 504, 11, 28, "Message",ExpressionUUID->"b41e1fa7-626a-438e-b20a-c8d9ea6b2f25"],
Cell[1163995, 22627, 503, 11, 28, "Message",ExpressionUUID->"21f005cc-b840-498f-bd74-471b8174f6a4"],
Cell[1164501, 22640, 216842, 4178, 721, "Output",ExpressionUUID->"3a2ab101-616f-4fa0-8d20-fd570ddef6b6"]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[1381392, 26824, 135, 3, 67, "Section",ExpressionUUID->"a1300449-668a-4e5f-be63-95eefee2318e"],
Cell[1381530, 26829, 235, 4, 35, "Text",ExpressionUUID->"c67ac79d-e629-435d-a2da-81991e4cfaf5"],
Cell[CellGroupData[{
Cell[1381790, 26837, 1226, 31, 115, "Input",ExpressionUUID->"48d88c5d-bf7e-4d34-911d-4bd51f317652"],
Cell[1383019, 26870, 23593, 480, 75, "Output",ExpressionUUID->"b7780b3e-7407-4a04-aaf5-6f923ff5fbbb"],
Cell[1406615, 27352, 3143, 71, 203, "Output",ExpressionUUID->"ad0f751c-2b68-414f-93df-fb5b39083ca7"]
}, Open  ]],
Cell[CellGroupData[{
Cell[1409795, 27428, 208, 4, 30, "Input",ExpressionUUID->"51bb711b-0fd4-4a1f-9202-3a771ef8a8a3"],
Cell[1410006, 27434, 57065, 1146, 283, "Output",ExpressionUUID->"f60eae9b-7dc9-4758-85fb-a6c78af8f990"]
}, Open  ]]
}, Open  ]]
}
]
*)

