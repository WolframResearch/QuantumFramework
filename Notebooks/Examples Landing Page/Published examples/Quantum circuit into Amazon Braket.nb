Notebook[{

Cell[CellGroupData[{
Cell["Quantum circuit into Amazon Braket", "Title",
 Deletable->False,
 CellEventActions->{Inherited, {"KeyDown", "\t"} :> Replace[SelectionMove[
       SelectedNotebook[], After, Cell]; NotebookFind[
       SelectedNotebook[], "TabNext", Next, CellTags, AutoScroll -> True, 
       WrapAround -> True], Blank[NotebookSelection] :> SelectionMove[
       SelectedNotebook[], All, CellContents, AutoScroll -> True]], 
   PassEventsDown -> False, PassEventsUp -> False},
 CellChangeTimes->{3.893795570389673*^9},
 CellTags->{"Name", "TemplateCell", "Title", "TabNext"},
 CellID->924394382,ExpressionUUID->"ed2170bb-0c1c-4f41-bd21-6927c2a6a77a"],

Cell["Interact with Amazon Braket through AWS service connection", "Text",
 Deletable->False,
 CellEventActions->{Inherited, {"KeyDown", "\t"} :> Replace[SelectionMove[
       SelectedNotebook[], After, Cell]; NotebookFind[
       SelectedNotebook[], "TabNext", Next, CellTags, AutoScroll -> True, 
       WrapAround -> True], Blank[NotebookSelection] :> SelectionMove[
       SelectedNotebook[], All, CellContents, AutoScroll -> True]], 
   PassEventsDown -> False, PassEventsUp -> False},
 CellChangeTimes->{{3.893979608805869*^9, 3.893979658016221*^9}},
 CellTags->{"DefaultContent", "Description", "TabNext", "TemplateCell"},
 CellID->563660414,ExpressionUUID->"b6653112-342d-4f9e-9274-f59de3da01a9"],

Cell[CellGroupData[{

Cell[TextData[{
 "Example Content",
 Cell[BoxData[
  PaneSelectorBox[{True->
   TemplateBox[{"Examples", 
     Cell[
      BoxData[
       FrameBox[
        Cell[
         TextData[{
          "Demonstrate the function\[CloseCurlyQuote]s usage, starting with \
the most basic use case and describing each example in a preceding text cell.\
\n\nWithin a group, individual examples can be delimited by inserting page \
breaks between them (either using ", 
           Cell[
            BoxData[
             StyleBox[
              TemplateBox[{
                StyleBox[
                "\"[Right-click]\"", FontFamily -> "Source Sans Pro", 
                 FontWeight -> "SemiBold", FontColor -> GrayLevel[0.28627], 
                 FontSize -> 14, StripOnInput -> False], 
                StyleBox[
                "\" \[FilledRightTriangle] \"", FontFamily -> 
                 "Source Sans Pro", FontSize -> 13.86, FontColor -> 
                 GrayLevel[0.5], StripOnInput -> False], 
                StyleBox[
                "\"Insert Page Break\"", FontFamily -> "Source Sans Pro", 
                 FontWeight -> "SemiBold", FontColor -> GrayLevel[0.28627], 
                 FontSize -> 14, StripOnInput -> False]}, "RowDefault"], 
              ShowStringCharacters -> False]]], 
           " between cells or through the menu using ", 
           Cell[
            BoxData[
             StyleBox[
              TemplateBox[{
                StyleBox[
                "\"Insert\"", FontFamily -> "Source Sans Pro", FontWeight -> 
                 "SemiBold", FontColor -> GrayLevel[0.28627], FontSize -> 14, 
                 StripOnInput -> False], 
                StyleBox[
                "\" \[FilledRightTriangle] \"", FontFamily -> 
                 "Source Sans Pro", FontSize -> 13.86, FontColor -> 
                 GrayLevel[0.5], StripOnInput -> False], 
                StyleBox[
                "\"Page Break\"", FontFamily -> "Source Sans Pro", FontWeight -> 
                 "SemiBold", FontColor -> GrayLevel[0.28627], FontSize -> 14, 
                 StripOnInput -> False]}, "RowDefault"], ShowStringCharacters -> 
              False]]], 
           ").\n\nExamples should be grouped into Subsection and \
Subsubsection cells similarly to existing documentation pages. Here are some \
typical Subsection names and the types of examples they normally contain:\n  \
", 
           Cell[
            BoxData[
             StyleBox[
              TemplateBox[{
                StyleBox[
                "\"\[FilledSmallSquare] \"", FontColor -> 
                 RGBColor[0.8, 0.043, 0.008], StripOnInput -> False], 
                StyleBox[
                "\"Basic Examples: \"", FontFamily -> "Source Sans Pro", 
                 FontWeight -> "SemiBold", FontSize -> 14, StripOnInput -> 
                 False]}, "RowDefault"], ShowStringCharacters -> False]]], 
           "most basic function usage\n  ", 
           Cell[
            BoxData[
             StyleBox[
              TemplateBox[{
                StyleBox[
                "\"\[FilledSmallSquare] \"", FontColor -> 
                 RGBColor[0.8, 0.043, 0.008], StripOnInput -> False], 
                StyleBox[
                "\"Scope: \"", FontFamily -> "Source Sans Pro", FontWeight -> 
                 "SemiBold", FontSize -> 14, StripOnInput -> False]}, 
               "RowDefault"], ShowStringCharacters -> False]]], 
           "input and display conventions, standard computational attributes \
(e.g. threading over lists)\n  ", 
           Cell[
            BoxData[
             StyleBox[
              TemplateBox[{
                StyleBox[
                "\"\[FilledSmallSquare] \"", FontColor -> 
                 RGBColor[0.8, 0.043, 0.008], StripOnInput -> False], 
                StyleBox[
                "\"Options: \"", FontFamily -> "Source Sans Pro", FontWeight -> 
                 "SemiBold", FontSize -> 14, StripOnInput -> False]}, 
               "RowDefault"], ShowStringCharacters -> False]]], 
           "available options and parameters for the function\n  ", 
           Cell[
            BoxData[
             StyleBox[
              TemplateBox[{
                StyleBox[
                "\"\[FilledSmallSquare] \"", FontColor -> 
                 RGBColor[0.8, 0.043, 0.008], StripOnInput -> False], 
                StyleBox[
                "\"Applications: \"", FontFamily -> "Source Sans Pro", 
                 FontWeight -> "SemiBold", FontSize -> 14, StripOnInput -> 
                 False]}, "RowDefault"], ShowStringCharacters -> False]]], 
           "standard industry or academic applications\n  ", 
           Cell[
            BoxData[
             StyleBox[
              TemplateBox[{
                StyleBox[
                "\"\[FilledSmallSquare] \"", FontColor -> 
                 RGBColor[0.8, 0.043, 0.008], StripOnInput -> False], 
                StyleBox[
                "\"Properties and Relations: \"", FontFamily -> 
                 "Source Sans Pro", FontWeight -> "SemiBold", FontSize -> 14, 
                 StripOnInput -> False]}, "RowDefault"], ShowStringCharacters -> 
              False]]], "how the function relates to other functions\n  ", 
           Cell[
            BoxData[
             StyleBox[
              TemplateBox[{
                StyleBox[
                "\"\[FilledSmallSquare] \"", FontColor -> 
                 RGBColor[0.8, 0.043, 0.008], StripOnInput -> False], 
                StyleBox[
                "\"Possible Issues: \"", FontFamily -> "Source Sans Pro", 
                 FontWeight -> "SemiBold", FontSize -> 14, StripOnInput -> 
                 False]}, "RowDefault"], ShowStringCharacters -> False]]], 
           "limitations or unexpected behavior a user might experience\n  ", 
           Cell[
            BoxData[
             StyleBox[
              TemplateBox[{
                StyleBox[
                "\"\[FilledSmallSquare] \"", FontColor -> 
                 RGBColor[0.8, 0.043, 0.008], StripOnInput -> False], 
                StyleBox[
                "\"Neat Examples: \"", FontFamily -> "Source Sans Pro", 
                 FontWeight -> "SemiBold", FontSize -> 14, StripOnInput -> 
                 False]}, "RowDefault"], ShowStringCharacters -> False]]], 
           "particularly interesting, unconventional, or otherwise unique \
usage"}], "MoreInfoText"], Background -> GrayLevel[0.95], FrameMargins -> 20, 
        FrameStyle -> GrayLevel[0.9], RoundingRadius -> 5, ImageSize -> {
          Scaled[0.65], Automatic}]], "MoreInfoText", Deletable -> True, 
      CellTags -> {"SectionMoreInfoExamples"}, 
      CellMargins -> {{66, 66}, {15, 15}}]},
    "MoreInfoOpenerButtonTemplate"]}, Dynamic[
    CurrentValue[
     EvaluationNotebook[], {TaggingRules, "ResourceCreateNotebook"}]],
   ImageSize->Automatic]],ExpressionUUID->
  "5646757f-7603-4563-b4aa-4fc5aa1d85d8"]
}], "Section",
 Editable->False,
 Deletable->False,
 TaggingRules->{"TemplateGroupName" -> "Examples"},
 CellTags->{"Example Content", "Examples", "TemplateCellGroup"},
 CellID->689775652,ExpressionUUID->"cffde6fd-1502-471e-bff9-06c5c3b1aa83"],

Cell[TextData[{
 "From a Wolfram notebook, one can interact with Amazon Braket using AWS \
service connection, sending quantum tasks and getting results. Note since \
some of Amazon Braket functionalities are Python-based, you need to ",
 ButtonBox["configure your system to evaluate external Python code",
  BaseStyle->"Hyperlink",
  ButtonData->{
    URL["https://reference.wolfram.com/language/workflow/\
ConfigurePythonForExternalEvaluate.html"], None},
  ButtonNote->
   "https://reference.wolfram.com/language/workflow/\
ConfigurePythonForExternalEvaluate.html"],
 ", in order to use Python-related functionalities of Wolfram quantum \
framework."
}], "Text",
 CellChangeTimes->{{3.8939787201351213`*^9, 3.893978729315093*^9}, {
  3.893979668289729*^9, 3.8939797360647717`*^9}},
 CellTags->"DefaultContent",
 CellID->351723045,ExpressionUUID->"665bd803-bd54-4b0f-952e-d122b5abc730"],

Cell["Install and load the QuantumFramework paclet:", "CodeText",
 TaggingRules->{},
 CellChangeTimes->{{3.8896301375389147`*^9, 3.889630152807868*^9}, {
  3.890230125254396*^9, 3.890230129164053*^9}},
 CellID->1052376881,ExpressionUUID->"1ee40f6b-e92b-43ce-9695-02225e5a2b92"],

Cell[BoxData[{
 RowBox[{"PacletInstall", "[", "\"\<Wolfram/QuantumFramework\>\"", 
  "]"}], "\[IndentingNewLine]", 
 RowBox[{"Needs", "[", "\"\<Wolfram`QuantumFramework`\>\"", "]"}]}], "Input",
 TaggingRules->{},
 CellChangeTimes->{{3.8896301316068687`*^9, 3.889630135374712*^9}},
 CellID->1395467824,ExpressionUUID->"47700422-00c3-4ccf-a157-0ee5c901a292"],

Cell["Make sure that qiskit and amazon-braket-sdk are installed", "CodeText",
 CellChangeTimes->{{3.893978604022009*^9, 3.8939786306598473`*^9}},
 CellID->181868936,ExpressionUUID->"f761a82d-68f7-4882-8e19-1b1157bba50f"],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{
  RowBox[{"ResourceFunction", "[", "\"\<PythonPackageInstalledQ\>\"", "]"}], 
  "[", "\"\<qiskit\>\"", "]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"ResourceFunction", "[", "\"\<PythonPackageInstalledQ\>\"", "]"}], 
  "[", "\"\<amazon-braket-sdk\>\"", "]"}]}], "Input",
 CellChangeTimes->{{3.893978574123622*^9, 3.893978597195402*^9}},
 CellLabel->"In[7]:=",
 CellID->1760658564,ExpressionUUID->"50f234bd-9909-4099-a8d5-416a91acdb47"],

Cell[BoxData["True"], "Output",
 CellChangeTimes->{{3.8939785827626343`*^9, 3.8939786004621964`*^9}},
 CellLabel->"Out[7]=",
 CellID->1004806892,ExpressionUUID->"12b3c95c-a077-4c32-abc9-3496f0345d7a"],

Cell[BoxData["True"], "Output",
 CellChangeTimes->{{3.8939785827626343`*^9, 3.893978601511572*^9}},
 CellLabel->"Out[8]=",
 CellID->2125517483,ExpressionUUID->"833940d1-fe1e-42f4-87b9-35f6ff06ee83"]
}, Open  ]],

Cell["\<\
If needed, use ResourceFunction[\"PythonPackageInstall\"][...] to install \
packages.\
\>", "Text",
 CellChangeTimes->{{3.893978640304494*^9, 3.893978688596044*^9}},
 CellID->1239621226,ExpressionUUID->"fcc5b7cc-3909-43ff-864a-ac11e5833c90"],

Cell["Create a quantum circuit object:", "CodeText",
 CellChangeTimes->{{3.8939787931678658`*^9, 3.893978797704018*^9}},
 CellID->1171894701,ExpressionUUID->"f2d1d082-6d4e-4e6a-85d5-10ffae8de7e9"],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{
  RowBox[{"qc", "=", 
   RowBox[{"QuantumCircuitOperator", "[", 
    RowBox[{"{", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{"\"\<Grover\>\"", ",", 
        RowBox[{
         RowBox[{"!", "a"}], "||", "b"}]}], "}"}], ",", 
      RowBox[{"{", "1", "}"}], ",", 
      RowBox[{"{", "2", "}"}], ",", 
      RowBox[{"{", "3", "}"}]}], "}"}], "]"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"qc", "[", "\"\<Flatten\>\"", "]"}], "[", "\"\<Diagram\>\"", 
  "]"}]}], "Input",
 CellChangeTimes->{{3.893978799612417*^9, 3.8939788909473248`*^9}, {
  3.893978923017273*^9, 3.893978925867691*^9}, {3.89397895879246*^9, 
  3.893978962817786*^9}},
 CellLabel->"In[26]:=",
 CellID->763734384,ExpressionUUID->"2b95a0c0-8c07-4006-8d2a-fcae31ecc55e"],

Cell[BoxData[
 GraphicsBox[{
   {RGBColor[0.537254, 0.537254, 0.537254], Opacity[0.3], 
    LineBox[{{0.375, -3}, {0.625, -3}}], LineBox[{{0.375, -2}, {1.625, -2}}], 
    LineBox[{{0.375, -1}, {1.625, -1}}], LineBox[{{1.375, -3}, {1.625, -3}}], 
    LineBox[{{2.375, -1}, {2.625, -1}}], LineBox[{{2.375, -2}, {2.625, -2}}], 
    LineBox[{{3.375, -1}, {3.625, -1}}], LineBox[{{3.375, -2}, {3.625, -2}}], 
    LineBox[{{4.375, -1}, {4.625, -1}}], LineBox[{{4.375, -2}, {4.625, -2}}], 
    LineBox[{{2.375, -3}, {4.625, -3}}], LineBox[{{5.375, -1}, {5.625, -1}}], 
    LineBox[{{5.375, -2}, {5.625, -2}}], LineBox[{{6.375, -1}, {6.625, -1}}], 
    LineBox[{{6.375, -2}, {6.625, -2}}], LineBox[{{7.375, -1}, {7.625, -1}}], 
    LineBox[{{7.375, -2}, {8.625, -2}}], LineBox[{{5.375, -3}, {9.625, -3}}], 
    LineBox[{{8.375, -1}, {10.625, -1}}], 
    LineBox[{{9.375, -2}, {10.625, -2}}], 
    LineBox[{{10.375, -3}, {10.625, -3}}]}, {
    {RGBColor[0.537254, 0.537254, 0.537254], Opacity[0.3], 
     LineBox[{{0.375, -0.0234375}, {10.625, -0.0234375}}], 
     LineBox[{{0.375, 0.0234375}, {10.625, 0.0234375}}]}, InsetBox[
     StyleBox["\<\"c\"\>",
      StripOnInput->False,
      FontSize->10,
      FontSlant->Italic,
      FontColor->RGBColor[0.537254, 0.537254, 0.537254],
      Background->GrayLevel[0, 0]], {0.28125, 0}, NCache[
     ImageScaled[{1, Rational[1, 2]}], ImageScaled[{1, 0.5}]]]}, {
    {RGBColor[0.537254, 0.537254, 0.537254], Opacity[0.3], 
     LineBox[{{0.625, -3.}, {0.85, -3.}}], 
     LineBox[{{1.15, -3.}, {1.375, -3.}}], 
     {EdgeForm[RGBColor[0.880722, 0.611041, 0.142051]], FaceForm[{RGBColor[
      0.880722, 0.611041, 0.142051], Opacity[0.15]}], 
      DiskBox[{1., -3.}, 0.15000000000000002], 
      {RGBColor[0.880722, 0.611041, 0.142051], Opacity[1], 
       LineBox[{{0.85, -3.}, {1.15, -3.}}], 
       LineBox[{{1., -3.15}, {1., -2.85}}]}}}, {{
      {RGBColor[0.537254, 0.537254, 0.537254], Opacity[0.3], 
       LineBox[{{1.625, -3.}, {1.85, -3.}}], 
       LineBox[{{2.15, -3.}, {2.375, -3.}}], 
       {EdgeForm[RGBColor[0.880722, 0.611041, 0.142051]], FaceForm[{RGBColor[
        0.880722, 0.611041, 0.142051], Opacity[0.15]}], 
        DiskBox[{2., -3.}, 0.15000000000000002], 
        {RGBColor[0.880722, 0.611041, 0.142051], Opacity[1], 
         LineBox[{{1.85, -3.}, {2.15, -3.}}], 
         LineBox[{{2., -3.15}, {2., -2.85}}]}}}, {
       {RGBColor[0.880722, 0.611041, 0.142051], 
        LineBox[{{2., -1.09375}, {2., -1.90625}}]}, 
       {RGBColor[0.880722, 0.611041, 0.142051], 
        LineBox[{{2., -2.09375}, {2., -2.85}}]}}}, 
     {RGBColor[0.537254, 0.537254, 0.537254], Opacity[0.3], 
      LineBox[{{1.625, -1.}, {1.90625, -1.}}], 
      LineBox[{{2.09375, -1.}, {2.375, -1.}}], 
      {EdgeForm[RGBColor[0.880722, 0.611041, 0.142051]], FaceForm[{RGBColor[
       0.880722, 0.611041, 0.142051], Opacity[0.8]}], 
       DiskBox[{2., -1.}, 0.09375]}}, 
     {RGBColor[0.537254, 0.537254, 0.537254], Opacity[0.3], 
      LineBox[{{1.625, -2.}, {1.90625, -2.}}], 
      LineBox[{{2.09375, -2.}, {2.375, -2.}}], 
      {EdgeForm[RGBColor[0.880722, 0.611041, 0.142051]], FaceForm[{GrayLevel[
       0], Opacity[0]}], DiskBox[{2., -2.}, 0.09375]}}}, 
    {EdgeForm[RGBColor[0.368417, 0.506779, 0.709798]], FaceForm[{RGBColor[
     0.368417, 0.506779, 0.709798], Opacity[0.15]}], 
     RectangleBox[{2.625, -1.375}, {3.375, -0.625},
      RoundingRadius->0.1], GeometricTransformationBox[InsetBox[
       StyleBox["\<\"H\"\>",
        StripOnInput->False,
        FontFamily->"Roboto",
        FontSize->11,
        FontColor->GrayLevel[0],
        Background->GrayLevel[0, 0]], {3., -1.}], {{{1, 0}, {0, 1}}, 
       Center}]}, 
    {EdgeForm[RGBColor[0.368417, 0.506779, 0.709798]], FaceForm[{RGBColor[
     0.368417, 0.506779, 0.709798], Opacity[0.15]}], 
     RectangleBox[{2.625, -2.375}, {3.375, -1.625},
      RoundingRadius->0.1], GeometricTransformationBox[InsetBox[
       StyleBox["\<\"H\"\>",
        StripOnInput->False,
        FontFamily->"Roboto",
        FontSize->11,
        FontColor->GrayLevel[0],
        Background->GrayLevel[0, 0]], {3., -2.}], {{{1, 0}, {0, 1}}, 
       Center}]}, 
    {EdgeForm[RGBColor[0.880722, 0.611041, 0.142051]], FaceForm[{RGBColor[
     0.880722, 0.611041, 0.142051], Opacity[0.15]}], 
     RectangleBox[{3.625, -1.375}, {4.375, -0.625},
      RoundingRadius->0.1], GeometricTransformationBox[InsetBox[
       StyleBox["\<\"X\"\>",
        StripOnInput->False,
        FontFamily->"Roboto",
        FontSize->11,
        FontColor->GrayLevel[0],
        Background->GrayLevel[0, 0]], {4., -1.}], {{{1, 0}, {0, 1}}, 
       Center}]}, 
    {EdgeForm[RGBColor[0.880722, 0.611041, 0.142051]], FaceForm[{RGBColor[
     0.880722, 0.611041, 0.142051], Opacity[0.15]}], 
     RectangleBox[{3.625, -2.375}, {4.375, -1.625},
      RoundingRadius->0.1], GeometricTransformationBox[InsetBox[
       StyleBox["\<\"X\"\>",
        StripOnInput->False,
        FontFamily->"Roboto",
        FontSize->11,
        FontColor->GrayLevel[0],
        Background->GrayLevel[0, 0]], {4., -2.}], {{{1, 0}, {0, 1}}, 
       Center}]}, {{
      {RGBColor[0.537254, 0.537254, 0.537254], Opacity[0.3], 
       LineBox[{{4.625, -3.}, {4.85, -3.}}], 
       LineBox[{{5.15, -3.}, {5.375, -3.}}], 
       {EdgeForm[RGBColor[0.880722, 0.611041, 0.142051]], FaceForm[{RGBColor[
        0.880722, 0.611041, 0.142051], Opacity[0.15]}], 
        DiskBox[{5., -3.}, 0.15000000000000002], 
        {RGBColor[0.880722, 0.611041, 0.142051], Opacity[1], 
         LineBox[{{4.85, -3.}, {5.15, -3.}}], 
         LineBox[{{5., -3.15}, {5., -2.85}}]}}}, {
       {RGBColor[0.880722, 0.611041, 0.142051], 
        LineBox[{{5., -1.09375}, {5., -1.90625}}]}, 
       {RGBColor[0.880722, 0.611041, 0.142051], 
        LineBox[{{5., -2.09375}, {5., -2.85}}]}}}, {
      {RGBColor[0.537254, 0.537254, 0.537254], Opacity[0.3], 
       LineBox[{{4.625, -1.}, {4.90625, -1.}}], 
       LineBox[{{5.09375, -1.}, {5.375, -1.}}], 
       {EdgeForm[RGBColor[0.880722, 0.611041, 0.142051]], FaceForm[{RGBColor[
        0.880722, 0.611041, 0.142051], Opacity[0.8]}], 
        DiskBox[{5., -1.}, 0.09375]}}, 
      {RGBColor[0.537254, 0.537254, 0.537254], Opacity[0.3], 
       LineBox[{{4.625, -2.}, {4.90625, -2.}}], 
       LineBox[{{5.09375, -2.}, {5.375, -2.}}], 
       {EdgeForm[RGBColor[0.880722, 0.611041, 0.142051]], FaceForm[{RGBColor[
        0.880722, 0.611041, 0.142051], Opacity[0.8]}], 
        DiskBox[{5., -2.}, 0.09375]}}}, {}}, 
    {EdgeForm[RGBColor[0.880722, 0.611041, 0.142051]], FaceForm[{RGBColor[
     0.880722, 0.611041, 0.142051], Opacity[0.15]}], 
     RectangleBox[{5.625, -1.375}, {6.375, -0.625},
      RoundingRadius->0.1], GeometricTransformationBox[InsetBox[
       StyleBox["\<\"X\"\>",
        StripOnInput->False,
        FontFamily->"Roboto",
        FontSize->11,
        FontColor->GrayLevel[0],
        Background->GrayLevel[0, 0]], {6., -1.}], {{{1, 0}, {0, 1}}, 
       Center}]}, 
    {EdgeForm[RGBColor[0.880722, 0.611041, 0.142051]], FaceForm[{RGBColor[
     0.880722, 0.611041, 0.142051], Opacity[0.15]}], 
     RectangleBox[{5.625, -2.375}, {6.375, -1.625},
      RoundingRadius->0.1], GeometricTransformationBox[InsetBox[
       StyleBox["\<\"X\"\>",
        StripOnInput->False,
        FontFamily->"Roboto",
        FontSize->11,
        FontColor->GrayLevel[0],
        Background->GrayLevel[0, 0]], {6., -2.}], {{{1, 0}, {0, 1}}, 
       Center}]}, 
    {EdgeForm[RGBColor[0.368417, 0.506779, 0.709798]], FaceForm[{RGBColor[
     0.368417, 0.506779, 0.709798], Opacity[0.15]}], 
     RectangleBox[{6.625, -1.375}, {7.375, -0.625},
      RoundingRadius->0.1], GeometricTransformationBox[InsetBox[
       StyleBox["\<\"H\"\>",
        StripOnInput->False,
        FontFamily->"Roboto",
        FontSize->11,
        FontColor->GrayLevel[0],
        Background->GrayLevel[0, 0]], {7., -1.}], {{{1, 0}, {0, 1}}, 
       Center}]}, 
    {EdgeForm[RGBColor[0.368417, 0.506779, 0.709798]], FaceForm[{RGBColor[
     0.368417, 0.506779, 0.709798], Opacity[0.15]}], 
     RectangleBox[{6.625, -2.375}, {7.375, -1.625},
      RoundingRadius->0.1], GeometricTransformationBox[InsetBox[
       StyleBox["\<\"H\"\>",
        StripOnInput->False,
        FontFamily->"Roboto",
        FontSize->11,
        FontColor->GrayLevel[0],
        Background->GrayLevel[0, 0]], {7., -2.}], {{{1, 0}, {0, 1}}, 
       Center}]}, 
    {EdgeForm[RGBColor[0.7367, 0.358, 0.503]], FaceForm[{RGBColor[
     0.7367, 0.358, 0.503], Opacity[0.15]}], 
     RectangleBox[{7.625, -1.375}, {8.375, -0.625},
      RoundingRadius->0.1], 
     {Thickness[Small], 
      LineBox[{{8.151690686445303, -1.0772902651951612`}, {
       8.212366961023424, -1.0332063712732258`}}], 
      LineBox[{{8.116904337848512, -1.0409065970372444`}, {
       8.163666072987917, -0.9822692358521422}}], 
      LineBox[{{8.073692193435111, -1.015088542646603}, {
       8.103169070809155, -0.9461239597052442}}], 
      LineBox[{{8.02516873734081, -1.0016969196685122`}, {
       8.035236232277134, -0.9273756875359171}}], 
      LineBox[{{7.9748312626591895`, -1.0016969196685122`}, {
       7.964763767722865, -0.9273756875359171}}], 
      LineBox[{{7.926307806564889, -1.015088542646603}, {
       7.896830929190845, -0.9461239597052442}}], 
      LineBox[{{7.883095662151487, -1.0409065970372444`}, {
       7.836333927012083, -0.9822692358521422}}], 
      LineBox[{{7.848309313554697, -1.0772902651951612`}, {
       7.787633038976576, -1.0332063712732258`}}]}, 
     {Thickness[Medium], 
      LineBox[{{8., -1.1875}, {8.17024643740233, -0.8533725534293621}}], 
      {RGBColor[0.537254, 0.537254, 0.537254], 
       LineBox[{{8., -0.625}, {8., -0.2109375}}], 
       {EdgeForm[{RGBColor[0.537254, 0.537254, 0.537254], Opacity[0.3]}], 
        FaceForm[{RGBColor[0.537254, 0.537254, 0.537254], Opacity[0.8]}], 
        PolygonBox[{{7.90625, -0.2109375}, {8.09375, -0.2109375}, {
         8., -0.0234375}}]}}}}, 
    {EdgeForm[RGBColor[0.7367, 0.358, 0.503]], FaceForm[{RGBColor[
     0.7367, 0.358, 0.503], Opacity[0.15]}], 
     RectangleBox[{8.625, -2.375}, {9.375, -1.625},
      RoundingRadius->0.1], 
     {Thickness[Small], 
      LineBox[{{9.151690686445303, -2.0772902651951615`}, {
       9.212366961023424, -2.033206371273226}}], 
      LineBox[{{9.116904337848512, -2.040906597037244}, {
       9.163666072987917, -1.9822692358521423`}}], 
      LineBox[{{9.073692193435111, -2.015088542646603}, {
       9.103169070809155, -1.9461239597052442`}}], 
      LineBox[{{9.02516873734081, -2.0016969196685124`}, {
       9.035236232277134, -1.9273756875359171`}}], 
      LineBox[{{8.97483126265919, -2.0016969196685124`}, {
       8.964763767722866, -1.9273756875359171`}}], 
      LineBox[{{8.926307806564889, -2.015088542646603}, {
       8.896830929190845, -1.9461239597052442`}}], 
      LineBox[{{8.883095662151488, -2.040906597037244}, {
       8.836333927012083, -1.982269235852142}}], 
      LineBox[{{8.848309313554697, -2.0772902651951615`}, {
       8.787633038976576, -2.033206371273226}}]}, 
     {Thickness[Medium], 
      LineBox[{{9., -2.1875}, {9.17024643740233, -1.8533725534293621`}}], 
      {RGBColor[0.537254, 0.537254, 0.537254], 
       LineBox[{{9., -1.625}, {9., -0.2109375}}], 
       {EdgeForm[{RGBColor[0.537254, 0.537254, 0.537254], Opacity[0.3]}], 
        FaceForm[{RGBColor[0.537254, 0.537254, 0.537254], Opacity[0.8]}], 
        PolygonBox[{{8.90625, -0.2109375}, {9.09375, -0.2109375}, {
         9., -0.0234375}}]}}}}, 
    {EdgeForm[RGBColor[0.7367, 0.358, 0.503]], FaceForm[{RGBColor[
     0.7367, 0.358, 0.503], Opacity[0.15]}], 
     RectangleBox[{9.625, -3.375}, {10.375, -2.625},
      RoundingRadius->0.1], 
     {Thickness[Small], 
      LineBox[{{10.151690686445303`, -3.0772902651951615`}, {
       10.212366961023424`, -3.033206371273226}}], 
      LineBox[{{10.116904337848512`, -3.040906597037244}, {
       10.163666072987917`, -2.9822692358521423`}}], 
      LineBox[{{10.073692193435111`, -3.015088542646603}, {
       10.103169070809155`, -2.946123959705244}}], 
      LineBox[{{10.02516873734081, -3.0016969196685124`}, {
       10.035236232277134`, -2.927375687535917}}], 
      LineBox[{{9.97483126265919, -3.0016969196685124`}, {
       9.964763767722866, -2.927375687535917}}], 
      LineBox[{{9.926307806564889, -3.015088542646603}, {
       9.896830929190845, -2.946123959705244}}], 
      LineBox[{{9.883095662151488, -3.040906597037244}, {
       9.836333927012083, -2.9822692358521423`}}], 
      LineBox[{{9.848309313554697, -3.0772902651951615`}, {
       9.787633038976576, -3.033206371273226}}]}, 
     {Thickness[Medium], 
      LineBox[{{10., -3.1875}, {10.17024643740233, -2.853372553429362}}], 
      {RGBColor[0.537254, 0.537254, 0.537254], 
       LineBox[{{10., -2.625}, {10., -0.2109375}}], 
       {EdgeForm[{RGBColor[0.537254, 0.537254, 0.537254], Opacity[0.3]}], 
        FaceForm[{RGBColor[0.537254, 0.537254, 0.537254], Opacity[0.8]}], 
        PolygonBox[{{9.90625, -0.2109375}, {10.09375, -0.2109375}, {
         10., -0.0234375}}]}}}}}, {InsetBox[
     StyleBox["1",
      StripOnInput->False,
      FontSize->10,
      FontSlant->Italic,
      FontColor->RGBColor[0.537254, 0.537254, 0.537254],
      Background->GrayLevel[0, 0]], {0.28125, -1}, NCache[
     ImageScaled[{1, Rational[1, 2]}], ImageScaled[{1, 0.5}]]], InsetBox[
     StyleBox["2",
      StripOnInput->False,
      FontSize->10,
      FontSlant->Italic,
      FontColor->RGBColor[0.537254, 0.537254, 0.537254],
      Background->GrayLevel[0, 0]], {0.28125, -2}, NCache[
     ImageScaled[{1, Rational[1, 2]}], ImageScaled[{1, 0.5}]]], InsetBox[
     StyleBox["3",
      StripOnInput->False,
      FontSize->10,
      FontSlant->Italic,
      FontColor->RGBColor[0.537254, 0.537254, 0.537254],
      Background->GrayLevel[0, 0]], {0.28125, -3}, NCache[
     ImageScaled[{1, Rational[1, 2]}], ImageScaled[{1, 0.5}]]]}},
  ImageSize->Medium]], "Output",
 CellChangeTimes->{{3.893978820915391*^9, 3.893978891725953*^9}, {
   3.893978923630353*^9, 3.893978926489109*^9}, 3.89397896357568*^9},
 CellLabel->"Out[27]=",
 CellID->253828664,ExpressionUUID->"4ba1c67b-7807-43e9-9a48-da72f46f97fe"]
}, Open  ]],

Cell["Get the measurement probabilities:", "CodeText",
 CellChangeTimes->{{3.893979746462545*^9, 3.8939797554883432`*^9}},
 CellID->684818320,ExpressionUUID->"fedf7e69-85bc-4669-a146-3579440ded7c"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"meas", "=", 
  RowBox[{
   RowBox[{"qc", "[", "]"}], "[", "\"\<Probabilities\>\"", "]"}]}]], "Input",
 CellChangeTimes->{{3.8939795471699057`*^9, 3.8939795489025383`*^9}},
 CellLabel->"In[47]:=",
 CellID->767390469,ExpressionUUID->"8dd8d76e-86da-4fc6-8781-106447d10fee"],

Cell[BoxData[
 RowBox[{"\[LeftAssociation]", 
  RowBox[{
   RowBox[{
    InterpretationBox[
     StyleBox[
      TemplateBox[{
        RowBox[{"0", "\[InvisibleSpace]", "0", "\[InvisibleSpace]", "0"}]},
       "Ket"],
      FontWeight->"Plain"],
     Wolfram`QuantumFramework`QuditName[{0, 0, 0}, "Dual" -> False]], 
    "\[Rule]", 
    FractionBox["1", "16"]}], ",", 
   RowBox[{
    InterpretationBox[
     StyleBox[
      TemplateBox[{
        RowBox[{"0", "\[InvisibleSpace]", "0", "\[InvisibleSpace]", "1"}]},
       "Ket"],
      FontWeight->"Plain"],
     Wolfram`QuantumFramework`QuditName[{0, 0, 1}, "Dual" -> False]], 
    "\[Rule]", 
    FractionBox["9", "16"]}], ",", 
   RowBox[{
    InterpretationBox[
     StyleBox[
      TemplateBox[{
        RowBox[{"0", "\[InvisibleSpace]", "1", "\[InvisibleSpace]", "0"}]},
       "Ket"],
      FontWeight->"Plain"],
     Wolfram`QuantumFramework`QuditName[{0, 1, 0}, "Dual" -> False]], 
    "\[Rule]", 
    FractionBox["1", "16"]}], ",", 
   RowBox[{
    InterpretationBox[
     StyleBox[
      TemplateBox[{
        RowBox[{"0", "\[InvisibleSpace]", "1", "\[InvisibleSpace]", "1"}]},
       "Ket"],
      FontWeight->"Plain"],
     Wolfram`QuantumFramework`QuditName[{0, 1, 1}, "Dual" -> False]], 
    "\[Rule]", 
    FractionBox["1", "16"]}], ",", 
   RowBox[{
    InterpretationBox[
     StyleBox[
      TemplateBox[{
        RowBox[{"1", "\[InvisibleSpace]", "0", "\[InvisibleSpace]", "0"}]},
       "Ket"],
      FontWeight->"Plain"],
     Wolfram`QuantumFramework`QuditName[{1, 0, 0}, "Dual" -> False]], 
    "\[Rule]", 
    FractionBox["1", "16"]}], ",", 
   RowBox[{
    InterpretationBox[
     StyleBox[
      TemplateBox[{
        RowBox[{"1", "\[InvisibleSpace]", "0", "\[InvisibleSpace]", "1"}]},
       "Ket"],
      FontWeight->"Plain"],
     Wolfram`QuantumFramework`QuditName[{1, 0, 1}, "Dual" -> False]], 
    "\[Rule]", 
    FractionBox["1", "16"]}], ",", 
   RowBox[{
    InterpretationBox[
     StyleBox[
      TemplateBox[{
        RowBox[{"1", "\[InvisibleSpace]", "1", "\[InvisibleSpace]", "0"}]},
       "Ket"],
      FontWeight->"Plain"],
     Wolfram`QuantumFramework`QuditName[{1, 1, 0}, "Dual" -> False]], 
    "\[Rule]", 
    FractionBox["1", "16"]}], ",", 
   RowBox[{
    InterpretationBox[
     StyleBox[
      TemplateBox[{
        RowBox[{"1", "\[InvisibleSpace]", "1", "\[InvisibleSpace]", "1"}]},
       "Ket"],
      FontWeight->"Plain"],
     Wolfram`QuantumFramework`QuditName[{1, 1, 1}, "Dual" -> False]], 
    "\[Rule]", 
    FractionBox["1", "16"]}]}], "\[RightAssociation]"}]], "Output",
 CellChangeTimes->{3.89397955120718*^9},
 CellLabel->"Out[47]=",
 CellID->998862271,ExpressionUUID->"72389929-5c7d-4e37-9449-2803a0d975ec"]
}, Open  ]],

Cell["Generate OPENQASM3 of the circuit, using AWSBraket:", "CodeText",
 CellChangeTimes->{{3.893979758664398*^9, 3.8939797746490707`*^9}},
 CellTags->"DefaultContent",
 CellID->802863168,ExpressionUUID->"1d5f2f98-d204-42b6-a21c-8f105d3b8987"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"qasmAWS", "=", 
  RowBox[{
   RowBox[{"qc", "[", "\"\<Qiskit\>\"", "]"}], "[", 
   RowBox[{"\"\<QASM\>\"", ",", 
    RowBox[{"\"\<Provider\>\"", "->", "\"\<AWSBraket\>\""}]}], 
   "]"}]}]], "Input",
 CellChangeTimes->{{3.8939781413903303`*^9, 3.893978142282961*^9}, 
   3.893978357319808*^9, {3.8939788960588827`*^9, 3.89397889625103*^9}, {
   3.8939793379273376`*^9, 3.893979344036045*^9}},
 CellTags->"DefaultContent",
 CellLabel->"In[37]:=",
 CellID->140455418,ExpressionUUID->"979072ae-d655-4815-ae9c-dbeb39905d73"],

Cell[BoxData["\<\"OPENQASM 3.0;\\nqubit[3] q;\\nx q[1];\\nv q[2];\\nv \
q[2];\\nh q[2];\\ncnot q[1], q[2];\\nti q[2];\\ncnot q[0], q[2];\\nt \
q[2];\\ncnot q[1], q[2];\\nt q[1];\\nti q[2];\\ncnot q[0], q[2];\\ncnot q[0], \
q[1];\\nt q[0];\\nti q[1];\\ncnot q[0], q[1];\\nh q[0];\\nx q[0];\\nx \
q[1];\\nh q[1];\\nx q[1];\\nt q[2];\\nh q[2];\\nh q[2];\\ncnot q[1], \
q[2];\\nti q[2];\\ncnot q[0], q[2];\\nt q[2];\\ncnot q[1], q[2];\\nt \
q[1];\\nti q[2];\\ncnot q[0], q[2];\\ncnot q[0], q[1];\\nt q[0];\\nti \
q[1];\\ncnot q[0], q[1];\\nx q[0];\\nh q[0];\\nx q[1];\\nh q[1];\\nt \
q[2];\\nh q[2];\\n#pragma braket result probability q[2], q[0]\\n#pragma \
braket result probability q[1]\\n#pragma braket result probability q[0], q[2]\
\"\>"], "Output",
 CellChangeTimes->{3.893978902256029*^9, 3.893978987426161*^9, 
  3.893979350673242*^9},
 CellTags->"DefaultContent",
 CellLabel->"Out[37]=",
 CellID->1015539179,ExpressionUUID->"1c70bc1f-3fef-4dce-b2ab-e9f6e34e3d7e"]
}, Open  ]],

Cell["Generate OPENQASM3, given a specific backend on AWSBraket:", "CodeText",
 
 CellChangeTimes->{{3.8939797809032183`*^9, 3.893979800714796*^9}},
 CellTags->"DefaultContent",
 CellID->114619123,ExpressionUUID->"c870c6ef-844d-464a-9300-c680ad6cd795"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"qc", "[", "\"\<Qiskit\>\"", "]"}], "[", 
  RowBox[{"\"\<QASM\>\"", ",", 
   RowBox[{"\"\<Provider\>\"", "->", "\"\<AWSBraket\>\""}], ",", 
   RowBox[{"\"\<Backend\>\"", "->", "\"\<Harmony\>\""}]}], "]"}]], "Input",
 CellChangeTimes->{
  3.89397837322099*^9, {3.893979023157269*^9, 3.89397902339569*^9}},
 CellTags->"DefaultContent",
 CellLabel->"In[30]:=",
 CellID->862862356,ExpressionUUID->"8e70aad5-5a03-44d1-affd-1a83abb9522d"],

Cell[BoxData["\<\"OPENQASM 3.0;\\nqubit[3] q;\\nx \
q[1];\\nry(-3.141592653589793) q[2];\\nrz(-3.141592653589793) q[2];\\nh q[2];\
\\ncnot q[1], q[2];\\nti q[2];\\ncnot q[0], q[2];\\nt q[2];\\ncnot q[1], \
q[2];\\nt q[1];\\nti q[2];\\ncnot q[0], q[2];\\ncnot q[0], q[1];\\nt \
q[0];\\nti q[1];\\ncnot q[0], q[1];\\nh q[0];\\nx q[0];\\nx q[1];\\nh \
q[1];\\nx q[1];\\nt q[2];\\nh q[2];\\nh q[2];\\ncnot q[1], q[2];\\nti \
q[2];\\ncnot q[0], q[2];\\nt q[2];\\ncnot q[1], q[2];\\nt q[1];\\nti \
q[2];\\ncnot q[0], q[2];\\ncnot q[0], q[1];\\nt q[0];\\nti q[1];\\ncnot q[0], \
q[1];\\nx q[0];\\nh q[0];\\nx q[1];\\nh q[1];\\nt q[2];\\nh q[2];\\n#pragma \
braket result probability q[2], q[0]\\n#pragma braket result probability q[1]\
\\n#pragma braket result probability q[0], q[2]\"\>"], "Output",
 CellChangeTimes->{3.89397902721554*^9},
 CellTags->"DefaultContent",
 CellLabel->"Out[30]=",
 CellID->1712060103,ExpressionUUID->"59049c67-7272-4534-b707-817477faffb6"]
}, Open  ]],

Cell["\<\
Connect to AWS using your credentials (using Access Key ID, and Secret Access \
Key), and execute S3:\
\>", "CodeText",
 CellChangeTimes->{{3.888020476068305*^9, 3.888020509400692*^9}, {
  3.888020565982264*^9, 3.888020565983159*^9}, {3.8939791917409353`*^9, 
  3.893979204390107*^9}, {3.893979814420999*^9, 3.8939798175045233`*^9}},
 CellID->194738737,ExpressionUUID->"c56c1aaf-483b-4831-b800-81d9f24a6824"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"s3", "=", 
  RowBox[{"ServiceExecute", "[", 
   RowBox[{"\"\<AWS\>\"", ",", "\"\<GetService\>\"", ",", 
    RowBox[{"{", 
     RowBox[{"\"\<Name\>\"", "\[Rule]", "\"\<S3\>\""}], "}"}]}], 
   "]"}]}]], "Input",
 CellChangeTimes->{{3.865774367881744*^9, 3.865774386332152*^9}, 
   3.8657891959118233`*^9, {3.88982498998709*^9, 3.889824991635024*^9}, {
   3.893894816047956*^9, 3.893894816497431*^9}, {3.893894873283978*^9, 
   3.8938948734929457`*^9}, {3.8939792091734*^9, 3.893979213182465*^9}},
 CellLabel->"In[31]:=",
 CellID->208874731,ExpressionUUID->"7571a263-4fb4-4053-a7d8-09fa1880114c"],

Cell[BoxData[
 InterpretationBox[
  RowBox[{
   TagBox["ServiceObject",
    "SummaryHead"], "[", 
   DynamicModuleBox[{Typeset`open$$ = False, Typeset`embedState$$ = "Ready"}, 
    
    TemplateBox[{
      PaneSelectorBox[{False -> GridBox[{{
            GraphicsBox[{
              Thickness[0.013333333333333334`], 
              StyleBox[{
                
                FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{0., 
                 0.015002999999999999`}, {75., 0.015002999999999999`}, {75., 
                 75.00000299999999}, {0., 75.00000299999999}}}]}, {
                FaceForm[
                 RGBColor[0.20017114700000005`, 0.6704682716, 0., 1.]]}, 
               StripOnInput -> False], 
              StyleBox[{
                
                FilledCurveBox[{{{1, 4, 3}, {1, 3, 3}, {1, 3, 3}}, {{1, 4, 
                  3}, {1, 3, 3}}, {{1, 4, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
                  3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {
                  1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3,
                   3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
                  3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {
                  1, 3, 3}}, {{1, 4, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 
                  3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
                  3}}, {{1, 4, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
                  3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {
                  1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3,
                   3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}}}, {{{55.989, 
                  34.997}, {56.089, 35.734}, {56.187999999999995`, 36.472}, {
                  56.287, 37.209}, {57.242999999999995`, 36.638}, {58.988, 
                  35.784}, {59.440999999999995`, 34.643}, {58.471, 34.243}, {
                  56.916999999999994`, 34.765}, {55.989, 34.997}}, {{
                  36.297999999999995`, 41.976}, {36.297999999999995`, 
                  41.712}, {35.916, 41.736000000000004`}, {35.824, 41.909}, {
                  35.672999999999995`, 42.196}, {36.297999999999995`, 
                  42.38}, {36.297999999999995`, 41.976}}, CompressedData["
1:eJxdVHdIVWEUF2lISDQkGtKwgTnSZ+/lKH2/u96976pFE2lnk2wTUWZ7WpZY
mApFizArRCzSSiysRC1saENKW0RFmUWYlRl9555Hf/TB5fLde75zfuOcb0jy
ykkLvb28vCaIh97TF4x9MaHRDe3yt476pAikOR2zr1a7cbhvp2ndQ23o01Db
NrnOgK938J4+eeEYuOvjxNLZBk70D2sc5goHhbuX6Rif3CMp2h6G4mMt+ZUp
LljH14zC4KI1S7KWa9ierexf9i4UR2+JL1EKbtSc1C5fDOH3N0Bk8fU+H4IZ
mRWtgWmx2EuF60KxOKs5zfkoBiGUePcoeNF6GYkjlG5jGH4XfH2YuN0Bv0L9
VaqfDQSzodCODR9G2HwybBjWZVu2kmLHORGW/MUGK2y8HQJd8bF7ESg7Loio
o3FIlHGUx+DTxNKBu4IjINh12TZVQqDN54J/fxuGPvu5eWmChsenV8V2KwnH
vbbJb85cc3HdKeHIXdFrx40gA3uluW/vvw6DKuC157kxhogFRCCu25PTq5oN
CDWa067bkRCZLs3NNuBNQGIjWa9JBnLzxPoZzTr5GEinfBXjsK6cgOq4SyvD
yfpX6jiYIwpvleEi/3J1EP1aXQPJGVyiI4j2bTrjizFgyT3LjQv+wvktBujY
+gYTZN+lpwaIdnbvhH/4CU7elXi8bxdCd7hYtznxoHQ181S0Bs7MrOgcD9qe
vC3hfoAQKtVA9KWqdeWZMr5b/12cr0ABqF+OKqhLFBWrVSwtW3u4704FJG9Z
vcr9Nl9hP5pUxpuo4A69m1X4EPBgBdS2B7pqfN6ucP+0q/gl0qwdqqAf6Rmg
cV928vxP0VBLvrXLXL9AY96lMpIIcJMGSpsTJzNPp4v93iPhAfEKcjHP4RKi
yJgijevdBEKpP8dooDbr8RSMf7Pq8VXiOfFX8ZkGbJ+EajK0RbHk8H0o4Ut+
ZXxkg4JNFNhP9vBXQPK1GjLOit/prxRYY5QiYwsR/6FgK33IkblfO6scXyUz
bz8VpTSwYm/51VOFNe8dMkZSnDhP8IqXe3Sql0Hwkz7oIPotJRJSrQY3QW3r
fAuObzQ9fgPrac6emxhE90ITmKfYW317CKDx2y/2i2hNA/t3x8QpunD8wH7f
NNmvYifXzTc5bkAcn88wYbX/znH4Uy8qrjZ5jj/H8H0AExnUXj2j2L/uHrwO
B/6/3/4CZo0a4Q==
                  "], CompressedData["
1:eJxTTMoPSmViYGCQB2IQvadksgQLm5ND3/Q8oWYHP4crFS/VDDlc4fz5Uvp3
Vco8HHiYtNvFXvo6NB84tdBVzdth0tsae9M8H4d/IA0TvR3uqrA1TjX2cdgh
1/o6sMPH4WTZvvlS670dNhRlTHxr4+PQ5Zjw9IKQt8PiAluu65+9HeJ2efIw
VXs5AG0P4+P1dkgSiLDcouHlUGtvGrer0svhmLd5p+MHT4funOe/V270hJi/
2NMh5PHS2UceeDiE8elumpvv6QAyvobfwwHkrG3Ong41IP2dLg5A2ffL2zwc
6rOAPjzh4NAudvPc92YPB5A1J8qsHGYAvXeAy9PBB2RxiDnEX26eDheUbv+s
e2XswLFGJipltifE3UqGDinW9/17070c7IDGe+YYOExzBrpstpdDA0hfmR5E
/W8vhwmgcJHTd9AGWVju7QDSfbtSH6J+t7fDCVC4+Bs4mIEC4JO3AxPII3sN
HLiuA0NGysfBrBNkoZFDtcg694e3fBxi+g991agxdQBRMfa+Dk+A3lf4YO5g
B9LQ6+vg3wuMqMfWDm8CgSHP7ecAdu5ve3j8occvAKfg0Ys=
                  "], CompressedData["
1:eJxdU39IU1EUXiMixMoipCQsJW1u6Nz8lZr6zc1N997b0KRMTEwqxMwiwsTC
ElMTkRIri0oz0yhLJMJETETERMyGGiVWtkxEpR9S9sNfdM9uf3Xgvfve5dzv
fOc73/VIP5ZwSC6TycLYQ6tLUuiT3hYLXuVOeWtydbDnbWwyVViwPMw2dNGo
+HwmKqhJAsvK6XgZzffXSxj9k5/ZHqhHjxBSqvsgwpLOkBL1aItzlqv2ihzv
gh66tAmbpyAiloCf6vk5g4jyquwNhTY9WDV7XqKIF/0sFvVQlbiODLDzhZ19
tTGuBl6vQIRPysWuudgY2DwZwgMRV/VlWZOnjaC0liERu8as5VVNJswOSuku
v0VMe2tWP2yPxRStWyQQ/Zq+ODC2aROQcDaz/WTlGzMSWt2LZg5ISByvv9Ft
E/D41td7PTMifiyxwjkir+8hImty4f6sXEIGCVJkxgn62Grh+UdiMZ9PgBYc
pig2gsrYPlrgSwneBtx2U7/bbrRyHm06OL2uOx6RbMV0PCPQGAk5Ne5uRRj1
kR2GL0z21GkLEJTKJA0GpTuVWNBRQ0BasNeqgnrGmwazrMYQazvJR4KCdMpQ
Ivlg+Jh1vwhnAt6sgswRAkQSwMsXO4ngNyNuMvrCKTUI7sp4NLQBLIb84cV+
9Y0RyKS+EzT46QAOBWieoxquF4Jx90b3tuYELQxsHAulWlQTvWIt123WH0rH
PAN4P/Nqrk9PIC5vWrln7VE/NJCB7CG41DWnSFmn4vNrDUcL6eSmxArSxS8K
1Q6ePrgT0/J96ZMObGrxrdUKEL3BCAOYmzr77Ar82s2InTfyuZQpMTLAduZM
uHadQgVX2qgzc132+YLsn/PeDNZtWZZJy/23Q0AkDehZ8L97IXCfaMJRS/W7
Be6Phijur36B97MG3M/DAhz3ygiQaoq3Ap7TPTkHVFLeIxEezcxBErDI6Ety
K6/TG4X/7+Nf4xGjbg==
                  "]}]}, {
                FaceForm[
                 RGBColor[1., 1., 1., 1.]]}, StripOnInput -> False]}, {
             ImageSize -> 32, ImageSize -> {75., 75.}, 
              PlotRange -> {{0., 75.}, {0., 75.}}, AspectRatio -> Automatic, 
              MetaInformation -> {
               "SourceFile" -> 
                "EPS Light\\Storage\\Amazon-Simple--Storage-Service-S3_light-\
bg.pdf"}}], 
            GridBox[{{
               TagBox["\"AWS-S3\"", "SummaryItem"]}, {
               TagBox[
                DynamicBox[
                 ToBoxes[
                  If[
                   TrueQ[
                    ServiceConnections`Private`authenticatedServiceQ[
                    "connection-c3d9b71ae0f5b6a4ae4befe06308d9c4"]], 
                   "Connected", "Not Connected"], StandardForm]], 
                "SummaryItem"]}}, 
             GridBoxAlignment -> {
              "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, AutoDelete -> 
             False, GridBoxItemSize -> {
              "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
             GridBoxSpacings -> {"Columns" -> {{2}}, "Rows" -> {{Automatic}}},
              BaseStyle -> {
              ShowStringCharacters -> False, NumberMarks -> False, 
               PrintPrecision -> 3, ShowSyntaxStyles -> False}]}}, 
          GridBoxAlignment -> {"Columns" -> {{Left}}, "Rows" -> {{Top}}}, 
          AutoDelete -> False, 
          GridBoxItemSize -> {
           "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
          BaselinePosition -> {1, 1}], True -> GridBox[{{
            GraphicsBox[{
              Thickness[0.013333333333333334`], 
              StyleBox[{
                
                FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{0., 
                 0.015002999999999999`}, {75., 0.015002999999999999`}, {75., 
                 75.00000299999999}, {0., 75.00000299999999}}}]}, {
                FaceForm[
                 RGBColor[0.20017114700000005`, 0.6704682716, 0., 1.]]}, 
               StripOnInput -> False], 
              StyleBox[{
                
                FilledCurveBox[{{{1, 4, 3}, {1, 3, 3}, {1, 3, 3}}, {{1, 4, 
                  3}, {1, 3, 3}}, {{1, 4, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
                  3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {
                  1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3,
                   3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
                  3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {
                  1, 3, 3}}, {{1, 4, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 
                  3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
                  3}}, {{1, 4, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
                  3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {
                  1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3,
                   3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}}}, {{{55.989, 
                  34.997}, {56.089, 35.734}, {56.187999999999995`, 36.472}, {
                  56.287, 37.209}, {57.242999999999995`, 36.638}, {58.988, 
                  35.784}, {59.440999999999995`, 34.643}, {58.471, 34.243}, {
                  56.916999999999994`, 34.765}, {55.989, 34.997}}, {{
                  36.297999999999995`, 41.976}, {36.297999999999995`, 
                  41.712}, {35.916, 41.736000000000004`}, {35.824, 41.909}, {
                  35.672999999999995`, 42.196}, {36.297999999999995`, 
                  42.38}, {36.297999999999995`, 41.976}}, CompressedData["
1:eJxdVHdIVWEUF2lISDQkGtKwgTnSZ+/lKH2/u96976pFE2lnk2wTUWZ7WpZY
mApFizArRCzSSiysRC1saENKW0RFmUWYlRl9555Hf/TB5fLde75zfuOcb0jy
ykkLvb28vCaIh97TF4x9MaHRDe3yt476pAikOR2zr1a7cbhvp2ndQ23o01Db
NrnOgK938J4+eeEYuOvjxNLZBk70D2sc5goHhbuX6Rif3CMp2h6G4mMt+ZUp
LljH14zC4KI1S7KWa9ierexf9i4UR2+JL1EKbtSc1C5fDOH3N0Bk8fU+H4IZ
mRWtgWmx2EuF60KxOKs5zfkoBiGUePcoeNF6GYkjlG5jGH4XfH2YuN0Bv0L9
VaqfDQSzodCODR9G2HwybBjWZVu2kmLHORGW/MUGK2y8HQJd8bF7ESg7Loio
o3FIlHGUx+DTxNKBu4IjINh12TZVQqDN54J/fxuGPvu5eWmChsenV8V2KwnH
vbbJb85cc3HdKeHIXdFrx40gA3uluW/vvw6DKuC157kxhogFRCCu25PTq5oN
CDWa067bkRCZLs3NNuBNQGIjWa9JBnLzxPoZzTr5GEinfBXjsK6cgOq4SyvD
yfpX6jiYIwpvleEi/3J1EP1aXQPJGVyiI4j2bTrjizFgyT3LjQv+wvktBujY
+gYTZN+lpwaIdnbvhH/4CU7elXi8bxdCd7hYtznxoHQ181S0Bs7MrOgcD9qe
vC3hfoAQKtVA9KWqdeWZMr5b/12cr0ABqF+OKqhLFBWrVSwtW3u4704FJG9Z
vcr9Nl9hP5pUxpuo4A69m1X4EPBgBdS2B7pqfN6ucP+0q/gl0qwdqqAf6Rmg
cV928vxP0VBLvrXLXL9AY96lMpIIcJMGSpsTJzNPp4v93iPhAfEKcjHP4RKi
yJgijevdBEKpP8dooDbr8RSMf7Pq8VXiOfFX8ZkGbJ+EajK0RbHk8H0o4Ut+
ZXxkg4JNFNhP9vBXQPK1GjLOit/prxRYY5QiYwsR/6FgK33IkblfO6scXyUz
bz8VpTSwYm/51VOFNe8dMkZSnDhP8IqXe3Sql0Hwkz7oIPotJRJSrQY3QW3r
fAuObzQ9fgPrac6emxhE90ITmKfYW317CKDx2y/2i2hNA/t3x8QpunD8wH7f
NNmvYifXzTc5bkAcn88wYbX/znH4Uy8qrjZ5jj/H8H0AExnUXj2j2L/uHrwO
B/6/3/4CZo0a4Q==
                  "], CompressedData["
1:eJxTTMoPSmViYGCQB2IQvadksgQLm5ND3/Q8oWYHP4crFS/VDDlc4fz5Uvp3
Vco8HHiYtNvFXvo6NB84tdBVzdth0tsae9M8H4d/IA0TvR3uqrA1TjX2cdgh
1/o6sMPH4WTZvvlS670dNhRlTHxr4+PQ5Zjw9IKQt8PiAluu65+9HeJ2efIw
VXs5AG0P4+P1dkgSiLDcouHlUGtvGrer0svhmLd5p+MHT4funOe/V270hJi/
2NMh5PHS2UceeDiE8elumpvv6QAyvobfwwHkrG3Ong41IP2dLg5A2ffL2zwc
6rOAPjzh4NAudvPc92YPB5A1J8qsHGYAvXeAy9PBB2RxiDnEX26eDheUbv+s
e2XswLFGJipltifE3UqGDinW9/17070c7IDGe+YYOExzBrpstpdDA0hfmR5E
/W8vhwmgcJHTd9AGWVju7QDSfbtSH6J+t7fDCVC4+Bs4mIEC4JO3AxPII3sN
HLiuA0NGysfBrBNkoZFDtcg694e3fBxi+g991agxdQBRMfa+Dk+A3lf4YO5g
B9LQ6+vg3wuMqMfWDm8CgSHP7ecAdu5ve3j8occvAKfg0Ys=
                  "], CompressedData["
1:eJxdU39IU1EUXiMixMoipCQsJW1u6Nz8lZr6zc1N997b0KRMTEwqxMwiwsTC
ElMTkRIri0oz0yhLJMJETETERMyGGiVWtkxEpR9S9sNfdM9uf3Xgvfve5dzv
fOc73/VIP5ZwSC6TycLYQ6tLUuiT3hYLXuVOeWtydbDnbWwyVViwPMw2dNGo
+HwmKqhJAsvK6XgZzffXSxj9k5/ZHqhHjxBSqvsgwpLOkBL1aItzlqv2ihzv
gh66tAmbpyAiloCf6vk5g4jyquwNhTY9WDV7XqKIF/0sFvVQlbiODLDzhZ19
tTGuBl6vQIRPysWuudgY2DwZwgMRV/VlWZOnjaC0liERu8as5VVNJswOSuku
v0VMe2tWP2yPxRStWyQQ/Zq+ODC2aROQcDaz/WTlGzMSWt2LZg5ISByvv9Ft
E/D41td7PTMifiyxwjkir+8hImty4f6sXEIGCVJkxgn62Grh+UdiMZ9PgBYc
pig2gsrYPlrgSwneBtx2U7/bbrRyHm06OL2uOx6RbMV0PCPQGAk5Ne5uRRj1
kR2GL0z21GkLEJTKJA0GpTuVWNBRQ0BasNeqgnrGmwazrMYQazvJR4KCdMpQ
Ivlg+Jh1vwhnAt6sgswRAkQSwMsXO4ngNyNuMvrCKTUI7sp4NLQBLIb84cV+
9Y0RyKS+EzT46QAOBWieoxquF4Jx90b3tuYELQxsHAulWlQTvWIt123WH0rH
PAN4P/Nqrk9PIC5vWrln7VE/NJCB7CG41DWnSFmn4vNrDUcL6eSmxArSxS8K
1Q6ePrgT0/J96ZMObGrxrdUKEL3BCAOYmzr77Ar82s2InTfyuZQpMTLAduZM
uHadQgVX2qgzc132+YLsn/PeDNZtWZZJy/23Q0AkDehZ8L97IXCfaMJRS/W7
Be6Phijur36B97MG3M/DAhz3ygiQaoq3Ap7TPTkHVFLeIxEezcxBErDI6Ety
K6/TG4X/7+Nf4xGjbg==
                  "]}]}, {
                FaceForm[
                 RGBColor[1., 1., 1., 1.]]}, StripOnInput -> False]}, {
             ImageSize -> 32, ImageSize -> {75., 75.}, 
              PlotRange -> {{0., 75.}, {0., 75.}}, AspectRatio -> Automatic, 
              MetaInformation -> {
               "SourceFile" -> 
                "EPS Light\\Storage\\Amazon-Simple--Storage-Service-S3_light-\
bg.pdf"}}], 
            GridBox[{{
               TagBox["\"AWS-S3\"", "SummaryItem"]}, {
               TagBox[
                DynamicBox[
                 ToBoxes[
                  If[
                   TrueQ[
                    ServiceConnections`Private`authenticatedServiceQ[
                    "connection-c3d9b71ae0f5b6a4ae4befe06308d9c4"]], 
                   "Connected", "Not Connected"], StandardForm]], 
                "SummaryItem"]}}, 
             GridBoxAlignment -> {
              "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, AutoDelete -> 
             False, GridBoxItemSize -> {
              "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
             GridBoxSpacings -> {"Columns" -> {{2}}, "Rows" -> {{Automatic}}},
              BaseStyle -> {
              ShowStringCharacters -> False, NumberMarks -> False, 
               PrintPrecision -> 3, ShowSyntaxStyles -> False}]}}, 
          GridBoxAlignment -> {"Columns" -> {{Left}}, "Rows" -> {{Top}}}, 
          AutoDelete -> False, 
          GridBoxItemSize -> {
           "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
          BaselinePosition -> {1, 1}]}, 
       Dynamic[Typeset`open$$], ImageSize -> Automatic]},
     "SummaryPanel"],
    DynamicModuleValues:>{}], "]"}],
  ServiceObject[
  "AWS-S3", "ID" -> "connection-c3d9b71ae0f5b6a4ae4befe06308d9c4"],
  Editable->False,
  SelectWithContents->True,
  Selectable->False]], "Output",
 CellChangeTimes->{3.865789196678014*^9, 3.865789364027426*^9, 
  3.865789646137151*^9, 3.8880203567395363`*^9, 3.8880872057176943`*^9, 
  3.888411897616438*^9, 3.88901849506971*^9, 3.8898252851725388`*^9, 
  3.8903320316709547`*^9, 3.8922254320084333`*^9, 3.892753397985305*^9, 
  3.8938838832910347`*^9, 3.893885131859263*^9, 3.8938920004886627`*^9, 
  3.8938948213818007`*^9, 3.893894874101254*^9, 3.8939792218183613`*^9},
 CellLabel->"Out[31]=",
 CellID->1041931560,ExpressionUUID->"1f9af6f4-b415-41c2-aeff-ec5d8778a9e4"]
}, Open  ]],

Cell["Execute Amazon Braket on AWS:", "CodeText",
 CellChangeTimes->{{3.888020577575116*^9, 3.888020587066721*^9}, {
  3.8939798266344967`*^9, 3.893979833077156*^9}},
 CellID->246399779,ExpressionUUID->"667e993a-3a83-43f1-8ac2-b546d18e77eb"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"braket", "=", 
  RowBox[{"ServiceExecute", "[", 
   RowBox[{"\"\<AWS\>\"", ",", "\"\<GetService\>\"", ",", 
    RowBox[{"{", 
     RowBox[{"\"\<Name\>\"", "\[Rule]", "\"\<Braket\>\""}], "}"}]}], 
   "]"}]}]], "Input",
 CellChangeTimes->{{3.865707602545459*^9, 3.8657076088478947`*^9}, 
   3.865774397961965*^9, 3.865789198261116*^9, {3.889824993362844*^9, 
   3.889824994869852*^9}, {3.893979247223197*^9, 3.893979248883765*^9}},
 CellLabel->"In[32]:=",
 CellID->892614237,ExpressionUUID->"6b488b46-8960-4f67-b8c8-9fce6f7039c2"],

Cell[BoxData[
 InterpretationBox[
  RowBox[{
   TagBox["ServiceObject",
    "SummaryHead"], "[", 
   DynamicModuleBox[{Typeset`open$$ = False, Typeset`embedState$$ = "Ready"}, 
    
    TemplateBox[{
      PaneSelectorBox[{False -> GridBox[{{
            GraphicsBox[{
              Thickness[0.02857142857142857], 
              StyleBox[{
                
                FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                 0.015000999999999999`, 0.}, {35.000001, 0.}, {35.000001, 
                 35.}, {0.015000999999999999`, 35.}}}]}, {
                FaceForm[
                 RGBColor[
                 0.07317390409999991, 0.1342612392, 0.23227710329999995`, 
                  1.]]}, StripOnInput -> False], 
              StyleBox[{
                
                FilledCurveBox[{{{1, 4, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {
                  0, 1, 0}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3,
                   3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {0, 1, 
                  0}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {
                  1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3,
                   3}, {1, 3, 3}, {0, 1, 0}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
                  3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {0, 1, 0}, {
                  1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3,
                   3}}, {{1, 4, 3}, {1, 3, 3}, {0, 1, 0}, {1, 3, 3}, {1, 3, 
                  3}, {0, 1, 0}, {1, 3, 3}, {1, 3, 3}, {0, 1, 0}, {0, 1, 0}, {
                  1, 3, 3}, {1, 3, 3}, {0, 1, 0}, {1, 3, 3}, {1, 3, 3}, {0, 1,
                   0}, {0, 1, 0}, {1, 3, 3}, {1, 3, 3}, {0, 1, 0}, {1, 3, 
                  3}, {1, 3, 3}, {1, 3, 3}, {0, 1, 0}, {1, 3, 3}, {1, 3, 3}, {
                  0, 1, 0}, {1, 3, 3}, {1, 3, 3}, {0, 1, 0}, {0, 1, 0}, {1, 3,
                   3}, {1, 3, 3}, {0, 1, 0}}, {{1, 4, 3}, {1, 3, 3}, {1, 3, 
                  3}, {1, 3, 3}, {0, 1, 0}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {
                  1, 3, 3}, {1, 3, 3}, {1, 3, 3}}, {{1, 4, 3}, {1, 3, 3}, {1, 
                  3, 3}, {1, 3, 3}, {0, 1, 0}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
                  3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {
                  1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {0, 1, 0}, {1, 3, 3}, {1, 3,
                   3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
                  3}, {0, 1, 0}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {
                  1, 3, 3}, {1, 3, 3}, {0, 1, 0}}}, {CompressedData["
1:eJxdVQ1MF2UcJnLlyEhL0YxMsWlF5B3/r/fuf4ePVFgJOjAaU3NIWkhQjRCJ
iPyYKEMyMCFKxRItHTZTMyiDSlLMzPqnU4ZGmkZEVICEaLbe934vd1u33W7P
3fv7fp7fTUh7PmlRcFBQ0FJ+i6fRNqu0MtSPR87lj/xgsoKvxu/OTi/TbTwi
RdvXHKZjytm7b1juUbArfM5Cf7VG5xIVeU7DG2OGPBGapeD3xLpxq44ywqUS
lzA6/6GCy7N/3vb2QkZ2hxXAM/+TR+MZjr7z8P7eswoO9t0zb10sw8y04Sna
JQVx+3uvnWAM30e0DhSGqFgT1vJtv4vhce6mabyDT219wQzxOfiC+Lzbwf/s
6A4knFexZSyvJI4hNvXidxFXVdwkDDMc3BNISBue5+BL107kdRQx1I9b1Zl4
WcVnOevHDKlgyGq/uqO7R0W8r3ha6jYG3pW2WV0q3qriVz1DYzUPdEHFdpFG
gGEBd9faomI0T2f2RA1/8zK//EilOC9r9L1K2rdoeOZpfhWpFJfp5CdbpXlU
6LiXm/elq1DEXPocvHfTn+8dKvHb+LogcRn4kR/bsFLF7XwsUUkG+a1TET20
NnxOjWHnP1c8j8nvLNrGqVZ+Dv5tkjq09kw07l/NG/yxQfMa6cKNyzc8WLLW
wB2CMNNcOM/HPH2B9J/lwtpM3rgRBjbzNGdUusjPRj/Kuwqmehpc8HI6DIvV
8eZzt678/D431V2u0fzS3LhSmHEg5zaN+r/HjWcP8IE0MQjWdoV7cGZAHGB4
YA9vRJGHeJjAMJmHCb/iYCv+Uq+Nj/dzYrZ6iX9pTPLGh195mEApw2uVPKFl
PuJjneT3MR/1s4dhyXrxgkm+asTzhxj0fc25Da9qKOBtOJcveRPQKO8aqQtV
p3ONDHeKRq3TZT4yj14dwm1eh9TJk34bW/7KHbxR0KTZTzz/heEuMeZ//agV
um1jeJebX3MbxPPT8ny6gSO5DdVjjzPcHBy5OqzKQIbsa+FULtAjhl33aaGz
foN0WzuoQxOClrmbGQJCp4+Z2CnG9TrDSx18wJkmmkRfVzAUdYqFYNpzsni+
3ZQ8YZIHJqw1xOeSL+y/MfEHfz1fH9SRSbqcJOP/ZFI+wxwsUHCnz8bW/PMd
HBrFCTLdh+sjBYFNqn+Kj/Lf6WCr3koHLxONyTPlnKX9TBk/3kf1HDJoHsU+
0kuUgZM8W/V9n9Sh38a0Z3QbD+5fSydl0l+cTntm0eB5zY5v6f+khiTe1c5u
r42p/w6eYPVT8r1Lw+Iy3uhRXtJfuI4VXLaZ7R7aHzN0/MDpkVLvoX21VSf7
Ug/lP9GPGt6WU095yP8Sqed+N+k0wsSLXI4FjW7EhPAFu8kknma78SkfS2S7
KfeAG4yXdVGJkfvaRXsxOcbeH4PYinsw2sZW3vOiaZ6IgbXmgqJpXqNjSLe7
5D7rMlEhypur4ouvuYD2mvQ/G6XiFcHvxSb1tVWhfcn5bPndouAWwZPDcr/l
KEgW71MNsk9WiI8DftrLXgV/8Tb4ip3/6f//r/8BWHlGyA==
                  "], CompressedData["
1:eJxdlA1IFEEUxw/RSDO9SEoqQ0Pkcltvds+9XVPpqVmZWphwSJmJZUaYmVip
ZCEpfpSoaElZSYmkGH5hIn1IRYVU2BFShsUlJSYqfVFmFjWzd/eOHDiO38yb
N//3tX5ph3ekO2k0mnj6Y/8FEwHCwnVBkLGfLQJFB+/k1g7zyOaZxPfNDTx8
nGv98uIQgTezJ6kFD8f7G1foC4l1P54HkFJuxZwlYPXHQ/flT9cftxEIKY9I
HdPyEJk6Zl4zQqAyc3yutUsHR8LdXjVpFSBv/RcUndPB+p6BY/0bFIgZLfBq
L7XxHger9tkOvkLdx9YrEG7ZXlnfrgP6urtTmwJdOQdqpn87uI2qSzMHIgcm
Vz34ruOQPXmqNIOD5a8HZxKbFIhQ4+CgbBndqFVgrLnhoW8nBz9ZGort/jiI
k2lg6Yo13ikO7ubWejsbFZhg+Vish3y27y7CTRpG4y+C50tP33ty1UXA+2o+
vQT0f4m+lqMT8P3zUWcyx0MF1KfyLgH1q/ZlDt6rTQrp2SIiX4vu/fYndx7X
iehPtW8R/3/vtoh6Amh1op6KqLeYyo9+KWI8HZtpQbYFAy1OuNuMAFMJfatL
JiU8H4pP0ybNSnj/My2b7GpE/89Zf6004vt+nbSAvBH1DT6jK86I+i9eoCvf
wUuo/AGTjOxi8uC7Cx38dyhvIqBGxn6xs72f7GzX57NzX6ilSoZNNE1DSQrU
eTubPCpt/mIVWMQCrZCByZwOU2xxyMDM89Yq4D9CC3pCxv7ezdotTML+V/MV
JOF8ODO9PhLOz0aa/jlXCedrq7sTV/ojGOfvK20/7XAwzudRmmZTu4NbaHrL
Rw3Iar175nGdAcLY3GTZ7IsMcGMVDfyUTV+WAT6wvq8m4FsymdCXYrDmpYPA
fVr+3kSbvYWAhq13gnVeLUZQ2LxnEzxX+z2d4H21f0wE/VdQc3MkwferabqS
9QT1qexJUL8X8/dIjzz/+/UPknMR1g==
                  "], CompressedData["
1:eJxTTMoPSmViYGBQAGIQ3TLVuTsnXc5BM6b/0NcMQweLLSfK9s2Xh/MPnFro
uq1YwUG7XezmuXJDhxPe5p2OCooOi1y3ff47xdDhDBgoOkiyhPHpbjJ0kLh5
7ntwspLD/vlS+nefGDqIgfiPlRyiUqzv++saOTBcrXipZqjskPD0gtLtSCMH
oKa579OVHc6CjOkxclgE1KbSpuwg3Ay0+aiRwwGQOUuUHeRbXwfu+GfkEJAk
EGG5Rdnhngpb41RnYzhfdJ37w6opCH591p6SyT+MHeYdUdhQpKHs8GH5MW9z
ThMHHx4m7fZpSg5eIFrMxMGB6/rigr+KDsfB/jKB2Jei6ODSnfP8t6aJgwzI
4ecVHECqb+qZODwDOvunHYIf0Ds9T4hZDs6H6JOB8PlMHFbMBjrgkxSEf87Y
4UONvWncLkkIv8/YQQHkLzlJh9znv1d+NELwOdYAbd5tBOdXAkONw8fI4U8d
yGOSkPj4Dgx/YPR8rpWChM8+QwdIfEpDwq/V0CFn4tsa+60y8PhEj28AARXV
nQ==
                  "], CompressedData["
1:eJxdVAtMFFcUJUiIWoKWz7Iu67IMw05bisysO8ygtp5atbEGUUsMtkqQqKAl
VltiKFhr/TdNRYtEEiT4BW1t0w9Vo6YlVQwiKhKCHzBijVaiFLQfYpS27763
nUl8yWRy3rx337nnnDeJ+e/NXRIaEhIynz303nx/znFPkw+z8kfnZHT48T+e
knenTSrz49r+la+MvBL8HvBjxBH324uf+PBB4Y6+Nf9q+JrBiQkKLktdj9e2
aOjJ+nzXirkKmrzfvl+4Q4N6Qw7/pFIR+7M19LHym75SkH37YPUZaKjtrz87
85iCSTfZxnE2Pr932tE/xtr451pX2o0wDeuWnyquqFKw0xk2L7JPFTzfUfB8
TkZDc6carONDXfUZxkBFeu6JGRGhPrF/sYpH7Zn5o68mi/oLVfzTUdLr+87G
d9uoERsfecg2zE7GiwvKf/mrUEUdyZGUDJJh4seq6KNHFu89KtZXvv5ZUb2M
6A2NLXubVJzwbLo/p0TGvSeHH7YzvgOsHWOGDPo8zaEJPk5Z8JuqYSmNu0lY
xNrq+lAT/FZJgk+NivB5kanf13gxlh1/M01FY3GFM6zTbWGyZfKPYyw8sGay
njshzuK/kfgVxArdulQ8XUuCRoOWZ2VqeJnWHYpCAefxDK7zW5j7u2o8GmqY
QeejsY/RG4oJoKSCjHHA/PS1vDvbA/Dywk5caGUjQgdtf2FBPKpWRG1ofFPH
PSabV02wcGcmBcVrYXq13PJCG84Un6rjLM9VIlK2OK5dNHRs28VWQMIDylWK
jijKwd8SFNrg0jGbyjUk4QD5NszGgfFs/GDjUUzV/oJ07KbYFCbhJEtNym/p
Is/tkvBBMyCzdCyfJKEs5ps3bpUayCcZMxIxoaF59U+1Bpw0vTPBwgFWtn66
x8I5ZF+/G8vIp0oDzbyfeNHHOgNupl6q3yX6eddAHunV7cSXPIeG0HdbHM6x
aq40A4co548c+IKV0z0GTMr7ege2MnkGow1s5/o4wGMzykAr5WgoVtR/zgj6
Fws22VEywgj6a+NGyqVs455SajwGp5mL5ZKNu5ksp7JtzNefszHnP8Dqk2+D
MYBORE2rPqnQ5zaDeYlFIk2kmhYfsnX1qyaaed8O0X+WKfr5KA7T+YFmMH9j
RL3dZvB8Fy4NvnX74EkTRfx+uPE73YvrwfMPeATfXhN/0n3M8VrYQ3zKJQtz
/9JkvMR5meJ+m8ni3ismyrnePuyhtuoM63/6lF3/zF/TLcz5det49v/7HzGs
bAo=
                  "]}], 
                
                FilledCurveBox[{{{1, 4, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {
                 1, 3, 3}, {1, 3, 3}}}, CompressedData["
1:eJxTTMoPSmVmYGBgBGJhIGYC4p6c579XXrRxyBdqPnBKUd3huLd5p+MBS4cE
9nOSgbOUHKJTrO/7+5o6mJ219rtoqODgtu3z3ysVhnD+nZ91WXtMNOD8P0Bu
ibCsg0s30GBNFQeFm+e+Bz/mcWh7HbhD7qiWQwHQuN7pXA5c1xcX2HppO6wo
sAUyeRyKMya+rfmv7bDgiMKGogx+h3qgMZNnaDtsKQJJyDv0Tc8TamZQd7CI
2+XJ06TpoHwbaLGNisMboLGtpw3h/GAg97WhKZzPrN0udvOdhcMtkDOWqkLs
ibdxsOh0THg6QcMhG2iNxBMbB2n9uypsjJoOB08tdN0WbAsJj4fqDujhAwAc
xYZW
                 "]], 
                
                FilledCurveBox[{{{1, 4, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {
                 1, 3, 3}, {1, 3, 3}}}, CompressedData["
1:eJxTTMoPSmVmYGBgBGJhIGYCYrdtn/9ekbBz2DT3/fJj3FoOfkkCEZZbbB2i
Uqzv+/NqO/RNzxNqbrB2EGo+cGphq5aD+M1z34ObrRyAqr3NPbUcvHiYtNvN
rBxA0q5mWg4zgMoPaFk5bCjKmPh2j5aDLMigfCsHljA+3U2y2g49Oc9/rzS0
cdC/q8LWOFXX4YF/L9AGe4c1MiCFOg78ukCXpNtD3aPjMOltjb3pPnuo+doO
RxWAJgfaO/y7UvFSrVDVYTNI3Wpbh+O7dvSybVByiN/lycOUbevgv35Kaoez
EsQfukD/fN15q6tWycGlG+gAT1sHoOXO3TzKDpox/Ye+rrB1SAOBZyoOdlzX
FxfU2jmAKFsuTQf08AEAsXqDZQ==
                 "]]}, {
                FaceForm[
                 RGBColor[1., 1., 1., 1.]]}, StripOnInput -> False]}, {
             ImageSize -> 32, ImageSize -> {35., 35.}, 
              PlotRange -> {{0., 35.}, {0., 35.}}, AspectRatio -> Automatic, 
              MetaInformation -> {
               "SourceFile" -> 
                "EPS Light\\_Group Icons\\AWS-Cloud-alt_light-bg.pdf"}}], 
            GridBox[{{
               TagBox["\"AWS-Braket\"", "SummaryItem"]}, {
               TagBox[
                DynamicBox[
                 ToBoxes[
                  If[
                   TrueQ[
                    ServiceConnections`Private`authenticatedServiceQ[
                    "connection-3fb584a1a7e1678439de863af089fd71"]], 
                   "Connected", "Not Connected"], StandardForm]], 
                "SummaryItem"]}}, 
             GridBoxAlignment -> {
              "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, AutoDelete -> 
             False, 
             GridBoxItemSize -> {
              "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
             GridBoxSpacings -> {"Columns" -> {{2}}, "Rows" -> {{Automatic}}},
              BaseStyle -> {
              ShowStringCharacters -> False, NumberMarks -> False, 
               PrintPrecision -> 3, ShowSyntaxStyles -> False}]}}, 
          GridBoxAlignment -> {"Columns" -> {{Left}}, "Rows" -> {{Top}}}, 
          AutoDelete -> False, 
          GridBoxItemSize -> {
           "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
          BaselinePosition -> {1, 1}], True -> GridBox[{{
            GraphicsBox[{
              Thickness[0.02857142857142857], 
              StyleBox[{
                
                FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                 0.015000999999999999`, 0.}, {35.000001, 0.}, {35.000001, 
                 35.}, {0.015000999999999999`, 35.}}}]}, {
                FaceForm[
                 RGBColor[
                 0.07317390409999991, 0.1342612392, 0.23227710329999995`, 
                  1.]]}, StripOnInput -> False], 
              StyleBox[{
                
                FilledCurveBox[{{{1, 4, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {
                  0, 1, 0}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3,
                   3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {0, 1, 
                  0}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {
                  1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3,
                   3}, {1, 3, 3}, {0, 1, 0}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
                  3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {0, 1, 0}, {
                  1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3,
                   3}}, {{1, 4, 3}, {1, 3, 3}, {0, 1, 0}, {1, 3, 3}, {1, 3, 
                  3}, {0, 1, 0}, {1, 3, 3}, {1, 3, 3}, {0, 1, 0}, {0, 1, 0}, {
                  1, 3, 3}, {1, 3, 3}, {0, 1, 0}, {1, 3, 3}, {1, 3, 3}, {0, 1,
                   0}, {0, 1, 0}, {1, 3, 3}, {1, 3, 3}, {0, 1, 0}, {1, 3, 
                  3}, {1, 3, 3}, {1, 3, 3}, {0, 1, 0}, {1, 3, 3}, {1, 3, 3}, {
                  0, 1, 0}, {1, 3, 3}, {1, 3, 3}, {0, 1, 0}, {0, 1, 0}, {1, 3,
                   3}, {1, 3, 3}, {0, 1, 0}}, {{1, 4, 3}, {1, 3, 3}, {1, 3, 
                  3}, {1, 3, 3}, {0, 1, 0}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {
                  1, 3, 3}, {1, 3, 3}, {1, 3, 3}}, {{1, 4, 3}, {1, 3, 3}, {1, 
                  3, 3}, {1, 3, 3}, {0, 1, 0}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
                  3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {
                  1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {0, 1, 0}, {1, 3, 3}, {1, 3,
                   3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
                  3}, {0, 1, 0}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {
                  1, 3, 3}, {1, 3, 3}, {0, 1, 0}}}, {CompressedData["
1:eJxdVQ1MF2UcJnLlyEhL0YxMsWlF5B3/r/fuf4ePVFgJOjAaU3NIWkhQjRCJ
iPyYKEMyMCFKxRItHTZTMyiDSlLMzPqnU4ZGmkZEVICEaLbe934vd1u33W7P
3fv7fp7fTUh7PmlRcFBQ0FJ+i6fRNqu0MtSPR87lj/xgsoKvxu/OTi/TbTwi
RdvXHKZjytm7b1juUbArfM5Cf7VG5xIVeU7DG2OGPBGapeD3xLpxq44ywqUS
lzA6/6GCy7N/3vb2QkZ2hxXAM/+TR+MZjr7z8P7eswoO9t0zb10sw8y04Sna
JQVx+3uvnWAM30e0DhSGqFgT1vJtv4vhce6mabyDT219wQzxOfiC+Lzbwf/s
6A4knFexZSyvJI4hNvXidxFXVdwkDDMc3BNISBue5+BL107kdRQx1I9b1Zl4
WcVnOevHDKlgyGq/uqO7R0W8r3ha6jYG3pW2WV0q3qriVz1DYzUPdEHFdpFG
gGEBd9faomI0T2f2RA1/8zK//EilOC9r9L1K2rdoeOZpfhWpFJfp5CdbpXlU
6LiXm/elq1DEXPocvHfTn+8dKvHb+LogcRn4kR/bsFLF7XwsUUkG+a1TET20
NnxOjWHnP1c8j8nvLNrGqVZ+Dv5tkjq09kw07l/NG/yxQfMa6cKNyzc8WLLW
wB2CMNNcOM/HPH2B9J/lwtpM3rgRBjbzNGdUusjPRj/Kuwqmehpc8HI6DIvV
8eZzt678/D431V2u0fzS3LhSmHEg5zaN+r/HjWcP8IE0MQjWdoV7cGZAHGB4
YA9vRJGHeJjAMJmHCb/iYCv+Uq+Nj/dzYrZ6iX9pTPLGh195mEApw2uVPKFl
PuJjneT3MR/1s4dhyXrxgkm+asTzhxj0fc25Da9qKOBtOJcveRPQKO8aqQtV
p3ONDHeKRq3TZT4yj14dwm1eh9TJk34bW/7KHbxR0KTZTzz/heEuMeZ//agV
um1jeJebX3MbxPPT8ny6gSO5DdVjjzPcHBy5OqzKQIbsa+FULtAjhl33aaGz
foN0WzuoQxOClrmbGQJCp4+Z2CnG9TrDSx18wJkmmkRfVzAUdYqFYNpzsni+
3ZQ8YZIHJqw1xOeSL+y/MfEHfz1fH9SRSbqcJOP/ZFI+wxwsUHCnz8bW/PMd
HBrFCTLdh+sjBYFNqn+Kj/Lf6WCr3koHLxONyTPlnKX9TBk/3kf1HDJoHsU+
0kuUgZM8W/V9n9Sh38a0Z3QbD+5fSydl0l+cTntm0eB5zY5v6f+khiTe1c5u
r42p/w6eYPVT8r1Lw+Iy3uhRXtJfuI4VXLaZ7R7aHzN0/MDpkVLvoX21VSf7
Ug/lP9GPGt6WU095yP8Sqed+N+k0wsSLXI4FjW7EhPAFu8kknma78SkfS2S7
KfeAG4yXdVGJkfvaRXsxOcbeH4PYinsw2sZW3vOiaZ6IgbXmgqJpXqNjSLe7
5D7rMlEhypur4ouvuYD2mvQ/G6XiFcHvxSb1tVWhfcn5bPndouAWwZPDcr/l
KEgW71MNsk9WiI8DftrLXgV/8Tb4ip3/6f//r/8BWHlGyA==
                  "], CompressedData["
1:eJxdlA1IFEEUxw/RSDO9SEoqQ0Pkcltvds+9XVPpqVmZWphwSJmJZUaYmVip
ZCEpfpSoaElZSYmkGH5hIn1IRYVU2BFShsUlJSYqfVFmFjWzd/eOHDiO38yb
N//3tX5ph3ekO2k0mnj6Y/8FEwHCwnVBkLGfLQJFB+/k1g7zyOaZxPfNDTx8
nGv98uIQgTezJ6kFD8f7G1foC4l1P54HkFJuxZwlYPXHQ/flT9cftxEIKY9I
HdPyEJk6Zl4zQqAyc3yutUsHR8LdXjVpFSBv/RcUndPB+p6BY/0bFIgZLfBq
L7XxHger9tkOvkLdx9YrEG7ZXlnfrgP6urtTmwJdOQdqpn87uI2qSzMHIgcm
Vz34ruOQPXmqNIOD5a8HZxKbFIhQ4+CgbBndqFVgrLnhoW8nBz9ZGort/jiI
k2lg6Yo13ikO7ubWejsbFZhg+Vish3y27y7CTRpG4y+C50tP33ty1UXA+2o+
vQT0f4m+lqMT8P3zUWcyx0MF1KfyLgH1q/ZlDt6rTQrp2SIiX4vu/fYndx7X
iehPtW8R/3/vtoh6Amh1op6KqLeYyo9+KWI8HZtpQbYFAy1OuNuMAFMJfatL
JiU8H4pP0ybNSnj/My2b7GpE/89Zf6004vt+nbSAvBH1DT6jK86I+i9eoCvf
wUuo/AGTjOxi8uC7Cx38dyhvIqBGxn6xs72f7GzX57NzX6ilSoZNNE1DSQrU
eTubPCpt/mIVWMQCrZCByZwOU2xxyMDM89Yq4D9CC3pCxv7ezdotTML+V/MV
JOF8ODO9PhLOz0aa/jlXCedrq7sTV/ojGOfvK20/7XAwzudRmmZTu4NbaHrL
Rw3Iar175nGdAcLY3GTZ7IsMcGMVDfyUTV+WAT6wvq8m4FsymdCXYrDmpYPA
fVr+3kSbvYWAhq13gnVeLUZQ2LxnEzxX+z2d4H21f0wE/VdQc3MkwferabqS
9QT1qexJUL8X8/dIjzz/+/UPknMR1g==
                  "], CompressedData["
1:eJxTTMoPSmViYGBQAGIQ3TLVuTsnXc5BM6b/0NcMQweLLSfK9s2Xh/MPnFro
uq1YwUG7XezmuXJDhxPe5p2OCooOi1y3ff47xdDhDBgoOkiyhPHpbjJ0kLh5
7ntwspLD/vlS+nefGDqIgfiPlRyiUqzv++saOTBcrXipZqjskPD0gtLtSCMH
oKa579OVHc6CjOkxclgE1KbSpuwg3Ay0+aiRwwGQOUuUHeRbXwfu+GfkEJAk
EGG5Rdnhngpb41RnYzhfdJ37w6opCH591p6SyT+MHeYdUdhQpKHs8GH5MW9z
ThMHHx4m7fZpSg5eIFrMxMGB6/rigr+KDsfB/jKB2Jei6ODSnfP8t6aJgwzI
4ecVHECqb+qZODwDOvunHYIf0Ds9T4hZDs6H6JOB8PlMHFbMBjrgkxSEf87Y
4UONvWncLkkIv8/YQQHkLzlJh9znv1d+NELwOdYAbd5tBOdXAkONw8fI4U8d
yGOSkPj4Dgx/YPR8rpWChM8+QwdIfEpDwq/V0CFn4tsa+60y8PhEj28AARXV
nQ==
                  "], CompressedData["
1:eJxdVAtMFFcUJUiIWoKWz7Iu67IMw05bisysO8ygtp5atbEGUUsMtkqQqKAl
VltiKFhr/TdNRYtEEiT4BW1t0w9Vo6YlVQwiKhKCHzBijVaiFLQfYpS27763
nUl8yWRy3rx337nnnDeJ+e/NXRIaEhIynz303nx/znFPkw+z8kfnZHT48T+e
knenTSrz49r+la+MvBL8HvBjxBH324uf+PBB4Y6+Nf9q+JrBiQkKLktdj9e2
aOjJ+nzXirkKmrzfvl+4Q4N6Qw7/pFIR+7M19LHym75SkH37YPUZaKjtrz87
85iCSTfZxnE2Pr932tE/xtr451pX2o0wDeuWnyquqFKw0xk2L7JPFTzfUfB8
TkZDc6carONDXfUZxkBFeu6JGRGhPrF/sYpH7Zn5o68mi/oLVfzTUdLr+87G
d9uoERsfecg2zE7GiwvKf/mrUEUdyZGUDJJh4seq6KNHFu89KtZXvv5ZUb2M
6A2NLXubVJzwbLo/p0TGvSeHH7YzvgOsHWOGDPo8zaEJPk5Z8JuqYSmNu0lY
xNrq+lAT/FZJgk+NivB5kanf13gxlh1/M01FY3GFM6zTbWGyZfKPYyw8sGay
njshzuK/kfgVxArdulQ8XUuCRoOWZ2VqeJnWHYpCAefxDK7zW5j7u2o8GmqY
QeejsY/RG4oJoKSCjHHA/PS1vDvbA/Dywk5caGUjQgdtf2FBPKpWRG1ofFPH
PSabV02wcGcmBcVrYXq13PJCG84Un6rjLM9VIlK2OK5dNHRs28VWQMIDylWK
jijKwd8SFNrg0jGbyjUk4QD5NszGgfFs/GDjUUzV/oJ07KbYFCbhJEtNym/p
Is/tkvBBMyCzdCyfJKEs5ps3bpUayCcZMxIxoaF59U+1Bpw0vTPBwgFWtn66
x8I5ZF+/G8vIp0oDzbyfeNHHOgNupl6q3yX6eddAHunV7cSXPIeG0HdbHM6x
aq40A4co548c+IKV0z0GTMr7ege2MnkGow1s5/o4wGMzykAr5WgoVtR/zgj6
Fws22VEywgj6a+NGyqVs455SajwGp5mL5ZKNu5ksp7JtzNefszHnP8Dqk2+D
MYBORE2rPqnQ5zaDeYlFIk2kmhYfsnX1qyaaed8O0X+WKfr5KA7T+YFmMH9j
RL3dZvB8Fy4NvnX74EkTRfx+uPE73YvrwfMPeATfXhN/0n3M8VrYQ3zKJQtz
/9JkvMR5meJ+m8ni3ismyrnePuyhtuoM63/6lF3/zF/TLcz5det49v/7HzGs
bAo=
                  "]}], 
                
                FilledCurveBox[{{{1, 4, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {
                 1, 3, 3}, {1, 3, 3}}}, CompressedData["
1:eJxTTMoPSmVmYGBgBGJhIGYC4p6c579XXrRxyBdqPnBKUd3huLd5p+MBS4cE
9nOSgbOUHKJTrO/7+5o6mJ219rtoqODgtu3z3ysVhnD+nZ91WXtMNOD8P0Bu
ibCsg0s30GBNFQeFm+e+Bz/mcWh7HbhD7qiWQwHQuN7pXA5c1xcX2HppO6wo
sAUyeRyKMya+rfmv7bDgiMKGogx+h3qgMZNnaDtsKQJJyDv0Tc8TamZQd7CI
2+XJ06TpoHwbaLGNisMboLGtpw3h/GAg97WhKZzPrN0udvOdhcMtkDOWqkLs
ibdxsOh0THg6QcMhG2iNxBMbB2n9uypsjJoOB08tdN0WbAsJj4fqDujhAwAc
xYZW
                 "]], 
                
                FilledCurveBox[{{{1, 4, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {
                 1, 3, 3}, {1, 3, 3}}}, CompressedData["
1:eJxTTMoPSmVmYGBgBGJhIGYCYrdtn/9ekbBz2DT3/fJj3FoOfkkCEZZbbB2i
Uqzv+/NqO/RNzxNqbrB2EGo+cGphq5aD+M1z34ObrRyAqr3NPbUcvHiYtNvN
rBxA0q5mWg4zgMoPaFk5bCjKmPh2j5aDLMigfCsHljA+3U2y2g49Oc9/rzS0
cdC/q8LWOFXX4YF/L9AGe4c1MiCFOg78ukCXpNtD3aPjMOltjb3pPnuo+doO
RxWAJgfaO/y7UvFSrVDVYTNI3Wpbh+O7dvSybVByiN/lycOUbevgv35Kaoez
EsQfukD/fN15q6tWycGlG+gAT1sHoOXO3TzKDpox/Ye+rrB1SAOBZyoOdlzX
FxfU2jmAKFsuTQf08AEAsXqDZQ==
                 "]]}, {
                FaceForm[
                 RGBColor[1., 1., 1., 1.]]}, StripOnInput -> False]}, {
             ImageSize -> 32, ImageSize -> {35., 35.}, 
              PlotRange -> {{0., 35.}, {0., 35.}}, AspectRatio -> Automatic, 
              MetaInformation -> {
               "SourceFile" -> 
                "EPS Light\\_Group Icons\\AWS-Cloud-alt_light-bg.pdf"}}], 
            GridBox[{{
               TagBox["\"AWS-Braket\"", "SummaryItem"]}, {
               TagBox[
                DynamicBox[
                 ToBoxes[
                  If[
                   TrueQ[
                    ServiceConnections`Private`authenticatedServiceQ[
                    "connection-3fb584a1a7e1678439de863af089fd71"]], 
                   "Connected", "Not Connected"], StandardForm]], 
                "SummaryItem"]}}, 
             GridBoxAlignment -> {
              "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, AutoDelete -> 
             False, GridBoxItemSize -> {
              "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
             GridBoxSpacings -> {"Columns" -> {{2}}, "Rows" -> {{Automatic}}},
              BaseStyle -> {
              ShowStringCharacters -> False, NumberMarks -> False, 
               PrintPrecision -> 3, ShowSyntaxStyles -> False}]}}, 
          GridBoxAlignment -> {"Columns" -> {{Left}}, "Rows" -> {{Top}}}, 
          AutoDelete -> False, 
          GridBoxItemSize -> {
           "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
          BaselinePosition -> {1, 1}]}, 
       Dynamic[Typeset`open$$], ImageSize -> Automatic]},
     "SummaryPanel"],
    DynamicModuleValues:>{}], "]"}],
  ServiceObject[
  "AWS-Braket", "ID" -> "connection-3fb584a1a7e1678439de863af089fd71"],
  Editable->False,
  SelectWithContents->True,
  Selectable->False]], "Output",
 CellChangeTimes->{3.865789198996779*^9, 3.865789366041086*^9, 
  3.865789647884474*^9, 3.888020359387459*^9, 3.888087208548856*^9, 
  3.888411899518855*^9, 3.88901849748062*^9, 3.889825287401614*^9, 
  3.890332033549774*^9, 3.8922254330583*^9, 3.892753399411378*^9, 
  3.893883885375373*^9, 3.893885133159071*^9, 3.893892003005608*^9, 
  3.893979250788625*^9},
 CellLabel->"Out[32]=",
 CellID->1851668101,ExpressionUUID->"027ae674-f0b7-4674-817c-028ccd24e2ce"]
}, Open  ]],

Cell["Fetch available devices:", "CodeText",
 CellChangeTimes->{{3.865787306578583*^9, 3.865787310755556*^9}, {
  3.893979848981462*^9, 3.893979849621423*^9}},
 CellID->82440175,ExpressionUUID->"3ee6956e-64bd-4d07-9457-93a00beebc14"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"devices", "=", 
  RowBox[{
   RowBox[{"braket", "[", 
    RowBox[{"\"\<SearchDevices\>\"", ",", 
     RowBox[{"\"\<Filters\>\"", "->", 
      RowBox[{"{", "}"}]}]}], "]"}], "[", 
   RowBox[{"\"\<Devices\>\"", ",", "All"}], "]"}]}]], "Input",
 CellChangeTimes->{{3.8657078214334373`*^9, 3.865707869026066*^9}, {
  3.8657081592162046`*^9, 3.8657082057942142`*^9}, {3.8657082560959597`*^9, 
  3.865708285748803*^9}, {3.865708326790202*^9, 3.865708328970191*^9}, {
  3.865774806162451*^9, 3.865774807117334*^9}, {3.888435915940866*^9, 
  3.888435916132867*^9}, {3.893885205398447*^9, 3.893885208820818*^9}, {
  3.893933865469859*^9, 3.893933876434073*^9}, {3.893934598638564*^9, 
  3.893934604704846*^9}, {3.893937576820883*^9, 3.893937586767768*^9}},
 CellLabel->"In[34]:=",
 CellID->445068910,ExpressionUUID->"d4a75b06-2f14-46d2-9ff0-1efcf8970bd8"],

Cell[BoxData[
 TagBox[
  TagBox[
   DynamicModuleBox[{TypeSystem`NestedGrid`PackagePrivate`$state$$ = <|
    "InitialData" -> {<|
       "DeviceArn" -> "arn:aws:braket:us-east-1::device/qpu/ionq/Aria-1", 
        "DeviceName" -> "Aria 1", "ProviderName" -> "IonQ", "DeviceType" -> 
        "QPU", "DeviceStatus" -> "OFFLINE", "DeviceCapabilities" -> 
        "{\"service\": {\"braketSchemaHeader\": {\"name\": \
\"braket.device_schema.device_service_properties\", \"version\": \"1\"}, \
\"executionWindows\": [{\"executionDay\": \"Weekdays\", \"windowStartHour\": \
\"12:00:00\", \"windowEndHour\": \"03:00:00\"}], \"shotsRange\": [1, 5000], \
\"deviceCost\": {\"price\": 0.03, \"unit\": \"shot\"}, \
\"deviceDocumentation\": {\"imageUrl\": \
\"http://d1.awsstatic.com/re19/Braket/IonQ%20Logo.\
59ea92b40cff5a2c2e90d9d981b864c2f424c5a8.png\", \"summary\": \"Universal \
gate-model QPU based on trapped ions\", \"externalDocumentationUrl\": \
\"https://ionq.com/quantum-systems/aria\"}, \"deviceLocation\": \"Maryland, \
USA\", \"updatedAt\": \"2023-05-16T17:32:23+00:00\"}, \"action\": \
{\"braket.ir.openqasm.program\": {\"version\": [\"1\"], \"actionType\": \
\"braket.ir.openqasm.program\", \"supportedOperations\": [\"x\", \"y\", \
\"z\", \"rx\", \"ry\", \"rz\", \"h\", \"cnot\", \"s\", \"si\", \"t\", \"ti\", \
\"v\", \"vi\", \"xx\", \"yy\", \"zz\", \"swap\"], \"supportedModifiers\": [], \
\"supportedPragmas\": [\"braket_result_type_sample\", \
\"braket_result_type_expectation\", \"braket_result_type_variance\", \
\"braket_result_type_probability\", \"verbatim\"], \"forbiddenPragmas\": \
[\"braket_unitary_matrix\", \"braket_result_type_state_vector\", \
\"braket_result_type_density_matrix\", \"braket_result_type_amplitude\", \
\"braket_result_type_adjoint_gradient\"], \"maximumQubitArrays\": 1, \
\"maximumClassicalArrays\": 1, \"forbiddenArrayOperations\": [\"concatenation\
\", \"negativeIndex\", \"range\", \"rangeWithStep\", \"slicing\", \"selection\
\"], \"requiresAllQubitsMeasurement\": true, \"supportPhysicalQubits\": true, \
\"requiresContiguousQubitIndices\": false, \"supportsPartialVerbatimBox\": \
false, \"supportsUnassignedMeasurements\": true, \
\"disabledQubitRewiringSupported\": false, \"supportedResultTypes\": [{\"name\
\": \"Sample\", \"observables\": [\"x\", \"y\", \"z\", \"h\", \"i\"], \
\"minShots\": 1, \"maxShots\": 10000}, {\"name\": \"Expectation\", \
\"observables\": [\"x\", \"y\", \"z\", \"h\", \"i\"], \"minShots\": 1, \
\"maxShots\": 10000}, {\"name\": \"Variance\", \"observables\": [\"x\", \
\"y\", \"z\", \"h\", \"i\"], \"minShots\": 1, \"maxShots\": 10000}, \
{\"name\": \"Probability\", \"minShots\": 1, \"maxShots\": 10000}]}}, \
\"deviceParameters\": {\"title\": \"IonqDeviceParameters\", \"description\": \
\"This defines the parameters common to all the IonQ devices.\", \"type\": \
\"object\", \"properties\": {\"braketSchemaHeader\": {\"title\": \
\"Braketschemaheader\", \"const\": {\"name\": \
\"braket.device_schema.ionq.ionq_device_parameters\", \"version\": \"1\"}}, \
\"paradigmParameters\": {\"$ref\": \"#/definitions/GateModelParameters\"}, \
\"errorMitigation\": {\"title\": \"Errormitigation\", \"type\": \"array\", \
\"items\": {\"$ref\": \"#/definitions/ErrorMitigationScheme\"}}}, \
\"required\": [\"paradigmParameters\"], \"definitions\": \
{\"GateModelParameters\": {\"title\": \"GateModelParameters\", \
\"description\": \"Defines parameters common to all gate model devices.\", \
\"type\": \"object\", \"properties\": {\"braketSchemaHeader\": {\"title\": \
\"Braketschemaheader\", \"const\": {\"name\": \
\"braket.device_schema.gate_model_parameters\", \"version\": \"1\"}}, \
\"qubitCount\": {\"title\": \"Qubitcount\", \"minimum\": 0, \"type\": \
\"integer\"}, \"disableQubitRewiring\": {\"title\": \"Disablequbitrewiring\", \
\"default\": false, \"type\": \"boolean\"}}, \"required\": [\"qubitCount\"]}, \
\"ErrorMitigationScheme\": {\"title\": \"ErrorMitigationScheme\", \
\"description\": \"Base class for an error mitigation scheme.\", \"type\": \
\"object\", \"properties\": {}}}}, \"braketSchemaHeader\": {\"name\": \
\"braket.device_schema.ionq.ionq_device_capabilities\", \"version\": \"1\"}, \
\"paradigm\": {\"braketSchemaHeader\": {\"name\": \
\"braket.device_schema.gate_model_qpu_paradigm_properties\", \"version\": \"1\
\"}, \"connectivity\": {\"fullyConnected\": true, \"connectivityGraph\": {}}, \
\"qubitCount\": 25, \"nativeGateSet\": [\"GPI\", \"GPI2\", \"MS\"]}, \
\"provider\": {\"braketSchemaHeader\": {\"name\": \
\"braket.device_schema.ionq.ionq_provider_properties\", \"version\": \"1\"}, \
\"fidelity\": {\"1Q\": {\"mean\": 0.9995}, \"2Q\": {\"mean\": 0.9865}, \"spam\
\": {\"mean\": 0.995}}, \"timing\": {\"T1\": 100.0, \"T2\": 1.0, \"1Q\": \
0.000135, \"2Q\": 0.0006, \"readout\": 0.0003, \"reset\": 2e-05}, \
\"errorMitigation\": \
{\"braket.device_schema.error_mitigation.debias.Debias\": {\"minimumShots\": \
2500}}}}"|>, <|
       "DeviceArn" -> "arn:aws:braket:us-east-1::device/qpu/quera/Aquila", 
        "DeviceName" -> "Aquila", "ProviderName" -> "QuEra", "DeviceType" -> 
        "QPU", "DeviceStatus" -> "ONLINE", "DeviceCapabilities" -> 
        "{\"service\": {\"braketSchemaHeader\": {\"name\": \
\"braket.device_schema.device_service_properties\", \"version\": \"1\"}, \
\"executionWindows\": [{\"executionDay\": \"Tuesday\", \"windowStartHour\": \
\"16:00:00\", \"windowEndHour\": \"20:00:00\"}, {\"executionDay\": \
\"Wednesday\", \"windowStartHour\": \"16:00:00\", \"windowEndHour\": \
\"20:00:00\"}, {\"executionDay\": \"Thursday\", \"windowStartHour\": \
\"16:00:00\", \"windowEndHour\": \"18:00:00\"}], \"shotsRange\": [1, 1000], \
\"deviceCost\": {\"price\": 0.01, \"unit\": \"shot\"}, \
\"deviceDocumentation\": {\"imageUrl\": \
\"https://a.b.cdn.console.awsstatic.com/\
59534b58c709fc239521ef866db9ea3f1aba73ad3ebcf60c23914ad8c5c5c878/\
a6cfc6fca26cf1c2e1c6.png\", \"summary\": \"Analog quantum processor based on \
neutral atom arrays\", \"externalDocumentationUrl\": \
\"https://www.quera.com/aquila\"}, \"deviceLocation\": \"Boston, USA\", \
\"updatedAt\": \"2023-05-22T16:00:00+00:00\"}, \"action\": \
{\"braket.ir.ahs.program\": {\"version\": [\"1\"], \"actionType\": \
\"braket.ir.ahs.program\"}}, \"deviceParameters\": {}, \
\"braketSchemaHeader\": {\"name\": \
\"braket.device_schema.quera.quera_device_capabilities\", \"version\": \
\"1\"}, \"paradigm\": {\"braketSchemaHeader\": {\"name\": \
\"braket.device_schema.quera.quera_ahs_paradigm_properties\", \"version\": \
\"1\"}, \"qubitCount\": 256, \"lattice\": {\"area\": {\"width\": 7.5e-05, \
\"height\": 7.6e-05}, \"geometry\": {\"spacingRadialMin\": 4e-06, \
\"spacingVerticalMin\": 4e-06, \"positionResolution\": 1e-07, \
\"numberSitesMax\": 256}}, \"rydberg\": {\"c6Coefficient\": 5.42e-24, \
\"rydbergGlobal\": {\"rabiFrequencyRange\": [0.0, 15800000.0], \
\"rabiFrequencyResolution\": 400.0, \"rabiFrequencySlewRateMax\": \
250000000000000.0, \"detuningRange\": [-125000000.0, 125000000.0], \
\"detuningResolution\": 0.2, \"detuningSlewRateMax\": 2500000000000000.0, \
\"phaseRange\": [-99.0, 99.0], \"phaseResolution\": 5e-07, \
\"timeResolution\": 1e-09, \"timeDeltaMin\": 5e-08, \"timeMin\": 0.0, \
\"timeMax\": 4e-06}, \"rydbergLocal\": {\"detuningRange\": [0.0, \
125000000.0], \"detuningSlewRateMax\": 1256600000000000.0, \
\"siteCoefficientRange\": [0.0, 1.0], \"numberLocalDetuningSitesMax\": 200, \
\"spacingRadialMin\": 5e-06, \"timeResolution\": 1e-09, \"timeDeltaMin\": \
5e-08}}, \"performance\": {\"lattice\": {\"positionErrorAbs\": 1.47e-07}, \
\"rydberg\": {\"rydbergGlobal\": {\"rabiFrequencyErrorRel\": 0.02}, \
\"rydbergLocal\": {\"detuningErrorRms\": 0.02, \"siteCoefficientErrorRms\": \
0.1, \"errorRateIncoherentBright\": 36000.0, \"errorRateIncoherentDark\": \
720.0, \"crosstalk\": 0.02}}}}}"|>, <|
       "DeviceArn" -> "arn:aws:braket:us-east-1::device/qpu/ionq/Harmony", 
        "DeviceName" -> "Harmony", "ProviderName" -> "IonQ", "DeviceType" -> 
        "QPU", "DeviceStatus" -> "ONLINE", "DeviceCapabilities" -> 
        "{\"service\": {\"braketSchemaHeader\": {\"name\": \
\"braket.device_schema.device_service_properties\", \"version\": \"1\"}, \
\"executionWindows\": [{\"executionDay\": \"Weekdays\", \"windowStartHour\": \
\"12:00:00\", \"windowEndHour\": \"03:00:00\"}], \"shotsRange\": [1, 10000], \
\"deviceCost\": {\"price\": 0.01, \"unit\": \"shot\"}, \
\"deviceDocumentation\": {\"imageUrl\": \
\"http://d1.awsstatic.com/re19/Braket/IonQ%20Logo.\
59ea92b40cff5a2c2e90d9d981b864c2f424c5a8.png\", \"summary\": \"Universal \
gate-model QPU based on trapped ions\", \"externalDocumentationUrl\": \
\"https://ionq.com/quantum-systems/harmony\"}, \"deviceLocation\": \
\"Maryland, USA\", \"updatedAt\": \"2023-05-24T11:00:04+00:00\"}, \"action\": \
{\"braket.ir.jaqcd.program\": {\"version\": [\"1\"], \"actionType\": \
\"braket.ir.jaqcd.program\", \"supportedOperations\": [\"x\", \"y\", \"z\", \
\"rx\", \"ry\", \"rz\", \"h\", \"cnot\", \"s\", \"si\", \"t\", \"ti\", \"v\", \
\"vi\", \"xx\", \"yy\", \"zz\", \"swap\"], \"supportedResultTypes\": [{\"name\
\": \"Sample\", \"observables\": [\"x\", \"y\", \"z\", \"h\", \"i\"], \
\"minShots\": 1, \"maxShots\": 10000}, {\"name\": \"Expectation\", \
\"observables\": [\"x\", \"y\", \"z\", \"h\", \"i\"], \"minShots\": 1, \
\"maxShots\": 10000}, {\"name\": \"Variance\", \"observables\": [\"x\", \
\"y\", \"z\", \"h\", \"i\"], \"minShots\": 1, \"maxShots\": 10000}, \
{\"name\": \"Probability\", \"minShots\": 1, \"maxShots\": 10000}], \
\"disabledQubitRewiringSupported\": false}, \"braket.ir.openqasm.program\": {\
\"version\": [\"1\"], \"actionType\": \"braket.ir.openqasm.program\", \
\"supportedOperations\": [\"x\", \"y\", \"z\", \"rx\", \"ry\", \"rz\", \"h\", \
\"cnot\", \"s\", \"si\", \"t\", \"ti\", \"v\", \"vi\", \"xx\", \"yy\", \
\"zz\", \"swap\"], \"supportedModifiers\": [], \"supportedPragmas\": \
[\"braket_result_type_sample\", \"braket_result_type_expectation\", \
\"braket_result_type_variance\", \"braket_result_type_probability\", \
\"verbatim\"], \"forbiddenPragmas\": [\"braket_unitary_matrix\", \
\"braket_result_type_state_vector\", \"braket_result_type_density_matrix\", \
\"braket_result_type_amplitude\", \"braket_result_type_adjoint_gradient\"], \
\"maximumQubitArrays\": 1, \"maximumClassicalArrays\": 1, \
\"forbiddenArrayOperations\": [\"concatenation\", \"negativeIndex\", \
\"range\", \"rangeWithStep\", \"slicing\", \"selection\"], \
\"requiresAllQubitsMeasurement\": true, \"supportPhysicalQubits\": true, \
\"requiresContiguousQubitIndices\": false, \"supportsPartialVerbatimBox\": \
false, \"supportsUnassignedMeasurements\": true, \
\"disabledQubitRewiringSupported\": false, \"supportedResultTypes\": [{\"name\
\": \"Sample\", \"observables\": [\"x\", \"y\", \"z\", \"h\", \"i\"], \
\"minShots\": 1, \"maxShots\": 10000}, {\"name\": \"Expectation\", \
\"observables\": [\"x\", \"y\", \"z\", \"h\", \"i\"], \"minShots\": 1, \
\"maxShots\": 10000}, {\"name\": \"Variance\", \"observables\": [\"x\", \
\"y\", \"z\", \"h\", \"i\"], \"minShots\": 1, \"maxShots\": 10000}, \
{\"name\": \"Probability\", \"minShots\": 1, \"maxShots\": 10000}]}}, \
\"deviceParameters\": {\"title\": \"IonqDeviceParameters\", \"description\": \
\"This defines the parameters common to all the IonQ devices.\", \"type\": \
\"object\", \"properties\": {\"braketSchemaHeader\": {\"title\": \
\"Braketschemaheader\", \"const\": {\"name\": \
\"braket.device_schema.ionq.ionq_device_parameters\", \"version\": \"1\"}}, \
\"paradigmParameters\": {\"$ref\": \"#/definitions/GateModelParameters\"}}, \
\"required\": [\"paradigmParameters\"], \"definitions\": \
{\"GateModelParameters\": {\"title\": \"GateModelParameters\", \
\"description\": \"Defines parameters common to all gate model devices.\", \
\"type\": \"object\", \"properties\": {\"braketSchemaHeader\": {\"title\": \
\"Braketschemaheader\", \"const\": {\"name\": \
\"braket.device_schema.gate_model_parameters\", \"version\": \"1\"}}, \
\"qubitCount\": {\"title\": \"Qubitcount\", \"minimum\": 0, \"type\": \
\"integer\"}, \"disableQubitRewiring\": {\"title\": \"Disablequbitrewiring\", \
\"default\": false, \"type\": \"boolean\"}}, \"required\": \
[\"qubitCount\"]}}}, \"braketSchemaHeader\": {\"name\": \
\"braket.device_schema.ionq.ionq_device_capabilities\", \"version\": \"1\"}, \
\"paradigm\": {\"braketSchemaHeader\": {\"name\": \
\"braket.device_schema.gate_model_qpu_paradigm_properties\", \"version\": \"1\
\"}, \"connectivity\": {\"fullyConnected\": true, \"connectivityGraph\": {}}, \
\"qubitCount\": 11, \"nativeGateSet\": [\"GPI\", \"GPI2\", \"MS\"]}, \
\"provider\": {\"braketSchemaHeader\": {\"name\": \
\"braket.device_schema.ionq.ionq_provider_properties\", \"version\": \"1\"}, \
\"fidelity\": {\"1Q\": {\"mean\": 0.999}, \"2Q\": {\"mean\": 0.9549}, \
\"spam\": {\"mean\": 0.99752}}, \"timing\": {\"T1\": 10000.0, \"T2\": 0.2, \
\"1Q\": 1e-05, \"2Q\": 0.0002, \"readout\": 0.00013, \"reset\": 2e-05}, \
\"errorMitigation\": null}}"|>, <|
       "DeviceArn" -> "arn:aws:braket:::device/quantum-simulator/amazon/tn1", 
        "DeviceName" -> "TN1", "ProviderName" -> "Amazon Braket", 
        "DeviceType" -> "SIMULATOR", "DeviceStatus" -> "ONLINE", 
        "DeviceCapabilities" -> 
        "{\"service\": {\"braketSchemaHeader\": {\"name\": \
\"braket.device_schema.device_service_properties\", \"version\": \"1\"}, \
\"executionWindows\": [{\"executionDay\": \"Everyday\", \"windowStartHour\": \
\"00:00:00\", \"windowEndHour\": \"23:59:59\"}], \"shotsRange\": [1, 1000], \
\"deviceCost\": {\"price\": 0.275, \"unit\": \"minute\"}, \
\"deviceDocumentation\": {\"imageUrl\": \
\"https://d1.awsstatic.com/about-aws/whats-new/lpm-assets/services/SiteMerch_\
Qx_Editorial-reInvent.d5a91c3e3fa666a2c33b8a912c21d1cb4ef270fb.png\", \
\"summary\": \"Amazon Braket tensor network simulator\", \
\"externalDocumentationUrl\": \
\"https://docs.aws.amazon.com/braket/latest/developerguide/braket-devices.\
html#choose-a-simulator\"}, \"updatedAt\": \"2022-06-22T10:18:00\"}, \"action\
\": {\"braket.ir.jaqcd.program\": {\"version\": [\"1.0\", \"1.1\"], \
\"actionType\": \"braket.ir.jaqcd.program\", \"supportedOperations\": [\"cnot\
\", \"cphaseshift\", \"cphaseshift00\", \"cphaseshift01\", \"cphaseshift10\", \
\"cy\", \"cz\", \"ecr\", \"h\", \"i\", \"iswap\", \"pswap\", \"phaseshift\", \
\"rx\", \"ry\", \"rz\", \"s\", \"si\", \"swap\", \"t\", \"ti\", \"v\", \
\"vi\", \"x\", \"xx\", \"xy\", \"y\", \"yy\", \"z\", \"zz\"], \
\"supportedResultTypes\": [{\"name\": \"Sample\", \"observables\": [\"x\", \
\"y\", \"z\", \"h\", \"i\"], \"minShots\": 1, \"maxShots\": 1000}, {\"name\": \
\"Expectation\", \"observables\": [\"x\", \"y\", \"z\", \"h\", \"i\"], \
\"minShots\": 1, \"maxShots\": 1000}, {\"name\": \"Variance\", \
\"observables\": [\"x\", \"y\", \"z\", \"h\", \"i\"], \"minShots\": 1, \
\"maxShots\": 1000}]}, \"braket.ir.openqasm.program\": {\"version\": \
[\"1.0\"], \"actionType\": \"braket.ir.openqasm.program\", \
\"supportedOperations\": [\"cnot\", \"cphaseshift\", \"cphaseshift00\", \
\"cphaseshift01\", \"cphaseshift10\", \"cy\", \"cz\", \"ecr\", \"h\", \"i\", \
\"iswap\", \"pswap\", \"phaseshift\", \"rx\", \"ry\", \"rz\", \"s\", \"si\", \
\"swap\", \"t\", \"ti\", \"v\", \"vi\", \"x\", \"xx\", \"xy\", \"y\", \"yy\", \
\"z\", \"zz\"], \"supportedPragmas\": [\"braket_basis_rotation\", \
\"braket_result_type_sample\", \"braket_result_type_expectation\", \
\"braket_result_type_variance\"], \"forbiddenPragmas\": \
[\"braket_result_type_state_vector\", \"braket_result_type_density_matrix\", \
\"braket_noise_amplitude_damping\", \"braket_noise_bit_flip\", \
\"braket_noise_depolarizing\", \"braket_noise_kraus\", \
\"braket_noise_pauli_channel\", \
\"braket_noise_generalized_amplitude_damping\", \"braket_noise_phase_flip\", \
\"braket_noise_phase_damping\", \"braket_noise_two_qubit_dephasing\", \
\"braket_noise_two_qubit_depolarizing\", \"braket_unitary_matrix\", \
\"braket_result_type_adjoint_gradient\"], \"maximumQubitArrays\": 1, \
\"maximumClassicalArrays\": 1, \"forbiddenArrayOperations\": [\"concatenation\
\", \"negativeIndex\", \"range\", \"rangeWithStep\", \"slicing\", \"selection\
\"], \"requiresAllQubitsMeasurement\": true, \"supportPhysicalQubits\": \
false, \"requiresContiguousQubitIndices\": true, \"supportsPartialVerbatimBox\
\": true, \"supportsUnassignedMeasurements\": true, \
\"disabledQubitRewiringSupported\": false, \"supportedResultTypes\": [{\"name\
\": \"Sample\", \"observables\": [\"x\", \"y\", \"z\", \"h\", \"i\"], \
\"minShots\": 1, \"maxShots\": 1000}, {\"name\": \"Expectation\", \
\"observables\": [\"x\", \"y\", \"z\", \"h\", \"i\"], \"minShots\": 1, \
\"maxShots\": 1000}, {\"name\": \"Variance\", \"observables\": [\"x\", \"y\", \
\"z\", \"h\", \"i\"], \"minShots\": 1, \"maxShots\": 1000}]}}, \
\"deviceParameters\": {\"title\": \"GateModelSimulatorDeviceParameters\", \
\"description\": \"This defines the parameters common to all the gatemodel \
devices.\\n\\nAttributes:\\n    paradigmParameters: Parameters that are \
common to gatemodel paradigm\\n\\nExamples:\\n    >>> import json\\n    >>> \
input_json = {\\n    ...    \\\"braketSchemaHeader\\\": {\\n    ...        \\\
\"name\\\": \
\\\"braket.device_schema.simulators.gate_model_simulator_device_parameters\\\"\
,\\n    ...        \\\"version\\\": \\\"1\\\",\\n    ...    },\\n    ...    \
\\\"paradigmParameters\\\": {\\\"braketSchemaHeader\\\": {\\n    ...        \
\\\"name\\\": \\\"braket.device_schema.gate_model_parameters\\\",\\n    ...   \
     \\\"version\\\": \\\"1\\\",\\n    ...    },\\\"qubitCount\\\": 1},\\n    \
... }\\n    >>> \
GateModelSimulatorDeviceParameters.parse_raw_schema(json.dumps(input_json))\",\
 \"type\": \"object\", \"properties\": {\"braketSchemaHeader\": {\"title\": \
\"Braketschemaheader\", \"const\": {\"name\": \
\"braket.device_schema.simulators.gate_model_simulator_device_parameters\", \
\"version\": \"1\"}}, \"paradigmParameters\": {\"$ref\": \
\"#/definitions/GateModelParameters\"}}, \"required\": \
[\"paradigmParameters\"], \"definitions\": {\"GateModelParameters\": {\"title\
\": \"GateModelParameters\", \"description\": \"This defines the parameters \
common to all the gatemodel devices.\\n\\nAttributes:\\n    qubitCount: \
number of qubits for a device\\n\\nExamples:\\n    >>> import json\\n    >>> \
input_json = {\\n    ...    \\\"braketSchemaHeader\\\": {\\n    ...        \\\
\"name\\\": \\\"braket.device_schema.gate_model_parameters\\\",\\n    ...     \
   \\\"version\\\": \\\"1\\\",\\n    ...    },\\n    ...    \
\\\"qubitCount\\\": 1\\n    ... }\\n    >>> \
GateModelParameters.parse_raw_schema(json.dumps(input_json))\", \"type\": \
\"object\", \"properties\": {\"braketSchemaHeader\": {\"title\": \
\"Braketschemaheader\", \"const\": {\"name\": \
\"braket.device_schema.gate_model_parameters\", \"version\": \"1\"}}, \
\"qubitCount\": {\"title\": \"Qubitcount\", \"exclusiveMinimum\": 0, \
\"type\": \"integer\"}}, \"required\": [\"qubitCount\"]}}}, \
\"braketSchemaHeader\": {\"name\": \
\"braket.device_schema.simulators.gate_model_simulator_device_capabilities\", \
\"version\": \"1\"}, \"paradigm\": {\"braketSchemaHeader\": {\"name\": \
\"braket.device_schema.simulators.gate_model_simulator_paradigm_properties\", \
\"version\": \"1\"}, \"qubitCount\": 50}}"|>, <|
       "DeviceArn" -> "arn:aws:braket:::device/quantum-simulator/amazon/sv1", 
        "DeviceName" -> "SV1", "ProviderName" -> "Amazon Braket", 
        "DeviceType" -> "SIMULATOR", "DeviceStatus" -> "ONLINE", 
        "DeviceCapabilities" -> 
        "{\"service\": {\"braketSchemaHeader\": {\"name\": \
\"braket.device_schema.device_service_properties\", \"version\": \"1\"}, \
\"executionWindows\": [{\"executionDay\": \"Everyday\", \"windowStartHour\": \
\"00:00:00\", \"windowEndHour\": \"23:59:59\"}], \"shotsRange\": [0, 100000], \
\"deviceCost\": {\"price\": 0.075, \"unit\": \"minute\"}, \
\"deviceDocumentation\": {\"imageUrl\": \
\"https://d1.awsstatic.com/about-aws/whats-new/lpm-assets/services/SiteMerch_\
Qx_Editorial-reInvent.d5a91c3e3fa666a2c33b8a912c21d1cb4ef270fb.png\", \
\"summary\": \"Amazon Braket state vector simulator\", \
\"externalDocumentationUrl\": \
\"https://docs.aws.amazon.com/braket/latest/developerguide/braket-devices.\
html#choose-a-simulator\"}, \"updatedAt\": \"2022-06-22T10:18:00\"}, \"action\
\": {\"braket.ir.jaqcd.program\": {\"version\": [\"1.0\", \"1.1\"], \
\"actionType\": \"braket.ir.jaqcd.program\", \"supportedOperations\": \
[\"ccnot\", \"cnot\", \"cphaseshift\", \"cphaseshift00\", \"cphaseshift01\", \
\"cphaseshift10\", \"cswap\", \"cy\", \"cz\", \"ecr\", \"h\", \"i\", \
\"iswap\", \"pswap\", \"phaseshift\", \"rx\", \"ry\", \"rz\", \"s\", \"si\", \
\"swap\", \"t\", \"ti\", \"unitary\", \"v\", \"vi\", \"x\", \"xx\", \"xy\", \
\"y\", \"yy\", \"z\", \"zz\"], \"supportedResultTypes\": [{\"name\": \"Sample\
\", \"observables\": [\"x\", \"y\", \"z\", \"h\", \"i\", \"hermitian\"], \
\"minShots\": 1, \"maxShots\": 100000}, {\"name\": \"Expectation\", \
\"observables\": [\"x\", \"y\", \"z\", \"h\", \"i\", \"hermitian\"], \
\"minShots\": 0, \"maxShots\": 100000}, {\"name\": \"Variance\", \
\"observables\": [\"x\", \"y\", \"z\", \"h\", \"i\", \"hermitian\"], \
\"minShots\": 0, \"maxShots\": 100000}, {\"name\": \"Probability\", \
\"minShots\": 1, \"maxShots\": 100000}, {\"name\": \"Amplitude\", \
\"minShots\": 0, \"maxShots\": 0}]}, \"braket.ir.openqasm.program\": \
{\"version\": [\"1.0\"], \"actionType\": \"braket.ir.openqasm.program\", \
\"supportedOperations\": [\"ccnot\", \"cnot\", \"cphaseshift\", \
\"cphaseshift00\", \"cphaseshift01\", \"cphaseshift10\", \"cswap\", \"cy\", \
\"cz\", \"ecr\", \"h\", \"i\", \"iswap\", \"pswap\", \"phaseshift\", \"rx\", \
\"ry\", \"rz\", \"s\", \"si\", \"swap\", \"t\", \"ti\", \"v\", \"vi\", \"x\", \
\"xx\", \"xy\", \"y\", \"yy\", \"z\", \"zz\", \"gpi\", \"gpi2\", \"ms\"], \
\"supportedPragmas\": [\"braket_unitary_matrix\", \"braket_basis_rotation\", \
\"braket_result_type_sample\", \"braket_result_type_expectation\", \
\"braket_result_type_variance\", \"braket_result_type_probability\", \
\"braket_result_type_amplitude\", \"braket_result_type_adjoint_gradient\"], \
\"forbiddenPragmas\": [\"braket_result_type_state_vector\", \
\"braket_result_type_density_matrix\", \"braket_noise_amplitude_damping\", \
\"braket_noise_bit_flip\", \"braket_noise_depolarizing\", \
\"braket_noise_kraus\", \"braket_noise_pauli_channel\", \
\"braket_noise_generalized_amplitude_damping\", \"braket_noise_phase_flip\", \
\"braket_noise_phase_damping\", \"braket_noise_two_qubit_dephasing\", \
\"braket_noise_two_qubit_depolarizing\"], \"maximumQubitArrays\": 1, \
\"maximumClassicalArrays\": 1, \"forbiddenArrayOperations\": [\"concatenation\
\", \"negativeIndex\", \"range\", \"rangeWithStep\", \"slicing\", \"selection\
\"], \"requiresAllQubitsMeasurement\": true, \"supportPhysicalQubits\": \
false, \"requiresContiguousQubitIndices\": true, \"supportsPartialVerbatimBox\
\": true, \"supportsUnassignedMeasurements\": true, \
\"disabledQubitRewiringSupported\": false, \"supportedResultTypes\": [{\"name\
\": \"Sample\", \"observables\": [\"x\", \"y\", \"z\", \"h\", \"i\", \
\"hermitian\"], \"minShots\": 1, \"maxShots\": 100000}, {\"name\": \
\"Expectation\", \"observables\": [\"x\", \"y\", \"z\", \"h\", \"i\", \
\"hermitian\"], \"minShots\": 0, \"maxShots\": 100000}, {\"name\": \"Variance\
\", \"observables\": [\"x\", \"y\", \"z\", \"h\", \"i\", \"hermitian\"], \
\"minShots\": 0, \"maxShots\": 100000}, {\"name\": \"Probability\", \
\"minShots\": 1, \"maxShots\": 100000}, {\"name\": \"Amplitude\", \
\"minShots\": 0, \"maxShots\": 0}, {\"name\": \"AdjointGradient\", \
\"observables\": [\"x\", \"y\", \"z\", \"h\", \"i\"], \"minShots\": 0, \
\"maxShots\": 0}]}}, \"deviceParameters\": {\"title\": \
\"GateModelSimulatorDeviceParameters\", \"description\": \"This defines the \
parameters common to all the gatemodel devices.\\n\\nAttributes:\\n    \
paradigmParameters: Parameters that are common to gatemodel \
paradigm\\n\\nExamples:\\n    >>> import json\\n    >>> input_json = {\\n    \
...    \\\"braketSchemaHeader\\\": {\\n    ...        \\\"name\\\": \
\\\"braket.device_schema.simulators.gate_model_simulator_device_parameters\\\"\
,\\n    ...        \\\"version\\\": \\\"1\\\",\\n    ...    },\\n    ...    \
\\\"paradigmParameters\\\": {\\\"braketSchemaHeader\\\": {\\n    ...        \
\\\"name\\\": \\\"braket.device_schema.gate_model_parameters\\\",\\n    ...   \
     \\\"version\\\": \\\"1\\\",\\n    ...    },\\\"qubitCount\\\": 1},\\n    \
... }\\n    >>> \
GateModelSimulatorDeviceParameters.parse_raw_schema(json.dumps(input_json))\",\
 \"type\": \"object\", \"properties\": {\"braketSchemaHeader\": {\"title\": \
\"Braketschemaheader\", \"const\": {\"name\": \
\"braket.device_schema.simulators.gate_model_simulator_device_parameters\", \
\"version\": \"1\"}}, \"paradigmParameters\": {\"$ref\": \
\"#/definitions/GateModelParameters\"}}, \"required\": \
[\"paradigmParameters\"], \"definitions\": {\"GateModelParameters\": {\"title\
\": \"GateModelParameters\", \"description\": \"This defines the parameters \
common to all the gatemodel devices.\\n\\nAttributes:\\n    qubitCount: \
number of qubits for a device\\n\\nExamples:\\n    >>> import json\\n    >>> \
input_json = {\\n    ...    \\\"braketSchemaHeader\\\": {\\n    ...        \\\
\"name\\\": \\\"braket.device_schema.gate_model_parameters\\\",\\n    ...     \
   \\\"version\\\": \\\"1\\\",\\n    ...    },\\n    ...    \
\\\"qubitCount\\\": 1\\n    ... }\\n    >>> \
GateModelParameters.parse_raw_schema(json.dumps(input_json))\", \"type\": \
\"object\", \"properties\": {\"braketSchemaHeader\": {\"title\": \
\"Braketschemaheader\", \"const\": {\"name\": \
\"braket.device_schema.gate_model_parameters\", \"version\": \"1\"}}, \
\"qubitCount\": {\"title\": \"Qubitcount\", \"exclusiveMinimum\": 0, \
\"type\": \"integer\"}}, \"required\": [\"qubitCount\"]}}}, \
\"braketSchemaHeader\": {\"name\": \
\"braket.device_schema.simulators.gate_model_simulator_device_capabilities\", \
\"version\": \"1\"}, \"paradigm\": {\"braketSchemaHeader\": {\"name\": \
\"braket.device_schema.simulators.gate_model_simulator_paradigm_properties\", \
\"version\": \"1\"}, \"qubitCount\": 34}}"|>, <|
       "DeviceArn" -> "arn:aws:braket:us-east-1::device/qpu/xanadu/Borealis", 
        "DeviceName" -> "Borealis", "ProviderName" -> "Xanadu", "DeviceType" -> 
        "QPU", "DeviceStatus" -> "ONLINE", "DeviceCapabilities" -> 
        "{\"service\": {\"braketSchemaHeader\": {\"name\": \
\"braket.device_schema.device_service_properties\", \"version\": \"1\"}, \
\"executionWindows\": [{\"executionDay\": \"Weekdays\", \"windowStartHour\": \
\"15:00:00\", \"windowEndHour\": \"17:00:00\"}], \"shotsRange\": [1, \
1000000], \"deviceCost\": {\"price\": 0.0002, \"unit\": \"shot\"}, \
\"deviceDocumentation\": {\"imageUrl\": \
\"https://d1.awsstatic.com/re19/Braket/xanadu.\
48c14affd35d042cd2ad42be220bf1dcdeed2f7f.png\", \"summary\": \"Gaussian Boson \
Sampling on a programmable photonic processor\", \
\"externalDocumentationUrl\": \"https://xanadu.ai/products/borealis\"}, \
\"deviceLocation\": \"Ontario, Canada\", \"updatedAt\": \
\"2023-05-24T17:42:52.674561+00:00\"}, \"action\": \
{\"braket.ir.blackbird.program\": {\"version\": [\"1\"], \"actionType\": \
\"braket.ir.blackbird.program\", \"supportedOperations\": [\"s\", \"r0\", \
\"r1\", \"r2\", \"bs0\", \"bs1\", \"bs2\", \"loop0_phase\", \"loop1_phase\", \
\"loop2_phase\"], \"supportedResultTypes\": []}}, \"deviceParameters\": \
{\"braketSchemaHeader\": {\"name\": \
\"braket.device_schema.xanadu.xanadu_device_parameters\", \"version\": \
\"1\"}}, \"braketSchemaHeader\": {\"name\": \
\"braket.device_schema.xanadu.xanadu_device_capabilities\", \"version\": \
\"1\"}, \"paradigm\": {\"braketSchemaHeader\": {\"name\": \
\"braket.device_schema.continuous_variable_qpu_paradigm_properties\", \
\"version\": \"1\"}, \"modes\": {\"spatial\": 1.0, \"concurrent\": 44.0, \
\"temporal_max\": 331.0}, \"layout\": \"name template_borealis\\nversion \
1.0\\ntarget borealis (shots=1)\\ntype tdm (temporal_modes=331, \
copies=1)\\n\\nfloat array p0[1, 331] =\\n    {s}\\nfloat array p1[1, 331] \
=\\n    {r0}\\nfloat array p2[1, 331] =\\n    {bs0}\\nfloat array p3[1, 331] \
=\\n    {loop0_phase}\\nfloat array p4[1, 331] =\\n    {r1}\\nfloat array \
p5[1, 331] =\\n    {bs1}\\nfloat array p6[1, 331] =\\n    \
{loop1_phase}\\nfloat array p7[1, 331] =\\n    {r2}\\nfloat array p8[1, 331] \
=\\n    {bs2}\\nfloat array p9[1, 331] =\\n    {loop2_phase}\\n\\nSgate({s}, \
0.0) | 43\\nRgate({r0}) | 43\\nBSgate({bs0}, 1.5707963267948966) | [42, \
43]\\nRgate({loop0_phase}) | 43\\nRgate({r1}) | 42\\nBSgate({bs1}, \
1.5707963267948966) | [36, 42]\\nRgate({loop1_phase}) | 42\\nRgate({r2}) | 36\
\\nBSgate({bs2}, 1.5707963267948966) | [0, 36]\\nRgate({loop2_phase}) | \
36\\nMeasureFock() | 0\", \"compiler\": [\"borealis\"], \
\"supportedLanguages\": [\"blackbird:1.0\"], \"compilerDefault\": \
\"borealis\", \"nativeGateSet\": [\"s\", \"r0\", \"r1\", \"r2\", \"bs0\", \
\"bs1\", \"bs2\", \"loop0_phase\", \"loop1_phase\", \"loop2_phase\"], \
\"gateParameters\": {\"s\": [[0.0, 2.0]], \"r0\": [[-1.5707963267948966, \
1.5707963267948966]], \"r1\": [[-1.5707963267948966, 1.5707963267948966]], \
\"r2\": [[-1.5707963267948966, 1.5707963267948966]], \"bs0\": [[0.0, \
1.5707963267948966]], \"bs1\": [[0.0, 1.5707963267948966]], \"bs2\": [[0.0, \
1.5707963267948966]], \"loop0_phase\": [[-3.141592653589793, \
3.141592653589793]], \"loop1_phase\": [[-3.141592653589793, \
3.141592653589793]], \"loop2_phase\": [[-3.141592653589793, \
3.141592653589793]]}, \"target\": \"borealis\"}, \"provider\": \
{\"braketSchemaHeader\": {\"name\": \
\"braket.device_schema.xanadu.xanadu_provider_properties\", \"version\": \
\"1\"}, \"loopPhases\": [1.313, 0.07, 1.976], \"schmidtNumber\": 1.151, \
\"commonEfficiency\": 0.369, \"squeezingParametersMean\": {\"low\": 0.708, \
\"high\": 1.173, \"medium\": 0.989}, \"relativeChannelEfficiencies\": [0.927, \
0.939, 0.917, 1.0, 0.968, 0.922, 0.896, 0.97, 0.955, 0.954, 0.97, 0.999, \
0.952, 0.968, 0.95, 0.902], \"loopEfficiencies\": [0.878, 0.882, 0.794]}}"|>, \
<|"DeviceArn" -> "arn:aws:braket:::device/quantum-simulator/amazon/dm1", 
        "DeviceName" -> "dm1", "ProviderName" -> "Amazon Braket", 
        "DeviceType" -> "SIMULATOR", "DeviceStatus" -> "ONLINE", 
        "DeviceCapabilities" -> 
        "{\"service\": {\"braketSchemaHeader\": {\"name\": \
\"braket.device_schema.device_service_properties\", \"version\": \"1\"}, \
\"executionWindows\": [{\"executionDay\": \"Everyday\", \"windowStartHour\": \
\"00:00:00\", \"windowEndHour\": \"23:59:59\"}], \"shotsRange\": [0, 100000], \
\"deviceCost\": {\"price\": 0.075, \"unit\": \"minute\"}, \
\"deviceDocumentation\": {\"imageUrl\": \
\"https://d1.awsstatic.com/about-aws/whats-new/lpm-assets/services/SiteMerch_\
Qx_Editorial-reInvent.d5a91c3e3fa666a2c33b8a912c21d1cb4ef270fb.png\", \
\"summary\": \"Amazon Braket density matrix simulator\", \
\"externalDocumentationUrl\": \
\"https://docs.aws.amazon.com/braket/latest/developerguide/braket-devices.\
html#choose-a-simulator\"}, \"updatedAt\": \"2022-06-22T10:18:00\"}, \"action\
\": {\"braket.ir.jaqcd.program\": {\"version\": [\"1.0\", \"1.1\"], \
\"actionType\": \"braket.ir.jaqcd.program\", \"supportedOperations\": \
[\"amplitude_damping\", \"bit_flip\", \"ccnot\", \"cnot\", \"cphaseshift\", \
\"cphaseshift00\", \"cphaseshift01\", \"cphaseshift10\", \"cswap\", \"cy\", \
\"cz\", \"depolarizing\", \"ecr\", \"pauli_channel\", \
\"generalized_amplitude_damping\", \"h\", \"i\", \"iswap\", \"kraus\", \
\"phase_flip\", \"phase_damping\", \"phaseshift\", \"pswap\", \"rx\", \"ry\", \
\"rz\", \"s\", \"si\", \"swap\", \"t\", \"ti\", \"two_qubit_dephasing\", \
\"two_qubit_depolarizing\", \"unitary\", \"v\", \"vi\", \"x\", \"xx\", \
\"xy\", \"y\", \"yy\", \"z\", \"zz\"], \"supportedResultTypes\": [{\"name\": \
\"Sample\", \"observables\": [\"x\", \"y\", \"z\", \"h\", \"i\", \
\"hermitian\"], \"minShots\": 1, \"maxShots\": 100000}, {\"name\": \
\"Expectation\", \"observables\": [\"x\", \"y\", \"z\", \"h\", \"i\", \
\"hermitian\"], \"minShots\": 0, \"maxShots\": 100000}, {\"name\": \"Variance\
\", \"observables\": [\"x\", \"y\", \"z\", \"h\", \"i\", \"hermitian\"], \
\"minShots\": 0, \"maxShots\": 100000}, {\"name\": \"DensityMatrix\", \
\"minShots\": 0, \"maxShots\": 0}, {\"name\": \"Probability\", \"minShots\": \
1, \"maxShots\": 100000}]}, \"braket.ir.openqasm.program\": {\"version\": \
[\"1.0\"], \"actionType\": \"braket.ir.openqasm.program\", \
\"supportedOperations\": [\"ccnot\", \"cnot\", \"cphaseshift\", \
\"cphaseshift00\", \"cphaseshift01\", \"cphaseshift10\", \"cswap\", \"cy\", \
\"cz\", \"ecr\", \"h\", \"i\", \"iswap\", \"phaseshift\", \"pswap\", \"rx\", \
\"ry\", \"rz\", \"s\", \"si\", \"swap\", \"t\", \"ti\", \"v\", \"vi\", \"x\", \
\"xx\", \"xy\", \"y\", \"yy\", \"z\", \"zz\", \"gpi\", \"gpi2\", \"ms\"], \
\"supportedPragmas\": [\"braket_noise_bit_flip\", \"braket_noise_depolarizing\
\", \"braket_noise_kraus\", \"braket_noise_pauli_channel\", \
\"braket_noise_generalized_amplitude_damping\", \
\"braket_noise_amplitude_damping\", \"braket_noise_phase_flip\", \
\"braket_noise_phase_damping\", \"braket_noise_two_qubit_dephasing\", \
\"braket_noise_two_qubit_depolarizing\", \"braket_unitary_matrix\", \
\"braket_result_type_sample\", \"braket_result_type_expectation\", \
\"braket_result_type_variance\", \"braket_result_type_probability\", \
\"braket_result_type_density_matrix\"], \"forbiddenPragmas\": \
[\"braket_result_type_state_vector\", \
\"braket_result_type_adjoint_gradient\"], \"maximumQubitArrays\": 1, \
\"maximumClassicalArrays\": 1, \"forbiddenArrayOperations\": [\"concatenation\
\", \"negativeIndex\", \"range\", \"rangeWithStep\", \"slicing\", \"selection\
\"], \"requiresAllQubitsMeasurement\": true, \"supportPhysicalQubits\": \
false, \"requiresContiguousQubitIndices\": true, \"supportsPartialVerbatimBox\
\": true, \"supportsUnassignedMeasurements\": true, \
\"disabledQubitRewiringSupported\": false, \"supportedResultTypes\": [{\"name\
\": \"Sample\", \"observables\": [\"x\", \"y\", \"z\", \"h\", \"i\", \
\"hermitian\"], \"minShots\": 1, \"maxShots\": 100000}, {\"name\": \
\"Expectation\", \"observables\": [\"x\", \"y\", \"z\", \"h\", \"i\", \
\"hermitian\"], \"minShots\": 0, \"maxShots\": 100000}, {\"name\": \"Variance\
\", \"observables\": [\"x\", \"y\", \"z\", \"h\", \"i\", \"hermitian\"], \
\"minShots\": 0, \"maxShots\": 100000}, {\"name\": \"DensityMatrix\", \
\"minShots\": 0, \"maxShots\": 0}, {\"name\": \"Probability\", \"minShots\": \
1, \"maxShots\": 100000}]}}, \"deviceParameters\": {\"title\": \
\"GateModelSimulatorDeviceParameters\", \"description\": \"This defines the \
parameters common to all the gatemodel devices.\\n\\nAttributes:\\n    \
paradigmParameters: Parameters that are common to gatemodel \
paradigm\\n\\nExamples:\\n    >>> import json\\n    >>> input_json = {\\n    \
...    \\\"braketSchemaHeader\\\": {\\n    ...        \\\"name\\\": \
\\\"braket.device_schema.simulators.gate_model_simulator_device_parameters\\\"\
,\\n    ...        \\\"version\\\": \\\"1\\\",\\n    ...    },\\n    ...    \
\\\"paradigmParameters\\\": {\\\"braketSchemaHeader\\\": {\\n    ...        \
\\\"name\\\": \\\"braket.device_schema.gate_model_parameters\\\",\\n    ...   \
     \\\"version\\\": \\\"1\\\",\\n    ...    },\\\"qubitCount\\\": 1},\\n    \
... }\\n    >>> \
GateModelSimulatorDeviceParameters.parse_raw_schema(json.dumps(input_json))\",\
 \"type\": \"object\", \"properties\": {\"braketSchemaHeader\": {\"title\": \
\"Braketschemaheader\", \"const\": {\"name\": \
\"braket.device_schema.simulators.gate_model_simulator_device_parameters\", \
\"version\": \"1\"}}, \"paradigmParameters\": {\"$ref\": \
\"#/definitions/GateModelParameters\"}}, \"required\": \
[\"paradigmParameters\"], \"definitions\": {\"GateModelParameters\": {\"title\
\": \"GateModelParameters\", \"description\": \"This defines the parameters \
common to all the gatemodel devices.\\n\\nAttributes:\\n    qubitCount: \
number of qubits for a device\\n\\nExamples:\\n    >>> import json\\n    >>> \
input_json = {\\n    ...    \\\"braketSchemaHeader\\\": {\\n    ...        \\\
\"name\\\": \\\"braket.device_schema.gate_model_parameters\\\",\\n    ...     \
   \\\"version\\\": \\\"1\\\",\\n    ...    },\\n    ...    \
\\\"qubitCount\\\": 1\\n    ... }\\n    >>> \
GateModelParameters.parse_raw_schema(json.dumps(input_json))\", \"type\": \
\"object\", \"properties\": {\"braketSchemaHeader\": {\"title\": \
\"Braketschemaheader\", \"const\": {\"name\": \
\"braket.device_schema.gate_model_parameters\", \"version\": \"1\"}}, \
\"qubitCount\": {\"title\": \"Qubitcount\", \"exclusiveMinimum\": 0, \
\"type\": \"integer\"}}, \"required\": [\"qubitCount\"]}}}, \
\"braketSchemaHeader\": {\"name\": \
\"braket.device_schema.simulators.gate_model_simulator_device_capabilities\", \
\"version\": \"1\"}, \"paradigm\": {\"braketSchemaHeader\": {\"name\": \
\"braket.device_schema.simulators.gate_model_simulator_paradigm_properties\", \
\"version\": \"1\"}, \"qubitCount\": 17}}"|>}, "AllowEmbedding" -> True, 
     "InitialShape" -> 
     TypeSystem`PackageScope`HeaderShape[<|{All, "DeviceArn"} -> 
        1, {All, "DeviceName"} -> 1, {All, "ProviderName"} -> 
        1, {All, "DeviceType"} -> 1, {All, "DeviceStatus"} -> 
        1, {All, "DeviceCapabilities"} -> 1|>, 
       TypeSystem`PackageScope`Limited[
        TypeSystem`PackageScope`ColumnShape[
         TypeSystem`PackageScope`Limited[
          
          TypeSystem`PackageScope`RowShape[<|
           "DeviceArn" -> TypeSystem`PackageScope`AtomShape[560.], 
            "DeviceName" -> 
            TypeSystem`PackageScope`AtomShape[89.60000000000001], 
            "ProviderName" -> TypeSystem`PackageScope`AtomShape[136.5], 
            "DeviceType" -> TypeSystem`PackageScope`AtomShape[94.5], 
            "DeviceStatus" -> TypeSystem`PackageScope`AtomShape[73.5], 
            "DeviceCapabilities" -> 
            TypeSystem`PackageScope`AtomShape[560.]|>], 
          DirectedInfinity[1], 6, {All}]], 7, 
        DirectedInfinity[1], {}]], "InitialType" -> TypeSystem`Vector[
       TypeSystem`Struct[{
        "DeviceArn", "DeviceName", "ProviderName", "DeviceType", 
         "DeviceStatus", "DeviceCapabilities"}, {
         TypeSystem`Atom[String], 
         TypeSystem`Atom[String], 
         TypeSystem`Atom[
          TypeSystem`Enumeration["Amazon Braket", "IonQ", "QuEra", "Xanadu"]], 
         TypeSystem`Atom[
          TypeSystem`Enumeration["QPU", "SIMULATOR"]], 
         TypeSystem`Atom[
          TypeSystem`Enumeration["OFFLINE", "ONLINE"]], 
         TypeSystem`Atom[String]}], 7], "Meta" -> <||>, "RowTarget" -> 20, 
     "ColumnTarget" -> 10, "Shape" -> 
     TypeSystem`PackageScope`HeaderShape[<|{All, "DeviceArn"} -> 
        1, {All, "DeviceName"} -> 1, {All, "ProviderName"} -> 
        1, {All, "DeviceType"} -> 1, {All, "DeviceStatus"} -> 
        1, {All, "DeviceCapabilities"} -> 1|>, 
       TypeSystem`PackageScope`Limited[
        TypeSystem`PackageScope`ColumnShape[
         TypeSystem`PackageScope`Limited[
          
          TypeSystem`PackageScope`RowShape[<|
           "DeviceArn" -> TypeSystem`PackageScope`AtomShape[560.], 
            "DeviceName" -> 
            TypeSystem`PackageScope`AtomShape[89.60000000000001], 
            "ProviderName" -> TypeSystem`PackageScope`AtomShape[136.5], 
            "DeviceType" -> TypeSystem`PackageScope`AtomShape[94.5], 
            "DeviceStatus" -> TypeSystem`PackageScope`AtomShape[73.5], 
            "DeviceCapabilities" -> 
            TypeSystem`PackageScope`AtomShape[560.]|>], 
          DirectedInfinity[1], 6, {All}]], 7, 
        DirectedInfinity[1], {}]], "Type" -> TypeSystem`Vector[
       TypeSystem`Struct[{
        "DeviceArn", "DeviceName", "ProviderName", "DeviceType", 
         "DeviceStatus", "DeviceCapabilities"}, {
         TypeSystem`Atom[String], 
         TypeSystem`Atom[String], 
         TypeSystem`Atom[
          TypeSystem`Enumeration["Amazon Braket", "IonQ", "QuEra", "Xanadu"]], 
         TypeSystem`Atom[
          TypeSystem`Enumeration["QPU", "SIMULATOR"]], 
         TypeSystem`Atom[
          TypeSystem`Enumeration["OFFLINE", "ONLINE"]], 
         TypeSystem`Atom[String]}], 7], "Path" -> {}, "DisplayedRowCount" -> 
     7, "DisplayedColumnCount" -> 6, "DataRowCount" -> 7, "DataColumnCount" -> 
     6, "SortPaths" -> {}, "SortDirections" -> {}, "HiddenItemsMap" -> Null, 
     "UpdateType" -> 1|>, TypeSystem`NestedGrid`PackagePrivate`$outputID$$, 
    TypeSystem`NestedGrid`PackagePrivate`$path$$ = {}, 
    TypeSystem`NestedGrid`PackagePrivate`$vPos$$ = 1, 
    TypeSystem`NestedGrid`PackagePrivate`$hPos$$ = 1, 
    TypeSystem`NestedGrid`PackagePrivate`$grid$$ = 
    DynamicModule[{
     TypeSystem`NestedGrid`PackagePrivate`renderedGrid = Deploy[
        Style[
         Grid[{{
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover["DeviceArn", 
                  Style[
                  "DeviceArn", FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                If[
                  TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                   All, "DeviceArn"}, 1]]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                All, "DeviceArn"}, "ColumnHeader", True], "Mouse"], 
              ImageSize -> {{1, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
             GrayLevel[0.95], Alignment -> {Left, Baseline}], 
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover["DeviceName", 
                  Style[
                  "DeviceName", FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                If[
                  TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                   All, "DeviceName"}, 1]]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                All, "DeviceName"}, "ColumnHeader", True], "Mouse"], 
              ImageSize -> {{1, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
             GrayLevel[0.95], Alignment -> {Left, Baseline}], 
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover["ProviderName", 
                  Style[
                  "ProviderName", FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                If[
                  TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                   All, "ProviderName"}, 1]]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                All, "ProviderName"}, "ColumnHeader", True], "Mouse"], 
              ImageSize -> {{1, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
             GrayLevel[0.95], Alignment -> {Left, Baseline}], 
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover["DeviceType", 
                  Style[
                  "DeviceType", FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                If[
                  TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                   All, "DeviceType"}, 1]]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                All, "DeviceType"}, "ColumnHeader", True], "Mouse"], 
              ImageSize -> {{1, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
             GrayLevel[0.95], Alignment -> {Left, Baseline}], 
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover["DeviceStatus", 
                  Style[
                  "DeviceStatus", FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                If[
                  TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                   All, "DeviceStatus"}, 1]]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                All, "DeviceStatus"}, "ColumnHeader", True], "Mouse"], 
              ImageSize -> {{1, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
             GrayLevel[0.95], Alignment -> {Left, Baseline}], 
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover["DeviceCapabilities", 
                  Style[
                  "DeviceCapabilities", FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                If[
                  TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                   All, "DeviceCapabilities"}, 1]]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                All, "DeviceCapabilities"}, "ColumnHeader", True], "Mouse"], 
              ImageSize -> {{1, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
             GrayLevel[0.95], Alignment -> {Left, Baseline}]}, {
            Item[
             Pane[
              Annotation["arn:aws:braket:us-east-1::device/qpu/ionq/Aria-1", 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{1, 
                 Key["DeviceArn"]}, "Item", False], "Mouse"], 
              ImageSize -> {{560., Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation["Aria 1", 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{1, 
                 Key["DeviceName"]}, "Item", False], "Mouse"], 
              ImageSize -> {{89.60000000000001, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation["IonQ", 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{1, 
                 Key["ProviderName"]}, "Item", False], "Mouse"], 
              ImageSize -> {{136.5, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation["QPU", 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{1, 
                 Key["DeviceType"]}, "Item", False], "Mouse"], 
              ImageSize -> {{94.5, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation["OFFLINE", 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{1, 
                 Key["DeviceStatus"]}, "Item", False], "Mouse"], 
              ImageSize -> {{73.5, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
              "{\"service\": {\"braketSchemaHeader\": {\"name\": \
\"braket.device_schema.device_service_properties\", \"version\": \"1\"}, \
\"executionWindows\": [{\"executionDay\": \"Weekdays\", \"windowStartHour\": \
\"12:00:00\", \"windowEndHour\": \"03:00:00\"}], \"shotsRange\": [1, 5000], \
\"deviceCost\": {\"price\": 0.03, \"unit\": \"shot\"}, \
\"deviceDocumentation\": {\"imageUrl\": \
\"http://d1.awsstatic.com/re19/Braket/IonQ%20Logo.\
59ea92b40cff5a2c2e90d9d981b864c2f424c5a8.png\", \"summary\": \"Universal \
gate-model QPU based on trapped ions\", \"externalDocumentationUrl\": \
\"https://ionq.com/quantum-systems/aria\"}, \"deviceLocation\": \"Maryland, \
USA\", \"updatedAt\": \"2023-05-16T17:32:23+00:00\"}, \"action\": \
{\"braket.ir.openqasm.program\": {\"version\": [\"1\"], \"actionType\": \
\"braket.ir.openqasm.program\", \"supportedOperations\": [\"x\", \"y\", \
\"z\", \"rx\", \"ry\", \"rz\", \"h\", \"cnot\", \"s\", \"si\", \"t\", \"ti\", \
\"v\", \"vi\", \"xx\", \"yy\", \"zz\", \"swap\"], \"supportedModifiers\": [], \
\"supportedPragmas\": [\"braket_result_type_sample\", \
\"braket_result_type_expectation\", \"braket_result_type_variance\", \
\"braket_result_type_probability\", \"verbatim\"], \"forbiddenPragmas\": \
[\"braket_unitary_matrix\", \"braket_result_type_state_vector\", \
\"braket_result_type_density_matrix\", \"braket_result_type_amplitude\", \
\"braket_result_type_adjoint_gradient\"], \"maximumQubitArrays\": 1, \
\"maximumClassicalArrays\": 1, \"forbiddenArrayOperations\": [\"concatenation\
\", \"negativeIndex\", \"range\", \"rangeWithStep\", \"slicing\", \"selection\
\"], \"requiresAllQubitsMeasurement\": true, \"supportPhysicalQubits\": true, \
\"requiresContiguousQubitIndices\": false, \"supportsPartialVerbatimBox\": \
false, \"supportsUnassignedMeasurements\": true, \
\"disabledQubitRewiringSupported\": false, \"supportedResultTypes\": [{\"name\
\": \"Sample\", \"observables\": [\"x\", \"y\", \"z\", \"h\", \"i\"], \
\"minShots\": 1, \"maxShots\": 10000}, {\"name\": \"Expectation\", \
\"observables\": [\"x\", \"y\", \"z\", \"h\", \"i\"], \"minShots\": 1, \
\"maxShots\": 10000}, {\"name\": \"Variance\", \"observables\": [\"x\", \
\"y\", \"z\", \"h\", \"i\"], \"minShots\": 1, \"maxShots\": 10000}, \
{\"name\": \"Probability\", \"minShots\": 1, \"maxShots\": 10000}]}}, \
\"deviceParameters\": {\"title\": \"IonqDeviceParameters\", \"description\": \
\"This defines the parameters common to all the IonQ devices.\", \"type\": \
\"object\", \"properties\": {\"braketSchemaHeader\": {\"title\": \
\"Braketschemaheader\", \"const\": {\"name\": \
\"braket.device_schema.ionq.ionq_device_parameters\", \"version\": \"1\"}}, \
\"paradigmParameters\": {\"$ref\": \"#/definitions/GateModelParameters\"}, \
\"errorMitigation\": {\"title\": \"Errormitigation\", \"type\": \"array\", \
\"items\": {\"$ref\": \"#/definitions/ErrorMitigationScheme\"}}}, \
\"required\": [\"paradigmParameters\"], \"definitions\": \
{\"GateModelParameters\": {\"title\": \"GateModelParameters\", \
\"description\": \"Defines parameters common to all gate model devices.\", \
\"type\": \"object\", \"properties\": {\"braketSchemaHeader\": {\"title\": \
\"Braketschemaheader\", \"const\": {\"name\": \
\"braket.device_schema.gate_model_parameters\", \"version\": \"1\"}}, \
\"qubitCount\": {\"title\": \"Qubitcount\", \"minimum\": 0, \"type\": \
\"integer\"}, \"disableQubitRewiring\": {\"title\": \"Disablequbitrewiring\", \
\"default\": false, \"type\": \"boolean\"}}, \"required\": [\"qubitCount\"]}, \
\"ErrorMitigationScheme\": {\"title\": \"ErrorMitigationScheme\", \
\"description\": \"Base class for an error mitigation scheme.\", \"type\": \
\"object\", \"properties\": {}}}}, \"braketSchemaHeader\": {\"name\": \
\"braket.device_schema.ionq.ionq_device_capabilities\", \"version\": \"1\"}, \
\"paradigm\": {\"braketSchemaHeader\": {\"name\": \
\"braket.device_schema.gate_model_qpu_paradigm_properties\", \"version\": \"1\
\"}, \"connectivity\": {\"fullyConnected\": true, \"connectivityGraph\": {}}, \
\"qubitCount\": 25, \"nativeGateSet\": [\"GPI\", \"GPI2\", \"MS\"]}, \
\"provider\": {\"braketSchemaHeader\": {\"name\": \
\"braket.device_schema.ionq.ionq_provider_properties\", \"version\": \"1\"}, \
\"fidelity\": {\"1Q\": {\"mean\": 0.9995}, \"2Q\": {\"mean\": 0.9865}, \"spam\
\": {\"mean\": 0.995}}, \"timing\": {\"T1\": 100.0, \"T2\": 1.0, \"1Q\": \
0.000135, \"2Q\": 0.0006, \"readout\": 0.0003, \"reset\": 2e-05}, \
\"errorMitigation\": \
{\"braket.device_schema.error_mitigation.debias.Debias\": {\"minimumShots\": \
2500}}}}", 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{1, 
                 Key["DeviceCapabilities"]}, "Item", False], "Mouse"], 
              ImageSize -> {{560., Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}]}, {
            Item[
             Pane[
              Annotation[
              "arn:aws:braket:us-east-1::device/qpu/quera/Aquila", 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{2, 
                 Key["DeviceArn"]}, "Item", False], "Mouse"], 
              ImageSize -> {{560., Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation["Aquila", 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{2, 
                 Key["DeviceName"]}, "Item", False], "Mouse"], 
              ImageSize -> {{89.60000000000001, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation["QuEra", 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{2, 
                 Key["ProviderName"]}, "Item", False], "Mouse"], 
              ImageSize -> {{136.5, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation["QPU", 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{2, 
                 Key["DeviceType"]}, "Item", False], "Mouse"], 
              ImageSize -> {{94.5, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation["ONLINE", 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{2, 
                 Key["DeviceStatus"]}, "Item", False], "Mouse"], 
              ImageSize -> {{73.5, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
              "{\"service\": {\"braketSchemaHeader\": {\"name\": \
\"braket.device_schema.device_service_properties\", \"version\": \"1\"}, \
\"executionWindows\": [{\"executionDay\": \"Tuesday\", \"windowStartHour\": \
\"16:00:00\", \"windowEndHour\": \"20:00:00\"}, {\"executionDay\": \
\"Wednesday\", \"windowStartHour\": \"16:00:00\", \"windowEndHour\": \
\"20:00:00\"}, {\"executionDay\": \"Thursday\", \"windowStartHour\": \
\"16:00:00\", \"windowEndHour\": \"18:00:00\"}], \"shotsRange\": [1, 1000], \
\"deviceCost\": {\"price\": 0.01, \"unit\": \"shot\"}, \
\"deviceDocumentation\": {\"imageUrl\": \
\"https://a.b.cdn.console.awsstatic.com/\
59534b58c709fc239521ef866db9ea3f1aba73ad3ebcf60c23914ad8c5c5c878/\
a6cfc6fca26cf1c2e1c6.png\", \"summary\": \"Analog quantum processor based on \
neutral atom arrays\", \"externalDocumentationUrl\": \
\"https://www.quera.com/aquila\"}, \"deviceLocation\": \"Boston, USA\", \
\"updatedAt\": \"2023-05-22T16:00:00+00:00\"}, \"action\": \
{\"braket.ir.ahs.program\": {\"version\": [\"1\"], \"actionType\": \
\"braket.ir.ahs.program\"}}, \"deviceParameters\": {}, \
\"braketSchemaHeader\": {\"name\": \
\"braket.device_schema.quera.quera_device_capabilities\", \"version\": \
\"1\"}, \"paradigm\": {\"braketSchemaHeader\": {\"name\": \
\"braket.device_schema.quera.quera_ahs_paradigm_properties\", \"version\": \
\"1\"}, \"qubitCount\": 256, \"lattice\": {\"area\": {\"width\": 7.5e-05, \
\"height\": 7.6e-05}, \"geometry\": {\"spacingRadialMin\": 4e-06, \
\"spacingVerticalMin\": 4e-06, \"positionResolution\": 1e-07, \
\"numberSitesMax\": 256}}, \"rydberg\": {\"c6Coefficient\": 5.42e-24, \
\"rydbergGlobal\": {\"rabiFrequencyRange\": [0.0, 15800000.0], \
\"rabiFrequencyResolution\": 400.0, \"rabiFrequencySlewRateMax\": \
250000000000000.0, \"detuningRange\": [-125000000.0, 125000000.0], \
\"detuningResolution\": 0.2, \"detuningSlewRateMax\": 2500000000000000.0, \
\"phaseRange\": [-99.0, 99.0], \"phaseResolution\": 5e-07, \
\"timeResolution\": 1e-09, \"timeDeltaMin\": 5e-08, \"timeMin\": 0.0, \
\"timeMax\": 4e-06}, \"rydbergLocal\": {\"detuningRange\": [0.0, \
125000000.0], \"detuningSlewRateMax\": 1256600000000000.0, \
\"siteCoefficientRange\": [0.0, 1.0], \"numberLocalDetuningSitesMax\": 200, \
\"spacingRadialMin\": 5e-06, \"timeResolution\": 1e-09, \"timeDeltaMin\": \
5e-08}}, \"performance\": {\"lattice\": {\"positionErrorAbs\": 1.47e-07}, \
\"rydberg\": {\"rydbergGlobal\": {\"rabiFrequencyErrorRel\": 0.02}, \
\"rydbergLocal\": {\"detuningErrorRms\": 0.02, \"siteCoefficientErrorRms\": \
0.1, \"errorRateIncoherentBright\": 36000.0, \"errorRateIncoherentDark\": \
720.0, \"crosstalk\": 0.02}}}}}", 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{2, 
                 Key["DeviceCapabilities"]}, "Item", False], "Mouse"], 
              ImageSize -> {{560., Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}]}, {
            Item[
             Pane[
              Annotation[
              "arn:aws:braket:us-east-1::device/qpu/ionq/Harmony", 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{3, 
                 Key["DeviceArn"]}, "Item", False], "Mouse"], 
              ImageSize -> {{560., Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation["Harmony", 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{3, 
                 Key["DeviceName"]}, "Item", False], "Mouse"], 
              ImageSize -> {{89.60000000000001, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation["IonQ", 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{3, 
                 Key["ProviderName"]}, "Item", False], "Mouse"], 
              ImageSize -> {{136.5, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation["QPU", 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{3, 
                 Key["DeviceType"]}, "Item", False], "Mouse"], 
              ImageSize -> {{94.5, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation["ONLINE", 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{3, 
                 Key["DeviceStatus"]}, "Item", False], "Mouse"], 
              ImageSize -> {{73.5, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
              "{\"service\": {\"braketSchemaHeader\": {\"name\": \
\"braket.device_schema.device_service_properties\", \"version\": \"1\"}, \
\"executionWindows\": [{\"executionDay\": \"Weekdays\", \"windowStartHour\": \
\"12:00:00\", \"windowEndHour\": \"03:00:00\"}], \"shotsRange\": [1, 10000], \
\"deviceCost\": {\"price\": 0.01, \"unit\": \"shot\"}, \
\"deviceDocumentation\": {\"imageUrl\": \
\"http://d1.awsstatic.com/re19/Braket/IonQ%20Logo.\
59ea92b40cff5a2c2e90d9d981b864c2f424c5a8.png\", \"summary\": \"Universal \
gate-model QPU based on trapped ions\", \"externalDocumentationUrl\": \
\"https://ionq.com/quantum-systems/harmony\"}, \"deviceLocation\": \
\"Maryland, USA\", \"updatedAt\": \"2023-05-24T11:00:04+00:00\"}, \"action\": \
{\"braket.ir.jaqcd.program\": {\"version\": [\"1\"], \"actionType\": \
\"braket.ir.jaqcd.program\", \"supportedOperations\": [\"x\", \"y\", \"z\", \
\"rx\", \"ry\", \"rz\", \"h\", \"cnot\", \"s\", \"si\", \"t\", \"ti\", \"v\", \
\"vi\", \"xx\", \"yy\", \"zz\", \"swap\"], \"supportedResultTypes\": [{\"name\
\": \"Sample\", \"observables\": [\"x\", \"y\", \"z\", \"h\", \"i\"], \
\"minShots\": 1, \"maxShots\": 10000}, {\"name\": \"Expectation\", \
\"observables\": [\"x\", \"y\", \"z\", \"h\", \"i\"], \"minShots\": 1, \
\"maxShots\": 10000}, {\"name\": \"Variance\", \"observables\": [\"x\", \
\"y\", \"z\", \"h\", \"i\"], \"minShots\": 1, \"maxShots\": 10000}, \
{\"name\": \"Probability\", \"minShots\": 1, \"maxShots\": 10000}], \
\"disabledQubitRewiringSupported\": false}, \"braket.ir.openqasm.program\": {\
\"version\": [\"1\"], \"actionType\": \"braket.ir.openqasm.program\", \
\"supportedOperations\": [\"x\", \"y\", \"z\", \"rx\", \"ry\", \"rz\", \"h\", \
\"cnot\", \"s\", \"si\", \"t\", \"ti\", \"v\", \"vi\", \"xx\", \"yy\", \
\"zz\", \"swap\"], \"supportedModifiers\": [], \"supportedPragmas\": \
[\"braket_result_type_sample\", \"braket_result_type_expectation\", \
\"braket_result_type_variance\", \"braket_result_type_probability\", \
\"verbatim\"], \"forbiddenPragmas\": [\"braket_unitary_matrix\", \
\"braket_result_type_state_vector\", \"braket_result_type_density_matrix\", \
\"braket_result_type_amplitude\", \"braket_result_type_adjoint_gradient\"], \
\"maximumQubitArrays\": 1, \"maximumClassicalArrays\": 1, \
\"forbiddenArrayOperations\": [\"concatenation\", \"negativeIndex\", \
\"range\", \"rangeWithStep\", \"slicing\", \"selection\"], \
\"requiresAllQubitsMeasurement\": true, \"supportPhysicalQubits\": true, \
\"requiresContiguousQubitIndices\": false, \"supportsPartialVerbatimBox\": \
false, \"supportsUnassignedMeasurements\": true, \
\"disabledQubitRewiringSupported\": false, \"supportedResultTypes\": [{\"name\
\": \"Sample\", \"observables\": [\"x\", \"y\", \"z\", \"h\", \"i\"], \
\"minShots\": 1, \"maxShots\": 10000}, {\"name\": \"Expectation\", \
\"observables\": [\"x\", \"y\", \"z\", \"h\", \"i\"], \"minShots\": 1, \
\"maxShots\": 10000}, {\"name\": \"Variance\", \"observables\": [\"x\", \
\"y\", \"z\", \"h\", \"i\"], \"minShots\": 1, \"maxShots\": 10000}, \
{\"name\": \"Probability\", \"minShots\": 1, \"maxShots\": 10000}]}}, \
\"deviceParameters\": {\"title\": \"IonqDeviceParameters\", \"description\": \
\"This defines the parameters common to all the IonQ devices.\", \"type\": \
\"object\", \"properties\": {\"braketSchemaHeader\": {\"title\": \
\"Braketschemaheader\", \"const\": {\"name\": \
\"braket.device_schema.ionq.ionq_device_parameters\", \"version\": \"1\"}}, \
\"paradigmParameters\": {\"$ref\": \"#/definitions/GateModelParameters\"}}, \
\"required\": [\"paradigmParameters\"], \"definitions\": \
{\"GateModelParameters\": {\"title\": \"GateModelParameters\", \
\"description\": \"Defines parameters common to all gate model devices.\", \
\"type\": \"object\", \"properties\": {\"braketSchemaHeader\": {\"title\": \
\"Braketschemaheader\", \"const\": {\"name\": \
\"braket.device_schema.gate_model_parameters\", \"version\": \"1\"}}, \
\"qubitCount\": {\"title\": \"Qubitcount\", \"minimum\": 0, \"type\": \
\"integer\"}, \"disableQubitRewiring\": {\"title\": \"Disablequbitrewiring\", \
\"default\": false, \"type\": \"boolean\"}}, \"required\": \
[\"qubitCount\"]}}}, \"braketSchemaHeader\": {\"name\": \
\"braket.device_schema.ionq.ionq_device_capabilities\", \"version\": \"1\"}, \
\"paradigm\": {\"braketSchemaHeader\": {\"name\": \
\"braket.device_schema.gate_model_qpu_paradigm_properties\", \"version\": \"1\
\"}, \"connectivity\": {\"fullyConnected\": true, \"connectivityGraph\": {}}, \
\"qubitCount\": 11, \"nativeGateSet\": [\"GPI\", \"GPI2\", \"MS\"]}, \
\"provider\": {\"braketSchemaHeader\": {\"name\": \
\"braket.device_schema.ionq.ionq_provider_properties\", \"version\": \"1\"}, \
\"fidelity\": {\"1Q\": {\"mean\": 0.999}, \"2Q\": {\"mean\": 0.9549}, \
\"spam\": {\"mean\": 0.99752}}, \"timing\": {\"T1\": 10000.0, \"T2\": 0.2, \
\"1Q\": 1e-05, \"2Q\": 0.0002, \"readout\": 0.00013, \"reset\": 2e-05}, \
\"errorMitigation\": null}}", 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{3, 
                 Key["DeviceCapabilities"]}, "Item", False], "Mouse"], 
              ImageSize -> {{560., Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}]}, {
            Item[
             Pane[
              Annotation[
              "arn:aws:braket:::device/quantum-simulator/amazon/tn1", 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{4, 
                 Key["DeviceArn"]}, "Item", False], "Mouse"], 
              ImageSize -> {{560., Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation["TN1", 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{4, 
                 Key["DeviceName"]}, "Item", False], "Mouse"], 
              ImageSize -> {{89.60000000000001, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation["Amazon Braket", 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{4, 
                 Key["ProviderName"]}, "Item", False], "Mouse"], 
              ImageSize -> {{136.5, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation["SIMULATOR", 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{4, 
                 Key["DeviceType"]}, "Item", False], "Mouse"], 
              ImageSize -> {{94.5, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation["ONLINE", 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{4, 
                 Key["DeviceStatus"]}, "Item", False], "Mouse"], 
              ImageSize -> {{73.5, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
              "{\"service\": {\"braketSchemaHeader\": {\"name\": \
\"braket.device_schema.device_service_properties\", \"version\": \"1\"}, \
\"executionWindows\": [{\"executionDay\": \"Everyday\", \"windowStartHour\": \
\"00:00:00\", \"windowEndHour\": \"23:59:59\"}], \"shotsRange\": [1, 1000], \
\"deviceCost\": {\"price\": 0.275, \"unit\": \"minute\"}, \
\"deviceDocumentation\": {\"imageUrl\": \
\"https://d1.awsstatic.com/about-aws/whats-new/lpm-assets/services/SiteMerch_\
Qx_Editorial-reInvent.d5a91c3e3fa666a2c33b8a912c21d1cb4ef270fb.png\", \
\"summary\": \"Amazon Braket tensor network simulator\", \
\"externalDocumentationUrl\": \
\"https://docs.aws.amazon.com/braket/latest/developerguide/braket-devices.\
html#choose-a-simulator\"}, \"updatedAt\": \"2022-06-22T10:18:00\"}, \"action\
\": {\"braket.ir.jaqcd.program\": {\"version\": [\"1.0\", \"1.1\"], \
\"actionType\": \"braket.ir.jaqcd.program\", \"supportedOperations\": [\"cnot\
\", \"cphaseshift\", \"cphaseshift00\", \"cphaseshift01\", \"cphaseshift10\", \
\"cy\", \"cz\", \"ecr\", \"h\", \"i\", \"iswap\", \"pswap\", \"phaseshift\", \
\"rx\", \"ry\", \"rz\", \"s\", \"si\", \"swap\", \"t\", \"ti\", \"v\", \
\"vi\", \"x\", \"xx\", \"xy\", \"y\", \"yy\", \"z\", \"zz\"], \
\"supportedResultTypes\": [{\"name\": \"Sample\", \"observables\": [\"x\", \
\"y\", \"z\", \"h\", \"i\"], \"minShots\": 1, \"maxShots\": 1000}, {\"name\": \
\"Expectation\", \"observables\": [\"x\", \"y\", \"z\", \"h\", \"i\"], \
\"minShots\": 1, \"maxShots\": 1000}, {\"name\": \"Variance\", \
\"observables\": [\"x\", \"y\", \"z\", \"h\", \"i\"], \"minShots\": 1, \
\"maxShots\": 1000}]}, \"braket.ir.openqasm.program\": {\"version\": \
[\"1.0\"], \"actionType\": \"braket.ir.openqasm.program\", \
\"supportedOperations\": [\"cnot\", \"cphaseshift\", \"cphaseshift00\", \
\"cphaseshift01\", \"cphaseshift10\", \"cy\", \"cz\", \"ecr\", \"h\", \"i\", \
\"iswap\", \"pswap\", \"phaseshift\", \"rx\", \"ry\", \"rz\", \"s\", \"si\", \
\"swap\", \"t\", \"ti\", \"v\", \"vi\", \"x\", \"xx\", \"xy\", \"y\", \"yy\", \
\"z\", \"zz\"], \"supportedPragmas\": [\"braket_basis_rotation\", \
\"braket_result_type_sample\", \"braket_result_type_expectation\", \
\"braket_result_type_variance\"], \"forbiddenPragmas\": \
[\"braket_result_type_state_vector\", \"braket_result_type_density_matrix\", \
\"braket_noise_amplitude_damping\", \"braket_noise_bit_flip\", \
\"braket_noise_depolarizing\", \"braket_noise_kraus\", \
\"braket_noise_pauli_channel\", \
\"braket_noise_generalized_amplitude_damping\", \"braket_noise_phase_flip\", \
\"braket_noise_phase_damping\", \"braket_noise_two_qubit_dephasing\", \
\"braket_noise_two_qubit_depolarizing\", \"braket_unitary_matrix\", \
\"braket_result_type_adjoint_gradient\"], \"maximumQubitArrays\": 1, \
\"maximumClassicalArrays\": 1, \"forbiddenArrayOperations\": [\"concatenation\
\", \"negativeIndex\", \"range\", \"rangeWithStep\", \"slicing\", \"selection\
\"], \"requiresAllQubitsMeasurement\": true, \"supportPhysicalQubits\": \
false, \"requiresContiguousQubitIndices\": true, \"supportsPartialVerbatimBox\
\": true, \"supportsUnassignedMeasurements\": true, \
\"disabledQubitRewiringSupported\": false, \"supportedResultTypes\": [{\"name\
\": \"Sample\", \"observables\": [\"x\", \"y\", \"z\", \"h\", \"i\"], \
\"minShots\": 1, \"maxShots\": 1000}, {\"name\": \"Expectation\", \
\"observables\": [\"x\", \"y\", \"z\", \"h\", \"i\"], \"minShots\": 1, \
\"maxShots\": 1000}, {\"name\": \"Variance\", \"observables\": [\"x\", \"y\", \
\"z\", \"h\", \"i\"], \"minShots\": 1, \"maxShots\": 1000}]}}, \
\"deviceParameters\": {\"title\": \"GateModelSimulatorDeviceParameters\", \
\"description\": \"This defines the parameters common to all the gatemodel \
devices.\\n\\nAttributes:\\n    paradigmParameters: Parameters that are \
common to gatemodel paradigm\\n\\nExamples:\\n    >>> import json\\n    >>> \
input_json = {\\n    ...    \\\"braketSchemaHeader\\\": {\\n    ...        \\\
\"name\\\": \
\\\"braket.device_schema.simulators.gate_model_simulator_device_parameters\\\"\
,\\n    ...        \\\"version\\\": \\\"1\\\",\\n    ...    },\\n    ...    \
\\\"paradigmParameters\\\": {\\\"braketSchemaHeader\\\": {\\n    ...        \
\\\"name\\\": \\\"braket.device_schema.gate_model_parameters\\\",\\n    ...   \
     \\\"version\\\": \\\"1\\\",\\n    ...    },\\\"qubitCount\\\": 1},\\n    \
... }\\n    >>> \
GateModelSimulatorDeviceParameters.parse_raw_schema(json.dumps(input_json))\",\
 \"type\": \"object\", \"properties\": {\"braketSchemaHeader\": {\"title\": \
\"Braketschemaheader\", \"const\": {\"name\": \
\"braket.device_schema.simulators.gate_model_simulator_device_parameters\", \
\"version\": \"1\"}}, \"paradigmParameters\": {\"$ref\": \
\"#/definitions/GateModelParameters\"}}, \"required\": \
[\"paradigmParameters\"], \"definitions\": {\"GateModelParameters\": {\"title\
\": \"GateModelParameters\", \"description\": \"This defines the parameters \
common to all the gatemodel devices.\\n\\nAttributes:\\n    qubitCount: \
number of qubits for a device\\n\\nExamples:\\n    >>> import json\\n    >>> \
input_json = {\\n    ...    \\\"braketSchemaHeader\\\": {\\n    ...        \\\
\"name\\\": \\\"braket.device_schema.gate_model_parameters\\\",\\n    ...     \
   \\\"version\\\": \\\"1\\\",\\n    ...    },\\n    ...    \
\\\"qubitCount\\\": 1\\n    ... }\\n    >>> \
GateModelParameters.parse_raw_schema(json.dumps(input_json))\", \"type\": \
\"object\", \"properties\": {\"braketSchemaHeader\": {\"title\": \
\"Braketschemaheader\", \"const\": {\"name\": \
\"braket.device_schema.gate_model_parameters\", \"version\": \"1\"}}, \
\"qubitCount\": {\"title\": \"Qubitcount\", \"exclusiveMinimum\": 0, \
\"type\": \"integer\"}}, \"required\": [\"qubitCount\"]}}}, \
\"braketSchemaHeader\": {\"name\": \
\"braket.device_schema.simulators.gate_model_simulator_device_capabilities\", \
\"version\": \"1\"}, \"paradigm\": {\"braketSchemaHeader\": {\"name\": \
\"braket.device_schema.simulators.gate_model_simulator_paradigm_properties\", \
\"version\": \"1\"}, \"qubitCount\": 50}}", 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{4, 
                 Key["DeviceCapabilities"]}, "Item", False], "Mouse"], 
              ImageSize -> {{560., Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}]}, {
            Item[
             Pane[
              Annotation[
              "arn:aws:braket:::device/quantum-simulator/amazon/sv1", 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{5, 
                 Key["DeviceArn"]}, "Item", False], "Mouse"], 
              ImageSize -> {{560., Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation["SV1", 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{5, 
                 Key["DeviceName"]}, "Item", False], "Mouse"], 
              ImageSize -> {{89.60000000000001, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation["Amazon Braket", 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{5, 
                 Key["ProviderName"]}, "Item", False], "Mouse"], 
              ImageSize -> {{136.5, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation["SIMULATOR", 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{5, 
                 Key["DeviceType"]}, "Item", False], "Mouse"], 
              ImageSize -> {{94.5, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation["ONLINE", 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{5, 
                 Key["DeviceStatus"]}, "Item", False], "Mouse"], 
              ImageSize -> {{73.5, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
              "{\"service\": {\"braketSchemaHeader\": {\"name\": \
\"braket.device_schema.device_service_properties\", \"version\": \"1\"}, \
\"executionWindows\": [{\"executionDay\": \"Everyday\", \"windowStartHour\": \
\"00:00:00\", \"windowEndHour\": \"23:59:59\"}], \"shotsRange\": [0, 100000], \
\"deviceCost\": {\"price\": 0.075, \"unit\": \"minute\"}, \
\"deviceDocumentation\": {\"imageUrl\": \
\"https://d1.awsstatic.com/about-aws/whats-new/lpm-assets/services/SiteMerch_\
Qx_Editorial-reInvent.d5a91c3e3fa666a2c33b8a912c21d1cb4ef270fb.png\", \
\"summary\": \"Amazon Braket state vector simulator\", \
\"externalDocumentationUrl\": \
\"https://docs.aws.amazon.com/braket/latest/developerguide/braket-devices.\
html#choose-a-simulator\"}, \"updatedAt\": \"2022-06-22T10:18:00\"}, \"action\
\": {\"braket.ir.jaqcd.program\": {\"version\": [\"1.0\", \"1.1\"], \
\"actionType\": \"braket.ir.jaqcd.program\", \"supportedOperations\": \
[\"ccnot\", \"cnot\", \"cphaseshift\", \"cphaseshift00\", \"cphaseshift01\", \
\"cphaseshift10\", \"cswap\", \"cy\", \"cz\", \"ecr\", \"h\", \"i\", \
\"iswap\", \"pswap\", \"phaseshift\", \"rx\", \"ry\", \"rz\", \"s\", \"si\", \
\"swap\", \"t\", \"ti\", \"unitary\", \"v\", \"vi\", \"x\", \"xx\", \"xy\", \
\"y\", \"yy\", \"z\", \"zz\"], \"supportedResultTypes\": [{\"name\": \"Sample\
\", \"observables\": [\"x\", \"y\", \"z\", \"h\", \"i\", \"hermitian\"], \
\"minShots\": 1, \"maxShots\": 100000}, {\"name\": \"Expectation\", \
\"observables\": [\"x\", \"y\", \"z\", \"h\", \"i\", \"hermitian\"], \
\"minShots\": 0, \"maxShots\": 100000}, {\"name\": \"Variance\", \
\"observables\": [\"x\", \"y\", \"z\", \"h\", \"i\", \"hermitian\"], \
\"minShots\": 0, \"maxShots\": 100000}, {\"name\": \"Probability\", \
\"minShots\": 1, \"maxShots\": 100000}, {\"name\": \"Amplitude\", \
\"minShots\": 0, \"maxShots\": 0}]}, \"braket.ir.openqasm.program\": \
{\"version\": [\"1.0\"], \"actionType\": \"braket.ir.openqasm.program\", \
\"supportedOperations\": [\"ccnot\", \"cnot\", \"cphaseshift\", \
\"cphaseshift00\", \"cphaseshift01\", \"cphaseshift10\", \"cswap\", \"cy\", \
\"cz\", \"ecr\", \"h\", \"i\", \"iswap\", \"pswap\", \"phaseshift\", \"rx\", \
\"ry\", \"rz\", \"s\", \"si\", \"swap\", \"t\", \"ti\", \"v\", \"vi\", \"x\", \
\"xx\", \"xy\", \"y\", \"yy\", \"z\", \"zz\", \"gpi\", \"gpi2\", \"ms\"], \
\"supportedPragmas\": [\"braket_unitary_matrix\", \"braket_basis_rotation\", \
\"braket_result_type_sample\", \"braket_result_type_expectation\", \
\"braket_result_type_variance\", \"braket_result_type_probability\", \
\"braket_result_type_amplitude\", \"braket_result_type_adjoint_gradient\"], \
\"forbiddenPragmas\": [\"braket_result_type_state_vector\", \
\"braket_result_type_density_matrix\", \"braket_noise_amplitude_damping\", \
\"braket_noise_bit_flip\", \"braket_noise_depolarizing\", \
\"braket_noise_kraus\", \"braket_noise_pauli_channel\", \
\"braket_noise_generalized_amplitude_damping\", \"braket_noise_phase_flip\", \
\"braket_noise_phase_damping\", \"braket_noise_two_qubit_dephasing\", \
\"braket_noise_two_qubit_depolarizing\"], \"maximumQubitArrays\": 1, \
\"maximumClassicalArrays\": 1, \"forbiddenArrayOperations\": [\"concatenation\
\", \"negativeIndex\", \"range\", \"rangeWithStep\", \"slicing\", \"selection\
\"], \"requiresAllQubitsMeasurement\": true, \"supportPhysicalQubits\": \
false, \"requiresContiguousQubitIndices\": true, \"supportsPartialVerbatimBox\
\": true, \"supportsUnassignedMeasurements\": true, \
\"disabledQubitRewiringSupported\": false, \"supportedResultTypes\": [{\"name\
\": \"Sample\", \"observables\": [\"x\", \"y\", \"z\", \"h\", \"i\", \
\"hermitian\"], \"minShots\": 1, \"maxShots\": 100000}, {\"name\": \
\"Expectation\", \"observables\": [\"x\", \"y\", \"z\", \"h\", \"i\", \
\"hermitian\"], \"minShots\": 0, \"maxShots\": 100000}, {\"name\": \"Variance\
\", \"observables\": [\"x\", \"y\", \"z\", \"h\", \"i\", \"hermitian\"], \
\"minShots\": 0, \"maxShots\": 100000}, {\"name\": \"Probability\", \
\"minShots\": 1, \"maxShots\": 100000}, {\"name\": \"Amplitude\", \
\"minShots\": 0, \"maxShots\": 0}, {\"name\": \"AdjointGradient\", \
\"observables\": [\"x\", \"y\", \"z\", \"h\", \"i\"], \"minShots\": 0, \
\"maxShots\": 0}]}}, \"deviceParameters\": {\"title\": \
\"GateModelSimulatorDeviceParameters\", \"description\": \"This defines the \
parameters common to all the gatemodel devices.\\n\\nAttributes:\\n    \
paradigmParameters: Parameters that are common to gatemodel \
paradigm\\n\\nExamples:\\n    >>> import json\\n    >>> input_json = {\\n    \
...    \\\"braketSchemaHeader\\\": {\\n    ...        \\\"name\\\": \
\\\"braket.device_schema.simulators.gate_model_simulator_device_parameters\\\"\
,\\n    ...        \\\"version\\\": \\\"1\\\",\\n    ...    },\\n    ...    \
\\\"paradigmParameters\\\": {\\\"braketSchemaHeader\\\": {\\n    ...        \
\\\"name\\\": \\\"braket.device_schema.gate_model_parameters\\\",\\n    ...   \
     \\\"version\\\": \\\"1\\\",\\n    ...    },\\\"qubitCount\\\": 1},\\n    \
... }\\n    >>> \
GateModelSimulatorDeviceParameters.parse_raw_schema(json.dumps(input_json))\",\
 \"type\": \"object\", \"properties\": {\"braketSchemaHeader\": {\"title\": \
\"Braketschemaheader\", \"const\": {\"name\": \
\"braket.device_schema.simulators.gate_model_simulator_device_parameters\", \
\"version\": \"1\"}}, \"paradigmParameters\": {\"$ref\": \
\"#/definitions/GateModelParameters\"}}, \"required\": \
[\"paradigmParameters\"], \"definitions\": {\"GateModelParameters\": {\"title\
\": \"GateModelParameters\", \"description\": \"This defines the parameters \
common to all the gatemodel devices.\\n\\nAttributes:\\n    qubitCount: \
number of qubits for a device\\n\\nExamples:\\n    >>> import json\\n    >>> \
input_json = {\\n    ...    \\\"braketSchemaHeader\\\": {\\n    ...        \\\
\"name\\\": \\\"braket.device_schema.gate_model_parameters\\\",\\n    ...     \
   \\\"version\\\": \\\"1\\\",\\n    ...    },\\n    ...    \
\\\"qubitCount\\\": 1\\n    ... }\\n    >>> \
GateModelParameters.parse_raw_schema(json.dumps(input_json))\", \"type\": \
\"object\", \"properties\": {\"braketSchemaHeader\": {\"title\": \
\"Braketschemaheader\", \"const\": {\"name\": \
\"braket.device_schema.gate_model_parameters\", \"version\": \"1\"}}, \
\"qubitCount\": {\"title\": \"Qubitcount\", \"exclusiveMinimum\": 0, \
\"type\": \"integer\"}}, \"required\": [\"qubitCount\"]}}}, \
\"braketSchemaHeader\": {\"name\": \
\"braket.device_schema.simulators.gate_model_simulator_device_capabilities\", \
\"version\": \"1\"}, \"paradigm\": {\"braketSchemaHeader\": {\"name\": \
\"braket.device_schema.simulators.gate_model_simulator_paradigm_properties\", \
\"version\": \"1\"}, \"qubitCount\": 34}}", 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{5, 
                 Key["DeviceCapabilities"]}, "Item", False], "Mouse"], 
              ImageSize -> {{560., Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}]}, {
            Item[
             Pane[
              Annotation[
              "arn:aws:braket:us-east-1::device/qpu/xanadu/Borealis", 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{6, 
                 Key["DeviceArn"]}, "Item", False], "Mouse"], 
              ImageSize -> {{560., Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation["Borealis", 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{6, 
                 Key["DeviceName"]}, "Item", False], "Mouse"], 
              ImageSize -> {{89.60000000000001, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation["Xanadu", 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{6, 
                 Key["ProviderName"]}, "Item", False], "Mouse"], 
              ImageSize -> {{136.5, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation["QPU", 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{6, 
                 Key["DeviceType"]}, "Item", False], "Mouse"], 
              ImageSize -> {{94.5, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation["ONLINE", 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{6, 
                 Key["DeviceStatus"]}, "Item", False], "Mouse"], 
              ImageSize -> {{73.5, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
              "{\"service\": {\"braketSchemaHeader\": {\"name\": \
\"braket.device_schema.device_service_properties\", \"version\": \"1\"}, \
\"executionWindows\": [{\"executionDay\": \"Weekdays\", \"windowStartHour\": \
\"15:00:00\", \"windowEndHour\": \"17:00:00\"}], \"shotsRange\": [1, \
1000000], \"deviceCost\": {\"price\": 0.0002, \"unit\": \"shot\"}, \
\"deviceDocumentation\": {\"imageUrl\": \
\"https://d1.awsstatic.com/re19/Braket/xanadu.\
48c14affd35d042cd2ad42be220bf1dcdeed2f7f.png\", \"summary\": \"Gaussian Boson \
Sampling on a programmable photonic processor\", \
\"externalDocumentationUrl\": \"https://xanadu.ai/products/borealis\"}, \
\"deviceLocation\": \"Ontario, Canada\", \"updatedAt\": \
\"2023-05-24T17:42:52.674561+00:00\"}, \"action\": \
{\"braket.ir.blackbird.program\": {\"version\": [\"1\"], \"actionType\": \
\"braket.ir.blackbird.program\", \"supportedOperations\": [\"s\", \"r0\", \
\"r1\", \"r2\", \"bs0\", \"bs1\", \"bs2\", \"loop0_phase\", \"loop1_phase\", \
\"loop2_phase\"], \"supportedResultTypes\": []}}, \"deviceParameters\": \
{\"braketSchemaHeader\": {\"name\": \
\"braket.device_schema.xanadu.xanadu_device_parameters\", \"version\": \
\"1\"}}, \"braketSchemaHeader\": {\"name\": \
\"braket.device_schema.xanadu.xanadu_device_capabilities\", \"version\": \
\"1\"}, \"paradigm\": {\"braketSchemaHeader\": {\"name\": \
\"braket.device_schema.continuous_variable_qpu_paradigm_properties\", \
\"version\": \"1\"}, \"modes\": {\"spatial\": 1.0, \"concurrent\": 44.0, \
\"temporal_max\": 331.0}, \"layout\": \"name template_borealis\\nversion \
1.0\\ntarget borealis (shots=1)\\ntype tdm (temporal_modes=331, \
copies=1)\\n\\nfloat array p0[1, 331] =\\n    {s}\\nfloat array p1[1, 331] \
=\\n    {r0}\\nfloat array p2[1, 331] =\\n    {bs0}\\nfloat array p3[1, 331] \
=\\n    {loop0_phase}\\nfloat array p4[1, 331] =\\n    {r1}\\nfloat array \
p5[1, 331] =\\n    {bs1}\\nfloat array p6[1, 331] =\\n    \
{loop1_phase}\\nfloat array p7[1, 331] =\\n    {r2}\\nfloat array p8[1, 331] \
=\\n    {bs2}\\nfloat array p9[1, 331] =\\n    {loop2_phase}\\n\\nSgate({s}, \
0.0) | 43\\nRgate({r0}) | 43\\nBSgate({bs0}, 1.5707963267948966) | [42, \
43]\\nRgate({loop0_phase}) | 43\\nRgate({r1}) | 42\\nBSgate({bs1}, \
1.5707963267948966) | [36, 42]\\nRgate({loop1_phase}) | 42\\nRgate({r2}) | 36\
\\nBSgate({bs2}, 1.5707963267948966) | [0, 36]\\nRgate({loop2_phase}) | \
36\\nMeasureFock() | 0\", \"compiler\": [\"borealis\"], \
\"supportedLanguages\": [\"blackbird:1.0\"], \"compilerDefault\": \
\"borealis\", \"nativeGateSet\": [\"s\", \"r0\", \"r1\", \"r2\", \"bs0\", \
\"bs1\", \"bs2\", \"loop0_phase\", \"loop1_phase\", \"loop2_phase\"], \
\"gateParameters\": {\"s\": [[0.0, 2.0]], \"r0\": [[-1.5707963267948966, \
1.5707963267948966]], \"r1\": [[-1.5707963267948966, 1.5707963267948966]], \
\"r2\": [[-1.5707963267948966, 1.5707963267948966]], \"bs0\": [[0.0, \
1.5707963267948966]], \"bs1\": [[0.0, 1.5707963267948966]], \"bs2\": [[0.0, \
1.5707963267948966]], \"loop0_phase\": [[-3.141592653589793, \
3.141592653589793]], \"loop1_phase\": [[-3.141592653589793, \
3.141592653589793]], \"loop2_phase\": [[-3.141592653589793, \
3.141592653589793]]}, \"target\": \"borealis\"}, \"provider\": \
{\"braketSchemaHeader\": {\"name\": \
\"braket.device_schema.xanadu.xanadu_provider_properties\", \"version\": \
\"1\"}, \"loopPhases\": [1.313, 0.07, 1.976], \"schmidtNumber\": 1.151, \
\"commonEfficiency\": 0.369, \"squeezingParametersMean\": {\"low\": 0.708, \
\"high\": 1.173, \"medium\": 0.989}, \"relativeChannelEfficiencies\": [0.927, \
0.939, 0.917, 1.0, 0.968, 0.922, 0.896, 0.97, 0.955, 0.954, 0.97, 0.999, \
0.952, 0.968, 0.95, 0.902], \"loopEfficiencies\": [0.878, 0.882, 0.794]}}", 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{6, 
                 Key["DeviceCapabilities"]}, "Item", False], "Mouse"], 
              ImageSize -> {{560., Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}]}, {
            Item[
             Pane[
              Annotation[
              "arn:aws:braket:::device/quantum-simulator/amazon/dm1", 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{7, 
                 Key["DeviceArn"]}, "Item", False], "Mouse"], 
              ImageSize -> {{560., Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation["dm1", 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{7, 
                 Key["DeviceName"]}, "Item", False], "Mouse"], 
              ImageSize -> {{89.60000000000001, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation["Amazon Braket", 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{7, 
                 Key["ProviderName"]}, "Item", False], "Mouse"], 
              ImageSize -> {{136.5, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation["SIMULATOR", 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{7, 
                 Key["DeviceType"]}, "Item", False], "Mouse"], 
              ImageSize -> {{94.5, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation["ONLINE", 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{7, 
                 Key["DeviceStatus"]}, "Item", False], "Mouse"], 
              ImageSize -> {{73.5, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
              "{\"service\": {\"braketSchemaHeader\": {\"name\": \
\"braket.device_schema.device_service_properties\", \"version\": \"1\"}, \
\"executionWindows\": [{\"executionDay\": \"Everyday\", \"windowStartHour\": \
\"00:00:00\", \"windowEndHour\": \"23:59:59\"}], \"shotsRange\": [0, 100000], \
\"deviceCost\": {\"price\": 0.075, \"unit\": \"minute\"}, \
\"deviceDocumentation\": {\"imageUrl\": \
\"https://d1.awsstatic.com/about-aws/whats-new/lpm-assets/services/SiteMerch_\
Qx_Editorial-reInvent.d5a91c3e3fa666a2c33b8a912c21d1cb4ef270fb.png\", \
\"summary\": \"Amazon Braket density matrix simulator\", \
\"externalDocumentationUrl\": \
\"https://docs.aws.amazon.com/braket/latest/developerguide/braket-devices.\
html#choose-a-simulator\"}, \"updatedAt\": \"2022-06-22T10:18:00\"}, \"action\
\": {\"braket.ir.jaqcd.program\": {\"version\": [\"1.0\", \"1.1\"], \
\"actionType\": \"braket.ir.jaqcd.program\", \"supportedOperations\": \
[\"amplitude_damping\", \"bit_flip\", \"ccnot\", \"cnot\", \"cphaseshift\", \
\"cphaseshift00\", \"cphaseshift01\", \"cphaseshift10\", \"cswap\", \"cy\", \
\"cz\", \"depolarizing\", \"ecr\", \"pauli_channel\", \
\"generalized_amplitude_damping\", \"h\", \"i\", \"iswap\", \"kraus\", \
\"phase_flip\", \"phase_damping\", \"phaseshift\", \"pswap\", \"rx\", \"ry\", \
\"rz\", \"s\", \"si\", \"swap\", \"t\", \"ti\", \"two_qubit_dephasing\", \
\"two_qubit_depolarizing\", \"unitary\", \"v\", \"vi\", \"x\", \"xx\", \
\"xy\", \"y\", \"yy\", \"z\", \"zz\"], \"supportedResultTypes\": [{\"name\": \
\"Sample\", \"observables\": [\"x\", \"y\", \"z\", \"h\", \"i\", \
\"hermitian\"], \"minShots\": 1, \"maxShots\": 100000}, {\"name\": \
\"Expectation\", \"observables\": [\"x\", \"y\", \"z\", \"h\", \"i\", \
\"hermitian\"], \"minShots\": 0, \"maxShots\": 100000}, {\"name\": \"Variance\
\", \"observables\": [\"x\", \"y\", \"z\", \"h\", \"i\", \"hermitian\"], \
\"minShots\": 0, \"maxShots\": 100000}, {\"name\": \"DensityMatrix\", \
\"minShots\": 0, \"maxShots\": 0}, {\"name\": \"Probability\", \"minShots\": \
1, \"maxShots\": 100000}]}, \"braket.ir.openqasm.program\": {\"version\": \
[\"1.0\"], \"actionType\": \"braket.ir.openqasm.program\", \
\"supportedOperations\": [\"ccnot\", \"cnot\", \"cphaseshift\", \
\"cphaseshift00\", \"cphaseshift01\", \"cphaseshift10\", \"cswap\", \"cy\", \
\"cz\", \"ecr\", \"h\", \"i\", \"iswap\", \"phaseshift\", \"pswap\", \"rx\", \
\"ry\", \"rz\", \"s\", \"si\", \"swap\", \"t\", \"ti\", \"v\", \"vi\", \"x\", \
\"xx\", \"xy\", \"y\", \"yy\", \"z\", \"zz\", \"gpi\", \"gpi2\", \"ms\"], \
\"supportedPragmas\": [\"braket_noise_bit_flip\", \"braket_noise_depolarizing\
\", \"braket_noise_kraus\", \"braket_noise_pauli_channel\", \
\"braket_noise_generalized_amplitude_damping\", \
\"braket_noise_amplitude_damping\", \"braket_noise_phase_flip\", \
\"braket_noise_phase_damping\", \"braket_noise_two_qubit_dephasing\", \
\"braket_noise_two_qubit_depolarizing\", \"braket_unitary_matrix\", \
\"braket_result_type_sample\", \"braket_result_type_expectation\", \
\"braket_result_type_variance\", \"braket_result_type_probability\", \
\"braket_result_type_density_matrix\"], \"forbiddenPragmas\": \
[\"braket_result_type_state_vector\", \
\"braket_result_type_adjoint_gradient\"], \"maximumQubitArrays\": 1, \
\"maximumClassicalArrays\": 1, \"forbiddenArrayOperations\": [\"concatenation\
\", \"negativeIndex\", \"range\", \"rangeWithStep\", \"slicing\", \"selection\
\"], \"requiresAllQubitsMeasurement\": true, \"supportPhysicalQubits\": \
false, \"requiresContiguousQubitIndices\": true, \"supportsPartialVerbatimBox\
\": true, \"supportsUnassignedMeasurements\": true, \
\"disabledQubitRewiringSupported\": false, \"supportedResultTypes\": [{\"name\
\": \"Sample\", \"observables\": [\"x\", \"y\", \"z\", \"h\", \"i\", \
\"hermitian\"], \"minShots\": 1, \"maxShots\": 100000}, {\"name\": \
\"Expectation\", \"observables\": [\"x\", \"y\", \"z\", \"h\", \"i\", \
\"hermitian\"], \"minShots\": 0, \"maxShots\": 100000}, {\"name\": \"Variance\
\", \"observables\": [\"x\", \"y\", \"z\", \"h\", \"i\", \"hermitian\"], \
\"minShots\": 0, \"maxShots\": 100000}, {\"name\": \"DensityMatrix\", \
\"minShots\": 0, \"maxShots\": 0}, {\"name\": \"Probability\", \"minShots\": \
1, \"maxShots\": 100000}]}}, \"deviceParameters\": {\"title\": \
\"GateModelSimulatorDeviceParameters\", \"description\": \"This defines the \
parameters common to all the gatemodel devices.\\n\\nAttributes:\\n    \
paradigmParameters: Parameters that are common to gatemodel \
paradigm\\n\\nExamples:\\n    >>> import json\\n    >>> input_json = {\\n    \
...    \\\"braketSchemaHeader\\\": {\\n    ...        \\\"name\\\": \
\\\"braket.device_schema.simulators.gate_model_simulator_device_parameters\\\"\
,\\n    ...        \\\"version\\\": \\\"1\\\",\\n    ...    },\\n    ...    \
\\\"paradigmParameters\\\": {\\\"braketSchemaHeader\\\": {\\n    ...        \
\\\"name\\\": \\\"braket.device_schema.gate_model_parameters\\\",\\n    ...   \
     \\\"version\\\": \\\"1\\\",\\n    ...    },\\\"qubitCount\\\": 1},\\n    \
... }\\n    >>> \
GateModelSimulatorDeviceParameters.parse_raw_schema(json.dumps(input_json))\",\
 \"type\": \"object\", \"properties\": {\"braketSchemaHeader\": {\"title\": \
\"Braketschemaheader\", \"const\": {\"name\": \
\"braket.device_schema.simulators.gate_model_simulator_device_parameters\", \
\"version\": \"1\"}}, \"paradigmParameters\": {\"$ref\": \
\"#/definitions/GateModelParameters\"}}, \"required\": \
[\"paradigmParameters\"], \"definitions\": {\"GateModelParameters\": {\"title\
\": \"GateModelParameters\", \"description\": \"This defines the parameters \
common to all the gatemodel devices.\\n\\nAttributes:\\n    qubitCount: \
number of qubits for a device\\n\\nExamples:\\n    >>> import json\\n    >>> \
input_json = {\\n    ...    \\\"braketSchemaHeader\\\": {\\n    ...        \\\
\"name\\\": \\\"braket.device_schema.gate_model_parameters\\\",\\n    ...     \
   \\\"version\\\": \\\"1\\\",\\n    ...    },\\n    ...    \
\\\"qubitCount\\\": 1\\n    ... }\\n    >>> \
GateModelParameters.parse_raw_schema(json.dumps(input_json))\", \"type\": \
\"object\", \"properties\": {\"braketSchemaHeader\": {\"title\": \
\"Braketschemaheader\", \"const\": {\"name\": \
\"braket.device_schema.gate_model_parameters\", \"version\": \"1\"}}, \
\"qubitCount\": {\"title\": \"Qubitcount\", \"exclusiveMinimum\": 0, \
\"type\": \"integer\"}}, \"required\": [\"qubitCount\"]}}}, \
\"braketSchemaHeader\": {\"name\": \
\"braket.device_schema.simulators.gate_model_simulator_device_capabilities\", \
\"version\": \"1\"}, \"paradigm\": {\"braketSchemaHeader\": {\"name\": \
\"braket.device_schema.simulators.gate_model_simulator_paradigm_properties\", \
\"version\": \"1\"}, \"qubitCount\": 17}}", 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{7, 
                 Key["DeviceCapabilities"]}, "Item", False], "Mouse"], 
              ImageSize -> {{560., Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}]}}, 
          BaseStyle -> {
           ContextMenu -> 
            Dynamic[TypeSystem`NestedGrid`PackagePrivate`$contextMenuTrigger; 
              Which[TypeSystem`NestedGrid`PackagePrivate`$lastOutputID =!= 
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                 TypeSystem`NestedGrid`PackagePrivate`$outputID$$], {}, 
                TypeSystem`NestedGrid`PackagePrivate`$contextMenuTrigger === 
                TypeSystem`NestedGrid`PackagePrivate`$lastContextMenuTrigger, 
                TypeSystem`NestedGrid`PackagePrivate`$lastContextMenu, True, 
                TypeSystem`NestedGrid`PackagePrivate`$lastContextMenuTrigger = 
                 TypeSystem`NestedGrid`PackagePrivate`$contextMenuTrigger; 
                TypeSystem`NestedGrid`PackagePrivate`$lastContextMenu = 
                 Block[{TypeSystem`NestedGrid`PackagePrivate`$globalScrollPos = \
{TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$}}, 
                   With[{
                    TypeSystem`NestedGrid`PackagePrivate`lastPath$ = 
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath, 
                    TypeSystem`NestedGrid`PackagePrivate`lastPathType$ = 
                    TypeSystem`NestedGrid`PackagePrivate`$lastPathType, 
                    TypeSystem`NestedGrid`PackagePrivate`isLeafHeader$ = 
                    TypeSystem`NestedGrid`PackagePrivate`$\
lastPathIsLeafHeader, TypeSystem`NestedGrid`PackagePrivate`headerHidden$ = And[
                    MatchQ[TypeSystem`NestedGrid`PackagePrivate`$lastPathType, 
                    Alternatives["RowHeader", "ColumnHeader"]], 
                    TypeSystem`NestedGrid`PackagePrivate`headerHiddenQ[
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath, 
                    TypeSystem`NestedGrid`PackagePrivate`$state$$]], 
                    TypeSystem`NestedGrid`PackagePrivate`allHidden$ = 
                    TypeSystem`NestedGrid`PackagePrivate`allHiddenQ[
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath, 
                    TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                    TypeSystem`NestedGrid`PackagePrivate`anyHidden$ = 
                    TypeSystem`NestedGrid`PackagePrivate`anyHiddenQ[
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath, 
                    TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                    TypeSystem`NestedGrid`PackagePrivate`sortDirection$ = 
                    TypeSystem`NestedGrid`PackagePrivate`columnSortDirection[
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath, 
                    TypeSystem`NestedGrid`PackagePrivate`$state$$[
                    "SortPaths"], 
                    TypeSystem`NestedGrid`PackagePrivate`$state$$[
                    "SortDirections"]], 
                    TypeSystem`NestedGrid`PackagePrivate`haveData$ = Not[
                    FailureQ[
                    TypeSystem`NestedGrid`PackagePrivate`datasetInitialData[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$]]], 
                    TypeSystem`NestedGrid`PackagePrivate`isKeyDummy$ = Not[
                    FreeQ[
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath, Keys]]}, 
                    Join[{
                    If[
                    Or[
                    Not[TypeSystem`NestedGrid`PackagePrivate`haveData$], 
                    Not[TypeSystem`NestedGrid`PackagePrivate`anyHidden$], 
                    TypeSystem`NestedGrid`PackagePrivate`isKeyDummy$], 
                    Nothing, 
                    MenuItem[
                    "Show " <> 
                    Which[TypeSystem`NestedGrid`PackagePrivate`lastPathType$ == 
                    "Item", "", 
                    TypeSystem`NestedGrid`PackagePrivate`lastPathType$ == 
                    "RowHeader", "Row", 
                    TypeSystem`NestedGrid`PackagePrivate`lastPathType$ == 
                    "ColumnHeader", "Column", True, ""], 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`updateHiddenItems[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][
                    TypeSystem`NestedGrid`PackagePrivate`lastPath$, 
                    "remove"]], MenuEvaluator -> Automatic]], 
                    If[
                    Or[
                    Not[TypeSystem`NestedGrid`PackagePrivate`haveData$], 
                    TypeSystem`NestedGrid`PackagePrivate`pathEmptyQ[
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath, 
                    TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                    TypeSystem`NestedGrid`PackagePrivate`isKeyDummy$, 
                    And[
                    TypeSystem`NestedGrid`PackagePrivate`allHidden$, 
                    TypeSystem`NestedGrid`PackagePrivate`headerHidden$]], 
                    Nothing, 
                    MenuItem[
                    "Hide " <> 
                    Which[TypeSystem`NestedGrid`PackagePrivate`lastPathType$ == 
                    "Item", "", 
                    TypeSystem`NestedGrid`PackagePrivate`lastPathType$ == 
                    "RowHeader", "Row", 
                    TypeSystem`NestedGrid`PackagePrivate`lastPathType$ == 
                    "ColumnHeader", "Column", True, ""], 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`updateHiddenItems[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][
                    TypeSystem`NestedGrid`PackagePrivate`lastPath$, "add"]], 
                    MenuEvaluator -> Automatic]], Delimiter}, 
                    If[
                    And[TypeSystem`NestedGrid`PackagePrivate`haveData$, 
                    MatchQ[TypeSystem`NestedGrid`PackagePrivate`lastPathType$, 
                    Alternatives["ColumnHeader", "KeyDummy"]], 
                    TypeSystem`NestedGrid`PackagePrivate`isLeafHeader$, 
                    Not[TypeSystem`NestedGrid`PackagePrivate`allHidden$]], {
                    If[
                    TypeSystem`NestedGrid`PackagePrivate`sortDirection$ =!= 
                    "Ascending", 
                    MenuItem["Sort", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`updateSort[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][
                    TypeSystem`NestedGrid`PackagePrivate`lastPath$, 
                    "Ascending"]], MenuEvaluator -> Automatic], Nothing], 
                    If[
                    TypeSystem`NestedGrid`PackagePrivate`sortDirection$ =!= 
                    "Descending", 
                    MenuItem["Reverse Sort", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`updateSort[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][
                    TypeSystem`NestedGrid`PackagePrivate`lastPath$, 
                    "Descending"]], MenuEvaluator -> Automatic], Nothing], 
                    If[
                    TypeSystem`NestedGrid`PackagePrivate`sortDirection$ =!= 
                    None, 
                    MenuItem["Unsort", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`updateSort[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][
                    TypeSystem`NestedGrid`PackagePrivate`lastPath$, None]], 
                    MenuEvaluator -> Automatic], Nothing], Delimiter}, {}], {
                    MenuItem["Copy Position to Clipboard", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`toCurrentPosition[
                    TypeSystem`NestedGrid`PackagePrivate`copyClip]], 
                    MenuEvaluator -> Automatic], 
                    If[TypeSystem`NestedGrid`PackagePrivate`haveData$, 
                    MenuItem["Copy Data to Clipboard", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`toCurrentData[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`copyClip]], 
                    MenuEvaluator -> Automatic], Nothing], Delimiter, 
                    MenuItem["Paste Position in New Cell", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`toCurrentPosition[
                    TypeSystem`NestedGrid`PackagePrivate`cellPaste]], 
                    MenuEvaluator -> Automatic], 
                    If[TypeSystem`NestedGrid`PackagePrivate`haveData$, 
                    MenuItem["Paste Data in New Cell", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`toCurrentData[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`cellPaste]], 
                    MenuEvaluator -> Automatic], Nothing]}]]]]], FontFamily -> 
            "Source Sans Pro", FontSize -> 14, FontWeight -> Plain}, Dividers -> 
          All, FrameStyle -> GrayLevel[0.7490196078431373], 
          Spacings -> {0, 0}, Alignment -> Left, 
          BaseStyle -> {
           FontFamily -> "Source Sans Pro", FontSize -> 14, FontWeight -> 
            Plain}], LineBreakWithin -> False, ContextMenu -> {}, NumberMarks -> 
         False, ShowAutoStyles -> False]], 
      TypeSystem`NestedGrid`PackagePrivate`initialQ = True}, 
     Dynamic[
      TypeSystem`NestedGrid`PackagePrivate`setupViewPath[
      TypeSystem`NestedGrid`PackagePrivate`$path$$, If[
         Not[TypeSystem`NestedGrid`PackagePrivate`initialQ], 
         Module[{
          TypeSystem`NestedGrid`PackagePrivate`tmpGrid$ = $Failed, 
           TypeSystem`NestedGrid`PackagePrivate`tmpData$ = 
           TypeSystem`NestedGrid`PackagePrivate`datasetData[
            TypeSystem`NestedGrid`PackagePrivate`$state$$]}, 
          TypeSystem`NestedGrid`PackagePrivate`tmpGrid$ = If[
             FailureQ[TypeSystem`NestedGrid`PackagePrivate`tmpData$], 
             TypeSystem`NestedGrid`PackagePrivate`renderedGrid, 
             TypeSystem`NestedGrid`PackagePrivate`renderGrid[
             TypeSystem`NestedGrid`PackagePrivate`$state$$, 
              TypeSystem`NestedGrid`PackagePrivate`$path$$, 
              TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
              TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
              TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
              TypeSystem`NestedGrid`PackagePrivate`localHold[
              TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][
             TypeSystem`NestedGrid`PackagePrivate`tmpData$]]; If[
            Not[
             FailureQ[TypeSystem`NestedGrid`PackagePrivate`tmpGrid$]], 
            TypeSystem`NestedGrid`PackagePrivate`renderedGrid = 
            TypeSystem`NestedGrid`PackagePrivate`tmpGrid$]; Null]]; 
       TypeSystem`NestedGrid`PackagePrivate`initialQ = False; 
       TypeSystem`NestedGrid`PackagePrivate`$vPos$$; 
       TypeSystem`NestedGrid`PackagePrivate`$hPos$$; If[
         FailureQ[TypeSystem`NestedGrid`PackagePrivate`renderedGrid], 
         TypeSystem`SparseGrid[
          TypeSystem`H["(data no longer present)"]], 
         TypeSystem`NestedGrid`PackagePrivate`renderedGrid]], 
      TrackedSymbols :> {
       TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
        TypeSystem`NestedGrid`PackagePrivate`$hPos$$}], 
     DynamicModuleValues :> {}], 
    TypeSystem`NestedGrid`PackagePrivate`$topBar$$ = Dynamic[
     TypeSystem`NestedGrid`PackagePrivate`makeFramedBar[
      TypeSystem`PackageScope`SubViewPathbar[
      TypeSystem`NestedGrid`PackagePrivate`$path$$, 
       TypeSystem`NestedGrid`PackagePrivate`updateState[
       TypeSystem`NestedGrid`PackagePrivate`$state$$, 
        TypeSystem`NestedGrid`PackagePrivate`$path$$, 
        TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
        TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
        TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
        TypeSystem`NestedGrid`PackagePrivate`localHold[
        TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]]], 
     TrackedSymbols :> {TypeSystem`NestedGrid`PackagePrivate`$path$$}], 
    TypeSystem`NestedGrid`PackagePrivate`$bottomBar$$ = Style[
     Framed[
      Dynamic[
       Replace[
       TypeSystem`NestedGrid`PackagePrivate`mouseAnnotation$$, {
        TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
           TypeSystem`NestedGrid`PackagePrivate`localHold[
           TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][Null, 
           Blank[]] -> "", TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
           TypeSystem`NestedGrid`PackagePrivate`localHold[
           TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][
           Pattern[TypeSystem`NestedGrid`PackagePrivate`path$, 
            Blank[]], 
           Pattern[TypeSystem`NestedGrid`PackagePrivate`pathType$, 
            Blank[]], 
           Pattern[TypeSystem`NestedGrid`PackagePrivate`isLeafHeader$, 
            Blank[]]] :> (
          Increment[TypeSystem`NestedGrid`PackagePrivate`$contextMenuTrigger]; 
          TypeSystem`NestedGrid`PackagePrivate`$lastPath = 
           TypeSystem`NestedGrid`PackagePrivate`path$; 
          TypeSystem`NestedGrid`PackagePrivate`$lastPathType = 
           TypeSystem`NestedGrid`PackagePrivate`pathType$; 
          TypeSystem`NestedGrid`PackagePrivate`$lastPathIsLeafHeader = 
           TypeSystem`NestedGrid`PackagePrivate`isLeafHeader$; 
          TypeSystem`NestedGrid`PackagePrivate`$lastOutputID = 
           TypeSystem`NestedGrid`PackagePrivate`localHold[
            TypeSystem`NestedGrid`PackagePrivate`$outputID$$]; 
          TypeSystem`NestedGrid`PackagePrivate`makePathTrail[
           TypeSystem`NestedGrid`PackagePrivate`path$, 
            TypeSystem`NestedGrid`PackagePrivate`makePathElements]), Null :> 
         Spacer[10], Blank[] :> Spacer[10]}], 
       TrackedSymbols :> {
        TypeSystem`NestedGrid`PackagePrivate`mouseAnnotation$$}], FrameStyle -> 
      None, ImageMargins -> 0, FrameMargins -> 0, Alignment -> Top, 
      ImageSize -> {Automatic, 15}], FontSize -> 1], 
    TypeSystem`NestedGrid`PackagePrivate`mouseAnnotation$$ = Null}, 
    DynamicWrapperBox[
     DynamicBox[ToBoxes[
       Dataset`DatasetContent[
       2, "Path" -> Hold[TypeSystem`NestedGrid`PackagePrivate`$path$$], 
        "Grid" -> Hold[TypeSystem`NestedGrid`PackagePrivate`$grid$$], "State" -> 
        Hold[TypeSystem`NestedGrid`PackagePrivate`$state$$], "VPos" -> 
        Hold[TypeSystem`NestedGrid`PackagePrivate`$vPos$$], "HPos" -> 
        Hold[TypeSystem`NestedGrid`PackagePrivate`$hPos$$], "TopBar" -> 
        Hold[TypeSystem`NestedGrid`PackagePrivate`$topBar$$], "BottomBar" -> 
        Hold[TypeSystem`NestedGrid`PackagePrivate`$bottomBar$$], "OutputID" -> 
        Hold[
          TypeSystem`NestedGrid`PackagePrivate`localHold[
          TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]], StandardForm],
      ImageSizeCache->{2311., {114.634033203125, 120.365966796875}},
      TrackedSymbols:>{
       TypeSystem`NestedGrid`PackagePrivate`$state$$, 
        TypeSystem`NestedGrid`PackagePrivate`$grid$$}], 
     TypeSystem`NestedGrid`PackagePrivate`mouseAnnotation$$ = 
     MouseAnnotation[],
     ImageSizeCache->{2311., {114.634033203125, 120.365966796875}}],
    BaseStyle->{LineBreakWithin -> False},
    DynamicModuleValues:>{},
    Initialization:>(TypeSystem`NestedGrid`PackagePrivate`$outputID$$ = 
     CreateUUID[]),
    UnsavedVariables:>{TypeSystem`NestedGrid`PackagePrivate`$outputID$$}],
   Deploy,
   DefaultBaseStyle->"Deploy"],
  Dataset`InterpretDataset[1],
  Editable->False,
  SelectWithContents->True,
  Selectable->False]], "Output",
 CellChangeTimes->{{3.865707861027812*^9, 3.865707869311571*^9}, {
   3.8657081633502903`*^9, 3.86570820246817*^9}, {3.865708267869007*^9, 
   3.8657082865220547`*^9}, {3.8657083274156723`*^9, 3.865708329655313*^9}, 
   3.865774812399777*^9, 3.865786385611467*^9, 3.865789373918995*^9, 
   3.865789652878891*^9, 3.888020681742043*^9, 3.888086741956209*^9, 
   3.8880872139253683`*^9, 3.888411907197954*^9, 3.888435920137928*^9, 
   3.8890185016290913`*^9, 3.8890221679550047`*^9, 3.889825292988638*^9, 
   3.892225443218458*^9, 3.892753404330204*^9, 3.8938838910442343`*^9, 
   3.8938851745369062`*^9, {3.8938852059952393`*^9, 3.8938852095498257`*^9}, 
   3.893892343872426*^9, {3.893933866841906*^9, 3.893933877157325*^9}, 
   3.8939346118275003`*^9, {3.893937578450911*^9, 3.893937587593232*^9}, 
   3.893979307823852*^9},
 CellLabel->"Out[34]=",
 CellID->198112506,ExpressionUUID->"eef8b375-005d-4c0b-a670-743f7e460359"]
}, Open  ]],

Cell["Select SV1, which is a simulator:", "CodeText",
 CellChangeTimes->{{3.888435927716756*^9, 3.888435946731986*^9}, {
  3.893979856282256*^9, 3.893979865913196*^9}},
 CellID->2131785377,ExpressionUUID->"49e04d4a-8c96-446f-9c49-68fbbbcb0208"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"sim", "=", 
  RowBox[{"devices", "[", 
   RowBox[{
    RowBox[{"SelectFirst", "[", 
     RowBox[{
      RowBox[{
      "#DeviceArn", "==", 
       "\"\<arn:aws:braket:::device/quantum-simulator/amazon/sv1\>\""}], 
      "&"}], "]"}], ",", 
    RowBox[{"MapAt", "[", 
     RowBox[{
      RowBox[{
       RowBox[{"ImportString", "[", 
        RowBox[{"#", ",", "\"\<RawJSON\>\""}], "]"}], "&"}], ",", 
      "\"\<DeviceCapabilities\>\""}], "]"}]}], "]"}]}]], "Input",
 CellChangeTimes->{{3.888087105264069*^9, 3.888087119421659*^9}, {
  3.889022187291685*^9, 3.889022203734682*^9}, {3.893884143006398*^9, 
  3.893884145490096*^9}, {3.893884585807118*^9, 3.893884586110527*^9}, {
  3.893884700867744*^9, 3.8938847152019663`*^9}, {3.8938851900813417`*^9, 
  3.893885251170599*^9}, {3.893933786796397*^9, 3.893933815092855*^9}, {
  3.893934005088566*^9, 3.8939340053514423`*^9}},
 CellLabel->"In[35]:=",
 CellID->299664691,ExpressionUUID->"c6cef17b-f3bc-45ca-90ea-d7c068d079f9"],

Cell[BoxData[
 TagBox[
  TagBox[
   DynamicModuleBox[{TypeSystem`NestedGrid`PackagePrivate`$state$$ = <|
    "InitialData" -> <|
      "DeviceArn" -> "arn:aws:braket:::device/quantum-simulator/amazon/sv1", 
       "DeviceName" -> "SV1", "ProviderName" -> "Amazon Braket", "DeviceType" -> 
       "SIMULATOR", "DeviceStatus" -> "ONLINE", 
       "DeviceCapabilities" -> <|
        "service" -> <|
          "braketSchemaHeader" -> <|
            "name" -> "braket.device_schema.device_service_properties", 
             "version" -> "1"|>, 
           "executionWindows" -> {<|
             "executionDay" -> "Everyday", "windowStartHour" -> "00:00:00", 
              "windowEndHour" -> "23:59:59"|>}, "shotsRange" -> {0, 100000}, 
           "deviceCost" -> <|"price" -> 0.075, "unit" -> "minute"|>, 
           "deviceDocumentation" -> <|
            "imageUrl" -> 
             "https://d1.awsstatic.com/about-aws/whats-new/lpm-assets/\
services/SiteMerch_Qx_Editorial-reInvent.\
d5a91c3e3fa666a2c33b8a912c21d1cb4ef270fb.png", "summary" -> 
             "Amazon Braket state vector simulator", 
             "externalDocumentationUrl" -> 
             "https://docs.aws.amazon.com/braket/latest/developerguide/braket-\
devices.html#choose-a-simulator"|>, "updatedAt" -> "2022-06-22T10:18:00"|>, 
         "action" -> <|
          "braket.ir.jaqcd.program" -> <|
            "version" -> {"1.0", "1.1"}, "actionType" -> 
             "braket.ir.jaqcd.program", 
             "supportedOperations" -> {
              "ccnot", "cnot", "cphaseshift", "cphaseshift00", 
               "cphaseshift01", "cphaseshift10", "cswap", "cy", "cz", "ecr", 
               "h", "i", "iswap", "pswap", "phaseshift", "rx", "ry", "rz", 
               "s", "si", "swap", "t", "ti", "unitary", "v", "vi", "x", "xx", 
               "xy", "y", "yy", "z", "zz"}, 
             "supportedResultTypes" -> {<|
               "name" -> "Sample", 
                "observables" -> {"x", "y", "z", "h", "i", "hermitian"}, 
                "minShots" -> 1, "maxShots" -> 100000|>, <|
               "name" -> "Expectation", 
                "observables" -> {"x", "y", "z", "h", "i", "hermitian"}, 
                "minShots" -> 0, "maxShots" -> 100000|>, <|
               "name" -> "Variance", 
                "observables" -> {"x", "y", "z", "h", "i", "hermitian"}, 
                "minShots" -> 0, "maxShots" -> 100000|>, <|
               "name" -> "Probability", "minShots" -> 1, "maxShots" -> 
                100000|>, <|
               "name" -> "Amplitude", "minShots" -> 0, "maxShots" -> 0|>}|>, 
           "braket.ir.openqasm.program" -> <|
            "version" -> {"1.0"}, "actionType" -> 
             "braket.ir.openqasm.program", 
             "supportedOperations" -> {
              "ccnot", "cnot", "cphaseshift", "cphaseshift00", 
               "cphaseshift01", "cphaseshift10", "cswap", "cy", "cz", "ecr", 
               "h", "i", "iswap", "pswap", "phaseshift", "rx", "ry", "rz", 
               "s", "si", "swap", "t", "ti", "v", "vi", "x", "xx", "xy", "y", 
               "yy", "z", "zz", "gpi", "gpi2", "ms"}, 
             "supportedPragmas" -> {
              "braket_unitary_matrix", "braket_basis_rotation", 
               "braket_result_type_sample", "braket_result_type_expectation", 
               "braket_result_type_variance", 
               "braket_result_type_probability", 
               "braket_result_type_amplitude", 
               "braket_result_type_adjoint_gradient"}, 
             "forbiddenPragmas" -> {
              "braket_result_type_state_vector", 
               "braket_result_type_density_matrix", 
               "braket_noise_amplitude_damping", "braket_noise_bit_flip", 
               "braket_noise_depolarizing", "braket_noise_kraus", 
               "braket_noise_pauli_channel", 
               "braket_noise_generalized_amplitude_damping", 
               "braket_noise_phase_flip", "braket_noise_phase_damping", 
               "braket_noise_two_qubit_dephasing", 
               "braket_noise_two_qubit_depolarizing"}, "maximumQubitArrays" -> 
             1, "maximumClassicalArrays" -> 1, 
             "forbiddenArrayOperations" -> {
              "concatenation", "negativeIndex", "range", "rangeWithStep", 
               "slicing", "selection"}, "requiresAllQubitsMeasurement" -> 
             True, "supportPhysicalQubits" -> False, 
             "requiresContiguousQubitIndices" -> True, 
             "supportsPartialVerbatimBox" -> True, 
             "supportsUnassignedMeasurements" -> True, 
             "disabledQubitRewiringSupported" -> False, 
             "supportedResultTypes" -> {<|
               "name" -> "Sample", 
                "observables" -> {"x", "y", "z", "h", "i", "hermitian"}, 
                "minShots" -> 1, "maxShots" -> 100000|>, <|
               "name" -> "Expectation", 
                "observables" -> {"x", "y", "z", "h", "i", "hermitian"}, 
                "minShots" -> 0, "maxShots" -> 100000|>, <|
               "name" -> "Variance", 
                "observables" -> {"x", "y", "z", "h", "i", "hermitian"}, 
                "minShots" -> 0, "maxShots" -> 100000|>, <|
               "name" -> "Probability", "minShots" -> 1, "maxShots" -> 
                100000|>, <|
               "name" -> "Amplitude", "minShots" -> 0, "maxShots" -> 0|>, <|
               "name" -> "AdjointGradient", 
                "observables" -> {"x", "y", "z", "h", "i"}, "minShots" -> 0, 
                "maxShots" -> 0|>}|>|>, 
         "deviceParameters" -> <|
          "title" -> "GateModelSimulatorDeviceParameters", "description" -> 
           "This defines the parameters common to all the gatemodel devices.\n\
\nAttributes:\n    paradigmParameters: Parameters that are common to \
gatemodel paradigm\n\nExamples:\n    >>> import json\n    >>> input_json = {\n\
    ...    \"braketSchemaHeader\": {\n    ...        \"name\": \
\"braket.device_schema.simulators.gate_model_simulator_device_parameters\",\n \
   ...        \"version\": \"1\",\n    ...    },\n    ...    \
\"paradigmParameters\": {\"braketSchemaHeader\": {\n    ...        \"name\": \
\"braket.device_schema.gate_model_parameters\",\n    ...        \"version\": \
\"1\",\n    ...    },\"qubitCount\": 1},\n    ... }\n    >>> \
GateModelSimulatorDeviceParameters.parse_raw_schema(json.dumps(input_json))", 
           "type" -> "object", 
           "properties" -> <|
            "braketSchemaHeader" -> <|
              "title" -> "Braketschemaheader", 
               "const" -> <|
                "name" -> 
                 "braket.device_schema.simulators.gate_model_simulator_device_\
parameters", "version" -> "1"|>|>, 
             "paradigmParameters" -> <|
              "$ref" -> "#/definitions/GateModelParameters"|>|>, 
           "required" -> {"paradigmParameters"}, 
           "definitions" -> <|
            "GateModelParameters" -> <|
              "title" -> "GateModelParameters", "description" -> 
               "This defines the parameters common to all the gatemodel \
devices.\n\nAttributes:\n    qubitCount: number of qubits for a device\n\n\
Examples:\n    >>> import json\n    >>> input_json = {\n    ...    \
\"braketSchemaHeader\": {\n    ...        \"name\": \
\"braket.device_schema.gate_model_parameters\",\n    ...        \"version\": \
\"1\",\n    ...    },\n    ...    \"qubitCount\": 1\n    ... }\n    >>> \
GateModelParameters.parse_raw_schema(json.dumps(input_json))", "type" -> 
               "object", 
               "properties" -> <|
                "braketSchemaHeader" -> <|
                  "title" -> "Braketschemaheader", 
                   "const" -> <|
                    "name" -> "braket.device_schema.gate_model_parameters", 
                    "version" -> "1"|>|>, 
                 "qubitCount" -> <|
                  "title" -> "Qubitcount", "exclusiveMinimum" -> 0, "type" -> 
                   "integer"|>|>, "required" -> {"qubitCount"}|>|>|>, 
         "braketSchemaHeader" -> <|
          "name" -> 
           "braket.device_schema.simulators.gate_model_simulator_device_\
capabilities", "version" -> "1"|>, 
         "paradigm" -> <|
          "braketSchemaHeader" -> <|
            "name" -> 
             "braket.device_schema.simulators.gate_model_simulator_paradigm_\
properties", "version" -> "1"|>, "qubitCount" -> 34|>|>|>, "AllowEmbedding" -> 
     True, "InitialShape" -> 
     TypeSystem`PackageScope`DocumentShape[<|{"DeviceArn"} -> 
        TypeSystem`PackageScope`AtomShape[560.], {"DeviceName"} -> 
        TypeSystem`PackageScope`AtomShape[33.6], {"ProviderName"} -> 
        TypeSystem`PackageScope`AtomShape[145.60000000000002`], {
         "DeviceType"} -> 
        TypeSystem`PackageScope`AtomShape[100.80000000000001`], {
         "DeviceStatus"} -> 
        TypeSystem`PackageScope`AtomShape[67.2], {"DeviceCapabilities"} -> 
        TypeSystem`PackageScope`ElidedShape[1]|>, 1], "InitialType" -> 
     TypeSystem`Struct[{
       "DeviceArn", "DeviceName", "ProviderName", "DeviceType", 
        "DeviceStatus", "DeviceCapabilities"}, {
        TypeSystem`Atom[String], 
        TypeSystem`Atom[String], 
        TypeSystem`Atom[String], 
        TypeSystem`Atom[String], 
        TypeSystem`Atom[String], 
        TypeSystem`Assoc[
         TypeSystem`Atom[String], 
         TypeSystem`Assoc[
          TypeSystem`Atom[String], TypeSystem`AnyType, TypeSystem`AnyLength], 
         5]}], "Meta" -> <||>, "RowTarget" -> 20, "ColumnTarget" -> 10, 
     "Shape" -> TypeSystem`PackageScope`DocumentShape[<|{"DeviceArn"} -> 
        TypeSystem`PackageScope`AtomShape[560.], {"DeviceName"} -> 
        TypeSystem`PackageScope`AtomShape[33.6], {"ProviderName"} -> 
        TypeSystem`PackageScope`AtomShape[145.60000000000002`], {
         "DeviceType"} -> 
        TypeSystem`PackageScope`AtomShape[100.80000000000001`], {
         "DeviceStatus"} -> 
        TypeSystem`PackageScope`AtomShape[67.2], {"DeviceCapabilities"} -> 
        TypeSystem`PackageScope`ElidedShape[1]|>, 1], "Type" -> 
     TypeSystem`Struct[{
       "DeviceArn", "DeviceName", "ProviderName", "DeviceType", 
        "DeviceStatus", "DeviceCapabilities"}, {
        TypeSystem`Atom[String], 
        TypeSystem`Atom[String], 
        TypeSystem`Atom[String], 
        TypeSystem`Atom[String], 
        TypeSystem`Atom[String], 
        TypeSystem`Assoc[
         TypeSystem`Atom[String], 
         TypeSystem`Assoc[
          TypeSystem`Atom[String], TypeSystem`AnyType, TypeSystem`AnyLength], 
         5]}], "Path" -> {}, "DisplayedRowCount" -> 20, 
     "DisplayedColumnCount" -> 10, "DataRowCount" -> 6, "DataColumnCount" -> 
     1, "SortPaths" -> {}, "SortDirections" -> {}, "HiddenItemsMap" -> Null, 
     "UpdateType" -> 1|>, TypeSystem`NestedGrid`PackagePrivate`$outputID$$, 
    TypeSystem`NestedGrid`PackagePrivate`$path$$ = {}, 
    TypeSystem`NestedGrid`PackagePrivate`$vPos$$ = 1, 
    TypeSystem`NestedGrid`PackagePrivate`$hPos$$ = 1, 
    TypeSystem`NestedGrid`PackagePrivate`$grid$$ = 
    DynamicModule[{
     TypeSystem`NestedGrid`PackagePrivate`renderedGrid = Deploy[
        Style[
         Grid[{{
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover["DeviceArn", 
                  Style[
                  "DeviceArn", FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                If[
                  TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                    Key["DeviceArn"]}, 1]]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key["DeviceArn"]}, "RowHeader", False], "Mouse"], 
              ImageSize -> {{1, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
             GrayLevel[0.95], Alignment -> {Left, Baseline}], 
            Item[
             Pane[
              Annotation[
              "arn:aws:braket:::device/quantum-simulator/amazon/sv1", 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key["DeviceArn"]}, "Item", False], "Mouse"], 
              ImageSize -> {{560., Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}]}, {
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover["DeviceName", 
                  Style[
                  "DeviceName", FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                If[
                  TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                    Key["DeviceName"]}, 1]]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key["DeviceName"]}, "RowHeader", False], "Mouse"], 
              ImageSize -> {{1, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
             GrayLevel[0.95], Alignment -> {Left, Baseline}], 
            Item[
             Pane[
              Annotation["SV1", 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key["DeviceName"]}, "Item", False], "Mouse"], 
              ImageSize -> {{33.6, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}]}, {
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover["ProviderName", 
                  Style[
                  "ProviderName", FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                If[
                  TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                    Key["ProviderName"]}, 1]]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key["ProviderName"]}, "RowHeader", False], "Mouse"], 
              ImageSize -> {{1, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
             GrayLevel[0.95], Alignment -> {Left, Baseline}], 
            Item[
             Pane[
              Annotation["Amazon Braket", 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key["ProviderName"]}, "Item", False], "Mouse"], 
              ImageSize -> {{145.60000000000002`, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}]}, {
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover["DeviceType", 
                  Style[
                  "DeviceType", FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                If[
                  TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                    Key["DeviceType"]}, 1]]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key["DeviceType"]}, "RowHeader", False], "Mouse"], 
              ImageSize -> {{1, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
             GrayLevel[0.95], Alignment -> {Left, Baseline}], 
            Item[
             Pane[
              Annotation["SIMULATOR", 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key["DeviceType"]}, "Item", False], "Mouse"], 
              ImageSize -> {{100.80000000000001`, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}]}, {
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover["DeviceStatus", 
                  Style[
                  "DeviceStatus", FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                If[
                  TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                    Key["DeviceStatus"]}, 1]]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key["DeviceStatus"]}, "RowHeader", False], "Mouse"], 
              ImageSize -> {{1, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
             GrayLevel[0.95], Alignment -> {Left, Baseline}], 
            Item[
             Pane[
              Annotation["ONLINE", 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key["DeviceStatus"]}, "Item", False], "Mouse"], 
              ImageSize -> {{67.2, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}]}, {
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover["DeviceCapabilities", 
                  Style[
                  "DeviceCapabilities", FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                If[
                  TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                    Key["DeviceCapabilities"]}, 1]]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key["DeviceCapabilities"]}, "RowHeader", False], "Mouse"], 
              ImageSize -> {{1, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
             GrayLevel[0.95], Alignment -> {Left, Baseline}], 
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover[
                  Style[
                   Tooltip[
                    Row[{"\[LeftAssociation] ", 
                    Subscript["\[Ellipsis]", 5], "\[RightAssociation]"}], 
                    Row[{"Keys: ", 
                    
                    Row[{"service", "action", "deviceParameters", 
                    "braketSchemaHeader", "paradigm"}, ", ", 
                    BaseStyle -> (ShowStringCharacters -> True)]}], 
                    TooltipDelay -> 0.1], 
                   GrayLevel[0.5]], 
                  Style[
                   Style[
                    Tooltip[
                    Row[{"\[LeftAssociation] ", 
                    Subscript["\[Ellipsis]", 5], "\[RightAssociation]"}], 
                    Row[{"Keys: ", 
                    
                    Row[{"service", "action", "deviceParameters", 
                    "braketSchemaHeader", "paradigm"}, ", ", 
                    BaseStyle -> (ShowStringCharacters -> True)]}], 
                    TooltipDelay -> 0.1], 
                    GrayLevel[0.5]], FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                If[
                  TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                    Key["DeviceCapabilities"]}, 4]]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key["DeviceCapabilities"]}, "Item", False], "Mouse"], 
              ImageMargins -> {{5, 3}, {4, 5}}], BaseStyle -> {
               GrayLevel[0.5]}]}}, 
          BaseStyle -> {
           ContextMenu -> 
            Dynamic[TypeSystem`NestedGrid`PackagePrivate`$contextMenuTrigger; 
              Which[TypeSystem`NestedGrid`PackagePrivate`$lastOutputID =!= 
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                 TypeSystem`NestedGrid`PackagePrivate`$outputID$$], {}, 
                TypeSystem`NestedGrid`PackagePrivate`$contextMenuTrigger === 
                TypeSystem`NestedGrid`PackagePrivate`$lastContextMenuTrigger, 
                TypeSystem`NestedGrid`PackagePrivate`$lastContextMenu, True, 
                TypeSystem`NestedGrid`PackagePrivate`$lastContextMenuTrigger = 
                 TypeSystem`NestedGrid`PackagePrivate`$contextMenuTrigger; 
                TypeSystem`NestedGrid`PackagePrivate`$lastContextMenu = 
                 Block[{TypeSystem`NestedGrid`PackagePrivate`$globalScrollPos = \
{TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$}}, 
                   
                   With[{TypeSystem`NestedGrid`PackagePrivate`lastPath$ = 
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath, 
                    TypeSystem`NestedGrid`PackagePrivate`lastPathType$ = 
                    TypeSystem`NestedGrid`PackagePrivate`$lastPathType, 
                    TypeSystem`NestedGrid`PackagePrivate`isLeafHeader$ = 
                    TypeSystem`NestedGrid`PackagePrivate`$\
lastPathIsLeafHeader, TypeSystem`NestedGrid`PackagePrivate`headerHidden$ = And[
                    MatchQ[TypeSystem`NestedGrid`PackagePrivate`$lastPathType, 
                    Alternatives["RowHeader", "ColumnHeader"]], 
                    TypeSystem`NestedGrid`PackagePrivate`headerHiddenQ[
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath, 
                    TypeSystem`NestedGrid`PackagePrivate`$state$$]], 
                    TypeSystem`NestedGrid`PackagePrivate`allHidden$ = 
                    TypeSystem`NestedGrid`PackagePrivate`allHiddenQ[
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath, 
                    TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                    TypeSystem`NestedGrid`PackagePrivate`anyHidden$ = 
                    TypeSystem`NestedGrid`PackagePrivate`anyHiddenQ[
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath, 
                    TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                    TypeSystem`NestedGrid`PackagePrivate`sortDirection$ = 
                    TypeSystem`NestedGrid`PackagePrivate`columnSortDirection[
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath, 
                    TypeSystem`NestedGrid`PackagePrivate`$state$$[
                    "SortPaths"], 
                    TypeSystem`NestedGrid`PackagePrivate`$state$$[
                    "SortDirections"]], 
                    TypeSystem`NestedGrid`PackagePrivate`haveData$ = Not[
                    FailureQ[
                    TypeSystem`NestedGrid`PackagePrivate`datasetInitialData[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$]]], 
                    TypeSystem`NestedGrid`PackagePrivate`isKeyDummy$ = Not[
                    FreeQ[
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath, Keys]]}, 
                    Join[{
                    If[
                    Or[
                    Not[TypeSystem`NestedGrid`PackagePrivate`haveData$], 
                    Not[TypeSystem`NestedGrid`PackagePrivate`anyHidden$], 
                    TypeSystem`NestedGrid`PackagePrivate`isKeyDummy$], 
                    Nothing, 
                    MenuItem[
                    "Show " <> 
                    Which[TypeSystem`NestedGrid`PackagePrivate`lastPathType$ == 
                    "Item", "", 
                    TypeSystem`NestedGrid`PackagePrivate`lastPathType$ == 
                    "RowHeader", "Row", 
                    TypeSystem`NestedGrid`PackagePrivate`lastPathType$ == 
                    "ColumnHeader", "Column", True, ""], 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`updateHiddenItems[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][
                    TypeSystem`NestedGrid`PackagePrivate`lastPath$, 
                    "remove"]], MenuEvaluator -> Automatic]], 
                    If[
                    Or[
                    Not[TypeSystem`NestedGrid`PackagePrivate`haveData$], 
                    TypeSystem`NestedGrid`PackagePrivate`pathEmptyQ[
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath, 
                    TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                    TypeSystem`NestedGrid`PackagePrivate`isKeyDummy$, 
                    And[
                    TypeSystem`NestedGrid`PackagePrivate`allHidden$, 
                    TypeSystem`NestedGrid`PackagePrivate`headerHidden$]], 
                    Nothing, 
                    MenuItem[
                    "Hide " <> 
                    Which[TypeSystem`NestedGrid`PackagePrivate`lastPathType$ == 
                    "Item", "", 
                    TypeSystem`NestedGrid`PackagePrivate`lastPathType$ == 
                    "RowHeader", "Row", 
                    TypeSystem`NestedGrid`PackagePrivate`lastPathType$ == 
                    "ColumnHeader", "Column", True, ""], 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`updateHiddenItems[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][
                    TypeSystem`NestedGrid`PackagePrivate`lastPath$, "add"]], 
                    MenuEvaluator -> Automatic]], Delimiter}, 
                    If[
                    And[TypeSystem`NestedGrid`PackagePrivate`haveData$, 
                    MatchQ[TypeSystem`NestedGrid`PackagePrivate`lastPathType$, 
                    Alternatives["ColumnHeader", "KeyDummy"]], 
                    TypeSystem`NestedGrid`PackagePrivate`isLeafHeader$, 
                    Not[TypeSystem`NestedGrid`PackagePrivate`allHidden$]], {
                    If[
                    TypeSystem`NestedGrid`PackagePrivate`sortDirection$ =!= 
                    "Ascending", 
                    MenuItem["Sort", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`updateSort[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][
                    TypeSystem`NestedGrid`PackagePrivate`lastPath$, 
                    "Ascending"]], MenuEvaluator -> Automatic], Nothing], 
                    If[
                    TypeSystem`NestedGrid`PackagePrivate`sortDirection$ =!= 
                    "Descending", 
                    MenuItem["Reverse Sort", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`updateSort[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][
                    TypeSystem`NestedGrid`PackagePrivate`lastPath$, 
                    "Descending"]], MenuEvaluator -> Automatic], Nothing], 
                    If[
                    TypeSystem`NestedGrid`PackagePrivate`sortDirection$ =!= 
                    None, 
                    MenuItem["Unsort", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`updateSort[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][
                    TypeSystem`NestedGrid`PackagePrivate`lastPath$, None]], 
                    MenuEvaluator -> Automatic], Nothing], Delimiter}, {}], {
                    MenuItem["Copy Position to Clipboard", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`toCurrentPosition[
                    TypeSystem`NestedGrid`PackagePrivate`copyClip]], 
                    MenuEvaluator -> Automatic], 
                    If[TypeSystem`NestedGrid`PackagePrivate`haveData$, 
                    MenuItem["Copy Data to Clipboard", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`toCurrentData[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`copyClip]], 
                    MenuEvaluator -> Automatic], Nothing], Delimiter, 
                    MenuItem["Paste Position in New Cell", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`toCurrentPosition[
                    TypeSystem`NestedGrid`PackagePrivate`cellPaste]], 
                    MenuEvaluator -> Automatic], 
                    If[TypeSystem`NestedGrid`PackagePrivate`haveData$, 
                    MenuItem["Paste Data in New Cell", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`toCurrentData[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`cellPaste]], 
                    MenuEvaluator -> Automatic], Nothing]}]]]]], FontFamily -> 
            "Source Sans Pro", FontSize -> 14, FontWeight -> Plain}, Dividers -> 
          All, FrameStyle -> GrayLevel[0.7490196078431373], 
          Spacings -> {0, 0}, Alignment -> Left, 
          BaseStyle -> {
           FontFamily -> "Source Sans Pro", FontSize -> 14, FontWeight -> 
            Plain}], LineBreakWithin -> False, ContextMenu -> {}, NumberMarks -> 
         False, ShowAutoStyles -> False]], 
      TypeSystem`NestedGrid`PackagePrivate`initialQ = True}, 
     Dynamic[
      TypeSystem`NestedGrid`PackagePrivate`setupViewPath[
      TypeSystem`NestedGrid`PackagePrivate`$path$$, If[
         Not[TypeSystem`NestedGrid`PackagePrivate`initialQ], 
         Module[{
          TypeSystem`NestedGrid`PackagePrivate`tmpGrid$ = $Failed, 
           TypeSystem`NestedGrid`PackagePrivate`tmpData$ = 
           TypeSystem`NestedGrid`PackagePrivate`datasetData[
            TypeSystem`NestedGrid`PackagePrivate`$state$$]}, 
          TypeSystem`NestedGrid`PackagePrivate`tmpGrid$ = If[
             FailureQ[TypeSystem`NestedGrid`PackagePrivate`tmpData$], 
             TypeSystem`NestedGrid`PackagePrivate`renderedGrid, 
             TypeSystem`NestedGrid`PackagePrivate`renderGrid[
             TypeSystem`NestedGrid`PackagePrivate`$state$$, 
              TypeSystem`NestedGrid`PackagePrivate`$path$$, 
              TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
              TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
              TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
              TypeSystem`NestedGrid`PackagePrivate`localHold[
              TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][
             TypeSystem`NestedGrid`PackagePrivate`tmpData$]]; If[
            Not[
             FailureQ[TypeSystem`NestedGrid`PackagePrivate`tmpGrid$]], 
            TypeSystem`NestedGrid`PackagePrivate`renderedGrid = 
            TypeSystem`NestedGrid`PackagePrivate`tmpGrid$]; Null]]; 
       TypeSystem`NestedGrid`PackagePrivate`initialQ = False; 
       TypeSystem`NestedGrid`PackagePrivate`$vPos$$; 
       TypeSystem`NestedGrid`PackagePrivate`$hPos$$; If[
         FailureQ[TypeSystem`NestedGrid`PackagePrivate`renderedGrid], 
         TypeSystem`SparseGrid[
          TypeSystem`H["(data no longer present)"]], 
         TypeSystem`NestedGrid`PackagePrivate`renderedGrid]], 
      TrackedSymbols :> {
       TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
        TypeSystem`NestedGrid`PackagePrivate`$hPos$$}], 
     DynamicModuleValues :> {}], 
    TypeSystem`NestedGrid`PackagePrivate`$topBar$$ = Dynamic[
     TypeSystem`NestedGrid`PackagePrivate`makeFramedBar[
      TypeSystem`PackageScope`SubViewPathbar[
      TypeSystem`NestedGrid`PackagePrivate`$path$$, 
       TypeSystem`NestedGrid`PackagePrivate`updateState[
       TypeSystem`NestedGrid`PackagePrivate`$state$$, 
        TypeSystem`NestedGrid`PackagePrivate`$path$$, 
        TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
        TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
        TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
        TypeSystem`NestedGrid`PackagePrivate`localHold[
        TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]]], 
     TrackedSymbols :> {TypeSystem`NestedGrid`PackagePrivate`$path$$}], 
    TypeSystem`NestedGrid`PackagePrivate`$bottomBar$$ = Style[
     Framed[
      Dynamic[
       Replace[
       TypeSystem`NestedGrid`PackagePrivate`mouseAnnotation$$, {
        TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
           TypeSystem`NestedGrid`PackagePrivate`localHold[
           TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][Null, 
           Blank[]] -> "", TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
           TypeSystem`NestedGrid`PackagePrivate`localHold[
           TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][
           Pattern[TypeSystem`NestedGrid`PackagePrivate`path$, 
            Blank[]], 
           Pattern[TypeSystem`NestedGrid`PackagePrivate`pathType$, 
            Blank[]], 
           Pattern[TypeSystem`NestedGrid`PackagePrivate`isLeafHeader$, 
            Blank[]]] :> (
          Increment[TypeSystem`NestedGrid`PackagePrivate`$contextMenuTrigger]; 
          TypeSystem`NestedGrid`PackagePrivate`$lastPath = 
           TypeSystem`NestedGrid`PackagePrivate`path$; 
          TypeSystem`NestedGrid`PackagePrivate`$lastPathType = 
           TypeSystem`NestedGrid`PackagePrivate`pathType$; 
          TypeSystem`NestedGrid`PackagePrivate`$lastPathIsLeafHeader = 
           TypeSystem`NestedGrid`PackagePrivate`isLeafHeader$; 
          TypeSystem`NestedGrid`PackagePrivate`$lastOutputID = 
           TypeSystem`NestedGrid`PackagePrivate`localHold[
            TypeSystem`NestedGrid`PackagePrivate`$outputID$$]; 
          TypeSystem`NestedGrid`PackagePrivate`makePathTrail[
           TypeSystem`NestedGrid`PackagePrivate`path$, 
            TypeSystem`NestedGrid`PackagePrivate`makePathElements]), Null :> 
         Spacer[10], Blank[] :> Spacer[10]}], 
       TrackedSymbols :> {
        TypeSystem`NestedGrid`PackagePrivate`mouseAnnotation$$}], FrameStyle -> 
      None, ImageMargins -> 0, FrameMargins -> 0, Alignment -> Top, 
      ImageSize -> {Automatic, 15}], FontSize -> 1], 
    TypeSystem`NestedGrid`PackagePrivate`mouseAnnotation$$ = Null}, 
    DynamicWrapperBox[
     DynamicBox[ToBoxes[
       Dataset`DatasetContent[
       2, "Path" -> Hold[TypeSystem`NestedGrid`PackagePrivate`$path$$], 
        "Grid" -> Hold[TypeSystem`NestedGrid`PackagePrivate`$grid$$], "State" -> 
        Hold[TypeSystem`NestedGrid`PackagePrivate`$state$$], "VPos" -> 
        Hold[TypeSystem`NestedGrid`PackagePrivate`$vPos$$], "HPos" -> 
        Hold[TypeSystem`NestedGrid`PackagePrivate`$hPos$$], "TopBar" -> 
        Hold[TypeSystem`NestedGrid`PackagePrivate`$topBar$$], "BottomBar" -> 
        Hold[TypeSystem`NestedGrid`PackagePrivate`$bottomBar$$], "OutputID" -> 
        Hold[
          TypeSystem`NestedGrid`PackagePrivate`localHold[
          TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]], StandardForm],
      ImageSizeCache->{686., {87.634033203125, 93.365966796875}},
      TrackedSymbols:>{
       TypeSystem`NestedGrid`PackagePrivate`$state$$, 
        TypeSystem`NestedGrid`PackagePrivate`$grid$$}], 
     TypeSystem`NestedGrid`PackagePrivate`mouseAnnotation$$ = 
     MouseAnnotation[],
     ImageSizeCache->{686., {87.634033203125, 93.365966796875}}],
    BaseStyle->{LineBreakWithin -> False},
    DynamicModuleValues:>{},
    Initialization:>(TypeSystem`NestedGrid`PackagePrivate`$outputID$$ = 
     CreateUUID[]),
    UnsavedVariables:>{TypeSystem`NestedGrid`PackagePrivate`$outputID$$}],
   Deploy,
   DefaultBaseStyle->"Deploy"],
  Dataset`InterpretDataset[1],
  Editable->False,
  SelectWithContents->True,
  Selectable->False]], "Output",
 CellChangeTimes->{
  3.893884715582468*^9, {3.893885179784086*^9, 3.893885251499982*^9}, 
   3.893892346142823*^9, {3.8939337946347933`*^9, 3.893933816578473*^9}, 
   3.893934005947937*^9, 3.893979319732602*^9},
 CellLabel->"Out[35]=",
 CellID->1743885742,ExpressionUUID->"67ca7ccc-9587-49cf-8678-f56734f0355c"]
}, Open  ]],

Cell["Send a quantum task to SV1 simulator:", "CodeText",
 CellChangeTimes->{{3.8939798733547688`*^9, 3.89397988044252*^9}},
 CellID->1620026447,ExpressionUUID->"1a39a611-9af9-4e0e-adf9-02c8ccbda82d"],

Cell[BoxData[
 RowBox[{
  RowBox[{"taskSV1", "=", 
   RowBox[{"braket", "[", 
    RowBox[{"\"\<CreateQuantumTask\>\"", ",", "\[IndentingNewLine]", 
     RowBox[{"\"\<DeviceArn\>\"", "->", 
      RowBox[{"sim", "[", "\"\<DeviceArn\>\"", "]"}]}], ",", 
     "\[IndentingNewLine]", 
     RowBox[{"\"\<DeviceParameters\>\"", "->", 
      RowBox[{"{", "}"}]}], ",", "\[IndentingNewLine]", 
     RowBox[{"\"\<OutputS3Bucket\>\"", "->", "\"\<PUT_S3_BUCKET_HERE\>\""}], 
     ",", 
     RowBox[{"\"\<OutputS3KeyPrefix\>\"", "->", "\"\<tasks\>\""}], ",", 
     "\[IndentingNewLine]", 
     RowBox[{"\"\<Shots\>\"", "->", "100"}], ",", 
     RowBox[{"\"\<Action\>\"", "->", 
      RowBox[{"<|", 
       RowBox[{
        RowBox[{"\"\<braketSchemaHeader\>\"", "->", 
         RowBox[{"<|", 
          RowBox[{
           RowBox[{
           "\"\<name\>\"", "->", "\"\<braket.ir.openqasm.program\>\""}], ",", 
           
           RowBox[{"\"\<version\>\"", "->", "\"\<1\>\""}]}], "|>"}]}], ",", 
        "\[IndentingNewLine]", 
        RowBox[{"\"\<source\>\"", "->", "qasmAWS"}]}], "|>"}]}], ",", 
     "\[IndentingNewLine]", 
     RowBox[{"\"\<ValidateRequest\>\"", "->", "False"}], ",", 
     RowBox[{"\"\<RequestRegion\>\"", "->", "\"\<us-east-1\>\""}]}], "]"}]}], 
  ";"}]], "Input",
 CellChangeTimes->{
  3.865715607622096*^9, {3.865715657856832*^9, 3.865715685574893*^9}, {
   3.865715908969448*^9, 3.865715911059112*^9}, {3.8657464769232597`*^9, 
   3.8657464783877277`*^9}, {3.865746532336252*^9, 3.865746537101515*^9}, {
   3.865774050391601*^9, 3.8657740608839617`*^9}, 3.865774147326192*^9, {
   3.865774185264494*^9, 3.865774238923164*^9}, {3.8657747781081867`*^9, 
   3.86577478289659*^9}, {3.8657753019298887`*^9, 3.865775305676918*^9}, {
   3.865775470796884*^9, 3.865775487894023*^9}, 3.8657849615071983`*^9, {
   3.86578499412759*^9, 3.865784998736903*^9}, {3.865785220751919*^9, 
   3.865785220910696*^9}, {3.865787611599177*^9, 3.8657876163359623`*^9}, {
   3.865787875611175*^9, 3.8657878772838297`*^9}, {3.8657879097402153`*^9, 
   3.865787915164289*^9}, {3.865788145902522*^9, 3.865788147062911*^9}, {
   3.8657882321191072`*^9, 3.865788238117799*^9}, {3.865790241011203*^9, 
   3.865790241310337*^9}, {3.866891354694018*^9, 3.8668913570198097`*^9}, 
   3.8873790197560673`*^9, {3.887379312080139*^9, 3.8873793127893543`*^9}, {
   3.8880210659190474`*^9, 3.8880210773011827`*^9}, 3.888021537642292*^9, {
   3.888021799213346*^9, 3.88802179984583*^9}, {3.8880871427590733`*^9, 
   3.8880871429982033`*^9}, {3.888087261503124*^9, 3.888087264466572*^9}, {
   3.8882299268724003`*^9, 3.888229940545334*^9}, {3.8883642580895967`*^9, 
   3.888364262572686*^9}, {3.888411925165447*^9, 3.888411925390647*^9}, {
   3.888412797259831*^9, 3.8884128051291533`*^9}, {3.888416893471814*^9, 
   3.8884168948218813`*^9}, {3.888423279388673*^9, 3.888423304441114*^9}, {
   3.888423839821334*^9, 3.888423869490582*^9}, {3.8884257315794*^9, 
   3.888425735023978*^9}, {3.888427055453306*^9, 3.888427056096311*^9}, {
   3.888427397321205*^9, 3.888427401722554*^9}, {3.888428199287758*^9, 
   3.8884282862649097`*^9}, {3.888428361284049*^9, 3.88842836337061*^9}, {
   3.888432992578787*^9, 3.888432994081499*^9}, {3.88843334868213*^9, 
   3.888433348908598*^9}, 3.888433578133059*^9, {3.888436051041669*^9, 
   3.888436054784013*^9}, {3.889022415192625*^9, 3.889022416139834*^9}, {
   3.889023096470767*^9, 3.88902310349566*^9}, {3.88902314829224*^9, 
   3.8890232064799347`*^9}, 3.88902331046245*^9, {3.889023510202517*^9, 
   3.88902351139563*^9}, 3.8890236828345757`*^9, {3.890254414309963*^9, 
   3.890254420656749*^9}, {3.8920693645923862`*^9, 3.8920693938729277`*^9}, 
   3.89393421910579*^9, 3.893934257444582*^9, {3.893979355684547*^9, 
   3.893979391957713*^9}},
 CellLabel->"In[38]:=",
 CellID->128740928,ExpressionUUID->"7835530b-68eb-4f6d-9b38-d889287221ec"],

Cell["Get detailed information on a task:", "CodeText",
 CellChangeTimes->{{3.865787590566513*^9, 3.8657875996048937`*^9}, {
   3.88843618337894*^9, 3.888436212731719*^9}, 3.893979412154346*^9},
 CellID->1959833560,ExpressionUUID->"a5e0967c-6522-4e79-98ec-3773b26f882d"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"braket", "[", 
  RowBox[{"\"\<GetQuantumTask\>\"", ",", 
   RowBox[{"\"\<QuantumTaskArn\>\"", "->", 
    RowBox[{"taskSV1", "[", "\"\<QuantumTaskArn\>\"", "]"}]}], ",", 
   RowBox[{"\"\<RequestRegion\>\"", "->", "\"\<us-east-1\>\""}]}], 
  "]"}]], "Input",
 CellChangeTimes->{{3.865785181442865*^9, 3.865785182426072*^9}, {
  3.865787620367635*^9, 3.865787620502542*^9}, {3.86579027738731*^9, 
  3.865790277572442*^9}, {3.888022006107614*^9, 3.8880220066687527`*^9}, {
  3.888436159231516*^9, 3.888436159849811*^9}},
 CellLabel->"In[39]:=",
 CellID->818465234,ExpressionUUID->"c789316f-614f-4bd9-a2f4-d445725f2b4d"],

Cell[BoxData[
 TagBox[
  TagBox[
   DynamicModuleBox[{TypeSystem`NestedGrid`PackagePrivate`$state$$ = <|
    "InitialData" -> <|
      "CreatedAt" -> 
       DateObject[{2023, 5, 25, 4, 55, 58.388}, "Instant", "Gregorian", 0.], 
       "DeviceArn" -> "arn:aws:braket:::device/quantum-simulator/amazon/sv1", 
       "DeviceParameters" -> <|
        "braketSchemaHeader" -> <|
          "name" -> 
           "braket.device_schema.simulators.gate_model_simulator_device_\
parameters", "version" -> "1"|>, 
         "paradigmParameters" -> <|
          "braketSchemaHeader" -> <|
            "name" -> "braket.device_schema.gate_model_parameters", "version" -> 
             "1"|>, "qubitCount" -> 3, "disableQubitRewiring" -> False|>|>, 
       "EndedAt" -> 
       DateObject[{2023, 5, 25, 4, 55, 59.933}, "Instant", "Gregorian", 0.], 
       "FailureReason" -> Null, "HybridJobArn" -> Null, "Id" -> 
       "65e9dca8-5393-41bc-acf4-682a34a65401", "OutputS3Bucket" -> 
       "amazon-braket-wolfram-mads", "OutputS3Directory" -> 
       "tasks/65e9dca8-5393-41bc-acf4-682a34a65401", "QuantumTaskArn" -> 
       "arn:aws:braket:us-east-1:153593885406:quantum-task/65e9dca8-5393-41bc-\
acf4-682a34a65401", "Shots" -> 100, "Status" -> "COMPLETED", "Tags" -> <||>|>,
      "AllowEmbedding" -> True, "InitialShape" -> 
     TypeSystem`PackageScope`DocumentShape[<|{"CreatedAt"} -> 
        TypeSystem`PackageScope`AtomShape[75], {"DeviceArn"} -> 
        TypeSystem`PackageScope`AtomShape[560.], {"DeviceParameters"} -> 
        TypeSystem`PackageScope`ElidedShape[1], {"EndedAt"} -> 
        TypeSystem`PackageScope`AtomShape[75], {"FailureReason"} -> 
        TypeSystem`PackageScope`UnknownShape[False], {"HybridJobArn"} -> 
        TypeSystem`PackageScope`UnknownShape[False], {"Id"} -> 
        TypeSystem`PackageScope`AtomShape[403.20000000000005`], {
         "OutputS3Bucket"} -> 
        TypeSystem`PackageScope`AtomShape[291.20000000000005`], {
         "OutputS3Directory"} -> 
        TypeSystem`PackageScope`AtomShape[470.40000000000003`], {
         "QuantumTaskArn"} -> 
        TypeSystem`PackageScope`AtomShape[560.], {"Shots"} -> 
        TypeSystem`PackageScope`AtomShape[34], {"Status"} -> 
        TypeSystem`PackageScope`AtomShape[100.80000000000001`], {"Tags"} -> 
        TypeSystem`PackageScope`ElidedShape[1]|>, 1], "InitialType" -> 
     TypeSystem`Struct[{
       "CreatedAt", "DeviceArn", "DeviceParameters", "EndedAt", 
        "FailureReason", "HybridJobArn", "Id", "OutputS3Bucket", 
        "OutputS3Directory", "QuantumTaskArn", "Shots", "Status", "Tags"}, {
        TypeSystem`Atom[DateObject], 
        TypeSystem`Atom[String], 
        TypeSystem`Assoc[
         TypeSystem`Atom[String], 
         TypeSystem`Assoc[
         TypeSystem`AnyType, TypeSystem`AnyType, TypeSystem`AnyLength], 2], 
        TypeSystem`Atom[DateObject], TypeSystem`AnyType, TypeSystem`AnyType, 
        TypeSystem`Atom[String], 
        TypeSystem`Atom[String], 
        TypeSystem`Atom[String], 
        TypeSystem`Atom[String], 
        TypeSystem`Atom[Integer], 
        TypeSystem`Atom[String], 
        TypeSystem`Assoc[
        TypeSystem`UnknownType, TypeSystem`UnknownType, 
         TypeSystem`AnyLength]}], "Meta" -> <||>, "RowTarget" -> 20, 
     "ColumnTarget" -> 10, "Shape" -> 
     TypeSystem`PackageScope`DocumentShape[<|{"CreatedAt"} -> 
        TypeSystem`PackageScope`AtomShape[75], {"DeviceArn"} -> 
        TypeSystem`PackageScope`AtomShape[560.], {"DeviceParameters"} -> 
        TypeSystem`PackageScope`ElidedShape[1], {"EndedAt"} -> 
        TypeSystem`PackageScope`AtomShape[75], {"FailureReason"} -> 
        TypeSystem`PackageScope`UnknownShape[False], {"HybridJobArn"} -> 
        TypeSystem`PackageScope`UnknownShape[False], {"Id"} -> 
        TypeSystem`PackageScope`AtomShape[403.20000000000005`], {
         "OutputS3Bucket"} -> 
        TypeSystem`PackageScope`AtomShape[291.20000000000005`], {
         "OutputS3Directory"} -> 
        TypeSystem`PackageScope`AtomShape[470.40000000000003`], {
         "QuantumTaskArn"} -> 
        TypeSystem`PackageScope`AtomShape[560.], {"Shots"} -> 
        TypeSystem`PackageScope`AtomShape[34], {"Status"} -> 
        TypeSystem`PackageScope`AtomShape[100.80000000000001`], {"Tags"} -> 
        TypeSystem`PackageScope`ElidedShape[1]|>, 1], "Type" -> 
     TypeSystem`Struct[{
       "CreatedAt", "DeviceArn", "DeviceParameters", "EndedAt", 
        "FailureReason", "HybridJobArn", "Id", "OutputS3Bucket", 
        "OutputS3Directory", "QuantumTaskArn", "Shots", "Status", "Tags"}, {
        TypeSystem`Atom[DateObject], 
        TypeSystem`Atom[String], 
        TypeSystem`Assoc[
         TypeSystem`Atom[String], 
         TypeSystem`Assoc[
         TypeSystem`AnyType, TypeSystem`AnyType, TypeSystem`AnyLength], 2], 
        TypeSystem`Atom[DateObject], TypeSystem`AnyType, TypeSystem`AnyType, 
        TypeSystem`Atom[String], 
        TypeSystem`Atom[String], 
        TypeSystem`Atom[String], 
        TypeSystem`Atom[String], 
        TypeSystem`Atom[Integer], 
        TypeSystem`Atom[String], 
        TypeSystem`Assoc[
        TypeSystem`UnknownType, TypeSystem`UnknownType, 
         TypeSystem`AnyLength]}], "Path" -> {}, "DisplayedRowCount" -> 20, 
     "DisplayedColumnCount" -> 10, "DataRowCount" -> 13, "DataColumnCount" -> 
     1, "SortPaths" -> {}, "SortDirections" -> {}, "HiddenItemsMap" -> Null, 
     "UpdateType" -> 1|>, TypeSystem`NestedGrid`PackagePrivate`$outputID$$, 
    TypeSystem`NestedGrid`PackagePrivate`$path$$ = {}, 
    TypeSystem`NestedGrid`PackagePrivate`$vPos$$ = 1, 
    TypeSystem`NestedGrid`PackagePrivate`$hPos$$ = 1, 
    TypeSystem`NestedGrid`PackagePrivate`$grid$$ = 
    DynamicModule[{
     TypeSystem`NestedGrid`PackagePrivate`renderedGrid = Deploy[
        Style[
         Grid[{{
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover["CreatedAt", 
                  Style[
                  "CreatedAt", FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                If[
                  TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                    Key["CreatedAt"]}, 1]]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key["CreatedAt"]}, "RowHeader", False], "Mouse"], 
              ImageSize -> {{1, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
             GrayLevel[0.95], Alignment -> {Left, Baseline}], 
            Item[
             Pane[
              Annotation[
               RawBoxes["\"Thu 25 May 2023 04:55:58\""], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key["CreatedAt"]}, "Item", False], "Mouse"], 
              ImageSize -> {{75, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}]}, {
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover["DeviceArn", 
                  Style[
                  "DeviceArn", FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                If[
                  TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                    Key["DeviceArn"]}, 1]]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key["DeviceArn"]}, "RowHeader", False], "Mouse"], 
              ImageSize -> {{1, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
             GrayLevel[0.95], Alignment -> {Left, Baseline}], 
            Item[
             Pane[
              Annotation[
              "arn:aws:braket:::device/quantum-simulator/amazon/sv1", 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key["DeviceArn"]}, "Item", False], "Mouse"], 
              ImageSize -> {{560., Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}]}, {
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover["DeviceParameters", 
                  Style[
                  "DeviceParameters", FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                If[
                  TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                    Key["DeviceParameters"]}, 1]]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key["DeviceParameters"]}, "RowHeader", False], "Mouse"], 
              ImageSize -> {{1, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
             GrayLevel[0.95], Alignment -> {Left, Baseline}], 
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover[
                  Style[
                   Tooltip[
                    Row[{"\[LeftAssociation] ", 
                    Subscript["\[Ellipsis]", 2], "\[RightAssociation]"}], 
                    Row[{"Keys: ", 
                    
                    Row[{"braketSchemaHeader", "paradigmParameters"}, ", ", 
                    BaseStyle -> (ShowStringCharacters -> True)]}], 
                    TooltipDelay -> 0.1], 
                   GrayLevel[0.5]], 
                  Style[
                   Style[
                    Tooltip[
                    Row[{"\[LeftAssociation] ", 
                    Subscript["\[Ellipsis]", 2], "\[RightAssociation]"}], 
                    Row[{"Keys: ", 
                    
                    Row[{"braketSchemaHeader", "paradigmParameters"}, ", ", 
                    BaseStyle -> (ShowStringCharacters -> True)]}], 
                    TooltipDelay -> 0.1], 
                    GrayLevel[0.5]], FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                If[
                  TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                    Key["DeviceParameters"]}, 4]]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key["DeviceParameters"]}, "Item", False], "Mouse"], 
              ImageMargins -> {{5, 3}, {4, 5}}], BaseStyle -> {
               GrayLevel[0.5]}]}, {
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover["EndedAt", 
                  Style[
                  "EndedAt", FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                If[
                  TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                    Key["EndedAt"]}, 1]]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key["EndedAt"]}, "RowHeader", False], "Mouse"], 
              ImageSize -> {{1, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
             GrayLevel[0.95], Alignment -> {Left, Baseline}], 
            Item[
             Pane[
              Annotation[
               RawBoxes["\"Thu 25 May 2023 04:55:59\""], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key["EndedAt"]}, "Item", False], "Mouse"], 
              ImageSize -> {{75, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}]}, {
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover["FailureReason", 
                  Style[
                  "FailureReason", FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                If[
                  TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                    Key["FailureReason"]}, 1]]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key["FailureReason"]}, "RowHeader", False], "Mouse"], 
              ImageSize -> {{1, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
             GrayLevel[0.95], Alignment -> {Left, Baseline}], 
            Item[
             Pane[
              Annotation[
               RawBoxes[
                StyleBox["Null", FontFamily -> Dynamic[
                   CurrentValue[{"StyleHints", "CodeFont"}]], 
                 ShowStringCharacters -> True]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key["FailureReason"]}, "Item", False], "Mouse"], 
              ImageSize -> {{60, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}]}, {
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover["HybridJobArn", 
                  Style[
                  "HybridJobArn", FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                If[
                  TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                    Key["HybridJobArn"]}, 1]]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key["HybridJobArn"]}, "RowHeader", False], "Mouse"], 
              ImageSize -> {{1, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
             GrayLevel[0.95], Alignment -> {Left, Baseline}], 
            Item[
             Pane[
              Annotation[
               RawBoxes[
                StyleBox["Null", FontFamily -> Dynamic[
                   CurrentValue[{"StyleHints", "CodeFont"}]], 
                 ShowStringCharacters -> True]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key["HybridJobArn"]}, "Item", False], "Mouse"], 
              ImageSize -> {{60, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}]}, {
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover["Id", 
                  Style[
                  "Id", FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                If[
                  TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                    Key["Id"]}, 1]]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key["Id"]}, "RowHeader", False], "Mouse"], 
              ImageSize -> {{1, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
             GrayLevel[0.95], Alignment -> {Left, Baseline}], 
            Item[
             Pane[
              Annotation["65e9dca8-5393-41bc-acf4-682a34a65401", 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key["Id"]}, "Item", False], "Mouse"], 
              ImageSize -> {{403.20000000000005`, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}]}, {
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover["OutputS3Bucket", 
                  Style[
                  "OutputS3Bucket", FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                If[
                  TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                    Key["OutputS3Bucket"]}, 1]]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key["OutputS3Bucket"]}, "RowHeader", False], "Mouse"], 
              ImageSize -> {{1, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
             GrayLevel[0.95], Alignment -> {Left, Baseline}], 
            Item[
             Pane[
              Annotation["amazon-braket-wolfram-mads", 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key["OutputS3Bucket"]}, "Item", False], "Mouse"], 
              ImageSize -> {{291.20000000000005`, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}]}, {
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover["OutputS3Directory", 
                  Style[
                  "OutputS3Directory", FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                If[
                  TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                    Key["OutputS3Directory"]}, 1]]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key["OutputS3Directory"]}, "RowHeader", False], "Mouse"], 
              ImageSize -> {{1, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
             GrayLevel[0.95], Alignment -> {Left, Baseline}], 
            Item[
             Pane[
              Annotation["tasks/65e9dca8-5393-41bc-acf4-682a34a65401", 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key["OutputS3Directory"]}, "Item", False], "Mouse"], 
              ImageSize -> {{470.40000000000003`, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}]}, {
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover["QuantumTaskArn", 
                  Style[
                  "QuantumTaskArn", FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                If[
                  TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                    Key["QuantumTaskArn"]}, 1]]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key["QuantumTaskArn"]}, "RowHeader", False], "Mouse"], 
              ImageSize -> {{1, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
             GrayLevel[0.95], Alignment -> {Left, Baseline}], 
            Item[
             Pane[
              Annotation[
              "arn:aws:braket:us-east-1:153593885406:quantum-task/65e9dca8-\
5393-41bc-acf4-682a34a65401", 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key["QuantumTaskArn"]}, "Item", False], "Mouse"], 
              ImageSize -> {{560., Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}]}, {
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover["Shots", 
                  Style[
                  "Shots", FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                If[
                  TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                    Key["Shots"]}, 1]]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key["Shots"]}, "RowHeader", False], "Mouse"], 
              ImageSize -> {{1, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
             GrayLevel[0.95], Alignment -> {Left, Baseline}], 
            Item[
             Pane[
              Annotation[
               RawBoxes["100"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key["Shots"]}, "Item", False], "Mouse"], 
              ImageSize -> {{34, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}]}, {
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover["Status", 
                  Style[
                  "Status", FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                If[
                  TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                    Key["Status"]}, 1]]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key["Status"]}, "RowHeader", False], "Mouse"], 
              ImageSize -> {{1, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
             GrayLevel[0.95], Alignment -> {Left, Baseline}], 
            Item[
             Pane[
              Annotation["COMPLETED", 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key["Status"]}, "Item", False], "Mouse"], 
              ImageSize -> {{100.80000000000001`, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}]}, {
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover["Tags", 
                  Style[
                  "Tags", FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                If[
                  TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                    Key["Tags"]}, 1]]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key["Tags"]}, "RowHeader", False], "Mouse"], 
              ImageSize -> {{1, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
             GrayLevel[0.95], Alignment -> {Left, Baseline}], 
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover[
                  Style[<||>, ShowStringCharacters -> False], 
                  Style[
                   Style[<||>, ShowStringCharacters -> False], FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                If[
                  TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                    Key["Tags"]}, 4]]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key["Tags"]}, "Item", False], "Mouse"], 
              ImageMargins -> {{5, 3}, {4, 5}}]]}}, 
          BaseStyle -> {
           ContextMenu -> 
            Dynamic[TypeSystem`NestedGrid`PackagePrivate`$contextMenuTrigger; 
              Which[TypeSystem`NestedGrid`PackagePrivate`$lastOutputID =!= 
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                 TypeSystem`NestedGrid`PackagePrivate`$outputID$$], {}, 
                TypeSystem`NestedGrid`PackagePrivate`$contextMenuTrigger === 
                TypeSystem`NestedGrid`PackagePrivate`$lastContextMenuTrigger, 
                TypeSystem`NestedGrid`PackagePrivate`$lastContextMenu, True, 
                TypeSystem`NestedGrid`PackagePrivate`$lastContextMenuTrigger = 
                 TypeSystem`NestedGrid`PackagePrivate`$contextMenuTrigger; 
                TypeSystem`NestedGrid`PackagePrivate`$lastContextMenu = 
                 Block[{TypeSystem`NestedGrid`PackagePrivate`$globalScrollPos = \
{TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$}}, 
                   
                   With[{TypeSystem`NestedGrid`PackagePrivate`lastPath$ = 
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath, 
                    TypeSystem`NestedGrid`PackagePrivate`lastPathType$ = 
                    TypeSystem`NestedGrid`PackagePrivate`$lastPathType, 
                    TypeSystem`NestedGrid`PackagePrivate`isLeafHeader$ = 
                    TypeSystem`NestedGrid`PackagePrivate`$\
lastPathIsLeafHeader, TypeSystem`NestedGrid`PackagePrivate`headerHidden$ = And[
                    MatchQ[TypeSystem`NestedGrid`PackagePrivate`$lastPathType, 
                    Alternatives["RowHeader", "ColumnHeader"]], 
                    TypeSystem`NestedGrid`PackagePrivate`headerHiddenQ[
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath, 
                    TypeSystem`NestedGrid`PackagePrivate`$state$$]], 
                    TypeSystem`NestedGrid`PackagePrivate`allHidden$ = 
                    TypeSystem`NestedGrid`PackagePrivate`allHiddenQ[
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath, 
                    TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                    TypeSystem`NestedGrid`PackagePrivate`anyHidden$ = 
                    TypeSystem`NestedGrid`PackagePrivate`anyHiddenQ[
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath, 
                    TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                    TypeSystem`NestedGrid`PackagePrivate`sortDirection$ = 
                    TypeSystem`NestedGrid`PackagePrivate`columnSortDirection[
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath, 
                    TypeSystem`NestedGrid`PackagePrivate`$state$$[
                    "SortPaths"], 
                    TypeSystem`NestedGrid`PackagePrivate`$state$$[
                    "SortDirections"]], 
                    TypeSystem`NestedGrid`PackagePrivate`haveData$ = Not[
                    FailureQ[
                    TypeSystem`NestedGrid`PackagePrivate`datasetInitialData[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$]]], 
                    TypeSystem`NestedGrid`PackagePrivate`isKeyDummy$ = Not[
                    FreeQ[
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath, Keys]]}, 
                    Join[{
                    If[
                    Or[
                    Not[TypeSystem`NestedGrid`PackagePrivate`haveData$], 
                    Not[TypeSystem`NestedGrid`PackagePrivate`anyHidden$], 
                    TypeSystem`NestedGrid`PackagePrivate`isKeyDummy$], 
                    Nothing, 
                    MenuItem[
                    "Show " <> 
                    Which[TypeSystem`NestedGrid`PackagePrivate`lastPathType$ == 
                    "Item", "", 
                    TypeSystem`NestedGrid`PackagePrivate`lastPathType$ == 
                    "RowHeader", "Row", 
                    TypeSystem`NestedGrid`PackagePrivate`lastPathType$ == 
                    "ColumnHeader", "Column", True, ""], 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`updateHiddenItems[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][
                    TypeSystem`NestedGrid`PackagePrivate`lastPath$, 
                    "remove"]], MenuEvaluator -> Automatic]], 
                    If[
                    Or[
                    Not[TypeSystem`NestedGrid`PackagePrivate`haveData$], 
                    TypeSystem`NestedGrid`PackagePrivate`pathEmptyQ[
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath, 
                    TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                    TypeSystem`NestedGrid`PackagePrivate`isKeyDummy$, 
                    And[
                    TypeSystem`NestedGrid`PackagePrivate`allHidden$, 
                    TypeSystem`NestedGrid`PackagePrivate`headerHidden$]], 
                    Nothing, 
                    MenuItem[
                    "Hide " <> 
                    Which[TypeSystem`NestedGrid`PackagePrivate`lastPathType$ == 
                    "Item", "", 
                    TypeSystem`NestedGrid`PackagePrivate`lastPathType$ == 
                    "RowHeader", "Row", 
                    TypeSystem`NestedGrid`PackagePrivate`lastPathType$ == 
                    "ColumnHeader", "Column", True, ""], 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`updateHiddenItems[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][
                    TypeSystem`NestedGrid`PackagePrivate`lastPath$, "add"]], 
                    MenuEvaluator -> Automatic]], Delimiter}, 
                    If[
                    And[TypeSystem`NestedGrid`PackagePrivate`haveData$, 
                    MatchQ[TypeSystem`NestedGrid`PackagePrivate`lastPathType$, 
                    Alternatives["ColumnHeader", "KeyDummy"]], 
                    TypeSystem`NestedGrid`PackagePrivate`isLeafHeader$, 
                    Not[TypeSystem`NestedGrid`PackagePrivate`allHidden$]], {
                    If[
                    TypeSystem`NestedGrid`PackagePrivate`sortDirection$ =!= 
                    "Ascending", 
                    MenuItem["Sort", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`updateSort[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][
                    TypeSystem`NestedGrid`PackagePrivate`lastPath$, 
                    "Ascending"]], MenuEvaluator -> Automatic], Nothing], 
                    If[
                    TypeSystem`NestedGrid`PackagePrivate`sortDirection$ =!= 
                    "Descending", 
                    MenuItem["Reverse Sort", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`updateSort[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][
                    TypeSystem`NestedGrid`PackagePrivate`lastPath$, 
                    "Descending"]], MenuEvaluator -> Automatic], Nothing], 
                    If[
                    TypeSystem`NestedGrid`PackagePrivate`sortDirection$ =!= 
                    None, 
                    MenuItem["Unsort", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`updateSort[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][
                    TypeSystem`NestedGrid`PackagePrivate`lastPath$, None]], 
                    MenuEvaluator -> Automatic], Nothing], Delimiter}, {}], {
                    MenuItem["Copy Position to Clipboard", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`toCurrentPosition[
                    TypeSystem`NestedGrid`PackagePrivate`copyClip]], 
                    MenuEvaluator -> Automatic], 
                    If[TypeSystem`NestedGrid`PackagePrivate`haveData$, 
                    MenuItem["Copy Data to Clipboard", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`toCurrentData[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`copyClip]], 
                    MenuEvaluator -> Automatic], Nothing], Delimiter, 
                    MenuItem["Paste Position in New Cell", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`toCurrentPosition[
                    TypeSystem`NestedGrid`PackagePrivate`cellPaste]], 
                    MenuEvaluator -> Automatic], 
                    If[TypeSystem`NestedGrid`PackagePrivate`haveData$, 
                    MenuItem["Paste Data in New Cell", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`toCurrentData[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`cellPaste]], 
                    MenuEvaluator -> Automatic], Nothing]}]]]]], FontFamily -> 
            "Source Sans Pro", FontSize -> 14, FontWeight -> Plain}, Dividers -> 
          All, FrameStyle -> GrayLevel[0.7490196078431373], 
          Spacings -> {0, 0}, Alignment -> Left, 
          BaseStyle -> {
           FontFamily -> "Source Sans Pro", FontSize -> 14, FontWeight -> 
            Plain}], LineBreakWithin -> False, ContextMenu -> {}, NumberMarks -> 
         False, ShowAutoStyles -> False]], 
      TypeSystem`NestedGrid`PackagePrivate`initialQ = True}, 
     Dynamic[
      TypeSystem`NestedGrid`PackagePrivate`setupViewPath[
      TypeSystem`NestedGrid`PackagePrivate`$path$$, If[
         Not[TypeSystem`NestedGrid`PackagePrivate`initialQ], 
         Module[{
          TypeSystem`NestedGrid`PackagePrivate`tmpGrid$ = $Failed, 
           TypeSystem`NestedGrid`PackagePrivate`tmpData$ = 
           TypeSystem`NestedGrid`PackagePrivate`datasetData[
            TypeSystem`NestedGrid`PackagePrivate`$state$$]}, 
          TypeSystem`NestedGrid`PackagePrivate`tmpGrid$ = If[
             FailureQ[TypeSystem`NestedGrid`PackagePrivate`tmpData$], 
             TypeSystem`NestedGrid`PackagePrivate`renderedGrid, 
             TypeSystem`NestedGrid`PackagePrivate`renderGrid[
             TypeSystem`NestedGrid`PackagePrivate`$state$$, 
              TypeSystem`NestedGrid`PackagePrivate`$path$$, 
              TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
              TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
              TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
              TypeSystem`NestedGrid`PackagePrivate`localHold[
              TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][
             TypeSystem`NestedGrid`PackagePrivate`tmpData$]]; If[
            Not[
             FailureQ[TypeSystem`NestedGrid`PackagePrivate`tmpGrid$]], 
            TypeSystem`NestedGrid`PackagePrivate`renderedGrid = 
            TypeSystem`NestedGrid`PackagePrivate`tmpGrid$]; Null]]; 
       TypeSystem`NestedGrid`PackagePrivate`initialQ = False; 
       TypeSystem`NestedGrid`PackagePrivate`$vPos$$; 
       TypeSystem`NestedGrid`PackagePrivate`$hPos$$; If[
         FailureQ[TypeSystem`NestedGrid`PackagePrivate`renderedGrid], 
         TypeSystem`SparseGrid[
          TypeSystem`H["(data no longer present)"]], 
         TypeSystem`NestedGrid`PackagePrivate`renderedGrid]], 
      TrackedSymbols :> {
       TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
        TypeSystem`NestedGrid`PackagePrivate`$hPos$$}], 
     DynamicModuleValues :> {}], 
    TypeSystem`NestedGrid`PackagePrivate`$topBar$$ = Dynamic[
     TypeSystem`NestedGrid`PackagePrivate`makeFramedBar[
      TypeSystem`PackageScope`SubViewPathbar[
      TypeSystem`NestedGrid`PackagePrivate`$path$$, 
       TypeSystem`NestedGrid`PackagePrivate`updateState[
       TypeSystem`NestedGrid`PackagePrivate`$state$$, 
        TypeSystem`NestedGrid`PackagePrivate`$path$$, 
        TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
        TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
        TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
        TypeSystem`NestedGrid`PackagePrivate`localHold[
        TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]]], 
     TrackedSymbols :> {TypeSystem`NestedGrid`PackagePrivate`$path$$}], 
    TypeSystem`NestedGrid`PackagePrivate`$bottomBar$$ = Style[
     Framed[
      Dynamic[
       Replace[
       TypeSystem`NestedGrid`PackagePrivate`mouseAnnotation$$, {
        TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
           TypeSystem`NestedGrid`PackagePrivate`localHold[
           TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][Null, 
           Blank[]] -> "", TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
           TypeSystem`NestedGrid`PackagePrivate`localHold[
           TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][
           Pattern[TypeSystem`NestedGrid`PackagePrivate`path$, 
            Blank[]], 
           Pattern[TypeSystem`NestedGrid`PackagePrivate`pathType$, 
            Blank[]], 
           Pattern[TypeSystem`NestedGrid`PackagePrivate`isLeafHeader$, 
            Blank[]]] :> (
          Increment[TypeSystem`NestedGrid`PackagePrivate`$contextMenuTrigger]; 
          TypeSystem`NestedGrid`PackagePrivate`$lastPath = 
           TypeSystem`NestedGrid`PackagePrivate`path$; 
          TypeSystem`NestedGrid`PackagePrivate`$lastPathType = 
           TypeSystem`NestedGrid`PackagePrivate`pathType$; 
          TypeSystem`NestedGrid`PackagePrivate`$lastPathIsLeafHeader = 
           TypeSystem`NestedGrid`PackagePrivate`isLeafHeader$; 
          TypeSystem`NestedGrid`PackagePrivate`$lastOutputID = 
           TypeSystem`NestedGrid`PackagePrivate`localHold[
            TypeSystem`NestedGrid`PackagePrivate`$outputID$$]; 
          TypeSystem`NestedGrid`PackagePrivate`makePathTrail[
           TypeSystem`NestedGrid`PackagePrivate`path$, 
            TypeSystem`NestedGrid`PackagePrivate`makePathElements]), Null :> 
         Spacer[10], Blank[] :> Spacer[10]}], 
       TrackedSymbols :> {
        TypeSystem`NestedGrid`PackagePrivate`mouseAnnotation$$}], FrameStyle -> 
      None, ImageMargins -> 0, FrameMargins -> 0, Alignment -> Top, 
      ImageSize -> {Automatic, 15}], FontSize -> 1], 
    TypeSystem`NestedGrid`PackagePrivate`mouseAnnotation$$ = Null}, 
    DynamicWrapperBox[
     DynamicBox[ToBoxes[
       Dataset`DatasetContent[
       2, "Path" -> Hold[TypeSystem`NestedGrid`PackagePrivate`$path$$], 
        "Grid" -> Hold[TypeSystem`NestedGrid`PackagePrivate`$grid$$], "State" -> 
        Hold[TypeSystem`NestedGrid`PackagePrivate`$state$$], "VPos" -> 
        Hold[TypeSystem`NestedGrid`PackagePrivate`$vPos$$], "HPos" -> 
        Hold[TypeSystem`NestedGrid`PackagePrivate`$hPos$$], "TopBar" -> 
        Hold[TypeSystem`NestedGrid`PackagePrivate`$topBar$$], "BottomBar" -> 
        Hold[TypeSystem`NestedGrid`PackagePrivate`$bottomBar$$], "OutputID" -> 
        Hold[
          TypeSystem`NestedGrid`PackagePrivate`localHold[
          TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]], StandardForm],
      ImageSizeCache->{711., {182.134033203125, 187.865966796875}},
      TrackedSymbols:>{
       TypeSystem`NestedGrid`PackagePrivate`$state$$, 
        TypeSystem`NestedGrid`PackagePrivate`$grid$$}], 
     TypeSystem`NestedGrid`PackagePrivate`mouseAnnotation$$ = 
     MouseAnnotation[],
     ImageSizeCache->{711., {182.134033203125, 187.865966796875}}],
    BaseStyle->{LineBreakWithin -> False},
    DynamicModuleValues:>{},
    Initialization:>(TypeSystem`NestedGrid`PackagePrivate`$outputID$$ = 
     CreateUUID[]),
    UnsavedVariables:>{TypeSystem`NestedGrid`PackagePrivate`$outputID$$}],
   Deploy,
   DefaultBaseStyle->"Deploy"],
  Dataset`InterpretDataset[1],
  Editable->False,
  SelectWithContents->True,
  Selectable->False]], "Output",
 CellChangeTimes->{
  3.865775574265283*^9, 3.8657757405319557`*^9, 3.865775888704936*^9, 
   3.865776225686646*^9, 3.8657771447470503`*^9, 3.865784435891178*^9, {
   3.865785170470769*^9, 3.8657851834622393`*^9}, {3.865785226756228*^9, 
   3.865785229826985*^9}, 3.865788658230769*^9, 3.8657896787981997`*^9, {
   3.865790275019918*^9, 3.86579027840632*^9}, 3.8657904035082703`*^9, 
   3.8658005606173887`*^9, 3.8668914142634687`*^9, 3.888022007605135*^9, 
   3.8884330171493883`*^9, 3.888436160670452*^9, 3.893979405702979*^9},
 CellLabel->"Out[39]=",
 CellID->1688812469,ExpressionUUID->"0f41a781-e6d3-409e-abd4-f7c19b795bdf"]
}, Open  ]],

Cell["As one can see, the status of SV1 task is \
\[OpenCurlyDoubleQuote]COMPLETED\[CloseCurlyDoubleQuote].", "Text",
 CellChangeTimes->{{3.89397941747031*^9, 3.893979430133273*^9}},
 CellID->1612985670,ExpressionUUID->"6a4d1ec7-b599-43cf-9d29-8990450cd804"],

Cell["Find the path of completed task:", "CodeText",
 CellChangeTimes->{{3.893979892764678*^9, 3.893979899881638*^9}},
 CellID->1140080035,ExpressionUUID->"71de5763-1bde-42f8-a7b4-c95eed77e528"],

Cell[BoxData[
 RowBox[{
  RowBox[{"outputPathSV1", "=", 
   RowBox[{
    RowBox[{"braket", "[", 
     RowBox[{"\"\<GetQuantumTask\>\"", ",", 
      RowBox[{"\"\<QuantumTaskArn\>\"", "->", 
       RowBox[{"taskSV1", "[", "\"\<QuantumTaskArn\>\"", "]"}]}], ",", 
      RowBox[{"\"\<RequestRegion\>\"", "\[Rule]", "\"\<us-east-1\>\""}]}], 
     "]"}], "[", "\"\<OutputS3Directory\>\"", "]"}]}], ";"}]], "Input",
 CellChangeTimes->{{3.865774288910781*^9, 3.865774302655974*^9}, {
   3.8657755067819777`*^9, 3.865775530692313*^9}, 3.865785191773793*^9, {
   3.865787623282075*^9, 3.865787623431526*^9}, 3.8657876889328413`*^9, {
   3.865788671183608*^9, 3.865788674620947*^9}, {3.8668914565942097`*^9, 
   3.866891462956624*^9}, {3.88802203598565*^9, 3.888022036554968*^9}, {
   3.8884362577799788`*^9, 3.888436271704986*^9}, 3.889022435168468*^9, 
   3.8939794406391773`*^9},
 CellLabel->"In[40]:=",
 CellID->1186353684,ExpressionUUID->"2373715a-bb5a-4bdc-9220-b68533e1ff65"],

Cell["Get the result from Amazon Braket:", "CodeText",
 CellChangeTimes->{{3.893979902962442*^9, 3.893979914706291*^9}},
 CellID->1591161130,ExpressionUUID->"93440140-95ce-42eb-acc4-89f4658609c6"],

Cell[BoxData[
 RowBox[{
  RowBox[{"resultsSV1", "=", 
   RowBox[{
    RowBox[{"ImportByteArray", "[", 
     RowBox[{
      RowBox[{
       RowBox[{"s3", "[", 
        RowBox[{"\"\<GetObject\>\"", ",", 
         RowBox[{
         "\"\<Bucket\>\"", "->", "\"\<amazon-braket-wolfram-mads\>\""}], ",", 
         
         RowBox[{"\"\<Key\>\"", "->", 
          RowBox[{"FileNameJoin", "[", 
           RowBox[{"{", 
            RowBox[{"outputPathSV1", ",", "\"\<results.json\>\""}], "}"}], 
           "]"}]}], ",", 
         RowBox[{"\"\<RequestRegion\>\"", "\[Rule]", "\"\<us-east-1\>\""}]}], 
        "]"}], "[", "\"\<Body\>\"", "]"}], ",", "\"\<RawJSON\>\""}], "]"}], 
    "[", "\"\<measurements\>\"", "]"}]}], ";"}]], "Input",
 CellChangeTimes->{{3.8657896856053753`*^9, 3.86578968648603*^9}, {
   3.866891477612525*^9, 3.866891479185161*^9}, {3.888022079190158*^9, 
   3.8880220844885283`*^9}, {3.888436284653998*^9, 3.8884362998881693`*^9}, 
   3.892070120167185*^9, 3.892753501842237*^9, {3.893894838901157*^9, 
   3.8938948594133787`*^9}, {3.893979445285681*^9, 3.893979450012403*^9}},
 CellLabel->"In[42]:=",
 CellID->1178660983,ExpressionUUID->"877dbc90-ff8b-47d0-917d-9f521a3a0c21"],

Cell["From SV1 results, one can calculate the probabilities:", "CodeText",
 CellChangeTimes->{{3.8884363360513973`*^9, 3.888436344842852*^9}, {
  3.888439076657843*^9, 3.888439081673761*^9}, {3.888486769022357*^9, 
  3.888486775289481*^9}, {3.8920701533146877`*^9, 3.8920701555366383`*^9}, {
  3.8939794699135933`*^9, 3.893979470463463*^9}},
 CellID->1365981353,ExpressionUUID->"ab354eff-ccd3-4d82-aea2-72f62ca509b0"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"probSV1", "=", 
  RowBox[{"N", "@", 
   RowBox[{"Normalize", "[", 
    RowBox[{
     RowBox[{"KeySort", "@", 
      RowBox[{"Join", "[", 
       RowBox[{
        RowBox[{"AssociationThread", "[", 
         RowBox[{
          RowBox[{"Tuples", "[", 
           RowBox[{
            RowBox[{"{", 
             RowBox[{"0", ",", "1"}], "}"}], ",", "3"}], "]"}], ",", "0"}], 
         "]"}], ",", 
        RowBox[{"Counts", "@", "resultsSV1"}]}], "]"}]}], ",", "Total"}], 
    "]"}]}]}]], "Input",
 CellChangeTimes->{{3.888022123174798*^9, 3.888022131530669*^9}, 
   3.888022176838532*^9, {3.888433057147657*^9, 3.888433143391659*^9}, {
   3.888436325555752*^9, 3.88843633404002*^9}, {3.8890224533542624`*^9, 
   3.889022471322756*^9}, 3.891433388713068*^9, 3.8920717499056892`*^9, {
   3.892753521114987*^9, 3.8927535566536093`*^9}, 3.893979456153715*^9},
 CellLabel->"In[43]:=",
 CellID->1448413441,ExpressionUUID->"e061645a-9ac1-4481-9f00-22ddcfee04f3"],

Cell[BoxData[
 RowBox[{"\[LeftAssociation]", 
  RowBox[{
   RowBox[{
    RowBox[{"{", 
     RowBox[{"0", ",", "0", ",", "0"}], "}"}], "\[Rule]", "0.05`"}], ",", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"0", ",", "0", ",", "1"}], "}"}], "\[Rule]", "0.56`"}], ",", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"0", ",", "1", ",", "0"}], "}"}], "\[Rule]", "0.06`"}], ",", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"0", ",", "1", ",", "1"}], "}"}], "\[Rule]", "0.05`"}], ",", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"1", ",", "0", ",", "0"}], "}"}], "\[Rule]", "0.07`"}], ",", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"1", ",", "0", ",", "1"}], "}"}], "\[Rule]", "0.04`"}], ",", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"1", ",", "1", ",", "0"}], "}"}], "\[Rule]", "0.08`"}], ",", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"1", ",", "1", ",", "1"}], "}"}], "\[Rule]", "0.09`"}]}], 
  "\[RightAssociation]"}]], "Output",
 CellChangeTimes->{3.8927535571744137`*^9, 3.8939794585053663`*^9},
 CellLabel->"Out[43]=",
 CellID->645711583,ExpressionUUID->"2d2eef0c-1bcc-469a-8240-5eab22ab114d"]
}, Open  ]],

Cell["\<\
Visualize SV1 results vs Wolfram quantum framework predictions:\
\>", "CodeText",
 CellChangeTimes->{{3.893979535352112*^9, 3.893979538992127*^9}, {
  3.893979922552248*^9, 3.893979947608453*^9}},
 CellID->1710818344,ExpressionUUID->"1879a326-97c1-4bff-8be8-11c704f5ed63"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"BarChart", "[", 
  RowBox[{
   RowBox[{"Transpose", "[", 
    RowBox[{"Values", "/@", 
     RowBox[{"{", 
      RowBox[{"meas", ",", "probSV1"}], "}"}]}], "]"}], ",", 
   RowBox[{"ChartLabels", "\[Rule]", 
    RowBox[{"{", 
     RowBox[{
      RowBox[{"Keys", "[", "meas", "]"}], ",", "None"}], "}"}]}], ",", 
   RowBox[{"BarSpacing", "\[Rule]", 
    RowBox[{"{", 
     RowBox[{"0", ",", "1"}], "}"}]}], ",", 
   RowBox[{"ChartLegends", "\[Rule]", 
    RowBox[{"Placed", "[", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{
       "\"\<Wolfram Quantum Framework\>\"", ",", 
        "\"\<Amazon Braket SV1\>\""}], "}"}], ",", "Center"}], "]"}]}], ",", 
   RowBox[{"GridLines", "\[Rule]", "Automatic"}], ",", 
   RowBox[{"AspectRatio", "\[Rule]", 
    RowBox[{"1", "/", "4"}]}], ",", 
   RowBox[{"ImageSize", "\[Rule]", "Large"}], ",", 
   RowBox[{"Frame", "->", "True"}]}], "]"}]], "Input",
 CellChangeTimes->{{3.888487604674121*^9, 3.8884876457242737`*^9}, 
   3.8884877080573606`*^9, {3.888487808266686*^9, 3.888487855909235*^9}, {
   3.8884881905780888`*^9, 3.888488211122517*^9}, {3.889022481000156*^9, 
   3.889022499897574*^9}, {3.891427097844768*^9, 3.891427128283867*^9}, 
   3.8920701788190327`*^9, 3.892071680691285*^9, {3.8927535411261883`*^9, 
   3.892753543242786*^9}, {3.89275371112466*^9, 3.892753711625072*^9}, {
   3.8939794775693007`*^9, 3.893979510622534*^9}, {3.8939795604916353`*^9, 
   3.893979592698756*^9}, {3.893979997856782*^9, 3.893980082152389*^9}, {
   3.893980134015458*^9, 3.89398019041861*^9}},
 CellLabel->"In[62]:=",
 CellID->742970109,ExpressionUUID->"1914a582-b71e-45d5-83f4-e35c5f5e23d3"],

Cell[BoxData[
 TagBox[
  GraphicsBox[{{
     {Opacity[0], PointBox[{{0.54, 0.}, {24., 0.}}]}, {{}, {{{}, {{}, {
          {RGBColor[0.982864, 0.7431472, 0.3262672], EdgeForm[{Opacity[0.588],
            Thickness[Small]}], 
           TagBox[
            TooltipBox[
             TagBox[
              TagBox[
               DynamicBox[{
                 FEPrivate`If[
                  CurrentValue["MouseOver"], 
                  EdgeForm[{
                    GrayLevel[0.5], 
                    AbsoluteThickness[1.5], 
                    Opacity[0.66]}], {}, {}], 
                 RectangleBox[{1., 0.}, {2., 0.0625}, "RoundingRadius" -> 0]},
                
                
                ImageSizeCache->{{38.39411764705883, 61.7074168797954}, {
                 42.41319444444443, 57.624999999999986`}}],
               "DelayedMouseEffectStyle"],
              StatusArea[#, 
               Rational[1, 16]]& ,
              TagBoxNote->"1/16"],
             StyleBox[
              FractionBox["1", "16"], {}, StripOnInput -> False]],
            Annotation[#, 
             Style[
              Rational[1, 16], {}], "Tooltip"]& ]}, 
          {RGBColor[0.4992, 0.5552, 0.8309304], EdgeForm[{Opacity[0.588], 
           Thickness[Small]}], 
           TagBox[
            TooltipBox[
             TagBox[
              TagBox[
               DynamicBox[{
                 FEPrivate`If[
                  CurrentValue["MouseOver"], 
                  EdgeForm[{
                    GrayLevel[0.5], 
                    AbsoluteThickness[1.5], 
                    Opacity[0.66]}], {}, {}], 
                 RectangleBox[{2., 0.}, {3., 0.05}, "RoundingRadius" -> 0]},
                
                ImageSizeCache->{{61.2074168797954, 84.52071611253199}, {
                 45.35555555555554, 57.624999999999986`}}],
               "DelayedMouseEffectStyle"],
              StatusArea[#, 0.05]& ,
              TagBoxNote->"0.05"],
             StyleBox["0.05`", {}, StripOnInput -> False]],
            Annotation[#, 
             Style[0.05, {}], "Tooltip"]& ]}}}, {}, {}}, {{}, {{}, {
          {RGBColor[0.982864, 0.7431472, 0.3262672], EdgeForm[{Opacity[0.588],
            Thickness[Small]}], 
           TagBox[
            TooltipBox[
             TagBox[
              TagBox[
               DynamicBox[{
                 FEPrivate`If[
                  CurrentValue["MouseOver"], 
                  EdgeForm[{
                    GrayLevel[0.5], 
                    AbsoluteThickness[1.5], 
                    Opacity[0.66]}], {}, {}], 
                 RectangleBox[{4., 0.}, {5., 0.5625}, "RoundingRadius" -> 0]},
                
                
                ImageSizeCache->{{106.83401534526855`, 
                 130.14731457800514`}, {-75.28125000000001, 
                 57.624999999999986`}}],
               "DelayedMouseEffectStyle"],
              StatusArea[#, 
               Rational[9, 16]]& ,
              TagBoxNote->"9/16"],
             StyleBox[
              FractionBox["9", "16"], {}, StripOnInput -> False]],
            Annotation[#, 
             Style[
              Rational[9, 16], {}], "Tooltip"]& ]}, 
          {RGBColor[0.4992, 0.5552, 0.8309304], EdgeForm[{Opacity[0.588], 
           Thickness[Small]}], 
           TagBox[
            TooltipBox[
             TagBox[
              TagBox[
               DynamicBox[{
                 FEPrivate`If[
                  CurrentValue["MouseOver"], 
                  EdgeForm[{
                    GrayLevel[0.5], 
                    AbsoluteThickness[1.5], 
                    Opacity[0.66]}], {}, {}], 
                 RectangleBox[{5., 0.}, {6., 0.56}, "RoundingRadius" -> 0]},
                
                ImageSizeCache->{{129.64731457800514`, 
                 152.96061381074173`}, {-74.6927777777778, 
                 57.624999999999986`}}],
               "DelayedMouseEffectStyle"],
              StatusArea[#, 0.56]& ,
              TagBoxNote->"0.56"],
             StyleBox["0.56`", {}, StripOnInput -> False]],
            Annotation[#, 
             Style[0.56, {}], "Tooltip"]& ]}}}, {}, {}}, {{}, {{}, {
          {RGBColor[0.982864, 0.7431472, 0.3262672], EdgeForm[{Opacity[0.588],
            Thickness[Small]}], 
           TagBox[
            TooltipBox[
             TagBox[
              TagBox[
               DynamicBox[{
                 FEPrivate`If[
                  CurrentValue["MouseOver"], 
                  EdgeForm[{
                    GrayLevel[0.5], 
                    AbsoluteThickness[1.5], 
                    Opacity[0.66]}], {}, {}], 
                 RectangleBox[{7., 0.}, {8., 0.0625}, "RoundingRadius" -> 0]},
                
                
                ImageSizeCache->{{175.2739130434783, 198.58721227621487`}, {
                 42.41319444444443, 57.624999999999986`}}],
               "DelayedMouseEffectStyle"],
              StatusArea[#, 
               Rational[1, 16]]& ,
              TagBoxNote->"1/16"],
             StyleBox[
              FractionBox["1", "16"], {}, StripOnInput -> False]],
            Annotation[#, 
             Style[
              Rational[1, 16], {}], "Tooltip"]& ]}, 
          {RGBColor[0.4992, 0.5552, 0.8309304], EdgeForm[{Opacity[0.588], 
           Thickness[Small]}], 
           TagBox[
            TooltipBox[
             TagBox[
              TagBox[
               DynamicBox[{
                 FEPrivate`If[
                  CurrentValue["MouseOver"], 
                  EdgeForm[{
                    GrayLevel[0.5], 
                    AbsoluteThickness[1.5], 
                    Opacity[0.66]}], {}, {}], 
                 RectangleBox[{8., 0.}, {9., 0.06}, "RoundingRadius" -> 0]},
                
                ImageSizeCache->{{198.08721227621487`, 221.40051150895144`}, {
                 43.00166666666665, 57.624999999999986`}}],
               "DelayedMouseEffectStyle"],
              StatusArea[#, 0.06]& ,
              TagBoxNote->"0.06"],
             StyleBox["0.06`", {}, StripOnInput -> False]],
            Annotation[#, 
             Style[0.06, {}], "Tooltip"]& ]}}}, {}, {}}, {{}, {{}, {
          {RGBColor[0.982864, 0.7431472, 0.3262672], EdgeForm[{Opacity[0.588],
            Thickness[Small]}], 
           TagBox[
            TooltipBox[
             TagBox[
              TagBox[
               DynamicBox[{
                 FEPrivate`If[
                  CurrentValue["MouseOver"], 
                  EdgeForm[{
                    GrayLevel[0.5], 
                    AbsoluteThickness[1.5], 
                    Opacity[0.66]}], {}, {}], 
                 
                 RectangleBox[{10., 0.}, {11., 0.0625}, "RoundingRadius" -> 
                  0]},
                
                ImageSizeCache->{{243.713810741688, 267.0271099744246}, {
                 42.41319444444443, 57.624999999999986`}}],
               "DelayedMouseEffectStyle"],
              StatusArea[#, 
               Rational[1, 16]]& ,
              TagBoxNote->"1/16"],
             StyleBox[
              FractionBox["1", "16"], {}, StripOnInput -> False]],
            Annotation[#, 
             Style[
              Rational[1, 16], {}], "Tooltip"]& ]}, 
          {RGBColor[0.4992, 0.5552, 0.8309304], EdgeForm[{Opacity[0.588], 
           Thickness[Small]}], 
           TagBox[
            TooltipBox[
             TagBox[
              TagBox[
               DynamicBox[{
                 FEPrivate`If[
                  CurrentValue["MouseOver"], 
                  EdgeForm[{
                    GrayLevel[0.5], 
                    AbsoluteThickness[1.5], 
                    Opacity[0.66]}], {}, {}], 
                 RectangleBox[{11., 0.}, {12., 0.05}, "RoundingRadius" -> 0]},
                
                
                ImageSizeCache->{{266.5271099744246, 289.8404092071612}, {
                 45.35555555555554, 57.624999999999986`}}],
               "DelayedMouseEffectStyle"],
              StatusArea[#, 0.05]& ,
              TagBoxNote->"0.05"],
             StyleBox["0.05`", {}, StripOnInput -> False]],
            Annotation[#, 
             Style[0.05, {}], "Tooltip"]& ]}}}, {}, {}}, {{}, {{}, {
          {RGBColor[0.982864, 0.7431472, 0.3262672], EdgeForm[{Opacity[0.588],
            Thickness[Small]}], 
           TagBox[
            TooltipBox[
             TagBox[
              TagBox[
               DynamicBox[{
                 FEPrivate`If[
                  CurrentValue["MouseOver"], 
                  EdgeForm[{
                    GrayLevel[0.5], 
                    AbsoluteThickness[1.5], 
                    Opacity[0.66]}], {}, {}], 
                 
                 RectangleBox[{13., 0.}, {14., 0.0625}, "RoundingRadius" -> 
                  0]},
                
                ImageSizeCache->{{312.15370843989774`, 335.46700767263434`}, {
                 42.41319444444443, 57.624999999999986`}}],
               "DelayedMouseEffectStyle"],
              StatusArea[#, 
               Rational[1, 16]]& ,
              TagBoxNote->"1/16"],
             StyleBox[
              FractionBox["1", "16"], {}, StripOnInput -> False]],
            Annotation[#, 
             Style[
              Rational[1, 16], {}], "Tooltip"]& ]}, 
          {RGBColor[0.4992, 0.5552, 0.8309304], EdgeForm[{Opacity[0.588], 
           Thickness[Small]}], 
           TagBox[
            TooltipBox[
             TagBox[
              TagBox[
               DynamicBox[{
                 FEPrivate`If[
                  CurrentValue["MouseOver"], 
                  EdgeForm[{
                    GrayLevel[0.5], 
                    AbsoluteThickness[1.5], 
                    Opacity[0.66]}], {}, {}], 
                 RectangleBox[{14., 0.}, {15., 0.07}, "RoundingRadius" -> 0]},
                
                
                ImageSizeCache->{{334.96700767263434`, 358.2803069053709}, {
                 40.64777777777776, 57.624999999999986`}}],
               "DelayedMouseEffectStyle"],
              StatusArea[#, 0.07]& ,
              TagBoxNote->"0.07"],
             StyleBox["0.07`", {}, StripOnInput -> False]],
            Annotation[#, 
             Style[0.07, {}], "Tooltip"]& ]}}}, {}, {}}, {{}, {{}, {
          {RGBColor[0.982864, 0.7431472, 0.3262672], EdgeForm[{Opacity[0.588],
            Thickness[Small]}], 
           TagBox[
            TooltipBox[
             TagBox[
              TagBox[
               DynamicBox[{
                 FEPrivate`If[
                  CurrentValue["MouseOver"], 
                  EdgeForm[{
                    GrayLevel[0.5], 
                    AbsoluteThickness[1.5], 
                    Opacity[0.66]}], {}, {}], 
                 
                 RectangleBox[{16., 0.}, {17., 0.0625}, "RoundingRadius" -> 
                  0]},
                
                ImageSizeCache->{{380.5936061381075, 403.9069053708441}, {
                 42.41319444444443, 57.624999999999986`}}],
               "DelayedMouseEffectStyle"],
              StatusArea[#, 
               Rational[1, 16]]& ,
              TagBoxNote->"1/16"],
             StyleBox[
              FractionBox["1", "16"], {}, StripOnInput -> False]],
            Annotation[#, 
             Style[
              Rational[1, 16], {}], "Tooltip"]& ]}, 
          {RGBColor[0.4992, 0.5552, 0.8309304], EdgeForm[{Opacity[0.588], 
           Thickness[Small]}], 
           TagBox[
            TooltipBox[
             TagBox[
              TagBox[
               DynamicBox[{
                 FEPrivate`If[
                  CurrentValue["MouseOver"], 
                  EdgeForm[{
                    GrayLevel[0.5], 
                    AbsoluteThickness[1.5], 
                    Opacity[0.66]}], {}, {}], 
                 RectangleBox[{17., 0.}, {18., 0.04}, "RoundingRadius" -> 0]},
                
                
                ImageSizeCache->{{403.4069053708441, 426.7202046035806}, {
                 47.70944444444443, 57.624999999999986`}}],
               "DelayedMouseEffectStyle"],
              StatusArea[#, 0.04]& ,
              TagBoxNote->"0.04"],
             StyleBox["0.04`", {}, StripOnInput -> False]],
            Annotation[#, 
             Style[0.04, {}], "Tooltip"]& ]}}}, {}, {}}, {{}, {{}, {
          {RGBColor[0.982864, 0.7431472, 0.3262672], EdgeForm[{Opacity[0.588],
            Thickness[Small]}], 
           TagBox[
            TooltipBox[
             TagBox[
              TagBox[
               DynamicBox[{
                 FEPrivate`If[
                  CurrentValue["MouseOver"], 
                  EdgeForm[{
                    GrayLevel[0.5], 
                    AbsoluteThickness[1.5], 
                    Opacity[0.66]}], {}, {}], 
                 
                 RectangleBox[{19., 0.}, {20., 0.0625}, "RoundingRadius" -> 
                  0]},
                
                ImageSizeCache->{{449.0335038363172, 472.34680306905375`}, {
                 42.41319444444443, 57.624999999999986`}}],
               "DelayedMouseEffectStyle"],
              StatusArea[#, 
               Rational[1, 16]]& ,
              TagBoxNote->"1/16"],
             StyleBox[
              FractionBox["1", "16"], {}, StripOnInput -> False]],
            Annotation[#, 
             Style[
              Rational[1, 16], {}], "Tooltip"]& ]}, 
          {RGBColor[0.4992, 0.5552, 0.8309304], EdgeForm[{Opacity[0.588], 
           Thickness[Small]}], 
           TagBox[
            TooltipBox[
             TagBox[
              TagBox[
               DynamicBox[{
                 FEPrivate`If[
                  CurrentValue["MouseOver"], 
                  EdgeForm[{
                    GrayLevel[0.5], 
                    AbsoluteThickness[1.5], 
                    Opacity[0.66]}], {}, {}], 
                 RectangleBox[{20., 0.}, {21., 0.08}, "RoundingRadius" -> 0]},
                
                
                ImageSizeCache->{{471.84680306905375`, 495.16010230179035`}, {
                 38.29388888888887, 57.624999999999986`}}],
               "DelayedMouseEffectStyle"],
              StatusArea[#, 0.08]& ,
              TagBoxNote->"0.08"],
             StyleBox["0.08`", {}, StripOnInput -> False]],
            Annotation[#, 
             Style[0.08, {}], "Tooltip"]& ]}}}, {}, {}}, {{}, {{}, {
          {RGBColor[0.982864, 0.7431472, 0.3262672], EdgeForm[{Opacity[0.588],
            Thickness[Small]}], 
           TagBox[
            TooltipBox[
             TagBox[
              TagBox[
               DynamicBox[{
                 FEPrivate`If[
                  CurrentValue["MouseOver"], 
                  EdgeForm[{
                    GrayLevel[0.5], 
                    AbsoluteThickness[1.5], 
                    Opacity[0.66]}], {}, {}], 
                 
                 RectangleBox[{22., 0.}, {23., 0.0625}, "RoundingRadius" -> 
                  0]},
                
                ImageSizeCache->{{517.4734015345269, 540.7867007672635}, {
                 42.41319444444443, 57.624999999999986`}}],
               "DelayedMouseEffectStyle"],
              StatusArea[#, 
               Rational[1, 16]]& ,
              TagBoxNote->"1/16"],
             StyleBox[
              FractionBox["1", "16"], {}, StripOnInput -> False]],
            Annotation[#, 
             Style[
              Rational[1, 16], {}], "Tooltip"]& ]}, 
          {RGBColor[0.4992, 0.5552, 0.8309304], EdgeForm[{Opacity[0.588], 
           Thickness[Small]}], 
           TagBox[
            TooltipBox[
             TagBox[
              TagBox[
               DynamicBox[{
                 FEPrivate`If[
                  CurrentValue["MouseOver"], 
                  EdgeForm[{
                    GrayLevel[0.5], 
                    AbsoluteThickness[1.5], 
                    Opacity[0.66]}], {}, {}], 
                 RectangleBox[{23., 0.}, {24., 0.09}, "RoundingRadius" -> 0]},
                
                
                ImageSizeCache->{{540.2867007672635, 563.6000000000001}, {
                 35.93999999999998, 57.624999999999986`}}],
               "DelayedMouseEffectStyle"],
              StatusArea[#, 0.09]& ,
              TagBoxNote->"0.09"],
             StyleBox["0.09`", {}, StripOnInput -> False]],
            Annotation[#, 
             Style[0.09, {}], 
             "Tooltip"]& ]}}}, {}, {}}}, {}, {}}, {}, {}, {}, {}, {}}, 
    InsetBox[
     TemplateBox[{"\"Wolfram Quantum Framework\"", "\"Amazon Braket SV1\""},
      "SwatchLegend",
      DisplayFunction->(FormBox[
        StyleBox[
         StyleBox[
          PaneBox[
           TagBox[
            GridBox[{{
               TagBox[
                GridBox[{{
                   GraphicsBox[{
                    Directive[
                    PointSize[0.5], 
                    AbsoluteThickness[1.6], 
                    EdgeForm[
                    Directive[
                    GrayLevel[0], 
                    Thickness[Small], 
                    Opacity[0.588]]], 
                    RGBColor[0.982864, 0.7431472, 0.3262672]], 
                    RectangleBox[{0, 0}, {10, 10}, "RoundingRadius" -> 0]}, 
                    AspectRatio -> Full, ImageSize -> {10, 10}, 
                    PlotRangePadding -> None, ImagePadding -> Automatic, 
                    BaselinePosition -> (Scaled[0.1] -> Baseline)], #}, {
                   GraphicsBox[{
                    Directive[
                    PointSize[0.5], 
                    AbsoluteThickness[1.6], 
                    EdgeForm[
                    Directive[
                    GrayLevel[0], 
                    Thickness[Small], 
                    Opacity[0.588]]], 
                    RGBColor[0.4992, 0.5552, 0.8309304]], 
                    RectangleBox[{0, 0}, {10, 10}, "RoundingRadius" -> 0]}, 
                    AspectRatio -> Full, ImageSize -> {10, 10}, 
                    PlotRangePadding -> None, ImagePadding -> Automatic, 
                    BaselinePosition -> (Scaled[0.1] -> Baseline)], #2}}, 
                 GridBoxAlignment -> {
                  "Columns" -> {Center, Left}, "Rows" -> {{Baseline}}}, 
                 AutoDelete -> False, 
                 GridBoxDividers -> {
                  "Columns" -> {{False}}, "Rows" -> {{False}}}, 
                 GridBoxItemSize -> {"Columns" -> {{All}}, "Rows" -> {{All}}},
                  GridBoxSpacings -> {
                  "Columns" -> {{0.3}}, "Rows" -> {{0.5}}}], "Grid"]}}, 
             GridBoxAlignment -> {"Columns" -> {{Left}}, "Rows" -> {{Top}}}, 
             AutoDelete -> False, 
             GridBoxItemSize -> {
              "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
             GridBoxSpacings -> {"Columns" -> {{1}}, "Rows" -> {{0}}}], 
            "Grid"], Alignment -> Left, AppearanceElements -> None, 
           ImageMargins -> {{5, 5}, {5, 5}}, ImageSizeAction -> 
           "ResizeToFit"], LineIndent -> 0, StripOnInput -> False], {
         FontFamily -> "Arial"}, Background -> Automatic, StripOnInput -> 
         False], TraditionalForm]& ),
      Editable->True,
      InterpretationFunction:>(RowBox[{"SwatchLegend", "[", 
         RowBox[{
           RowBox[{"{", 
             RowBox[{
               RowBox[{"{", 
                 RowBox[{
                   RowBox[{"Directive", "[", 
                    RowBox[{
                    RowBox[{"EdgeForm", "[", 
                    RowBox[{"Directive", "[", 
                    RowBox[{
                    RowBox[{"Thickness", "[", "Small", "]"}], ",", 
                    RowBox[{"Opacity", "[", "0.588`", "]"}]}], "]"}], "]"}], 
                    ",", 
                    
                    TemplateBox[<|"color" -> GrayLevel[1]|>, 
                    "GrayLevelColorSwatchTemplate"]}], "]"}], ",", 
                   RowBox[{"Directive", "[", 
                    RowBox[{
                    RowBox[{"EdgeForm", "[", 
                    RowBox[{"Directive", "[", 
                    RowBox[{
                    RowBox[{"Thickness", "[", "Small", "]"}], ",", 
                    RowBox[{"Opacity", "[", "0.588`", "]"}]}], "]"}], "]"}], 
                    ",", 
                    
                    TemplateBox[<|"color" -> GrayLevel[1]|>, 
                    "GrayLevelColorSwatchTemplate"]}], "]"}], ",", 
                   RowBox[{"Directive", "[", 
                    RowBox[{
                    RowBox[{"EdgeForm", "[", 
                    RowBox[{"Directive", "[", 
                    RowBox[{
                    RowBox[{"Thickness", "[", "Small", "]"}], ",", 
                    RowBox[{"Opacity", "[", "0.588`", "]"}]}], "]"}], "]"}], 
                    ",", 
                    
                    TemplateBox[<|"color" -> GrayLevel[1]|>, 
                    "GrayLevelColorSwatchTemplate"]}], "]"}], ",", 
                   RowBox[{"Directive", "[", 
                    RowBox[{
                    RowBox[{"EdgeForm", "[", 
                    RowBox[{"Directive", "[", 
                    RowBox[{
                    RowBox[{"Thickness", "[", "Small", "]"}], ",", 
                    RowBox[{"Opacity", "[", "0.588`", "]"}]}], "]"}], "]"}], 
                    ",", 
                    
                    TemplateBox[<|"color" -> GrayLevel[1]|>, 
                    "GrayLevelColorSwatchTemplate"]}], "]"}], ",", 
                   RowBox[{"Directive", "[", 
                    RowBox[{
                    RowBox[{"EdgeForm", "[", 
                    RowBox[{"Directive", "[", 
                    RowBox[{
                    RowBox[{"Thickness", "[", "Small", "]"}], ",", 
                    RowBox[{"Opacity", "[", "0.588`", "]"}]}], "]"}], "]"}], 
                    ",", 
                    
                    TemplateBox[<|"color" -> GrayLevel[1]|>, 
                    "GrayLevelColorSwatchTemplate"]}], "]"}], ",", 
                   RowBox[{"Directive", "[", 
                    RowBox[{
                    RowBox[{"EdgeForm", "[", 
                    RowBox[{"Directive", "[", 
                    RowBox[{
                    RowBox[{"Thickness", "[", "Small", "]"}], ",", 
                    RowBox[{"Opacity", "[", "0.588`", "]"}]}], "]"}], "]"}], 
                    ",", 
                    
                    TemplateBox[<|"color" -> GrayLevel[1]|>, 
                    "GrayLevelColorSwatchTemplate"]}], "]"}], ",", 
                   RowBox[{"Directive", "[", 
                    RowBox[{
                    RowBox[{"EdgeForm", "[", 
                    RowBox[{"Directive", "[", 
                    RowBox[{
                    RowBox[{"Thickness", "[", "Small", "]"}], ",", 
                    RowBox[{"Opacity", "[", "0.588`", "]"}]}], "]"}], "]"}], 
                    ",", 
                    
                    TemplateBox[<|"color" -> GrayLevel[1]|>, 
                    "GrayLevelColorSwatchTemplate"]}], "]"}], ",", 
                   RowBox[{"Directive", "[", 
                    RowBox[{
                    RowBox[{"EdgeForm", "[", 
                    RowBox[{"Directive", "[", 
                    RowBox[{
                    RowBox[{"Thickness", "[", "Small", "]"}], ",", 
                    RowBox[{"Opacity", "[", "0.588`", "]"}]}], "]"}], "]"}], 
                    ",", 
                    
                    TemplateBox[<|"color" -> GrayLevel[1]|>, 
                    "GrayLevelColorSwatchTemplate"]}], "]"}]}], "}"}], ",", 
               RowBox[{"{", 
                 RowBox[{
                   RowBox[{"Directive", "[", 
                    RowBox[{
                    RowBox[{"EdgeForm", "[", 
                    RowBox[{"Directive", "[", 
                    RowBox[{
                    RowBox[{"Thickness", "[", "Small", "]"}], ",", 
                    RowBox[{"Opacity", "[", "0.588`", "]"}]}], "]"}], "]"}], 
                    ",", 
                    
                    TemplateBox[<|
                    "color" -> RGBColor[0.982864, 0.7431472, 0.3262672]|>, 
                    "RGBColorSwatchTemplate"]}], "]"}], ",", 
                   RowBox[{"Directive", "[", 
                    RowBox[{
                    RowBox[{"EdgeForm", "[", 
                    RowBox[{"Directive", "[", 
                    RowBox[{
                    RowBox[{"Thickness", "[", "Small", "]"}], ",", 
                    RowBox[{"Opacity", "[", "0.588`", "]"}]}], "]"}], "]"}], 
                    ",", 
                    
                    TemplateBox[<|
                    "color" -> RGBColor[0.4992, 0.5552, 0.8309304]|>, 
                    "RGBColorSwatchTemplate"]}], "]"}]}], "}"}]}], "}"}], ",", 
           RowBox[{"{", 
             RowBox[{
               RowBox[{"{", "}"}], ",", 
               RowBox[{"{", 
                 RowBox[{#, ",", #2}], "}"}]}], "}"}], ",", 
           RowBox[{"LegendMarkers", "\[Rule]", 
             RowBox[{"{", 
               RowBox[{
                 RowBox[{"{", "None", "}"}], ",", 
                 RowBox[{"{", 
                   RowBox[{"Automatic", ",", "Automatic"}], "}"}]}], "}"}]}], 
           ",", 
           RowBox[{"LabelStyle", "\[Rule]", 
             RowBox[{"{", 
               RowBox[{
                 RowBox[{"{", "}"}], ",", 
                 RowBox[{"{", "}"}]}], "}"}]}], ",", 
           RowBox[{"LegendLayout", "\[Rule]", 
             RowBox[{"{", 
               RowBox[{"\"Column\"", ",", 
                 RowBox[{"{", 
                   RowBox[{"Automatic", ",", "5"}], "}"}]}], "}"}]}]}], 
         "]"}]& )], Scaled[{0.5, 0.5}], ImageScaled[{0.5, 0.5}],
     BaseStyle->{FontSize -> Larger},
     FormatType->StandardForm]},
   AspectRatio->NCache[
     Rational[1, 4], 0.25],
   Axes->{False, False},
   AxesLabel->{None, None},
   AxesOrigin->{0.54, 0.},
   CoordinatesToolOptions:>{"DisplayFunction" -> ({
       Identity[
        Part[#, 1]], 
       Identity[
        Part[#, 2]]}& ), "CopiedValueFunction" -> ({
       Identity[
        Part[#, 1]], 
       Identity[
        Part[#, 2]]}& )},
   DisplayFunction->Identity,
   Frame->True,
   FrameLabel->{{None, None}, {None, None}},
   FrameTicks->{{Automatic, Automatic}, {{{1.5, 
        FormBox[
         TemplateBox[{0}, "Spacer1"], TraditionalForm], {0.004, 0}}, {2.5, 
        FormBox[
         TemplateBox[{0}, "Spacer1"], TraditionalForm], {0.004, 0}}, {3.5, 
        FormBox[
         TemplateBox[{0}, "Spacer1"], TraditionalForm], {0.008, 0}}, {2., 
        FormBox[
         InterpretationBox[
          StyleBox[
           TemplateBox[{
             RowBox[{
               FormBox["0", TraditionalForm], "\[InvisibleSpace]", 
               FormBox["0", TraditionalForm], "\[InvisibleSpace]", 
               FormBox["0", TraditionalForm]}]}, "Ket"], FontWeight -> 
           "Plain"], 
          Wolfram`QuantumFramework`QuditName[{0, 0, 0}, "Dual" -> False]], 
         TraditionalForm], {0, 0}}, {4.5, 
        FormBox[
         TemplateBox[{0}, "Spacer1"], TraditionalForm], {0.004, 0}}, {5.5, 
        FormBox[
         TemplateBox[{0}, "Spacer1"], TraditionalForm], {0.004, 0}}, {6.5, 
        FormBox[
         TemplateBox[{0}, "Spacer1"], TraditionalForm], {0.008, 0}}, {5., 
        FormBox[
         InterpretationBox[
          StyleBox[
           TemplateBox[{
             RowBox[{
               FormBox["0", TraditionalForm], "\[InvisibleSpace]", 
               FormBox["0", TraditionalForm], "\[InvisibleSpace]", 
               FormBox["1", TraditionalForm]}]}, "Ket"], FontWeight -> 
           "Plain"], 
          Wolfram`QuantumFramework`QuditName[{0, 0, 1}, "Dual" -> False]], 
         TraditionalForm], {0, 0}}, {7.5, 
        FormBox[
         TemplateBox[{0}, "Spacer1"], TraditionalForm], {0.004, 0}}, {8.5, 
        FormBox[
         TemplateBox[{0}, "Spacer1"], TraditionalForm], {0.004, 0}}, {9.5, 
        FormBox[
         TemplateBox[{0}, "Spacer1"], TraditionalForm], {0.008, 0}}, {8., 
        FormBox[
         InterpretationBox[
          StyleBox[
           TemplateBox[{
             RowBox[{
               FormBox["0", TraditionalForm], "\[InvisibleSpace]", 
               FormBox["1", TraditionalForm], "\[InvisibleSpace]", 
               FormBox["0", TraditionalForm]}]}, "Ket"], FontWeight -> 
           "Plain"], 
          Wolfram`QuantumFramework`QuditName[{0, 1, 0}, "Dual" -> False]], 
         TraditionalForm], {0, 0}}, {10.5, 
        FormBox[
         TemplateBox[{0}, "Spacer1"], TraditionalForm], {0.004, 0}}, {11.5, 
        FormBox[
         TemplateBox[{0}, "Spacer1"], TraditionalForm], {0.004, 0}}, {12.5, 
        FormBox[
         TemplateBox[{0}, "Spacer1"], TraditionalForm], {0.008, 0}}, {11., 
        FormBox[
         InterpretationBox[
          StyleBox[
           TemplateBox[{
             RowBox[{
               FormBox["0", TraditionalForm], "\[InvisibleSpace]", 
               FormBox["1", TraditionalForm], "\[InvisibleSpace]", 
               FormBox["1", TraditionalForm]}]}, "Ket"], FontWeight -> 
           "Plain"], 
          Wolfram`QuantumFramework`QuditName[{0, 1, 1}, "Dual" -> False]], 
         TraditionalForm], {0, 0}}, {13.5, 
        FormBox[
         TemplateBox[{0}, "Spacer1"], TraditionalForm], {0.004, 0}}, {14.5, 
        FormBox[
         TemplateBox[{0}, "Spacer1"], TraditionalForm], {0.004, 0}}, {15.5, 
        FormBox[
         TemplateBox[{0}, "Spacer1"], TraditionalForm], {0.008, 0}}, {14., 
        FormBox[
         InterpretationBox[
          StyleBox[
           TemplateBox[{
             RowBox[{
               FormBox["1", TraditionalForm], "\[InvisibleSpace]", 
               FormBox["0", TraditionalForm], "\[InvisibleSpace]", 
               FormBox["0", TraditionalForm]}]}, "Ket"], FontWeight -> 
           "Plain"], 
          Wolfram`QuantumFramework`QuditName[{1, 0, 0}, "Dual" -> False]], 
         TraditionalForm], {0, 0}}, {16.5, 
        FormBox[
         TemplateBox[{0}, "Spacer1"], TraditionalForm], {0.004, 0}}, {17.5, 
        FormBox[
         TemplateBox[{0}, "Spacer1"], TraditionalForm], {0.004, 0}}, {18.5, 
        FormBox[
         TemplateBox[{0}, "Spacer1"], TraditionalForm], {0.008, 0}}, {17., 
        FormBox[
         InterpretationBox[
          StyleBox[
           TemplateBox[{
             RowBox[{
               FormBox["1", TraditionalForm], "\[InvisibleSpace]", 
               FormBox["0", TraditionalForm], "\[InvisibleSpace]", 
               FormBox["1", TraditionalForm]}]}, "Ket"], FontWeight -> 
           "Plain"], 
          Wolfram`QuantumFramework`QuditName[{1, 0, 1}, "Dual" -> False]], 
         TraditionalForm], {0, 0}}, {19.5, 
        FormBox[
         TemplateBox[{0}, "Spacer1"], TraditionalForm], {0.004, 0}}, {20.5, 
        FormBox[
         TemplateBox[{0}, "Spacer1"], TraditionalForm], {0.004, 0}}, {21.5, 
        FormBox[
         TemplateBox[{0}, "Spacer1"], TraditionalForm], {0.008, 0}}, {20., 
        FormBox[
         InterpretationBox[
          StyleBox[
           TemplateBox[{
             RowBox[{
               FormBox["1", TraditionalForm], "\[InvisibleSpace]", 
               FormBox["1", TraditionalForm], "\[InvisibleSpace]", 
               FormBox["0", TraditionalForm]}]}, "Ket"], FontWeight -> 
           "Plain"], 
          Wolfram`QuantumFramework`QuditName[{1, 1, 0}, "Dual" -> False]], 
         TraditionalForm], {0, 0}}, {22.5, 
        FormBox[
         TemplateBox[{0}, "Spacer1"], TraditionalForm], {0.004, 0}}, {23.5, 
        FormBox[
         TemplateBox[{0}, "Spacer1"], TraditionalForm], {0.004, 0}}, {23., 
        FormBox[
         InterpretationBox[
          StyleBox[
           TemplateBox[{
             RowBox[{
               FormBox["1", TraditionalForm], "\[InvisibleSpace]", 
               FormBox["1", TraditionalForm], "\[InvisibleSpace]", 
               FormBox["1", TraditionalForm]}]}, "Ket"], FontWeight -> 
           "Plain"], 
          Wolfram`QuantumFramework`QuditName[{1, 1, 1}, "Dual" -> False]], 
         TraditionalForm], {0, 0}}}, {{1.5, 
        FormBox[
         TemplateBox[{0}, "Spacer1"], TraditionalForm], {0.004, 0}}, {2.5, 
        FormBox[
         TemplateBox[{0}, "Spacer1"], TraditionalForm], {0.004, 0}}, {3.5, 
        FormBox[
         TemplateBox[{0}, "Spacer1"], TraditionalForm], {0.008, 0}}, {4.5, 
        FormBox[
         TemplateBox[{0}, "Spacer1"], TraditionalForm], {0.004, 0}}, {5.5, 
        FormBox[
         TemplateBox[{0}, "Spacer1"], TraditionalForm], {0.004, 0}}, {6.5, 
        FormBox[
         TemplateBox[{0}, "Spacer1"], TraditionalForm], {0.008, 0}}, {7.5, 
        FormBox[
         TemplateBox[{0}, "Spacer1"], TraditionalForm], {0.004, 0}}, {8.5, 
        FormBox[
         TemplateBox[{0}, "Spacer1"], TraditionalForm], {0.004, 0}}, {9.5, 
        FormBox[
         TemplateBox[{0}, "Spacer1"], TraditionalForm], {0.008, 0}}, {10.5, 
        FormBox[
         TemplateBox[{0}, "Spacer1"], TraditionalForm], {0.004, 0}}, {11.5, 
        FormBox[
         TemplateBox[{0}, "Spacer1"], TraditionalForm], {0.004, 0}}, {12.5, 
        FormBox[
         TemplateBox[{0}, "Spacer1"], TraditionalForm], {0.008, 0}}, {13.5, 
        FormBox[
         TemplateBox[{0}, "Spacer1"], TraditionalForm], {0.004, 0}}, {14.5, 
        FormBox[
         TemplateBox[{0}, "Spacer1"], TraditionalForm], {0.004, 0}}, {15.5, 
        FormBox[
         TemplateBox[{0}, "Spacer1"], TraditionalForm], {0.008, 0}}, {16.5, 
        FormBox[
         TemplateBox[{0}, "Spacer1"], TraditionalForm], {0.004, 0}}, {17.5, 
        FormBox[
         TemplateBox[{0}, "Spacer1"], TraditionalForm], {0.004, 0}}, {18.5, 
        FormBox[
         TemplateBox[{0}, "Spacer1"], TraditionalForm], {0.008, 0}}, {19.5, 
        FormBox[
         TemplateBox[{0}, "Spacer1"], TraditionalForm], {0.004, 0}}, {20.5, 
        FormBox[
         TemplateBox[{0}, "Spacer1"], TraditionalForm], {0.004, 0}}, {21.5, 
        FormBox[
         TemplateBox[{0}, "Spacer1"], TraditionalForm], {0.008, 0}}, {22.5, 
        FormBox[
         TemplateBox[{0}, "Spacer1"], TraditionalForm], {0.004, 0}}, {23.5, 
        FormBox[
         TemplateBox[{0}, "Spacer1"], TraditionalForm], {0.004, 0}}}}},
   GridLines->{None, Automatic},
   GridLinesStyle->Directive[
     GrayLevel[0.5, 0.4]],
   ImageSize->Large,
   PlotRange->{{All, All}, {All, All}},
   PlotRangePadding->{{
      Scaled[0.02], 
      Scaled[0.02]}, {None, 
      Scaled[0.05]}},
   Ticks->{None, Automatic}],
  InterpretTemplate[Legended[
    Graphics[{{
       Opacity[0], 
       Point[{{0.54, 0.}, {24., 0.}}]}, {{}, {{{}, {{}, {{
            Directive[
             EdgeForm[
              Directive[
               Thickness[Small], 
               Opacity[0.588]]], 
             RGBColor[0.982864, 0.7431472, 0.3262672]], 
            Tooltip[
             StatusArea[
              Charting`DelayedMouseEffect[
               Rectangle[{1., 0.}, {2., 0.0625}, "RoundingRadius" -> 0], {
               "Style", 
                EdgeForm[{
                  GrayLevel[0.5], 
                  AbsoluteThickness[1.5], 
                  Opacity[0.66]}]}], 
              Rational[1, 16]], 
             Style[
              Rational[1, 16], {}]]}, {
            Directive[
             EdgeForm[
              Directive[
               Thickness[Small], 
               Opacity[0.588]]], 
             RGBColor[0.4992, 0.5552, 0.8309304]], 
            Tooltip[
             StatusArea[
              Charting`DelayedMouseEffect[
               Rectangle[{2., 0.}, {3., 0.05}, "RoundingRadius" -> 0], {
               "Style", 
                EdgeForm[{
                  GrayLevel[0.5], 
                  AbsoluteThickness[1.5], 
                  Opacity[0.66]}]}], 0.05], 
             Style[0.05, {}]]}}}, {}, {}}, {{}, {{}, {{
            Directive[
             EdgeForm[
              Directive[
               Thickness[Small], 
               Opacity[0.588]]], 
             RGBColor[0.982864, 0.7431472, 0.3262672]], 
            Tooltip[
             StatusArea[
              Charting`DelayedMouseEffect[
               Rectangle[{4., 0.}, {5., 0.5625}, "RoundingRadius" -> 0], {
               "Style", 
                EdgeForm[{
                  GrayLevel[0.5], 
                  AbsoluteThickness[1.5], 
                  Opacity[0.66]}]}], 
              Rational[9, 16]], 
             Style[
              Rational[9, 16], {}]]}, {
            Directive[
             EdgeForm[
              Directive[
               Thickness[Small], 
               Opacity[0.588]]], 
             RGBColor[0.4992, 0.5552, 0.8309304]], 
            Tooltip[
             StatusArea[
              Charting`DelayedMouseEffect[
               Rectangle[{5., 0.}, {6., 0.56}, "RoundingRadius" -> 0], {
               "Style", 
                EdgeForm[{
                  GrayLevel[0.5], 
                  AbsoluteThickness[1.5], 
                  Opacity[0.66]}]}], 0.56], 
             Style[0.56, {}]]}}}, {}, {}}, {{}, {{}, {{
            Directive[
             EdgeForm[
              Directive[
               Thickness[Small], 
               Opacity[0.588]]], 
             RGBColor[0.982864, 0.7431472, 0.3262672]], 
            Tooltip[
             StatusArea[
              Charting`DelayedMouseEffect[
               Rectangle[{7., 0.}, {8., 0.0625}, "RoundingRadius" -> 0], {
               "Style", 
                EdgeForm[{
                  GrayLevel[0.5], 
                  AbsoluteThickness[1.5], 
                  Opacity[0.66]}]}], 
              Rational[1, 16]], 
             Style[
              Rational[1, 16], {}]]}, {
            Directive[
             EdgeForm[
              Directive[
               Thickness[Small], 
               Opacity[0.588]]], 
             RGBColor[0.4992, 0.5552, 0.8309304]], 
            Tooltip[
             StatusArea[
              Charting`DelayedMouseEffect[
               Rectangle[{8., 0.}, {9., 0.06}, "RoundingRadius" -> 0], {
               "Style", 
                EdgeForm[{
                  GrayLevel[0.5], 
                  AbsoluteThickness[1.5], 
                  Opacity[0.66]}]}], 0.06], 
             Style[0.06, {}]]}}}, {}, {}}, {{}, {{}, {{
            Directive[
             EdgeForm[
              Directive[
               Thickness[Small], 
               Opacity[0.588]]], 
             RGBColor[0.982864, 0.7431472, 0.3262672]], 
            Tooltip[
             StatusArea[
              Charting`DelayedMouseEffect[
               Rectangle[{10., 0.}, {11., 0.0625}, "RoundingRadius" -> 0], {
               "Style", 
                EdgeForm[{
                  GrayLevel[0.5], 
                  AbsoluteThickness[1.5], 
                  Opacity[0.66]}]}], 
              Rational[1, 16]], 
             Style[
              Rational[1, 16], {}]]}, {
            Directive[
             EdgeForm[
              Directive[
               Thickness[Small], 
               Opacity[0.588]]], 
             RGBColor[0.4992, 0.5552, 0.8309304]], 
            Tooltip[
             StatusArea[
              Charting`DelayedMouseEffect[
               Rectangle[{11., 0.}, {12., 0.05}, "RoundingRadius" -> 0], {
               "Style", 
                EdgeForm[{
                  GrayLevel[0.5], 
                  AbsoluteThickness[1.5], 
                  Opacity[0.66]}]}], 0.05], 
             Style[0.05, {}]]}}}, {}, {}}, {{}, {{}, {{
            Directive[
             EdgeForm[
              Directive[
               Thickness[Small], 
               Opacity[0.588]]], 
             RGBColor[0.982864, 0.7431472, 0.3262672]], 
            Tooltip[
             StatusArea[
              Charting`DelayedMouseEffect[
               Rectangle[{13., 0.}, {14., 0.0625}, "RoundingRadius" -> 0], {
               "Style", 
                EdgeForm[{
                  GrayLevel[0.5], 
                  AbsoluteThickness[1.5], 
                  Opacity[0.66]}]}], 
              Rational[1, 16]], 
             Style[
              Rational[1, 16], {}]]}, {
            Directive[
             EdgeForm[
              Directive[
               Thickness[Small], 
               Opacity[0.588]]], 
             RGBColor[0.4992, 0.5552, 0.8309304]], 
            Tooltip[
             StatusArea[
              Charting`DelayedMouseEffect[
               Rectangle[{14., 0.}, {15., 0.07}, "RoundingRadius" -> 0], {
               "Style", 
                EdgeForm[{
                  GrayLevel[0.5], 
                  AbsoluteThickness[1.5], 
                  Opacity[0.66]}]}], 0.07], 
             Style[0.07, {}]]}}}, {}, {}}, {{}, {{}, {{
            Directive[
             EdgeForm[
              Directive[
               Thickness[Small], 
               Opacity[0.588]]], 
             RGBColor[0.982864, 0.7431472, 0.3262672]], 
            Tooltip[
             StatusArea[
              Charting`DelayedMouseEffect[
               Rectangle[{16., 0.}, {17., 0.0625}, "RoundingRadius" -> 0], {
               "Style", 
                EdgeForm[{
                  GrayLevel[0.5], 
                  AbsoluteThickness[1.5], 
                  Opacity[0.66]}]}], 
              Rational[1, 16]], 
             Style[
              Rational[1, 16], {}]]}, {
            Directive[
             EdgeForm[
              Directive[
               Thickness[Small], 
               Opacity[0.588]]], 
             RGBColor[0.4992, 0.5552, 0.8309304]], 
            Tooltip[
             StatusArea[
              Charting`DelayedMouseEffect[
               Rectangle[{17., 0.}, {18., 0.04}, "RoundingRadius" -> 0], {
               "Style", 
                EdgeForm[{
                  GrayLevel[0.5], 
                  AbsoluteThickness[1.5], 
                  Opacity[0.66]}]}], 0.04], 
             Style[0.04, {}]]}}}, {}, {}}, {{}, {{}, {{
            Directive[
             EdgeForm[
              Directive[
               Thickness[Small], 
               Opacity[0.588]]], 
             RGBColor[0.982864, 0.7431472, 0.3262672]], 
            Tooltip[
             StatusArea[
              Charting`DelayedMouseEffect[
               Rectangle[{19., 0.}, {20., 0.0625}, "RoundingRadius" -> 0], {
               "Style", 
                EdgeForm[{
                  GrayLevel[0.5], 
                  AbsoluteThickness[1.5], 
                  Opacity[0.66]}]}], 
              Rational[1, 16]], 
             Style[
              Rational[1, 16], {}]]}, {
            Directive[
             EdgeForm[
              Directive[
               Thickness[Small], 
               Opacity[0.588]]], 
             RGBColor[0.4992, 0.5552, 0.8309304]], 
            Tooltip[
             StatusArea[
              Charting`DelayedMouseEffect[
               Rectangle[{20., 0.}, {21., 0.08}, "RoundingRadius" -> 0], {
               "Style", 
                EdgeForm[{
                  GrayLevel[0.5], 
                  AbsoluteThickness[1.5], 
                  Opacity[0.66]}]}], 0.08], 
             Style[0.08, {}]]}}}, {}, {}}, {{}, {{}, {{
            Directive[
             EdgeForm[
              Directive[
               Thickness[Small], 
               Opacity[0.588]]], 
             RGBColor[0.982864, 0.7431472, 0.3262672]], 
            Tooltip[
             StatusArea[
              Charting`DelayedMouseEffect[
               Rectangle[{22., 0.}, {23., 0.0625}, "RoundingRadius" -> 0], {
               "Style", 
                EdgeForm[{
                  GrayLevel[0.5], 
                  AbsoluteThickness[1.5], 
                  Opacity[0.66]}]}], 
              Rational[1, 16]], 
             Style[
              Rational[1, 16], {}]]}, {
            Directive[
             EdgeForm[
              Directive[
               Thickness[Small], 
               Opacity[0.588]]], 
             RGBColor[0.4992, 0.5552, 0.8309304]], 
            Tooltip[
             StatusArea[
              Charting`DelayedMouseEffect[
               Rectangle[{23., 0.}, {24., 0.09}, "RoundingRadius" -> 0], {
               "Style", 
                EdgeForm[{
                  GrayLevel[0.5], 
                  AbsoluteThickness[1.5], 
                  Opacity[0.66]}]}], 0.09], 
             Style[0.09, {}]]}}}, {}, {}}}, {}, {}}, {}, {}, {}, {}, {}}, {
     DisplayFunction -> Identity, AspectRatio -> Rational[1, 4], 
      Axes -> {False, False}, AxesLabel -> {None, None}, 
      AxesOrigin -> {0.54, 0.}, 
      CoordinatesToolOptions -> {"DisplayFunction" -> ({
          Identity[
           Part[#, 1]], 
          Identity[
           Part[#, 2]]}& ), "CopiedValueFunction" -> ({
          Identity[
           Part[#, 1]], 
          Identity[
           Part[#, 2]]}& )}, Frame -> True, 
      FrameLabel -> {{None, None}, {None, None}}, 
      FrameTicks -> {{Automatic, Automatic}, {{{1.5, 
           Spacer[0], {0.004`20., 0}}, {2.5, 
           Spacer[0], {0.004`20., 0}}, {3.5, 
           Spacer[0], {0.008`20., 0}}, {2., 
           Wolfram`QuantumFramework`QuditName[{0, 0, 0}, "Dual" -> False], {0,
            0}}, {4.5, 
           Spacer[0], {0.004`20., 0}}, {5.5, 
           Spacer[0], {0.004`20., 0}}, {6.5, 
           Spacer[0], {0.008`20., 0}}, {5., 
           Wolfram`QuantumFramework`QuditName[{0, 0, 1}, "Dual" -> False], {0,
            0}}, {7.5, 
           Spacer[0], {0.004`20., 0}}, {8.5, 
           Spacer[0], {0.004`20., 0}}, {9.5, 
           Spacer[0], {0.008`20., 0}}, {8., 
           Wolfram`QuantumFramework`QuditName[{0, 1, 0}, "Dual" -> False], {0,
            0}}, {10.5, 
           Spacer[0], {0.004`20., 0}}, {11.5, 
           Spacer[0], {0.004`20., 0}}, {12.5, 
           Spacer[0], {0.008`20., 0}}, {11., 
           Wolfram`QuantumFramework`QuditName[{0, 1, 1}, "Dual" -> False], {0,
            0}}, {13.5, 
           Spacer[0], {0.004`20., 0}}, {14.5, 
           Spacer[0], {0.004`20., 0}}, {15.5, 
           Spacer[0], {0.008`20., 0}}, {14., 
           Wolfram`QuantumFramework`QuditName[{1, 0, 0}, "Dual" -> False], {0,
            0}}, {16.5, 
           Spacer[0], {0.004`20., 0}}, {17.5, 
           Spacer[0], {0.004`20., 0}}, {18.5, 
           Spacer[0], {0.008`20., 0}}, {17., 
           Wolfram`QuantumFramework`QuditName[{1, 0, 1}, "Dual" -> False], {0,
            0}}, {19.5, 
           Spacer[0], {0.004`20., 0}}, {20.5, 
           Spacer[0], {0.004`20., 0}}, {21.5, 
           Spacer[0], {0.008`20., 0}}, {20., 
           Wolfram`QuantumFramework`QuditName[{1, 1, 0}, "Dual" -> False], {0,
            0}}, {22.5, 
           Spacer[0], {0.004`20., 0}}, {23.5, 
           Spacer[0], {0.004`20., 0}}, {23., 
           Wolfram`QuantumFramework`QuditName[{1, 1, 1}, "Dual" -> False], {0,
            0}}}, {{1.5, 
           Spacer[0], {0.004`20., 0}}, {2.5, 
           Spacer[0], {0.004`20., 0}}, {3.5, 
           Spacer[0], {0.008`20., 0}}, {4.5, 
           Spacer[0], {0.004`20., 0}}, {5.5, 
           Spacer[0], {0.004`20., 0}}, {6.5, 
           Spacer[0], {0.008`20., 0}}, {7.5, 
           Spacer[0], {0.004`20., 0}}, {8.5, 
           Spacer[0], {0.004`20., 0}}, {9.5, 
           Spacer[0], {0.008`20., 0}}, {10.5, 
           Spacer[0], {0.004`20., 0}}, {11.5, 
           Spacer[0], {0.004`20., 0}}, {12.5, 
           Spacer[0], {0.008`20., 0}}, {13.5, 
           Spacer[0], {0.004`20., 0}}, {14.5, 
           Spacer[0], {0.004`20., 0}}, {15.5, 
           Spacer[0], {0.008`20., 0}}, {16.5, 
           Spacer[0], {0.004`20., 0}}, {17.5, 
           Spacer[0], {0.004`20., 0}}, {18.5, 
           Spacer[0], {0.008`20., 0}}, {19.5, 
           Spacer[0], {0.004`20., 0}}, {20.5, 
           Spacer[0], {0.004`20., 0}}, {21.5, 
           Spacer[0], {0.008`20., 0}}, {22.5, 
           Spacer[0], {0.004`20., 0}}, {23.5, 
           Spacer[0], {0.004`20., 0}}}}}, GridLines -> {None, Automatic}, 
      GridLinesStyle -> Directive[
        GrayLevel[0.5, 0.4]], ImageSize -> Large, 
      PlotRange -> {{All, All}, {All, All}}, PlotRangePadding -> {{
         Scaled[0.02], 
         Scaled[0.02]}, {None, 
         Scaled[0.05]}}, Ticks -> {None, Automatic}}], {
     Placed[
      SwatchLegend[{{
         Directive[
          EdgeForm[
           Directive[
            Thickness[Small], 
            Opacity[0.588]]], 
          GrayLevel[1]], 
         Directive[
          EdgeForm[
           Directive[
            Thickness[Small], 
            Opacity[0.588]]], 
          GrayLevel[1]], 
         Directive[
          EdgeForm[
           Directive[
            Thickness[Small], 
            Opacity[0.588]]], 
          GrayLevel[1]], 
         Directive[
          EdgeForm[
           Directive[
            Thickness[Small], 
            Opacity[0.588]]], 
          GrayLevel[1]], 
         Directive[
          EdgeForm[
           Directive[
            Thickness[Small], 
            Opacity[0.588]]], 
          GrayLevel[1]], 
         Directive[
          EdgeForm[
           Directive[
            Thickness[Small], 
            Opacity[0.588]]], 
          GrayLevel[1]], 
         Directive[
          EdgeForm[
           Directive[
            Thickness[Small], 
            Opacity[0.588]]], 
          GrayLevel[1]], 
         Directive[
          EdgeForm[
           Directive[
            Thickness[Small], 
            Opacity[0.588]]], 
          GrayLevel[1]]}, {
         Directive[
          EdgeForm[
           Directive[
            Thickness[Small], 
            Opacity[0.588]]], 
          RGBColor[0.982864, 0.7431472, 0.3262672]], 
         Directive[
          EdgeForm[
           Directive[
            Thickness[Small], 
            Opacity[0.588]]], 
          RGBColor[0.4992, 0.5552, 0.8309304]]}}, {{}, {
        "Wolfram Quantum Framework", "Amazon Braket SV1"}}, 
       LegendMarkers -> {{None}, {Automatic, Automatic}}, 
       LabelStyle -> {{}, {}}, LegendLayout -> {"Column", {Automatic, 5}}], 
      Center, Identity]}]& ],
  AutoDelete->True,
  Editable->True,
  SelectWithContents->False,
  Selectable->True]], "Output",
 CellChangeTimes->{
  3.893980029393838*^9, {3.893980065242494*^9, 3.8939800840479593`*^9}, {
   3.893980151387845*^9, 3.8939801913985777`*^9}},
 CellLabel->"Out[62]=",
 CellID->313618157,ExpressionUUID->"51c01213-0f2f-44c8-9dd8-47bdcf16284e"]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["Supporting Data and Definitions", "Section",
 Editable->False,
 Deletable->False,
 TaggingRules->{"TemplateGroupName" -> "ContentElements"},
 DefaultNewCellStyle->"Input",
 CellTags->{
  "ContentElements", "Supporting Data and Definitions", "TemplateCellGroup"},
 CellID->529773346,ExpressionUUID->"7d2b64f5-4283-407d-b97d-35719e162c6c"],

Cell[TextData[{
 "(Your data can be ",
 Cell[BoxData[
  StyleBox[
   RowBox[{
    TagBox[
     ButtonBox[
      StyleBox["Dataset", "SymbolsRefLink",
       ShowStringCharacters->True,
       FontFamily->"Source Sans Pro"],
      BaseStyle->Dynamic[
        FEPrivate`If[
         CurrentValue["MouseOver"], {
         "Link", FontColor -> RGBColor[0.8549, 0.39608, 0.1451]}, {"Link"}]],
      ButtonData->"paclet:ref/Dataset",
      ContentPadding->False],
     MouseAppearanceTag["LinkHand"]], "[", 
    StyleBox["\[Ellipsis]", "TR"], "]"}],
   ShowStringCharacters->True,
   FontFamily->"Source Sans Pro"]],ExpressionUUID->
  "bc64254f-87ad-4853-8a10-84f2f53daa82"],
 ", ",
 Cell[BoxData[
  StyleBox[
   RowBox[{
    TagBox[
     ButtonBox[
      StyleBox["EntityStore", "SymbolsRefLink",
       ShowStringCharacters->True,
       FontFamily->"Source Sans Pro"],
      BaseStyle->Dynamic[
        FEPrivate`If[
         CurrentValue["MouseOver"], {
         "Link", FontColor -> RGBColor[0.8549, 0.39608, 0.1451]}, {"Link"}]],
      ButtonData->"paclet:ref/EntityStore",
      ContentPadding->False],
     MouseAppearanceTag["LinkHand"]], "[", 
    StyleBox["\[Ellipsis]", "TR"], "]"}],
   ShowStringCharacters->True,
   FontFamily->"Source Sans Pro"]],ExpressionUUID->
  "3a6615a7-8626-4f41-bc4a-c0dbb612d084"],
 ", ",
 Cell[BoxData[
  StyleBox[
   RowBox[{
    TagBox[
     ButtonBox[
      StyleBox["Image", "SymbolsRefLink",
       ShowStringCharacters->True,
       FontFamily->"Source Sans Pro"],
      BaseStyle->Dynamic[
        FEPrivate`If[
         CurrentValue["MouseOver"], {
         "Link", FontColor -> RGBColor[0.8549, 0.39608, 0.1451]}, {"Link"}]],
      ButtonData->"paclet:ref/Image",
      ContentPadding->False],
     MouseAppearanceTag["LinkHand"]], "[", 
    StyleBox["\[Ellipsis]", "TR"], "]"}],
   ShowStringCharacters->True,
   FontFamily->"Source Sans Pro"]],ExpressionUUID->
  "cefa9612-9160-4bc9-8ef7-9fcdef5e8ba3"],
 ", ",
 Cell[BoxData[
  StyleBox[
   RowBox[{
    TagBox[
     ButtonBox[
      StyleBox["Audio", "SymbolsRefLink",
       ShowStringCharacters->True,
       FontFamily->"Source Sans Pro"],
      BaseStyle->Dynamic[
        FEPrivate`If[
         CurrentValue["MouseOver"], {
         "Link", FontColor -> RGBColor[0.8549, 0.39608, 0.1451]}, {"Link"}]],
      ButtonData->"paclet:ref/Audio",
      ContentPadding->False],
     MouseAppearanceTag["LinkHand"]], "[", 
    StyleBox["\[Ellipsis]", "TR"], "]"}],
   ShowStringCharacters->True,
   FontFamily->"Source Sans Pro"]],ExpressionUUID->
  "3afed6cf-2837-43d6-89ad-08f99e9a1a62"],
 " or any other expression)"
}], "Text",
 Editable->False,
 Selectable->False,
 Deletable->False,
 CellID->867258710,ExpressionUUID->"27b2f66c-800f-4825-b81d-e13514c12dd1"],

Cell[BoxData[
 TagBox[
  RowBox[{
   RowBox[{"ResourceData", "[", 
    InterpretationBox[
     TagBox[
      FrameBox[
       StyleBox[GridBox[{
          {
           DynamicBox[If[
             TrueQ[
              StringQ[
               CurrentValue[
                EvaluationNotebook[], {TaggingRules, "ResourceType"}]]], 
             TagBox[
              TooltipBox[
               GraphicsBox[
                RasterBox[CompressedData["
1:eJztmEFOg1AQhom6cIk3qBsTd126xKW7psZ921iNm9q0JsbduwFH4AgcgSNw
gqZH4Aj4MP/U3wmUgkhp7EtGYZh58zkzzGu9nLwOn04cx1me2x/D8fvtYjH+
uHftzcNs+fI8mz7ezd6mz9PFzeTUKq+tXFk5c7q/VhdOYiXtgCSKK9P195UX
MHgZh9KlRfZtLubgPO6TSVj4+si1fR1Cf+Xd72v9RR2tv5tJB7n8TLrEZX17
tE+vCa68+xLftRXD8e11RFyR4s1s1y1wRXSeBogr1wGuDV0nzLorV9U6gsvg
PAuJw4cIZwgb0xLXj/4G55z2mata7vw+1OXCLMjqE8tMoLqGkE3dYB/Dp3SG
VOkv+2xELJvPSVSrBOJCEuJk25QY5w1wBWrfAVg5Xkj2oeIfwYf/rqCMa5c6
0p4RxfMRz4NuAEmhG8AmUb7xljhVuaRPYoo9oueG6mdIPyJm8S/sszp9T3lJ
SDzE5tqF0HnK9iuPJTEqzVXq5yCHQ/TyPga69+jdSXbNVxmXqqHMhh5ixGRn
VA1j2PSK9tnGVVZH6nnpc5d6mOen5trYwEfeg8Ler8glZ4nMKq5dhHi6vwZ4
FiifEHt5v+XK8TWI6VO87PcawjoftqZ0Y6d63ytbn3JnVt+zoA9JoZPZkdlW
Ph9rcPFslfzkzfs15a2tzzlpTr681feM43y1xRUjrku6ELyRyp0L28Kzpymu
gv1knm3mVc19Gv/+qOdXzT3+zffaJtaRq9o6kP5y5RzZM5OXw9XJ/0d3bX0C
dbpsag==
                 "], {{0, 0}, {38., 41.}}, {0, 255}, 
                 ImageResolution -> {72, 72}, ColorFunction -> RGBColor], {
                ImageSize -> {Automatic, 12}, 
                 PlotRange -> {{0, 38.}, {0, 41.}}}], 
               "\"the ResourceObject defined by this notebook\"", 
               TooltipStyle -> "TextStyling"], 
              Annotation[#, "the ResourceObject defined by this notebook", 
               "Tooltip"]& ], 
             TagBox[
              TooltipBox[
               GraphicsBox[
                TagBox[
                 RasterBox[CompressedData["
1:eJzdlk1ugzAQhaN20yVHoJtK3WXZJV1W8gKl6p5ETaNu0iipVHXnG3AEH4Ej
+Ag+AkfgCO6bYUjzC4SgKipWnMF4PmYeY/Dt5GP0djUYDFY36Ebjr8flcvz9
HODkZb56n82nr0/zz+lsunyYXGPwHr87/Mil30MFqlD+7FYIy6vhmfFEyovl
z82tYpQx/m9Wn3q1YSmtdBtWc44qRAUWKuzOUk4lKmArUxYtYzvAqDuZZama
kV2C/4iqEZbmNWKPsY7pJawcfSbReZx1Y6XwruIaolVxZSo9OUeNyFKOjeLJ
xUoxqtuyoIzmiMjXwDPm7JApLIuR8kqGWVEjy/HdYzwxW2lT1Vc5gisxR+x2
Wbt6YaZDC6Su3BbLlXX2O6eeJW9HA6XL3MjO0Iy8MzNcITvY8jmqPVdTwS1a
M4kRyajf1KqOJRnEVAWSIfmXWVKFxLsZ1rAcK0yR0TOI2Dvm6ifNC7nq9ll7
2humU1xJpRCPV+olHBfZppFFyjrx81xp0JmfR8G8Qu5l1KKN9qyZkcqwzCCm
FS3NtlZNLF6PvO7AWvCchdRt2mE9WlolnJUmf/SUMa2wLu8cUsYww/AT0dwX
HVg5fEOh+vXKDDGan5rjxryQ54S1c1p/Hw/r3ZEV7FfBIdZff2vbsi51b3LJ
+5we96u97aP7O34ARi0taQ==
                  "], {{0, 41.}, {38., 0}}, {0, 255}, ColorFunction -> 
                  GrayLevel, ImageResolution -> {72, 72}], 
                 BoxForm`ImageTag[
                 "Byte", ColorSpace -> "Grayscale", Interleaving -> True], 
                 Selectable -> False], DefaultBaseStyle -> "ImageGraphics", 
                ImageSizeRaw -> {38., 41.}, PlotRange -> {{0, 38.}, {0, 41.}},
                 ImageSize -> {Automatic, 12}], 
               "\"only defined in a definition notebook\"", TooltipStyle -> 
               "TextStyling"], 
              Annotation[#, "only defined in a definition notebook", 
               "Tooltip"]& ]],
            ImageSizeCache->{11., {3., 9.}},
            SingleEvaluation->True]}
         },
         GridBoxAlignment->{"Columns" -> {{Automatic}}, "Rows" -> {{Center}}},
         
         GridBoxSpacings->{"Columns" -> {{0.25}}}],
        ShowStringCharacters->False,
        FontSize->(11 Inherited)/13],
       Background->GrayLevel[0.5, 0.15],
       BaseStyle->{"Text", LineSpacing -> {0, 0}, LineBreakWithin -> False},
       FrameMargins->{{3, 3}, {3, 0}},
       FrameStyle->Directive[
         GrayLevel[0.5, 0.35], 
         AbsoluteThickness[0.5]],
       RoundingRadius->4],
      "ResourceObjectNotebook"],
     ResourceObject[
      EvaluationNotebook[]],
     SelectWithContents->True,
     Selectable->False], ",", "\"\<NameOfContent\>\"", "]"}], "=", 
   TagBox["xxxx",
    Annotation[#, "Placeholder"]& ,
    AutoDelete->True]}],
  #& ,
  TaggingRules -> {"DefaultContentBoxes" -> True},
  AutoDelete->True]], "Input",
 CellTags->"DefaultContent",
 CellID->466226405,ExpressionUUID->"3581859a-d55c-41ed-9bec-1b7dee2ca198"],

Cell[TextData[{
 "(xxxx can be your data, or ",
 Cell[BoxData[
  StyleBox[
   RowBox[{
    TagBox[
     ButtonBox[
      StyleBox["File", "SymbolsRefLink",
       ShowStringCharacters->True,
       FontFamily->"Source Sans Pro"],
      BaseStyle->Dynamic[
        FEPrivate`If[
         CurrentValue["MouseOver"], {
         "Link", FontColor -> RGBColor[0.8549, 0.39608, 0.1451]}, {"Link"}]],
      ButtonData->"paclet:ref/File",
      ContentPadding->False],
     MouseAppearanceTag["LinkHand"]], "[", 
    StyleBox["\[Ellipsis]", "TR"], "]"}],
   ShowStringCharacters->True,
   FontFamily->"Source Sans Pro"]],ExpressionUUID->
  "2c69826f-b599-4b33-9fad-db16a8c77e84"],
 ", ",
 Cell[BoxData[
  StyleBox[
   RowBox[{
    TagBox[
     ButtonBox[
      StyleBox["CloudObject", "SymbolsRefLink",
       ShowStringCharacters->True,
       FontFamily->"Source Sans Pro"],
      BaseStyle->Dynamic[
        FEPrivate`If[
         CurrentValue["MouseOver"], {
         "Link", FontColor -> RGBColor[0.8549, 0.39608, 0.1451]}, {"Link"}]],
      ButtonData->"paclet:ref/CloudObject",
      ContentPadding->False],
     MouseAppearanceTag["LinkHand"]], "[", 
    StyleBox["\[Ellipsis]", "TR"], "]"}],
   ShowStringCharacters->True,
   FontFamily->"Source Sans Pro"]],ExpressionUUID->
  "ff66c8b8-8e65-45c3-998e-a35b516d634e"],
 " or ",
 Cell[BoxData[
  StyleBox[
   RowBox[{
    TagBox[
     ButtonBox[
      StyleBox["LocalObject", "SymbolsRefLink",
       ShowStringCharacters->True,
       FontFamily->"Source Sans Pro"],
      BaseStyle->Dynamic[
        FEPrivate`If[
         CurrentValue["MouseOver"], {
         "Link", FontColor -> RGBColor[0.8549, 0.39608, 0.1451]}, {"Link"}]],
      ButtonData->"paclet:ref/LocalObject",
      ContentPadding->False],
     MouseAppearanceTag["LinkHand"]], "[", 
    StyleBox["\[Ellipsis]", "TR"], "]"}],
   ShowStringCharacters->True,
   FontFamily->"Source Sans Pro"]],ExpressionUUID->
  "e30d4649-0216-4d2e-928b-a46760bdd889"],
 " that contains it.)"
}], "Text",
 Editable->False,
 Selectable->False,
 Deletable->False,
 IgnoreSpellCheck->True,
 CellID->395327254,ExpressionUUID->"49e69de4-0f65-496e-bb93-2557338265c4"]
}, Closed]],

Cell[CellGroupData[{

Cell["Thumbnail Image", "Section",
 Editable->False,
 Deletable->False,
 TaggingRules->{"TemplateGroupName" -> "HeroImage"},
 CellTags->{"HeroImage", "TemplateCellGroup", "Thumbnail Image"},
 CellID->633683855,ExpressionUUID->"f9e12427-a272-4b69-be1a-accfb179fb83"],

Cell[BoxData[
 GraphicsBox[{{
    {Opacity[0], PointBox[{{0.54, 0.}, {24., 0.}}]}, {{}, {{{}, {{}, {
         {RGBColor[0.982864, 0.7431472, 0.3262672], EdgeForm[{Opacity[0.588], 
          Thickness[Small]}], 
          TagBox[
           TooltipBox[
            TagBox[
             TagBox[
              DynamicBox[{
                FEPrivate`If[
                 CurrentValue["MouseOver"], 
                 EdgeForm[{
                   GrayLevel[0.5], 
                   AbsoluteThickness[1.5], 
                   Opacity[0.66]}], {}, {}], 
                RectangleBox[{1., 0.}, {2., 0.0625}, "RoundingRadius" -> 0]},
               
               ImageSizeCache->{{38.39411764705883, 61.7074168797954}, {
                42.41319444444443, 57.624999999999986`}}],
              "DelayedMouseEffectStyle"],
             StatusArea[#, 
              Rational[1, 16]]& ,
             TagBoxNote->"1/16"],
            StyleBox[
             FractionBox["1", "16"], {}, StripOnInput -> False]],
           Annotation[#, 
            Style[
             Rational[1, 16], {}], "Tooltip"]& ]}, 
         {RGBColor[0.4992, 0.5552, 0.8309304], EdgeForm[{Opacity[0.588], 
          Thickness[Small]}], 
          TagBox[
           TooltipBox[
            TagBox[
             TagBox[
              DynamicBox[{
                FEPrivate`If[
                 CurrentValue["MouseOver"], 
                 EdgeForm[{
                   GrayLevel[0.5], 
                   AbsoluteThickness[1.5], 
                   Opacity[0.66]}], {}, {}], 
                RectangleBox[{2., 0.}, {3., 0.05}, "RoundingRadius" -> 0]},
               
               ImageSizeCache->{{61.2074168797954, 84.52071611253199}, {
                45.35555555555554, 57.624999999999986`}}],
              "DelayedMouseEffectStyle"],
             StatusArea[#, 0.05]& ,
             TagBoxNote->"0.05"],
            StyleBox["0.05`", {}, StripOnInput -> False]],
           Annotation[#, 
            Style[0.05, {}], "Tooltip"]& ]}}}, {}, {}}, {{}, {{}, {
         {RGBColor[0.982864, 0.7431472, 0.3262672], EdgeForm[{Opacity[0.588], 
          Thickness[Small]}], 
          TagBox[
           TooltipBox[
            TagBox[
             TagBox[
              DynamicBox[{
                FEPrivate`If[
                 CurrentValue["MouseOver"], 
                 EdgeForm[{
                   GrayLevel[0.5], 
                   AbsoluteThickness[1.5], 
                   Opacity[0.66]}], {}, {}], 
                RectangleBox[{4., 0.}, {5., 0.5625}, "RoundingRadius" -> 0]},
               
               ImageSizeCache->{{106.83401534526855`, 
                130.14731457800514`}, {-75.28125000000001, 
                57.624999999999986`}}],
              "DelayedMouseEffectStyle"],
             StatusArea[#, 
              Rational[9, 16]]& ,
             TagBoxNote->"9/16"],
            StyleBox[
             FractionBox["9", "16"], {}, StripOnInput -> False]],
           Annotation[#, 
            Style[
             Rational[9, 16], {}], "Tooltip"]& ]}, 
         {RGBColor[0.4992, 0.5552, 0.8309304], EdgeForm[{Opacity[0.588], 
          Thickness[Small]}], 
          TagBox[
           TooltipBox[
            TagBox[
             TagBox[
              DynamicBox[{
                FEPrivate`If[
                 CurrentValue["MouseOver"], 
                 EdgeForm[{
                   GrayLevel[0.5], 
                   AbsoluteThickness[1.5], 
                   Opacity[0.66]}], {}, {}], 
                RectangleBox[{5., 0.}, {6., 0.56}, "RoundingRadius" -> 0]},
               
               ImageSizeCache->{{129.64731457800514`, 
                152.96061381074173`}, {-74.6927777777778, 
                57.624999999999986`}}],
              "DelayedMouseEffectStyle"],
             StatusArea[#, 0.56]& ,
             TagBoxNote->"0.56"],
            StyleBox["0.56`", {}, StripOnInput -> False]],
           Annotation[#, 
            Style[0.56, {}], "Tooltip"]& ]}}}, {}, {}}, {{}, {{}, {
         {RGBColor[0.982864, 0.7431472, 0.3262672], EdgeForm[{Opacity[0.588], 
          Thickness[Small]}], 
          TagBox[
           TooltipBox[
            TagBox[
             TagBox[
              DynamicBox[{
                FEPrivate`If[
                 CurrentValue["MouseOver"], 
                 EdgeForm[{
                   GrayLevel[0.5], 
                   AbsoluteThickness[1.5], 
                   Opacity[0.66]}], {}, {}], 
                RectangleBox[{7., 0.}, {8., 0.0625}, "RoundingRadius" -> 0]},
               
               ImageSizeCache->{{175.2739130434783, 198.58721227621487`}, {
                42.41319444444443, 57.624999999999986`}}],
              "DelayedMouseEffectStyle"],
             StatusArea[#, 
              Rational[1, 16]]& ,
             TagBoxNote->"1/16"],
            StyleBox[
             FractionBox["1", "16"], {}, StripOnInput -> False]],
           Annotation[#, 
            Style[
             Rational[1, 16], {}], "Tooltip"]& ]}, 
         {RGBColor[0.4992, 0.5552, 0.8309304], EdgeForm[{Opacity[0.588], 
          Thickness[Small]}], 
          TagBox[
           TooltipBox[
            TagBox[
             TagBox[
              DynamicBox[{
                FEPrivate`If[
                 CurrentValue["MouseOver"], 
                 EdgeForm[{
                   GrayLevel[0.5], 
                   AbsoluteThickness[1.5], 
                   Opacity[0.66]}], {}, {}], 
                RectangleBox[{8., 0.}, {9., 0.06}, "RoundingRadius" -> 0]},
               
               ImageSizeCache->{{198.08721227621487`, 221.40051150895144`}, {
                43.00166666666665, 57.624999999999986`}}],
              "DelayedMouseEffectStyle"],
             StatusArea[#, 0.06]& ,
             TagBoxNote->"0.06"],
            StyleBox["0.06`", {}, StripOnInput -> False]],
           Annotation[#, 
            Style[0.06, {}], "Tooltip"]& ]}}}, {}, {}}, {{}, {{}, {
         {RGBColor[0.982864, 0.7431472, 0.3262672], EdgeForm[{Opacity[0.588], 
          Thickness[Small]}], 
          TagBox[
           TooltipBox[
            TagBox[
             TagBox[
              DynamicBox[{
                FEPrivate`If[
                 CurrentValue["MouseOver"], 
                 EdgeForm[{
                   GrayLevel[0.5], 
                   AbsoluteThickness[1.5], 
                   Opacity[0.66]}], {}, {}], 
                RectangleBox[{10., 0.}, {11., 0.0625}, "RoundingRadius" -> 0]},
               
               ImageSizeCache->{{243.713810741688, 267.0271099744246}, {
                42.41319444444443, 57.624999999999986`}}],
              "DelayedMouseEffectStyle"],
             StatusArea[#, 
              Rational[1, 16]]& ,
             TagBoxNote->"1/16"],
            StyleBox[
             FractionBox["1", "16"], {}, StripOnInput -> False]],
           Annotation[#, 
            Style[
             Rational[1, 16], {}], "Tooltip"]& ]}, 
         {RGBColor[0.4992, 0.5552, 0.8309304], EdgeForm[{Opacity[0.588], 
          Thickness[Small]}], 
          TagBox[
           TooltipBox[
            TagBox[
             TagBox[
              DynamicBox[{
                FEPrivate`If[
                 CurrentValue["MouseOver"], 
                 EdgeForm[{
                   GrayLevel[0.5], 
                   AbsoluteThickness[1.5], 
                   Opacity[0.66]}], {}, {}], 
                RectangleBox[{11., 0.}, {12., 0.05}, "RoundingRadius" -> 0]},
               
               ImageSizeCache->{{266.5271099744246, 289.8404092071612}, {
                45.35555555555554, 57.624999999999986`}}],
              "DelayedMouseEffectStyle"],
             StatusArea[#, 0.05]& ,
             TagBoxNote->"0.05"],
            StyleBox["0.05`", {}, StripOnInput -> False]],
           Annotation[#, 
            Style[0.05, {}], "Tooltip"]& ]}}}, {}, {}}, {{}, {{}, {
         {RGBColor[0.982864, 0.7431472, 0.3262672], EdgeForm[{Opacity[0.588], 
          Thickness[Small]}], 
          TagBox[
           TooltipBox[
            TagBox[
             TagBox[
              DynamicBox[{
                FEPrivate`If[
                 CurrentValue["MouseOver"], 
                 EdgeForm[{
                   GrayLevel[0.5], 
                   AbsoluteThickness[1.5], 
                   Opacity[0.66]}], {}, {}], 
                RectangleBox[{13., 0.}, {14., 0.0625}, "RoundingRadius" -> 0]},
               
               ImageSizeCache->{{312.15370843989774`, 335.46700767263434`}, {
                42.41319444444443, 57.624999999999986`}}],
              "DelayedMouseEffectStyle"],
             StatusArea[#, 
              Rational[1, 16]]& ,
             TagBoxNote->"1/16"],
            StyleBox[
             FractionBox["1", "16"], {}, StripOnInput -> False]],
           Annotation[#, 
            Style[
             Rational[1, 16], {}], "Tooltip"]& ]}, 
         {RGBColor[0.4992, 0.5552, 0.8309304], EdgeForm[{Opacity[0.588], 
          Thickness[Small]}], 
          TagBox[
           TooltipBox[
            TagBox[
             TagBox[
              DynamicBox[{
                FEPrivate`If[
                 CurrentValue["MouseOver"], 
                 EdgeForm[{
                   GrayLevel[0.5], 
                   AbsoluteThickness[1.5], 
                   Opacity[0.66]}], {}, {}], 
                RectangleBox[{14., 0.}, {15., 0.07}, "RoundingRadius" -> 0]},
               
               ImageSizeCache->{{334.96700767263434`, 358.2803069053709}, {
                40.64777777777776, 57.624999999999986`}}],
              "DelayedMouseEffectStyle"],
             StatusArea[#, 0.07]& ,
             TagBoxNote->"0.07"],
            StyleBox["0.07`", {}, StripOnInput -> False]],
           Annotation[#, 
            Style[0.07, {}], "Tooltip"]& ]}}}, {}, {}}, {{}, {{}, {
         {RGBColor[0.982864, 0.7431472, 0.3262672], EdgeForm[{Opacity[0.588], 
          Thickness[Small]}], 
          TagBox[
           TooltipBox[
            TagBox[
             TagBox[
              DynamicBox[{
                FEPrivate`If[
                 CurrentValue["MouseOver"], 
                 EdgeForm[{
                   GrayLevel[0.5], 
                   AbsoluteThickness[1.5], 
                   Opacity[0.66]}], {}, {}], 
                RectangleBox[{16., 0.}, {17., 0.0625}, "RoundingRadius" -> 0]},
               
               ImageSizeCache->{{380.5936061381075, 403.9069053708441}, {
                42.41319444444443, 57.624999999999986`}}],
              "DelayedMouseEffectStyle"],
             StatusArea[#, 
              Rational[1, 16]]& ,
             TagBoxNote->"1/16"],
            StyleBox[
             FractionBox["1", "16"], {}, StripOnInput -> False]],
           Annotation[#, 
            Style[
             Rational[1, 16], {}], "Tooltip"]& ]}, 
         {RGBColor[0.4992, 0.5552, 0.8309304], EdgeForm[{Opacity[0.588], 
          Thickness[Small]}], 
          TagBox[
           TooltipBox[
            TagBox[
             TagBox[
              DynamicBox[{
                FEPrivate`If[
                 CurrentValue["MouseOver"], 
                 EdgeForm[{
                   GrayLevel[0.5], 
                   AbsoluteThickness[1.5], 
                   Opacity[0.66]}], {}, {}], 
                RectangleBox[{17., 0.}, {18., 0.04}, "RoundingRadius" -> 0]},
               
               ImageSizeCache->{{403.4069053708441, 426.7202046035806}, {
                47.70944444444443, 57.624999999999986`}}],
              "DelayedMouseEffectStyle"],
             StatusArea[#, 0.04]& ,
             TagBoxNote->"0.04"],
            StyleBox["0.04`", {}, StripOnInput -> False]],
           Annotation[#, 
            Style[0.04, {}], "Tooltip"]& ]}}}, {}, {}}, {{}, {{}, {
         {RGBColor[0.982864, 0.7431472, 0.3262672], EdgeForm[{Opacity[0.588], 
          Thickness[Small]}], 
          TagBox[
           TooltipBox[
            TagBox[
             TagBox[
              DynamicBox[{
                FEPrivate`If[
                 CurrentValue["MouseOver"], 
                 EdgeForm[{
                   GrayLevel[0.5], 
                   AbsoluteThickness[1.5], 
                   Opacity[0.66]}], {}, {}], 
                RectangleBox[{19., 0.}, {20., 0.0625}, "RoundingRadius" -> 0]},
               
               ImageSizeCache->{{449.0335038363172, 472.34680306905375`}, {
                42.41319444444443, 57.624999999999986`}}],
              "DelayedMouseEffectStyle"],
             StatusArea[#, 
              Rational[1, 16]]& ,
             TagBoxNote->"1/16"],
            StyleBox[
             FractionBox["1", "16"], {}, StripOnInput -> False]],
           Annotation[#, 
            Style[
             Rational[1, 16], {}], "Tooltip"]& ]}, 
         {RGBColor[0.4992, 0.5552, 0.8309304], EdgeForm[{Opacity[0.588], 
          Thickness[Small]}], 
          TagBox[
           TooltipBox[
            TagBox[
             TagBox[
              DynamicBox[{
                FEPrivate`If[
                 CurrentValue["MouseOver"], 
                 EdgeForm[{
                   GrayLevel[0.5], 
                   AbsoluteThickness[1.5], 
                   Opacity[0.66]}], {}, {}], 
                RectangleBox[{20., 0.}, {21., 0.08}, "RoundingRadius" -> 0]},
               
               ImageSizeCache->{{471.84680306905375`, 495.16010230179035`}, {
                38.29388888888887, 57.624999999999986`}}],
              "DelayedMouseEffectStyle"],
             StatusArea[#, 0.08]& ,
             TagBoxNote->"0.08"],
            StyleBox["0.08`", {}, StripOnInput -> False]],
           Annotation[#, 
            Style[0.08, {}], "Tooltip"]& ]}}}, {}, {}}, {{}, {{}, {
         {RGBColor[0.982864, 0.7431472, 0.3262672], EdgeForm[{Opacity[0.588], 
          Thickness[Small]}], 
          TagBox[
           TooltipBox[
            TagBox[
             TagBox[
              DynamicBox[{
                FEPrivate`If[
                 CurrentValue["MouseOver"], 
                 EdgeForm[{
                   GrayLevel[0.5], 
                   AbsoluteThickness[1.5], 
                   Opacity[0.66]}], {}, {}], 
                RectangleBox[{22., 0.}, {23., 0.0625}, "RoundingRadius" -> 0]},
               
               ImageSizeCache->{{517.4734015345269, 540.7867007672635}, {
                42.41319444444443, 57.624999999999986`}}],
              "DelayedMouseEffectStyle"],
             StatusArea[#, 
              Rational[1, 16]]& ,
             TagBoxNote->"1/16"],
            StyleBox[
             FractionBox["1", "16"], {}, StripOnInput -> False]],
           Annotation[#, 
            Style[
             Rational[1, 16], {}], "Tooltip"]& ]}, 
         {RGBColor[0.4992, 0.5552, 0.8309304], EdgeForm[{Opacity[0.588], 
          Thickness[Small]}], 
          TagBox[
           TooltipBox[
            TagBox[
             TagBox[
              DynamicBox[{
                FEPrivate`If[
                 CurrentValue["MouseOver"], 
                 EdgeForm[{
                   GrayLevel[0.5], 
                   AbsoluteThickness[1.5], 
                   Opacity[0.66]}], {}, {}], 
                RectangleBox[{23., 0.}, {24., 0.09}, "RoundingRadius" -> 0]},
               
               ImageSizeCache->{{540.2867007672635, 563.6000000000001}, {
                35.93999999999998, 57.624999999999986`}}],
              "DelayedMouseEffectStyle"],
             StatusArea[#, 0.09]& ,
             TagBoxNote->"0.09"],
            StyleBox["0.09`", {}, StripOnInput -> False]],
           Annotation[#, 
            Style[0.09, {}], 
            "Tooltip"]& ]}}}, {}, {}}}, {}, {}}, {}, {}, {}, {}, {}}, InsetBox[
    TemplateBox[{"\"Wolfram Quantum Framework\"", "\"Amazon Braket SV1\""},
     "SwatchLegend",
     DisplayFunction->(FormBox[
       StyleBox[
        StyleBox[
         PaneBox[
          TagBox[
           GridBox[{{
              TagBox[
               GridBox[{{
                  GraphicsBox[{
                    Directive[
                    PointSize[0.5], 
                    AbsoluteThickness[1.6], 
                    EdgeForm[
                    Directive[
                    GrayLevel[0], 
                    Thickness[Small], 
                    Opacity[0.588]]], 
                    RGBColor[0.982864, 0.7431472, 0.3262672]], 
                    RectangleBox[{0, 0}, {10, 10}, "RoundingRadius" -> 0]}, 
                   AspectRatio -> Full, ImageSize -> {10, 10}, 
                   PlotRangePadding -> None, ImagePadding -> Automatic, 
                   BaselinePosition -> (Scaled[0.1] -> Baseline)], #}, {
                  GraphicsBox[{
                    Directive[
                    PointSize[0.5], 
                    AbsoluteThickness[1.6], 
                    EdgeForm[
                    Directive[
                    GrayLevel[0], 
                    Thickness[Small], 
                    Opacity[0.588]]], 
                    RGBColor[0.4992, 0.5552, 0.8309304]], 
                    RectangleBox[{0, 0}, {10, 10}, "RoundingRadius" -> 0]}, 
                   AspectRatio -> Full, ImageSize -> {10, 10}, 
                   PlotRangePadding -> None, ImagePadding -> Automatic, 
                   BaselinePosition -> (Scaled[0.1] -> Baseline)], #2}}, 
                GridBoxAlignment -> {
                 "Columns" -> {Center, Left}, "Rows" -> {{Baseline}}}, 
                AutoDelete -> False, 
                GridBoxDividers -> {
                 "Columns" -> {{False}}, "Rows" -> {{False}}}, 
                GridBoxItemSize -> {"Columns" -> {{All}}, "Rows" -> {{All}}}, 
                GridBoxSpacings -> {"Columns" -> {{0.3}}, "Rows" -> {{0.5}}}],
                "Grid"]}}, 
            GridBoxAlignment -> {"Columns" -> {{Left}}, "Rows" -> {{Top}}}, 
            AutoDelete -> False, 
            GridBoxItemSize -> {
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
            GridBoxSpacings -> {"Columns" -> {{1}}, "Rows" -> {{0}}}], 
           "Grid"], Alignment -> Left, AppearanceElements -> None, 
          ImageMargins -> {{5, 5}, {5, 5}}, ImageSizeAction -> "ResizeToFit"],
          LineIndent -> 0, StripOnInput -> False], {FontFamily -> "Arial"}, 
        Background -> Automatic, StripOnInput -> False], TraditionalForm]& ),
     Editable->True,
     InterpretationFunction:>(RowBox[{"SwatchLegend", "[", 
        RowBox[{
          RowBox[{"{", 
            RowBox[{
              RowBox[{"{", 
                RowBox[{
                  RowBox[{"Directive", "[", 
                    RowBox[{
                    RowBox[{"EdgeForm", "[", 
                    RowBox[{"Directive", "[", 
                    RowBox[{
                    RowBox[{"Thickness", "[", "Small", "]"}], ",", 
                    RowBox[{"Opacity", "[", "0.588`", "]"}]}], "]"}], "]"}], 
                    ",", 
                    
                    TemplateBox[<|"color" -> GrayLevel[1]|>, 
                    "GrayLevelColorSwatchTemplate"]}], "]"}], ",", 
                  RowBox[{"Directive", "[", 
                    RowBox[{
                    RowBox[{"EdgeForm", "[", 
                    RowBox[{"Directive", "[", 
                    RowBox[{
                    RowBox[{"Thickness", "[", "Small", "]"}], ",", 
                    RowBox[{"Opacity", "[", "0.588`", "]"}]}], "]"}], "]"}], 
                    ",", 
                    
                    TemplateBox[<|"color" -> GrayLevel[1]|>, 
                    "GrayLevelColorSwatchTemplate"]}], "]"}], ",", 
                  RowBox[{"Directive", "[", 
                    RowBox[{
                    RowBox[{"EdgeForm", "[", 
                    RowBox[{"Directive", "[", 
                    RowBox[{
                    RowBox[{"Thickness", "[", "Small", "]"}], ",", 
                    RowBox[{"Opacity", "[", "0.588`", "]"}]}], "]"}], "]"}], 
                    ",", 
                    
                    TemplateBox[<|"color" -> GrayLevel[1]|>, 
                    "GrayLevelColorSwatchTemplate"]}], "]"}], ",", 
                  RowBox[{"Directive", "[", 
                    RowBox[{
                    RowBox[{"EdgeForm", "[", 
                    RowBox[{"Directive", "[", 
                    RowBox[{
                    RowBox[{"Thickness", "[", "Small", "]"}], ",", 
                    RowBox[{"Opacity", "[", "0.588`", "]"}]}], "]"}], "]"}], 
                    ",", 
                    
                    TemplateBox[<|"color" -> GrayLevel[1]|>, 
                    "GrayLevelColorSwatchTemplate"]}], "]"}], ",", 
                  RowBox[{"Directive", "[", 
                    RowBox[{
                    RowBox[{"EdgeForm", "[", 
                    RowBox[{"Directive", "[", 
                    RowBox[{
                    RowBox[{"Thickness", "[", "Small", "]"}], ",", 
                    RowBox[{"Opacity", "[", "0.588`", "]"}]}], "]"}], "]"}], 
                    ",", 
                    
                    TemplateBox[<|"color" -> GrayLevel[1]|>, 
                    "GrayLevelColorSwatchTemplate"]}], "]"}], ",", 
                  RowBox[{"Directive", "[", 
                    RowBox[{
                    RowBox[{"EdgeForm", "[", 
                    RowBox[{"Directive", "[", 
                    RowBox[{
                    RowBox[{"Thickness", "[", "Small", "]"}], ",", 
                    RowBox[{"Opacity", "[", "0.588`", "]"}]}], "]"}], "]"}], 
                    ",", 
                    
                    TemplateBox[<|"color" -> GrayLevel[1]|>, 
                    "GrayLevelColorSwatchTemplate"]}], "]"}], ",", 
                  RowBox[{"Directive", "[", 
                    RowBox[{
                    RowBox[{"EdgeForm", "[", 
                    RowBox[{"Directive", "[", 
                    RowBox[{
                    RowBox[{"Thickness", "[", "Small", "]"}], ",", 
                    RowBox[{"Opacity", "[", "0.588`", "]"}]}], "]"}], "]"}], 
                    ",", 
                    
                    TemplateBox[<|"color" -> GrayLevel[1]|>, 
                    "GrayLevelColorSwatchTemplate"]}], "]"}], ",", 
                  RowBox[{"Directive", "[", 
                    RowBox[{
                    RowBox[{"EdgeForm", "[", 
                    RowBox[{"Directive", "[", 
                    RowBox[{
                    RowBox[{"Thickness", "[", "Small", "]"}], ",", 
                    RowBox[{"Opacity", "[", "0.588`", "]"}]}], "]"}], "]"}], 
                    ",", 
                    
                    TemplateBox[<|"color" -> GrayLevel[1]|>, 
                    "GrayLevelColorSwatchTemplate"]}], "]"}]}], "}"}], ",", 
              RowBox[{"{", 
                RowBox[{
                  RowBox[{"Directive", "[", 
                    RowBox[{
                    RowBox[{"EdgeForm", "[", 
                    RowBox[{"Directive", "[", 
                    RowBox[{
                    RowBox[{"Thickness", "[", "Small", "]"}], ",", 
                    RowBox[{"Opacity", "[", "0.588`", "]"}]}], "]"}], "]"}], 
                    ",", 
                    
                    TemplateBox[<|
                    "color" -> RGBColor[0.982864, 0.7431472, 0.3262672]|>, 
                    "RGBColorSwatchTemplate"]}], "]"}], ",", 
                  RowBox[{"Directive", "[", 
                    RowBox[{
                    RowBox[{"EdgeForm", "[", 
                    RowBox[{"Directive", "[", 
                    RowBox[{
                    RowBox[{"Thickness", "[", "Small", "]"}], ",", 
                    RowBox[{"Opacity", "[", "0.588`", "]"}]}], "]"}], "]"}], 
                    ",", 
                    
                    TemplateBox[<|
                    "color" -> RGBColor[0.4992, 0.5552, 0.8309304]|>, 
                    "RGBColorSwatchTemplate"]}], "]"}]}], "}"}]}], "}"}], ",", 
          RowBox[{"{", 
            RowBox[{
              RowBox[{"{", "}"}], ",", 
              RowBox[{"{", 
                RowBox[{#, ",", #2}], "}"}]}], "}"}], ",", 
          RowBox[{"LegendMarkers", "\[Rule]", 
            RowBox[{"{", 
              RowBox[{
                RowBox[{"{", "None", "}"}], ",", 
                RowBox[{"{", 
                  RowBox[{"Automatic", ",", "Automatic"}], "}"}]}], "}"}]}], 
          ",", 
          RowBox[{"LabelStyle", "\[Rule]", 
            RowBox[{"{", 
              RowBox[{
                RowBox[{"{", "}"}], ",", 
                RowBox[{"{", "}"}]}], "}"}]}], ",", 
          RowBox[{"LegendLayout", "\[Rule]", 
            RowBox[{"{", 
              RowBox[{"\"Column\"", ",", 
                RowBox[{"{", 
                  RowBox[{"Automatic", ",", "5"}], "}"}]}], "}"}]}]}], 
        "]"}]& )], Scaled[{0.5, 0.5}], ImageScaled[{0.5, 0.5}],
    BaseStyle->{FontSize -> Larger},
    FormatType->StandardForm]},
  AspectRatio->NCache[
    Rational[1, 4], 0.25],
  Axes->{False, False},
  AxesLabel->{None, None},
  AxesOrigin->{0.54, 0.},
  CoordinatesToolOptions:>{"DisplayFunction" -> ({
      Identity[
       Part[#, 1]], 
      Identity[
       Part[#, 2]]}& ), "CopiedValueFunction" -> ({
      Identity[
       Part[#, 1]], 
      Identity[
       Part[#, 2]]}& )},
  DisplayFunction->Identity,
  Frame->True,
  FrameLabel->{{None, None}, {None, None}},
  FrameTicks->{{Automatic, Automatic}, {{{1.5, 
       FormBox[
        TemplateBox[{0}, "Spacer1"], TraditionalForm], {0.004, 0}}, {2.5, 
       FormBox[
        TemplateBox[{0}, "Spacer1"], TraditionalForm], {0.004, 0}}, {3.5, 
       FormBox[
        TemplateBox[{0}, "Spacer1"], TraditionalForm], {0.008, 0}}, {2., 
       FormBox[
        InterpretationBox[
         StyleBox[
          TemplateBox[{
            RowBox[{
              FormBox["0", TraditionalForm], "\[InvisibleSpace]", 
              FormBox["0", TraditionalForm], "\[InvisibleSpace]", 
              FormBox["0", TraditionalForm]}]}, "Ket"], FontWeight -> 
          "Plain"], 
         Wolfram`QuantumFramework`QuditName[{0, 0, 0}, "Dual" -> False]], 
        TraditionalForm], {0, 0}}, {4.5, 
       FormBox[
        TemplateBox[{0}, "Spacer1"], TraditionalForm], {0.004, 0}}, {5.5, 
       FormBox[
        TemplateBox[{0}, "Spacer1"], TraditionalForm], {0.004, 0}}, {6.5, 
       FormBox[
        TemplateBox[{0}, "Spacer1"], TraditionalForm], {0.008, 0}}, {5., 
       FormBox[
        InterpretationBox[
         StyleBox[
          TemplateBox[{
            RowBox[{
              FormBox["0", TraditionalForm], "\[InvisibleSpace]", 
              FormBox["0", TraditionalForm], "\[InvisibleSpace]", 
              FormBox["1", TraditionalForm]}]}, "Ket"], FontWeight -> 
          "Plain"], 
         Wolfram`QuantumFramework`QuditName[{0, 0, 1}, "Dual" -> False]], 
        TraditionalForm], {0, 0}}, {7.5, 
       FormBox[
        TemplateBox[{0}, "Spacer1"], TraditionalForm], {0.004, 0}}, {8.5, 
       FormBox[
        TemplateBox[{0}, "Spacer1"], TraditionalForm], {0.004, 0}}, {9.5, 
       FormBox[
        TemplateBox[{0}, "Spacer1"], TraditionalForm], {0.008, 0}}, {8., 
       FormBox[
        InterpretationBox[
         StyleBox[
          TemplateBox[{
            RowBox[{
              FormBox["0", TraditionalForm], "\[InvisibleSpace]", 
              FormBox["1", TraditionalForm], "\[InvisibleSpace]", 
              FormBox["0", TraditionalForm]}]}, "Ket"], FontWeight -> 
          "Plain"], 
         Wolfram`QuantumFramework`QuditName[{0, 1, 0}, "Dual" -> False]], 
        TraditionalForm], {0, 0}}, {10.5, 
       FormBox[
        TemplateBox[{0}, "Spacer1"], TraditionalForm], {0.004, 0}}, {11.5, 
       FormBox[
        TemplateBox[{0}, "Spacer1"], TraditionalForm], {0.004, 0}}, {12.5, 
       FormBox[
        TemplateBox[{0}, "Spacer1"], TraditionalForm], {0.008, 0}}, {11., 
       FormBox[
        InterpretationBox[
         StyleBox[
          TemplateBox[{
            RowBox[{
              FormBox["0", TraditionalForm], "\[InvisibleSpace]", 
              FormBox["1", TraditionalForm], "\[InvisibleSpace]", 
              FormBox["1", TraditionalForm]}]}, "Ket"], FontWeight -> 
          "Plain"], 
         Wolfram`QuantumFramework`QuditName[{0, 1, 1}, "Dual" -> False]], 
        TraditionalForm], {0, 0}}, {13.5, 
       FormBox[
        TemplateBox[{0}, "Spacer1"], TraditionalForm], {0.004, 0}}, {14.5, 
       FormBox[
        TemplateBox[{0}, "Spacer1"], TraditionalForm], {0.004, 0}}, {15.5, 
       FormBox[
        TemplateBox[{0}, "Spacer1"], TraditionalForm], {0.008, 0}}, {14., 
       FormBox[
        InterpretationBox[
         StyleBox[
          TemplateBox[{
            RowBox[{
              FormBox["1", TraditionalForm], "\[InvisibleSpace]", 
              FormBox["0", TraditionalForm], "\[InvisibleSpace]", 
              FormBox["0", TraditionalForm]}]}, "Ket"], FontWeight -> 
          "Plain"], 
         Wolfram`QuantumFramework`QuditName[{1, 0, 0}, "Dual" -> False]], 
        TraditionalForm], {0, 0}}, {16.5, 
       FormBox[
        TemplateBox[{0}, "Spacer1"], TraditionalForm], {0.004, 0}}, {17.5, 
       FormBox[
        TemplateBox[{0}, "Spacer1"], TraditionalForm], {0.004, 0}}, {18.5, 
       FormBox[
        TemplateBox[{0}, "Spacer1"], TraditionalForm], {0.008, 0}}, {17., 
       FormBox[
        InterpretationBox[
         StyleBox[
          TemplateBox[{
            RowBox[{
              FormBox["1", TraditionalForm], "\[InvisibleSpace]", 
              FormBox["0", TraditionalForm], "\[InvisibleSpace]", 
              FormBox["1", TraditionalForm]}]}, "Ket"], FontWeight -> 
          "Plain"], 
         Wolfram`QuantumFramework`QuditName[{1, 0, 1}, "Dual" -> False]], 
        TraditionalForm], {0, 0}}, {19.5, 
       FormBox[
        TemplateBox[{0}, "Spacer1"], TraditionalForm], {0.004, 0}}, {20.5, 
       FormBox[
        TemplateBox[{0}, "Spacer1"], TraditionalForm], {0.004, 0}}, {21.5, 
       FormBox[
        TemplateBox[{0}, "Spacer1"], TraditionalForm], {0.008, 0}}, {20., 
       FormBox[
        InterpretationBox[
         StyleBox[
          TemplateBox[{
            RowBox[{
              FormBox["1", TraditionalForm], "\[InvisibleSpace]", 
              FormBox["1", TraditionalForm], "\[InvisibleSpace]", 
              FormBox["0", TraditionalForm]}]}, "Ket"], FontWeight -> 
          "Plain"], 
         Wolfram`QuantumFramework`QuditName[{1, 1, 0}, "Dual" -> False]], 
        TraditionalForm], {0, 0}}, {22.5, 
       FormBox[
        TemplateBox[{0}, "Spacer1"], TraditionalForm], {0.004, 0}}, {23.5, 
       FormBox[
        TemplateBox[{0}, "Spacer1"], TraditionalForm], {0.004, 0}}, {23., 
       FormBox[
        InterpretationBox[
         StyleBox[
          TemplateBox[{
            RowBox[{
              FormBox["1", TraditionalForm], "\[InvisibleSpace]", 
              FormBox["1", TraditionalForm], "\[InvisibleSpace]", 
              FormBox["1", TraditionalForm]}]}, "Ket"], FontWeight -> 
          "Plain"], 
         Wolfram`QuantumFramework`QuditName[{1, 1, 1}, "Dual" -> False]], 
        TraditionalForm], {0, 0}}}, {{1.5, 
       FormBox[
        TemplateBox[{0}, "Spacer1"], TraditionalForm], {0.004, 0}}, {2.5, 
       FormBox[
        TemplateBox[{0}, "Spacer1"], TraditionalForm], {0.004, 0}}, {3.5, 
       FormBox[
        TemplateBox[{0}, "Spacer1"], TraditionalForm], {0.008, 0}}, {4.5, 
       FormBox[
        TemplateBox[{0}, "Spacer1"], TraditionalForm], {0.004, 0}}, {5.5, 
       FormBox[
        TemplateBox[{0}, "Spacer1"], TraditionalForm], {0.004, 0}}, {6.5, 
       FormBox[
        TemplateBox[{0}, "Spacer1"], TraditionalForm], {0.008, 0}}, {7.5, 
       FormBox[
        TemplateBox[{0}, "Spacer1"], TraditionalForm], {0.004, 0}}, {8.5, 
       FormBox[
        TemplateBox[{0}, "Spacer1"], TraditionalForm], {0.004, 0}}, {9.5, 
       FormBox[
        TemplateBox[{0}, "Spacer1"], TraditionalForm], {0.008, 0}}, {10.5, 
       FormBox[
        TemplateBox[{0}, "Spacer1"], TraditionalForm], {0.004, 0}}, {11.5, 
       FormBox[
        TemplateBox[{0}, "Spacer1"], TraditionalForm], {0.004, 0}}, {12.5, 
       FormBox[
        TemplateBox[{0}, "Spacer1"], TraditionalForm], {0.008, 0}}, {13.5, 
       FormBox[
        TemplateBox[{0}, "Spacer1"], TraditionalForm], {0.004, 0}}, {14.5, 
       FormBox[
        TemplateBox[{0}, "Spacer1"], TraditionalForm], {0.004, 0}}, {15.5, 
       FormBox[
        TemplateBox[{0}, "Spacer1"], TraditionalForm], {0.008, 0}}, {16.5, 
       FormBox[
        TemplateBox[{0}, "Spacer1"], TraditionalForm], {0.004, 0}}, {17.5, 
       FormBox[
        TemplateBox[{0}, "Spacer1"], TraditionalForm], {0.004, 0}}, {18.5, 
       FormBox[
        TemplateBox[{0}, "Spacer1"], TraditionalForm], {0.008, 0}}, {19.5, 
       FormBox[
        TemplateBox[{0}, "Spacer1"], TraditionalForm], {0.004, 0}}, {20.5, 
       FormBox[
        TemplateBox[{0}, "Spacer1"], TraditionalForm], {0.004, 0}}, {21.5, 
       FormBox[
        TemplateBox[{0}, "Spacer1"], TraditionalForm], {0.008, 0}}, {22.5, 
       FormBox[
        TemplateBox[{0}, "Spacer1"], TraditionalForm], {0.004, 0}}, {23.5, 
       FormBox[
        TemplateBox[{0}, "Spacer1"], TraditionalForm], {0.004, 0}}}}},
  GridLines->{None, Automatic},
  GridLinesStyle->Directive[
    GrayLevel[0.5, 0.4]],
  ImageSize->Large,
  PlotRange->{{All, All}, {All, All}},
  PlotRangePadding->{{
     Scaled[0.02], 
     Scaled[0.02]}, {None, 
     Scaled[0.05]}},
  Ticks->{None, Automatic}]], "Input",
 CellID->44410801,ExpressionUUID->"800999ed-e4f6-4bd2-89db-2a2ce9c477a5"]
}, Open  ]],

Cell[CellGroupData[{

Cell["Source & Additional Information", "Section",
 Editable->False,
 Deletable->False,
 TaggingRules->{"TemplateGroupName" -> "Source & Additional Information"},
 CellTags->{"Source & Additional Information", "TemplateSection"},
 CellID->132008035,ExpressionUUID->"f0969c8b-ec27-4ea2-af6f-87c33deaff2c"],

Cell[CellGroupData[{

Cell["Contributed By", "Subsection",
 Editable->False,
 Deletable->False,
 TaggingRules->{"TemplateGroupName" -> "ContributorInformation"},
 DefaultNewCellStyle->"Text",
 CellTags->{"Contributed By", "ContributorInformation", "TemplateCellGroup"},
 CellID->430591647,ExpressionUUID->"4fce881b-9e8b-488a-b618-55986021c49d"],

Cell["Wolfram Research, Quantum Computation Framework Team", "Text",
 CellEventActions->{Inherited, {"KeyDown", "\t"} :> Replace[SelectionMove[
       SelectedNotebook[], After, Cell]; NotebookFind[
       SelectedNotebook[], "TabNext", Next, CellTags, AutoScroll -> True, 
       WrapAround -> True], Blank[NotebookSelection] :> SelectionMove[
       SelectedNotebook[], All, CellContents, AutoScroll -> True]], 
   PassEventsDown -> False, PassEventsUp -> False},
 CellChangeTimes->{3.890955218040729*^9},
 CellTags->{"DefaultContent", "TabNext"},
 CellID->744260130,ExpressionUUID->"763382d8-d594-4a60-897c-720f44948d7c"]
}, Open  ]],

Cell[CellGroupData[{

Cell[TextData[{
 "Keywords",
 Cell[BoxData[
  PaneSelectorBox[{True->
   TemplateBox[{"Keywords", 
     Cell[
      BoxData[
       FrameBox[
        Cell[
        "List relevant terms (e.g. functional areas, algorithm names, related \
concepts) that should be used to include the example in search results.", 
         "MoreInfoText"], Background -> GrayLevel[0.95], FrameMargins -> 20, 
        FrameStyle -> GrayLevel[0.9], RoundingRadius -> 5, ImageSize -> {
          Scaled[0.65], Automatic}]], "MoreInfoText", Deletable -> True, 
      CellTags -> {"SectionMoreInfoKeywords"}, 
      CellMargins -> {{66, 66}, {15, 15}}]},
    "MoreInfoOpenerButtonTemplate"]}, Dynamic[
    CurrentValue[
     EvaluationNotebook[], {TaggingRules, "ResourceCreateNotebook"}]],
   ImageSize->Automatic]],ExpressionUUID->
  "bc60503f-b551-4da9-9fbb-42271a8defbf"]
}], "Subsection",
 Editable->False,
 Deletable->False,
 TaggingRules->{"TemplateGroupName" -> "Keywords"},
 DefaultNewCellStyle->"Item",
 CellTags->{"Keywords", "TemplateCellGroup"},
 CellID->973908638,ExpressionUUID->"0276bd08-483a-4c73-901e-5381a80d5ef8"],

Cell["Amazon Braket", "Item",
 CellEventActions->{Inherited, {"KeyDown", "\t"} :> Replace[SelectionMove[
       SelectedNotebook[], After, Cell]; NotebookFind[
       SelectedNotebook[], "TabNext", Next, CellTags, AutoScroll -> True, 
       WrapAround -> True], Blank[NotebookSelection] :> SelectionMove[
       SelectedNotebook[], All, CellContents, AutoScroll -> True]], 
   PassEventsDown -> False, PassEventsUp -> False},
 CellChangeTimes->{{3.893979953786646*^9, 3.893979959529937*^9}},
 CellTags->{"DefaultContent", "TabNext"},
 CellID->12473014,ExpressionUUID->"3c9ac8e1-2f23-456f-a7cf-1fa7586749b1"],

Cell["AWS service connection", "Item",
 CellEventActions->{Inherited, {"KeyDown", "\t"} :> Replace[SelectionMove[
       SelectedNotebook[], After, Cell]; NotebookFind[
       SelectedNotebook[], "TabNext", Next, CellTags, AutoScroll -> True, 
       WrapAround -> True], Blank[NotebookSelection] :> SelectionMove[
       SelectedNotebook[], All, CellContents, AutoScroll -> True]], 
   PassEventsDown -> False, PassEventsUp -> False},
 CellChangeTimes->{{3.893979953786646*^9, 3.893979972040011*^9}},
 CellID->1999049056,ExpressionUUID->"08e68332-b5ad-403b-8760-e89577ce9d4d"],

Cell["Quantum circuit", "Item",
 CellEventActions->{Inherited, {"KeyDown", "\t"} :> Replace[SelectionMove[
       SelectedNotebook[], After, Cell]; NotebookFind[
       SelectedNotebook[], "TabNext", Next, CellTags, AutoScroll -> True, 
       WrapAround -> True], Blank[NotebookSelection] :> SelectionMove[
       SelectedNotebook[], All, CellContents, AutoScroll -> True]], 
   PassEventsDown -> False, PassEventsUp -> False},
 CellChangeTimes->{{3.893979953786646*^9, 3.8939799771909027`*^9}},
 CellID->1480943779,ExpressionUUID->"32d0bd2b-3bc2-46bb-9144-236961ae2334"]
}, Open  ]],

Cell[CellGroupData[{

Cell[TextData[{
 "Categories",
 Cell[BoxData[
  PaneSelectorBox[{True->
   TemplateBox[{"Categories", 
     Cell[
      BoxData[
       FrameBox[
        Cell[
        "Choose categories that best represent your example. These choices \
determine which pages your example will appear on when published to the \
repository.", "MoreInfoText"], Background -> GrayLevel[0.95], FrameMargins -> 
        20, FrameStyle -> GrayLevel[0.9], RoundingRadius -> 5, ImageSize -> {
          Scaled[0.65], Automatic}]], "MoreInfoText", Deletable -> True, 
      CellTags -> {"SectionMoreInfoCategories"}, 
      CellMargins -> {{66, 66}, {15, 15}}]},
    "MoreInfoOpenerButtonTemplate"]}, Dynamic[
    CurrentValue[
     EvaluationNotebook[], {TaggingRules, "ResourceCreateNotebook"}]],
   ImageSize->Automatic]],ExpressionUUID->
  "7b97c29f-da08-4232-851c-fb4bd1895772"]
}], "Subsection",
 Editable->False,
 Deletable->False,
 TaggingRules->{"TemplateGroupName" -> "Categories"},
 DefaultNewCellStyle->"Item",
 CellTags->{"Categories", "TemplateCellGroup"},
 CellID->405271300,ExpressionUUID->"826f6508-3b7f-4d85-922d-a57cbfb8b77a"],

Cell[BoxData[
 TagBox[GridBox[{
    {
     TagBox[GridBox[{
        {
         TemplateBox[{
           CheckboxBox[False, {False, "Algebra"}], "\" \"", 
           StyleBox[
           "\"Algebra\"", FontSize -> 12, Editable -> False, StripOnInput -> 
            False]},
          "RowDefault"]},
        {
         TemplateBox[{
           CheckboxBox[False, {False, "Calculus"}], "\" \"", 
           StyleBox[
           "\"Calculus\"", FontSize -> 12, Editable -> False, StripOnInput -> 
            False]},
          "RowDefault"]},
        {
         TemplateBox[{
           CheckboxBox[False, {False, "Complex Systems"}], "\" \"", 
           StyleBox[
           "\"Complex Systems\"", FontSize -> 12, Editable -> False, 
            StripOnInput -> False]},
          "RowDefault"]},
        {
         TemplateBox[{
           CheckboxBox[False, {False, "Control Systems"}], "\" \"", 
           StyleBox[
           "\"Control Systems\"", FontSize -> 12, Editable -> False, 
            StripOnInput -> False]},
          "RowDefault"]},
        {
         TemplateBox[{
           CheckboxBox[False, {False, "Engineering"}], "\" \"", 
           StyleBox[
           "\"Engineering\"", FontSize -> 12, Editable -> False, StripOnInput -> 
            False]},
          "RowDefault"]},
        {
         TemplateBox[{
           CheckboxBox[False, {False, "Food & Nutrition"}], "\" \"", 
           StyleBox[
           "\"Food & Nutrition\"", FontSize -> 12, Editable -> False, 
            StripOnInput -> False]},
          "RowDefault"]},
        {
         TemplateBox[{
           CheckboxBox[False, {False, "Graphs & Networks"}], "\" \"", 
           StyleBox[
           "\"Graphs & Networks\"", FontSize -> 12, Editable -> False, 
            StripOnInput -> False]},
          "RowDefault"]},
        {
         TemplateBox[{
           CheckboxBox[False, {False, "Machine Learning"}], "\" \"", 
           StyleBox[
           "\"Machine Learning\"", FontSize -> 12, Editable -> False, 
            StripOnInput -> False]},
          "RowDefault"]},
        {
         TemplateBox[{
           CheckboxBox[False, {False, "Optimization"}], "\" \"", 
           StyleBox[
           "\"Optimization\"", FontSize -> 12, Editable -> False, 
            StripOnInput -> False]},
          "RowDefault"]},
        {
         TemplateBox[{
           CheckboxBox[False, {False, "Puzzles and Recreation"}], "\" \"", 
           StyleBox[
           "\"Puzzles and Recreation\"", FontSize -> 12, Editable -> False, 
            StripOnInput -> False]},
          "RowDefault"]},
        {
         TemplateBox[{
           CheckboxBox[False, {False, "System Modeling"}], "\" \"", 
           StyleBox[
           "\"System Modeling\"", FontSize -> 12, Editable -> False, 
            StripOnInput -> False]},
          "RowDefault"]},
        {
         TemplateBox[{
           CheckboxBox[False, {False, "Video Processing"}], "\" \"", 
           StyleBox[
           "\"Video Processing\"", FontSize -> 12, Editable -> False, 
            StripOnInput -> False]},
          "RowDefault"]},
        {
         TemplateBox[{
           CheckboxBox[
           False, {False, 
             DefinitionNotebookClient`PackageScope`$$customInputField}], 
           "\" \"", 
           StyleBox[
            DynamicModuleBox[{$CellContext`input$$, $CellContext`update$$}, 
             InputFieldBox[
              
              Dynamic[$CellContext`input$$, ($CellContext`input$$ = #; \
$CellContext`update$$[#])& ], String, BoxID -> 
              "574d2def-48b9-4645-9bdb-323c906ef357", ContinuousAction -> 
              False, FieldHint -> " Enter a custom value ", 
              ImageSize -> {250, Automatic}, FieldCompletionFunction :> 
              DefinitionNotebookClient`PropertyCompletionFunction["Example", 
                EvaluationNotebook[], "Categories"]], Initialization :> 
             DefinitionNotebookClient`PropertyCompletionFunction["Example", 
               EvaluationNotebook[], "Categories"], 
             DynamicModuleValues :> {{
               DownValues[$CellContext`update$$] = {HoldPattern[
                    $CellContext`update$$[
                    Pattern[$CellContext`s, 
                    Blank[]]]] :> 
                  DefinitionNotebookClient`InsertCheckboxItem[
                    EvaluationCell[], 
                    If[
                    And[
                    StringQ[$CellContext`s], $CellContext`s =!= 
                    ""], $CellContext`s, None], "MoveCursorToInputField" -> 
                    Automatic]}}}, SynchronousInitialization -> False], 
            FontSize -> 12, Editable -> False, StripOnInput -> False]},
          "RowDefault"]}
       },
       DefaultBaseStyle->"Column",
       GridBoxAlignment->{"Columns" -> {{Left}}},
       GridBoxItemSize->{"Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
      "Column"], 
     TagBox[GridBox[{
        {
         TemplateBox[{
           CheckboxBox[False, {False, "Astronomy"}], "\" \"", 
           StyleBox[
           "\"Astronomy\"", FontSize -> 12, Editable -> False, StripOnInput -> 
            False]},
          "RowDefault"]},
        {
         TemplateBox[{
           CheckboxBox[False, {False, "Cellular Automata"}], "\" \"", 
           StyleBox[
           "\"Cellular Automata\"", FontSize -> 12, Editable -> False, 
            StripOnInput -> False]},
          "RowDefault"]},
        {
         TemplateBox[{
           CheckboxBox["Computer Science", {False, "Computer Science"}], 
           "\" \"", 
           StyleBox[
           "\"Computer Science\"", FontSize -> 12, Editable -> False, 
            StripOnInput -> False]},
          "RowDefault"]},
        {
         TemplateBox[{
           CheckboxBox[False, {False, "Creative Arts"}], "\" \"", 
           StyleBox[
           "\"Creative Arts\"", FontSize -> 12, Editable -> False, 
            StripOnInput -> False]},
          "RowDefault"]},
        {
         TemplateBox[{
           CheckboxBox[False, {False, "Finance & Economics"}], "\" \"", 
           StyleBox[
           "\"Finance & Economics\"", FontSize -> 12, Editable -> False, 
            StripOnInput -> False]},
          "RowDefault"]},
        {
         TemplateBox[{
           CheckboxBox[False, {False, "Geography"}], "\" \"", 
           StyleBox[
           "\"Geography\"", FontSize -> 12, Editable -> False, StripOnInput -> 
            False]},
          "RowDefault"]},
        {
         TemplateBox[{
           CheckboxBox[False, {False, "Image Processing"}], "\" \"", 
           StyleBox[
           "\"Image Processing\"", FontSize -> 12, Editable -> False, 
            StripOnInput -> False]},
          "RowDefault"]},
        {
         TemplateBox[{
           CheckboxBox["Mathematics", {False, "Mathematics"}], "\" \"", 
           StyleBox[
           "\"Mathematics\"", FontSize -> 12, Editable -> False, StripOnInput -> 
            False]},
          "RowDefault"]},
        {
         TemplateBox[{
           CheckboxBox["Physics", {False, "Physics"}], "\" \"", 
           StyleBox[
           "\"Physics\"", FontSize -> 12, Editable -> False, StripOnInput -> 
            False]},
          "RowDefault"]},
        {
         TemplateBox[{
           CheckboxBox[False, {False, "Signal Processing"}], "\" \"", 
           StyleBox[
           "\"Signal Processing\"", FontSize -> 12, Editable -> False, 
            StripOnInput -> False]},
          "RowDefault"]},
        {
         TemplateBox[{
           CheckboxBox[False, {False, "Text & Language Processing"}], "\" \"", 
           StyleBox[
           "\"Text & Language Processing\"", FontSize -> 12, Editable -> 
            False, StripOnInput -> False]},
          "RowDefault"]},
        {
         TemplateBox[{
           CheckboxBox[False, {False, "Visualization & Graphics"}], "\" \"", 
           StyleBox[
           "\"Visualization & Graphics\"", FontSize -> 12, Editable -> False, 
            StripOnInput -> False]},
          "RowDefault"]},
        {"\<\"\"\>"}
       },
       DefaultBaseStyle->"Column",
       GridBoxAlignment->{"Columns" -> {{Left}}},
       GridBoxItemSize->{"Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
      "Column"], 
     TagBox[GridBox[{
        {
         TemplateBox[{
           CheckboxBox[False, {False, "Audio Processing"}], "\" \"", 
           StyleBox[
           "\"Audio Processing\"", FontSize -> 12, Editable -> False, 
            StripOnInput -> False]},
          "RowDefault"]},
        {
         TemplateBox[{
           CheckboxBox[False, {False, "Chemistry"}], "\" \"", 
           StyleBox[
           "\"Chemistry\"", FontSize -> 12, Editable -> False, StripOnInput -> 
            False]},
          "RowDefault"]},
        {
         TemplateBox[{
           CheckboxBox[False, {False, "Computer Vision"}], "\" \"", 
           StyleBox[
           "\"Computer Vision\"", FontSize -> 12, Editable -> False, 
            StripOnInput -> False]},
          "RowDefault"]},
        {
         TemplateBox[{
           CheckboxBox[False, {False, "Data Science"}], "\" \"", 
           StyleBox[
           "\"Data Science\"", FontSize -> 12, Editable -> False, 
            StripOnInput -> False]},
          "RowDefault"]},
        {
         TemplateBox[{
           CheckboxBox[False, {False, "Finite Element Method"}], "\" \"", 
           StyleBox[
           "\"Finite Element Method\"", FontSize -> 12, Editable -> False, 
            StripOnInput -> False]},
          "RowDefault"]},
        {
         TemplateBox[{
           CheckboxBox[False, {False, "Geometry"}], "\" \"", 
           StyleBox[
           "\"Geometry\"", FontSize -> 12, Editable -> False, StripOnInput -> 
            False]},
          "RowDefault"]},
        {
         TemplateBox[{
           CheckboxBox[False, {False, "Life Sciences"}], "\" \"", 
           StyleBox[
           "\"Life Sciences\"", FontSize -> 12, Editable -> False, 
            StripOnInput -> False]},
          "RowDefault"]},
        {
         TemplateBox[{
           CheckboxBox[False, {False, "Notebooks & User Interfaces"}], 
           "\" \"", 
           StyleBox[
           "\"Notebooks & User Interfaces\"", FontSize -> 12, Editable -> 
            False, StripOnInput -> False]},
          "RowDefault"]},
        {
         TemplateBox[{
           CheckboxBox[False, {False, "Presentation & Publication"}], "\" \"", 
           StyleBox[
           "\"Presentation & Publication\"", FontSize -> 12, Editable -> 
            False, StripOnInput -> False]},
          "RowDefault"]},
        {
         TemplateBox[{
           CheckboxBox[False, {False, "Social Sciences"}], "\" \"", 
           StyleBox[
           "\"Social Sciences\"", FontSize -> 12, Editable -> False, 
            StripOnInput -> False]},
          "RowDefault"]},
        {
         TemplateBox[{
           CheckboxBox[False, {False, "Time-Related Computation"}], "\" \"", 
           StyleBox[
           "\"Time-Related Computation\"", FontSize -> 12, Editable -> False, 
            StripOnInput -> False]},
          "RowDefault"]},
        {
         TemplateBox[{
           CheckboxBox["Quantum Computation", {False, "Quantum Computation"}],
            "\" \"", 
           StyleBox[
           "\"Quantum Computation\"", FontSize -> 12, Editable -> False, 
            StripOnInput -> False]},
          "RowDefault"]},
        {"\<\"\"\>"}
       },
       DefaultBaseStyle->"Column",
       GridBoxAlignment->{"Columns" -> {{Left}}},
       GridBoxItemSize->{"Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
      "Column"]}
   },
   AutoDelete->False,
   BaseStyle->{"ControlStyle", ShowStringCharacters -> False},
   GridBoxAlignment->{"Columns" -> {{Left}}, "Rows" -> {{Top}}},
   GridBoxItemSize->{"Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}},
   GridBoxSpacings->{"Columns" -> {{2}}}],
  "Grid"]], "Output",
 CellEditDuplicate->False,
 TaggingRules->{
  "CheckboxData" -> 
   "OEM6eJxdjlsKwjAQRQVba63oSrqIEvwoiBWnG4jtqMHmQWYCZvdGEUR/D/\
dwblPVkAPHCWHRBXaBayjEDYc7jpcZZXtFieQtoyYqm8BWS1ZDDcujtw49R1gJyXi1XiElt3OsrPnd\
FsJOQf/BTWsYvfPI8mVA2ZgI4UyYepUIlIatSX8o633AL3s/yQ7WJLY+IdngB+\
yjQyh2D6ndlPhWWJ1UHD9hMX8CfjpRvg=="},
 CellChangeTimes->{{3.890955242209421*^9, 3.890955251150724*^9}},
 CellTags->{"Categories", "Categories-Checkboxes", "CheckboxCell"},
 CellID->824188810,ExpressionUUID->"ddeddf16-a747-435e-b064-dbd7550952ab"]
}, Open  ]],

Cell[CellGroupData[{

Cell["Related Documentation Pages", "Subsection",
 Editable->False,
 Deletable->False,
 TaggingRules->{"TemplateGroupName" -> "RelatedSymbols"},
 DefaultNewCellStyle->"Item",
 CellTags->{
  "Related Documentation Pages", "RelatedSymbols", "TemplateCellGroup"},
 CellID->462881783,ExpressionUUID->"cf341b90-66a2-40d9-8708-1a92358f1b74"],

Cell["Symbol name or documentation URI", "Item",
 CellEventActions->{Inherited, {"KeyDown", "\t"} :> Replace[SelectionMove[
       SelectedNotebook[], After, Cell]; NotebookFind[
       SelectedNotebook[], "TabNext", Next, CellTags, AutoScroll -> True, 
       WrapAround -> True], Blank[NotebookSelection] :> SelectionMove[
       SelectedNotebook[], All, CellContents, AutoScroll -> True]], 
   PassEventsDown -> False, PassEventsUp -> False},
 CellTags->{"DefaultContent", "TabNext"},
 CellID->303988514,ExpressionUUID->"8e3499cd-4134-4a53-80c5-295007a565f7"]
}, Open  ]],

Cell[CellGroupData[{

Cell[TextData[{
 "Related Resource Objects",
 Cell[BoxData[
  PaneSelectorBox[{True->
   TemplateBox[{"Related Resource Objects", 
     Cell[
      BoxData[
       FrameBox[
        Cell[
        "List the names of published resource objects from any Wolfram \
repository that are related to this example.", "MoreInfoText"], Background -> 
        GrayLevel[0.95], FrameMargins -> 20, FrameStyle -> GrayLevel[0.9], 
        RoundingRadius -> 5, ImageSize -> {
          Scaled[0.65], Automatic}]], "MoreInfoText", Deletable -> True, 
      CellTags -> {"SectionMoreInfoRelatedResourceObjects"}, 
      CellMargins -> {{66, 66}, {15, 15}}]},
    "MoreInfoOpenerButtonTemplate"]}, Dynamic[
    CurrentValue[
     EvaluationNotebook[], {TaggingRules, "ResourceCreateNotebook"}]],
   ImageSize->Automatic]],ExpressionUUID->
  "d09df89b-76f1-43e1-92fb-91dedb621408"]
}], "Subsection",
 Editable->False,
 Deletable->False,
 TaggingRules->{"TemplateGroupName" -> "Related Resource Objects"},
 DefaultNewCellStyle->"Item",
 CellTags->{"Related Resource Objects", "TemplateCellGroup"},
 CellID->685983561,ExpressionUUID->"37b35d13-b70c-4fda-aaa5-2e8ec3d7d14c"],

Cell["Resource Name (resources from any Wolfram repository)", "Item",
 CellEventActions->{Inherited, {"KeyDown", "\t"} :> Replace[SelectionMove[
       SelectedNotebook[], After, Cell]; NotebookFind[
       SelectedNotebook[], "TabNext", Next, CellTags, AutoScroll -> True, 
       WrapAround -> True], Blank[NotebookSelection] :> SelectionMove[
       SelectedNotebook[], All, CellContents, AutoScroll -> True]], 
   PassEventsDown -> False, PassEventsUp -> False},
 CellTags->{"DefaultContent", "TabNext"},
 CellID->121377300,ExpressionUUID->"a27cdd58-f004-4d28-b02c-0e9e47517968"]
}, Open  ]],

Cell[CellGroupData[{

Cell[TextData[{
 "Original Source References and Attributions",
 Cell[BoxData[
  PaneSelectorBox[{True->
   TemplateBox[{"Source/Reference Citation", 
     Cell[
      BoxData[
       FrameBox[
        Cell[
        "Give a bibliographic-style citation for the original source of the \
example and/or its components (e.g. a published paper, algorithm, or code \
repository).", "MoreInfoText"], Background -> GrayLevel[0.95], FrameMargins -> 
        20, FrameStyle -> GrayLevel[0.9], RoundingRadius -> 5, ImageSize -> {
          Scaled[0.65], Automatic}]], "MoreInfoText", Deletable -> True, 
      CellTags -> {"SectionMoreInfoSourceReferenceCitation"}, 
      CellMargins -> {{66, 66}, {15, 15}}]},
    "MoreInfoOpenerButtonTemplate"]}, Dynamic[
    CurrentValue[
     EvaluationNotebook[], {TaggingRules, "ResourceCreateNotebook"}]],
   ImageSize->Automatic]],ExpressionUUID->
  "33a1992d-8d73-4756-b62c-a61335a674d8"]
}], "Subsection",
 Editable->False,
 Deletable->False,
 TaggingRules->{"TemplateGroupName" -> "Source/Reference Citation"},
 DefaultNewCellStyle->"Text",
 CellTags->{
  "Original Source References and Attributions", "Source/Reference Citation", 
   "TemplateCellGroup"},
 CellID->239086869,ExpressionUUID->"17f5ab99-db6b-40c6-8193-0e2f778ef400"],

Cell["Source, reference or citation", "Item",
 CellEventActions->{Inherited, {"KeyDown", "\t"} :> Replace[SelectionMove[
       SelectedNotebook[], After, Cell]; NotebookFind[
       SelectedNotebook[], "TabNext", Next, CellTags, AutoScroll -> True, 
       WrapAround -> True], Blank[NotebookSelection] :> SelectionMove[
       SelectedNotebook[], All, CellContents, AutoScroll -> True]], 
   PassEventsDown -> False, PassEventsUp -> False},
 CellTags->{"DefaultContent", "TabNext"},
 CellID->190772471,ExpressionUUID->"21091063-27a9-418f-85b4-87cfaaf0e386"]
}, Open  ]],

Cell[CellGroupData[{

Cell[TextData[{
 "Links",
 Cell[BoxData[
  PaneSelectorBox[{True->
   TemplateBox[{"Links", 
     Cell[
      BoxData[
       FrameBox[
        Cell[
        "List additional URLs or hyperlinks for external information related \
to the example.", "MoreInfoText"], Background -> GrayLevel[0.95], 
        FrameMargins -> 20, FrameStyle -> GrayLevel[0.9], RoundingRadius -> 5,
         ImageSize -> {
          Scaled[0.65], Automatic}]], "MoreInfoText", Deletable -> True, 
      CellTags -> {"SectionMoreInfoLinks"}, 
      CellMargins -> {{66, 66}, {15, 15}}]},
    "MoreInfoOpenerButtonTemplate"]}, Dynamic[
    CurrentValue[
     EvaluationNotebook[], {TaggingRules, "ResourceCreateNotebook"}]],
   ImageSize->Automatic]],ExpressionUUID->
  "dc13cebd-7392-442d-831b-ae61365d95bc"]
}], "Subsection",
 Editable->False,
 Deletable->False,
 TaggingRules->{"TemplateGroupName" -> "Links"},
 DefaultNewCellStyle->"Item",
 CellTags->{"Links", "TemplateCellGroup"},
 CellID->934758141,ExpressionUUID->"e7d82e12-d306-4016-8210-91bc438a0595"],

Cell["\<\
https://resources.wolframcloud.com/PacletRepository/resources/Wolfram/\
QuantumFramework/\
\>", "Item",
 CellEventActions->{Inherited, {"KeyDown", "\t"} :> Replace[SelectionMove[
       SelectedNotebook[], After, Cell]; NotebookFind[
       SelectedNotebook[], "TabNext", Next, CellTags, AutoScroll -> True, 
       WrapAround -> True], Blank[NotebookSelection] :> SelectionMove[
       SelectedNotebook[], All, CellContents, AutoScroll -> True]], 
   PassEventsDown -> False, PassEventsUp -> False},
 CellChangeTimes->{3.890955295272344*^9},
 CellTags->{"DefaultContent", "TabNext"},
 CellID->210331081,ExpressionUUID->"fb82ab81-f6f5-4096-8c2d-aebe3bfe8b8f"]
}, Open  ]],

Cell[CellGroupData[{

Cell[TextData[{
 "Compatibility",
 Cell[BoxData[
  PaneSelectorBox[{True->
   TemplateBox[{"Compatibility", 
     Cell[
      BoxData[
       FrameBox[
        Cell[
        "Specify any known compatibilities for your example to ensure it is \
discoverable on the correct platforms.", "MoreInfoText"], Background -> 
        GrayLevel[0.95], FrameMargins -> 20, FrameStyle -> GrayLevel[0.9], 
        RoundingRadius -> 5, ImageSize -> {
          Scaled[0.65], Automatic}]], "MoreInfoText", Deletable -> True, 
      CellTags -> {"SectionMoreInfoCompatibility"}, 
      CellMargins -> {{66, 66}, {15, 15}}]},
    "MoreInfoOpenerButtonTemplate"]}, Dynamic[
    CurrentValue[
     EvaluationNotebook[], {TaggingRules, "ResourceCreateNotebook"}]],
   ImageSize->Automatic]],ExpressionUUID->
  "03b16559-0a19-478f-85c9-1e68f55161bd"]
}], "Subsection",
 Editable->False,
 Deletable->False,
 TaggingRules->{"TemplateGroupName" -> "Compatibility"},
 CellTags->{"Compatibility", "TemplateCellGroup"},
 CellID->786803182,ExpressionUUID->"f2f65fee-205c-4e82-aebd-1a93972b20a2"],

Cell[CellGroupData[{

Cell[TextData[{
 "Wolfram Language Version",
 Cell[BoxData[
  PaneSelectorBox[{True->
   TemplateBox[{"CompatibilityWolframLanguageVersionRequired", 
     Cell[
      BoxData[
       FrameBox[
        Cell[
        "Enter required Wolfram Language Version (e.g. 12.1+).", 
         "MoreInfoText"], Background -> GrayLevel[0.95], FrameMargins -> 20, 
        FrameStyle -> GrayLevel[0.9], RoundingRadius -> 5, ImageSize -> {
          Scaled[0.65], Automatic}]], "MoreInfoText", Deletable -> True, 
      CellTags -> {
       "SectionMoreInfoCompatibilityWolframLanguageVersionRequired"}, 
      CellMargins -> {{66, 66}, {15, 15}}]},
    "MoreInfoOpenerButtonTemplate"]}, Dynamic[
    CurrentValue[
     EvaluationNotebook[], {TaggingRules, "ResourceCreateNotebook"}]],
   ImageSize->Automatic]],ExpressionUUID->
  "1c97a0be-1aea-4bde-a79f-7c35524c3150"]
}], "Subsubsection",
 Editable->False,
 Deletable->False,
 CellMargins->{{Inherited, Inherited}, {4, 6}},
 TaggingRules->{
  "TemplateGroupName" -> "CompatibilityWolframLanguageVersionRequired"},
 DefaultNewCellStyle->"Text",
 FontSize->16,
 CellTags->{
  "CompatibilityWolframLanguageVersionRequired", "TemplateCellGroup", 
   "Wolfram Language Version"},
 CellID->389299396,ExpressionUUID->"fb2d1069-6011-48f9-bd78-f413ff329cee"],

Cell["13.2+", "Text",
 CellTags->{"DefaultContent", "ScrapeDefault"},
 CellID->824809146,ExpressionUUID->"2ae58b10-e547-44b2-bbe1-e72317ab99c3"]
}, Open  ]],

Cell[CellGroupData[{

Cell[TextData[{
 "Operating System",
 Cell[BoxData[
  PaneSelectorBox[{True->
   TemplateBox[{"CompatibilityOperatingSystem", 
     Cell[
      BoxData[
       FrameBox[
        Cell[
        "Select all operating systems where your example is expected to \
function properly.", "MoreInfoText"], Background -> GrayLevel[0.95], 
        FrameMargins -> 20, FrameStyle -> GrayLevel[0.9], RoundingRadius -> 5,
         ImageSize -> {
          Scaled[0.65], Automatic}]], "MoreInfoText", Deletable -> True, 
      CellTags -> {"SectionMoreInfoCompatibilityOperatingSystem"}, 
      CellMargins -> {{66, 66}, {15, 15}}]},
    "MoreInfoOpenerButtonTemplate"]}, Dynamic[
    CurrentValue[
     EvaluationNotebook[], {TaggingRules, "ResourceCreateNotebook"}]],
   ImageSize->Automatic]],ExpressionUUID->
  "74c2ca06-4bd4-4f37-bdd9-a9125d04e8a0"]
}], "Subsubsection",
 Editable->False,
 Deletable->False,
 CellMargins->{{Inherited, Inherited}, {4, 6}},
 TaggingRules->{"TemplateGroupName" -> "CompatibilityOperatingSystem"},
 DefaultNewCellStyle->"Item",
 FontSize->16,
 CellTags->{
  "CompatibilityOperatingSystem", "Operating System", "TemplateCellGroup"},
 CellID->495572721,ExpressionUUID->"35b5b862-e4e9-4f3f-879b-9119ae06598b"],

Cell[BoxData[
 TagBox[GridBox[{
    {
     TagBox[GridBox[{
        {
         TemplateBox[{
           CheckboxBox["Windows", {False, "Windows"}], "\" \"", 
           StyleBox[
           "\"Windows\"", FontSize -> 12, Editable -> False, StripOnInput -> 
            False]},
          "RowDefault"]}
       },
       DefaultBaseStyle->"Column",
       GridBoxAlignment->{"Columns" -> {{Left}}},
       GridBoxItemSize->{"Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
      "Column"], 
     TagBox[GridBox[{
        {
         TemplateBox[{
           CheckboxBox["MacOSX", {False, "MacOSX"}], "\" \"", 
           StyleBox[
           "\"Mac\"", FontSize -> 12, Editable -> False, StripOnInput -> 
            False]},
          "RowDefault"]}
       },
       DefaultBaseStyle->"Column",
       GridBoxAlignment->{"Columns" -> {{Left}}},
       GridBoxItemSize->{"Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
      "Column"], 
     TagBox[GridBox[{
        {
         TemplateBox[{
           CheckboxBox["Unix", {False, "Unix"}], "\" \"", 
           StyleBox[
           "\"Linux\"", FontSize -> 12, Editable -> False, StripOnInput -> 
            False]},
          "RowDefault"]}
       },
       DefaultBaseStyle->"Column",
       GridBoxAlignment->{"Columns" -> {{Left}}},
       GridBoxItemSize->{"Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
      "Column"]}
   },
   AutoDelete->False,
   BaseStyle->{"ControlStyle", ShowStringCharacters -> False},
   GridBoxAlignment->{"Columns" -> {{Left}}, "Rows" -> {{Top}}},
   GridBoxItemSize->{"Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}},
   GridBoxSpacings->{"Columns" -> {{2}}}],
  "Grid"]], "Output",
 Editable->False,
 Deletable->False,
 TaggingRules->{
  "CheckboxData" -> 
   "OEM6eJxFT11OwzAMlmi7MYY4AVfoIaoKpEobRTMIXrvOg4jEiWJHNLfHfWh5s78/+\
2vuaqhAskXY9ElCkhq27TeOP3i5FlweDAtsPwxd/C/D5jiMPXxC+U5mUmMn6HiRXW+\
4PCUNWuXLsDKF+peQFawOhtK0ZN6+Rh8wSobH1rswiDkbayT3CupCX5BZr+qXfRDjiXnXJPFOuXF+\
3dvkiNuihoeOBGOIKMMshF1DGdKZUSvu28Rq6kgLc/U8WMZ/cC7F5Ysnxe5PyD7FEd9y0GZP0+\
CCxT8UO2rm"},
 CellTags->{
  "CheckboxCell", "CompatibilityOperatingSystem", 
   "CompatibilityOperatingSystem-Checkboxes"},
 CellID->266496668,ExpressionUUID->"698c697c-4e40-4538-b90c-ad637d941c10"]
}, Closed]],

Cell[CellGroupData[{

Cell[TextData[{
 "Environments",
 Cell[BoxData[
  PaneSelectorBox[{True->
   TemplateBox[{"CompatibilityEvaluationEnvironment", 
     Cell[
      BoxData[
       FrameBox[
        Cell[
         TextData[{
          "Select all evaluation environments where your example is expected \
to be compatible. See ", 
           Cell[
            BoxData[
             StyleBox[
              TagBox[
               ButtonBox[
                StyleBox[
                "$EvaluationEnvironment", "SymbolsRefLink", 
                 ShowStringCharacters -> True, FontFamily -> 
                 "Source Sans Pro"], BaseStyle -> Dynamic[
                  FEPrivate`If[
                   CurrentValue["MouseOver"], {
                   "Link", FontColor -> RGBColor[0.8549, 0.39608, 0.1451]}, {
                   "Link"}]], ButtonData -> 
                "paclet:ref/$EvaluationEnvironment", ContentPadding -> False], 
               MouseAppearanceTag["LinkHand"]], ShowStringCharacters -> True, 
              FontFamily -> "Source Sans Pro"]]], " for more details."}], 
         "MoreInfoText"], Background -> GrayLevel[0.95], FrameMargins -> 20, 
        FrameStyle -> GrayLevel[0.9], RoundingRadius -> 5, ImageSize -> {
          Scaled[0.65], Automatic}]], "MoreInfoText", Deletable -> True, 
      CellTags -> {"SectionMoreInfoCompatibilityEvaluationEnvironment"}, 
      CellMargins -> {{66, 66}, {15, 15}}]},
    "MoreInfoOpenerButtonTemplate"]}, Dynamic[
    CurrentValue[
     EvaluationNotebook[], {TaggingRules, "ResourceCreateNotebook"}]],
   ImageSize->Automatic]],ExpressionUUID->
  "b06b204c-20b4-45d6-9223-33efa44e261f"]
}], "Subsubsection",
 Editable->False,
 Deletable->False,
 CellMargins->{{Inherited, Inherited}, {4, 6}},
 TaggingRules->{"TemplateGroupName" -> "CompatibilityEvaluationEnvironment"},
 DefaultNewCellStyle->"Item",
 FontSize->16,
 CellTags->{
  "CompatibilityEvaluationEnvironment", "Environments", "TemplateCellGroup"},
 CellID->984950825,ExpressionUUID->"fc1e3c69-5bee-4f1e-aa7b-98ffa204f36b"],

Cell[BoxData[
 TagBox[GridBox[{
    {
     TagBox[GridBox[{
        {
         TemplateBox[{
           CheckboxBox["Session", {False, "Session"}], "\" \"", 
           StyleBox[
            
            TemplateBox[{
             "\"Session\"", "\"Local or cloud interactive session\""}, 
             "PrettyTooltipTemplate"], FontSize -> 12, Editable -> False, 
            StripOnInput -> False]},
          "RowDefault"]},
        {
         TemplateBox[{
           CheckboxBox["WebEvaluation", {False, "WebEvaluation"}], "\" \"", 
           StyleBox[
            
            TemplateBox[{
             "\"WebEvaluation\"", 
              "\"Cloud evaluation initiated by an HTTP request\""}, 
             "PrettyTooltipTemplate"], FontSize -> 12, Editable -> False, 
            StripOnInput -> False]},
          "RowDefault"]},
        {
         TemplateBox[{
           CheckboxBox["BatchJob", {False, "BatchJob"}], "\" \"", 
           StyleBox[
            
            TemplateBox[{"\"BatchJob\"", "\"Remote batch job\""}, 
             "PrettyTooltipTemplate"], FontSize -> 12, Editable -> False, 
            StripOnInput -> False]},
          "RowDefault"]}
       },
       DefaultBaseStyle->"Column",
       GridBoxAlignment->{"Columns" -> {{Left}}},
       GridBoxItemSize->{"Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
      "Column"], 
     TagBox[GridBox[{
        {
         TemplateBox[{
           CheckboxBox["Script", {False, "Script"}], "\" \"", 
           StyleBox[
            
            TemplateBox[{"\"Script\"", "\"Script run in batch mode\""}, 
             "PrettyTooltipTemplate"], FontSize -> 12, Editable -> False, 
            StripOnInput -> False]},
          "RowDefault"]},
        {
         TemplateBox[{
           CheckboxBox["WebAPI", {False, "WebAPI"}], "\" \"", 
           StyleBox[
            
            TemplateBox[{
             "\"WebAPI\"", "\"API called through an HTTP request\""}, 
             "PrettyTooltipTemplate"], FontSize -> 12, Editable -> False, 
            StripOnInput -> False]},
          "RowDefault"]},
        {"\<\"\"\>"}
       },
       DefaultBaseStyle->"Column",
       GridBoxAlignment->{"Columns" -> {{Left}}},
       GridBoxItemSize->{"Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
      "Column"], 
     TagBox[GridBox[{
        {
         TemplateBox[{
           CheckboxBox["Subkernel", {False, "Subkernel"}], "\" \"", 
           StyleBox[
            
            TemplateBox[{"\"Subkernel\"", "\"Parallel or grid subkernel\""}, 
             "PrettyTooltipTemplate"], FontSize -> 12, Editable -> False, 
            StripOnInput -> False]},
          "RowDefault"]},
        {
         TemplateBox[{
           CheckboxBox["Scheduled", {False, "Scheduled"}], "\" \"", 
           StyleBox[
            
            TemplateBox[{"\"Scheduled\"", "\"Scheduled task\""}, 
             "PrettyTooltipTemplate"], FontSize -> 12, Editable -> False, 
            StripOnInput -> False]},
          "RowDefault"]},
        {"\<\"\"\>"}
       },
       DefaultBaseStyle->"Column",
       GridBoxAlignment->{"Columns" -> {{Left}}},
       GridBoxItemSize->{"Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
      "Column"]}
   },
   AutoDelete->False,
   BaseStyle->{"ControlStyle", ShowStringCharacters -> False},
   GridBoxAlignment->{"Columns" -> {{Left}}, "Rows" -> {{Top}}},
   GridBoxItemSize->{"Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}},
   GridBoxSpacings->{"Columns" -> {{2}}}],
  "Grid"]], "Output",
 Editable->False,
 Deletable->False,
 TaggingRules->{
  "CheckboxData" -> 
   "OEM6eJxdUdlug0AMlFoSQq+P6DsfQRCVqKomiiv1mcMRKHtp7Y3K33dpYaF9Wntsj2e82V0KG+\
BBIGwPjo3jFOK8w+aC7Tmm6K0nhhiQqNcKttDY3jAk4OoLWoUCHj+xLq6VcBX/dPg0O5a+o+\
mwdQJb2O0rbrpXXftNJaOkmfd8Q9HJtyz8cxAq88LpDfhKwBKG6j9Nf9OFe5I6vSvuIH0JQzW4Wfva\
Ha02aHmA51xL4/fUveh5WLYW6tpbrSSq8cAHM2JESeZYS9/QjFfXwklF+W0KT6VitMYi/\
zpIMjV4m4R++D535IdK5f+KNi+VIFzA8bwUvWvlsYcTkna2wY/B+BsXX5U0Ar8BBlWssA=="},
 CellTags->{
  "CheckboxCell", "CompatibilityEvaluationEnvironment", 
   "CompatibilityEvaluationEnvironment-Checkboxes"},
 CellID->962996741,ExpressionUUID->"cdfbb4d2-7953-485d-82ce-47bc658dbd79"]
}, Closed]],

Cell[CellGroupData[{

Cell[TextData[{
 "Cloud Support",
 Cell[BoxData[
  PaneSelectorBox[{True->
   TemplateBox[{"CompatibilityCloudSupport", 
     Cell[
      BoxData[
       FrameBox[
        Cell[
        "Specify whether your example is expected to work in the public \
cloud.", "MoreInfoText"], Background -> GrayLevel[0.95], FrameMargins -> 20, 
        FrameStyle -> GrayLevel[0.9], RoundingRadius -> 5, ImageSize -> {
          Scaled[0.65], Automatic}]], "MoreInfoText", Deletable -> True, 
      CellTags -> {"SectionMoreInfoCompatibilityCloudSupport"}, 
      CellMargins -> {{66, 66}, {15, 15}}]},
    "MoreInfoOpenerButtonTemplate"]}, Dynamic[
    CurrentValue[
     EvaluationNotebook[], {TaggingRules, "ResourceCreateNotebook"}]],
   ImageSize->Automatic]],ExpressionUUID->
  "8fda60d5-9065-40fe-9255-2c0b39e29bb1"]
}], "Subsubsection",
 Editable->False,
 Deletable->False,
 CellMargins->{{Inherited, Inherited}, {4, 6}},
 TaggingRules->{"TemplateGroupName" -> "CompatibilityCloudSupport"},
 DefaultNewCellStyle->"Text",
 FontSize->16,
 CellTags->{"Cloud Support", "CompatibilityCloudSupport", "TemplateCellGroup"},
 CellID->706896916,ExpressionUUID->"74aba099-d0ba-4cf0-8327-72aea3129a12"],

Cell[BoxData[
 TagBox[GridBox[{
    {
     TagBox[GridBox[{
        {
         TemplateBox[{
           CheckboxBox[True, {False, True}], "\" \"", 
           StyleBox[
           "\"Supported in cloud\"", FontSize -> 12, Editable -> False, 
            StripOnInput -> False]},
          "RowDefault"]}
       },
       DefaultBaseStyle->"Column",
       GridBoxAlignment->{"Columns" -> {{Left}}},
       GridBoxItemSize->{"Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
      "Column"]}
   },
   AutoDelete->False,
   BaseStyle->{"ControlStyle", ShowStringCharacters -> False},
   GridBoxAlignment->{"Columns" -> {{Left}}, "Rows" -> {{Top}}},
   GridBoxItemSize->{"Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}},
   GridBoxSpacings->{"Columns" -> {{2}}}],
  "Grid"]], "Output",
 Editable->False,
 Deletable->False,
 TaggingRules->{
  "CheckboxData" -> 
   "OEM6eJxFjkFqwzAQRUlx4iQNXXTXXS7gQ6SiBUNpSiYXUOwJFZE0g2YG6ttXhoZuH+/x/\
2HbwRJ0igiroymbdtC6bxxuOF4X0nwEUWnOxbB6vWKSO70+\
SHOy2j2DMVNRHPch74dINt6L9VchxqITvDhK7DVcQgw6uVn6y+\
rekTVQFtkcTClVa5hPULSUxS06eOqzYuGC6mcR2leiiD538OhMatLnelyW7z4K/\
sP5rTSflCvbnVDIyoDniRHatx+fOOIvUvJZAA=="},
 CellTags->{
  "CheckboxCell", "CompatibilityCloudSupport", 
   "CompatibilityCloudSupport-Checkboxes"},
 CellID->705317916,ExpressionUUID->"0e93d89b-2228-4140-acbf-b93bc05df417"]
}, Closed]],

Cell[CellGroupData[{

Cell[TextData[{
 "Required Features",
 Cell[BoxData[
  PaneSelectorBox[{True->
   TemplateBox[{"CompatibilityFeatures", 
     Cell[
      BoxData[
       FrameBox[
        Cell[
         TextData[{"Choose any other features that are ", 
           Cell[
            BoxData[
             StyleBox[
              StyleBox["required", "TI"], ShowStringCharacters -> True, 
              FontFamily -> "Source Sans Pro"]]], 
           " in order to use your example."}], "MoreInfoText"], Background -> 
        GrayLevel[0.95], FrameMargins -> 20, FrameStyle -> GrayLevel[0.9], 
        RoundingRadius -> 5, ImageSize -> {
          Scaled[0.65], Automatic}]], "MoreInfoText", Deletable -> True, 
      CellTags -> {"SectionMoreInfoCompatibilityFeatures"}, 
      CellMargins -> {{66, 66}, {15, 15}}]},
    "MoreInfoOpenerButtonTemplate"]}, Dynamic[
    CurrentValue[
     EvaluationNotebook[], {TaggingRules, "ResourceCreateNotebook"}]],
   ImageSize->Automatic]],ExpressionUUID->
  "bf30f052-d2f3-4711-b48a-6f4800232137"]
}], "Subsubsection",
 Editable->False,
 Deletable->False,
 CellMargins->{{Inherited, Inherited}, {4, 6}},
 TaggingRules->{"TemplateGroupName" -> "CompatibilityFeatures"},
 DefaultNewCellStyle->"Item",
 FontSize->16,
 CellTags->{"CompatibilityFeatures", "Required Features", "TemplateCellGroup"},
 CellID->128722862,ExpressionUUID->"5f0f3af8-fce6-48ba-8d68-b81230e5fa69"],

Cell[BoxData[
 TagBox[GridBox[{
    {
     TagBox[GridBox[{
        {
         TemplateBox[{
           CheckboxBox[False, {False, "Notebooks"}], "\" \"", 
           StyleBox[
           "\"Notebooks\"", FontSize -> 12, Editable -> False, StripOnInput -> 
            False]},
          "RowDefault"]}
       },
       DefaultBaseStyle->"Column",
       GridBoxAlignment->{"Columns" -> {{Left}}},
       GridBoxItemSize->{"Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
      "Column"], 
     TagBox[GridBox[{
        {
         TemplateBox[{
           CheckboxBox[False, {False, "Parallel Kernels"}], "\" \"", 
           StyleBox[
           "\"Parallel Kernels\"", FontSize -> 12, Editable -> False, 
            StripOnInput -> False]},
          "RowDefault"]}
       },
       DefaultBaseStyle->"Column",
       GridBoxAlignment->{"Columns" -> {{Left}}},
       GridBoxItemSize->{"Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
      "Column"], 
     TagBox[GridBox[{
        {
         TemplateBox[{
           CheckboxBox[False, {False, "Cloud Access"}], "\" \"", 
           StyleBox[
           "\"Cloud Access\"", FontSize -> 12, Editable -> False, 
            StripOnInput -> False]},
          "RowDefault"]}
       },
       DefaultBaseStyle->"Column",
       GridBoxAlignment->{"Columns" -> {{Left}}},
       GridBoxItemSize->{"Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
      "Column"]}
   },
   AutoDelete->False,
   BaseStyle->{"ControlStyle", ShowStringCharacters -> False},
   GridBoxAlignment->{"Columns" -> {{Left}}, "Rows" -> {{Top}}},
   GridBoxItemSize->{"Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}},
   GridBoxSpacings->{"Columns" -> {{2}}}],
  "Grid"]], "Output",
 Editable->False,
 Deletable->False,
 TaggingRules->{
  "CheckboxData" -> 
   "OEM6eJxlj0FOwzAQRRFNSAMVYsO+F8ghIotKEaitai7guBMR1fZYnhkJ3x5HSAXEbv6b/xevv+\
90rTk70HcH4Sjc6UZ9gL3Aebqh6m2mQuqBwdO0+s7TLVUnKYt2jwwj4oV+ndfv09Ek4xy47SukAI7+\
k2t3oxzKedtbC0R/U6fXx4QREmf9rNBHw/M4u5nzDgxLgtJoDpFnDERtL4y+\
NOyigU58ILXq9OMQGFJMwGYp6rYPWctIUOQelFAZDaHIU70zjuAHLt5U7TEUtjkBoSQL7zmCbl4+\
jY8OvgA43nBJ"},
 CellTags->{
  "CheckboxCell", "CompatibilityFeatures", "CompatibilityFeatures-Checkboxes"},
 CellID->359275078,ExpressionUUID->"06ea075a-61bd-4618-a647-9e5041e4db19"]
}, Closed]]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell[TextData[{
 "Author Notes",
 Cell[BoxData[
  PaneSelectorBox[{True->
   TemplateBox[{"Author Notes", 
     Cell[
      BoxData[
       FrameBox[
        Cell[
        "This section, when used, will appear near the bottom of the \
published resource. Content displayed in this section can include background, \
possible improvements, additional information and/or implementation details \
that are otherwise beyond the scope of the example documentation.", 
         "MoreInfoText"], Background -> GrayLevel[0.95], FrameMargins -> 20, 
        FrameStyle -> GrayLevel[0.9], RoundingRadius -> 5, ImageSize -> {
          Scaled[0.65], Automatic}]], "MoreInfoText", Deletable -> True, 
      CellTags -> {"SectionMoreInfoAuthorNotes"}, 
      CellMargins -> {{66, 66}, {15, 15}}]},
    "MoreInfoOpenerButtonTemplate"]}, Dynamic[
    CurrentValue[
     EvaluationNotebook[], {TaggingRules, "ResourceCreateNotebook"}]],
   ImageSize->Automatic]],ExpressionUUID->
  "a6cae47c-4c64-4f2f-a58c-afab4c598a4a"]
}], "Section",
 Editable->False,
 Deletable->False,
 TaggingRules->{"TemplateGroupName" -> "Author Notes"},
 DefaultNewCellStyle->"Text",
 CellTags->{"Author Notes", "TemplateCellGroup"},
 CellID->50433876,ExpressionUUID->"9afd40bf-fdfd-4035-ba6b-b8bb412dbcb4"],

Cell["Additional information about limitations, issues, etc.", "Text",
 CellEventActions->{Inherited, {"KeyDown", "\t"} :> Replace[SelectionMove[
       SelectedNotebook[], After, Cell]; NotebookFind[
       SelectedNotebook[], "TabNext", Next, CellTags, AutoScroll -> True, 
       WrapAround -> True], Blank[NotebookSelection] :> SelectionMove[
       SelectedNotebook[], All, CellContents, AutoScroll -> True]], 
   PassEventsDown -> False, PassEventsUp -> False},
 CellTags->{"DefaultContent", "TabNext"},
 CellID->3773185,ExpressionUUID->"58ce48af-4e66-4a71-b339-5de3e52f5a3e"]
}, Open  ]]
}, Open  ]]
},
WindowSize->{1440, 756},
WindowMargins->{{0, Automatic}, {Automatic, 0}},
TaggingRules->{
 "ResourceType" -> "Example", "ResourceCreateNotebook" -> True, 
  "TemplateVersion" -> "2023.03.30", "CreationTimestamp" -> 
  3.89095521294848`16.34263122102222*^9, "UpdatedTimestamp" -> 
  3.890955212948555`16.342631221022227*^9, "CompatibilityTest" -> HoldComplete[
    BinaryDeserialize[
     BaseDecode[
     "OEM6eJzVWFtv2zYUri+\
5IPEyNECB9a0PeciCbR2GAduaXerJSeohSZPQ6XNo6UgRTJMqSaXxv98hJTm2I7mS7WCdHxJapL7z8\
dz40X5N7TpiGImYe0f3kQSlQsH9mlq7jEPQfj13uq7qXR//\
Ntrcw39rRx9jytTO3geQZv48HvZBSt9+9t+aFYQO4RIHLSeWErj+QFkM/\
jO1e3SHI6rNW0JDX4gBrmqehkqrVo8GQciDq5iBIq0rUCKWLvRGEZBmh2qKNJvvuQuFLNf+\
ZsIdmGUJ4J4juIZ7fUH1rd8o2vk5gKfIfmaPjJSGocNCpH3TAT/\
k4STdm4dXXhlS2Wt5S1XzPGYMif3weDI1cAUBUgWJTP0wiKV1zXi7f5UldQWRUKEWcpQAJjgqBWrY+\
NXU5jENWSwxMjX11QV1GeguV5oyRr4pYuivL+Lshdza6ompyGwRLTEf/hGhsdc4o5HdQ8xd86a/\
llgmLwuda8lRZdJ6O8EiEQu1eUyY0E6N1G5I/c0fEw/qh1uWPOavIt+WJX/\
gNwu81CBg7G11xCdui0Cp38qiZoP3scYwgmcKagsjzagLbcyrFcJum6LrAKMj8BB3+\
51gHgYSE5OrP8sCX8jwDgFv7pK2cCIBv0m1cc1V2g5yvNGpik6jCLh3zW8p9xh4DjCm5jpmVRbm+\
Ai/VvaSi7DY8VIE8rwHQ9yABmPuRIo4Wh4Ua7fVZmaE7eAOE/\
qFg4sCIUNQ3zu34A764h4f7zw8NtZJK5uz33bQHo2ZtvXNdQ5T8nX2iEBSm7mhLt3NxoFQg564jjwc\
p32/OMorAJ8KcAMfbGQlsHnCRJ+\
ym1tzpE16VP1S1uwJ6Heh5wFPGlH5cj2m3B05tyJ0oRNSJoJJYq2UmNR4SuL5ik2Z8kEedYqzz+\
2sOZMIfIwBd012Uw8wLzN4icfFeL/\
TBibAsiNlrSdjW9pLdokqh102yJIulSHqp6oUeL9KjaVSZtbqlIcyf57Dp7E/\
c32cFIg6q0p5L1ZwCgF1R92AC5l0pyzWqmmikV98h2Ut5eDOFN68MlzSzLweW1frp/\
imbYzHVf0WgM7a2LTFlZUSlsQ2Mgfsi1SBegq6hdWIEtqq5nWzutsxdWn5qY0u9uwAM3Wzy62x0Wec\
3BizLth4Cly672U7UuOT4RFs/8HbY/MTNmvqqPIxSLngoUvZhRQRoLesnluU8wTR/\
EtEPW2GrbZSwg2t9r5U7cq1HaVsyQjpj4YmhzbbVoz0xGrgbJqQHWKBzkBTz9wP0hsY2XRCnVxAXiY\
rXl+BD9Jk96ts6qG7rCYqE0ZnaCW3p/EdKrmCNk/R54+uns/s5+\
At3gmWuazMuUlU0PcHhSjVBH01nHkK/udCJLwEDmgAxMWAVNPt14WYyWmXlweJsYWF/JOZnK/\
sS3qvjJ5fCOoLU/EXy0ehgqx/CmuL6Pz9Qh6zwr64bP8nSn6hboEAP362X81KZ2fp4FoF/\
7oQ5ikkezHpKfcsLNS/K8RfTplXxS0rxX8v54//VoAvRfILkt2/\
Fu6DuJJG2H9mK2QZ3X1Y8rjKVdsLU11Qbnfn/Mae/TiO1RZHs2bny+6Vwq5Sfi8TnHKi+1+K4NOh"]\
]], "DefinitionNotebookFramework" -> "DefinitionNotebookClient", 
  "RuntimeConfiguration" -> {
   "Contexts" -> {"ExampleResource`", "ExampleResource`DefinitionNotebook`"}, 
    "DefaultContentMethod" -> "Tagged", "HintPods" -> True, "LoadingMethod" -> 
    "Paclet", "PacletName" -> "ExampleResource", "SourceID" -> 
    "d65b3f47f2a6f9c214c0e62149d7041d2c6177bd"}, "ToolsOpen" -> True, 
  "StatusMessage" -> "", "SubmissionReviewData" -> {"Review" -> False}, 
  "TryRealOnly" -> False, "AutoUpdate" -> True},
CreateCellID->True,
DynamicEvaluationTimeout->60,
FrontEndVersion->"13.2 for Mac OS X x86 (64-bit) (January 30, 2023)",
StyleDefinitions->Notebook[{
   Cell[
    StyleData[StyleDefinitions -> "Default.nb"]], 
   Cell[
    StyleData[All, "Working"], WindowToolbars -> {}, DockedCells -> {
      Cell[
       BoxData[
        TemplateBox[{}, "MainGridTemplate"]], "DockedCell", 
       CellMargins -> {{-10, -10}, {-8, -8}}, CellFrame -> 0, Background -> 
       RGBColor[0.14902, 0.51765, 0.54902], CellTags -> {"MainDockedCell"}, 
       CacheGraphics -> False], 
      Cell[
       BoxData[
        TemplateBox[{}, "ToolsGridTemplate"]], "DockedCell", 
       TaggingRules -> {"Tools" -> True}, CellTags -> {"ToolbarDockedCell"}, 
       CellFrameMargins -> {{0, 0}, {2, 2}}, CellFrame -> {{0, 0}, {1, 0}}, 
       CacheGraphics -> False, CellOpen -> Dynamic[
         CurrentValue[
          EvaluationNotebook[], {TaggingRules, "ToolsOpen"}, True]]]}, 
    PrivateNotebookOptions -> {
     "FileOutlineCache" -> False, "SafeFileOpen" -> "IgnoreCache"}, 
    CellLabelAutoDelete -> False, 
    CodeAssistOptions -> {"AutoDetectHyperlinks" -> False}, 
    AutoQuoteCharacters -> {}, PasteAutoQuoteCharacters -> {}], 
   Cell["Hint Styles", "Section"], 
   Cell[
    StyleData["MoreInfoText", StyleDefinitions -> StyleData["Text"]], 
    FontColor -> GrayLevel[0.25]], 
   Cell[
    StyleData["ErrorText", StyleDefinitions -> StyleData["Text"]], 
    ShowCellBracket -> False, CellMargins -> {{66, Inherited}, {10, 10}}, 
    CellElementSpacings -> {"CellMinHeight" -> 0, "ClosedCellHeight" -> 0}, 
    FontWeight -> Bold, FontColor -> RGBColor[1, 0, 0]], 
   Cell[
    StyleData["WarningText", StyleDefinitions -> StyleData["Text"]], 
    ShowCellBracket -> False, CellMargins -> {{66, 35}, {0, 0}}, FontSize -> 
    14, GridBoxOptions -> {BaseStyle -> {}}], 
   Cell["Template Boxes", "Section"], 
   Cell[
    StyleData["MoreInfoOpenerIconTemplate"], 
    TemplateBoxOptions -> {
     DisplayFunction -> (PaneSelectorBox[{False -> GraphicsBox[{
            Thickness[0.090909], 
            StyleBox[{
              
              JoinedCurveBox[{{{1, 4, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1,
                3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}}}, CompressedData["
1:eJxTTMoPSmVmYGBgBGJJIGYC4oSnF5RuVyo58OlumvteXcIBxj//Pfjx0tky
Dp8u+SYJzFB0kGQJ49MtUnBYIKV/V4UNRis5GHKskYl6AlOnDNUHM0cFaq4I
nD/niMKGogx+OB+oO8X6Phtcf/+hrxox/Qxw80HKftZ9sYfZ/7BKZJ37w1f2
MPfB+DD3w/h+SQIRlluE4foh9vDBzYfQHHD7izMmvq2xZ4K7r9CW6/rigr/2
MPfD+DD/wfgw/8P0w8IHZj4s/GD2w8IX5j708AcA2Xetpg==
               "], CurveClosed -> {1}]}, {
              JoinForm[{"Miter", 3.25}], 
              Thickness[0.045818], 
              RGBColor[0.62744, 0.62744, 0.62744, 1.]}, StripOnInput -> 
             False], 
            StyleBox[{
              
              FilledCurveBox[{{{1, 4, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1,
                 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}}, {{0, 2, 0}, {0, 1, 
                0}, {0, 1, 0}, {0, 1, 0}, {1, 3, 3}, {1, 3, 3}, {0, 1, 0}, {1,
                 3, 3}, {1, 3, 3}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                0}, {0, 1, 0}, {0, 1, 0}, {1, 3, 3}, {1, 3, 3}, {0, 1, 
                0}}}, {CompressedData["
1:eJxTTMoPSmViYGCQBGIQ3b48/JRRi4jD3qBpin2m8g5n6j32194VhvNZnvdo
vPUVdoh2sntxM0feQfiT4/m0q0IOQNnSwtvyDmxCIvbHYoQcMhnyG1lUFRyk
eR/oTlAAym/iKVyTjeAf2aiXt/gggt+odqhtubgiXP+k00CLYxXh5mdrf5t+
d7Ii3P5LDPeYOE8pwt33vfTBHMGnig4w98P4j5fOPqJgIArn539oPRlyUBSu
/9OGgOxZ5mJw88sKgS5aKwa3XzOm/9DXF2Jw98H4MPfD+DD/wfTD/A8zHxY+
MPth4QdzHyx80cMfAIsMpwk=
                "], CompressedData["
1:eJxTTMoPSmViYGCQB2IQXTFnkfJOGwmHsNp125Lq+R1g/G8aMf2HvvI4KP39
VvrgjgAGH6b+c19wicp0IQeBKrPVduICcL6EWjDr4ksCqPLTBeH8211/U7+n
CMH5S+7v45tjLAznX773gHvySwS/qdhtyrc2ETj/04aA7FnfReH8RxHi2y8e
EIPzNUHOzRCH8x8vnX1E4QOCP+/98mPe5RJw/o9goAoWSTj/6vMs7W/TJR0O
X9ZOlVwk4PB2no3OlVsI/jKgcRs+STlonhY4vstCzCFoh1zr64syDkBXssXP
EHO4WvFSzbADwa9JNAo1yJKA82H+gfFh/oXxA29JA7Ug+GY2e4OmJQrB+f83
VX/aMEEQzrerjFhhelYAzofFB3r8AgApYdcE
                "]}]}, {
              FaceForm[
               RGBColor[0.62744, 0.62744, 0.62744, 1.]]}, StripOnInput -> 
             False]}, ImageSize -> {11., 11.}, 
           PlotRange -> {{0., 11.}, {0., 11.}}, AspectRatio -> Automatic], 
         True -> GraphicsBox[{
            Thickness[0.090909], 
            StyleBox[{
              
              JoinedCurveBox[{{{1, 4, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1,
                3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}}}, CompressedData["
1:eJxTTMoPSmVmYGBgBGJJIGYC4oSnF5RuVyo58OlumvteXcIBxj//Pfjx0tky
Dp8u+SYJzFB0kGQJ49MtUnBYIKV/V4UNRis5GHKskYl6AlOnDNUHM0cFaq4I
nD/niMKGogx+OB+oO8X6Phtcf/+hrxox/Qxw80HKftZ9sYfZ/7BKZJ37w1f2
MPfB+DD3w/h+SQIRlluE4foh9vDBzYfQHHD7izMmvq2xZ4K7r9CW6/rigr/2
MPfD+DD/wfgw/8P0w8IHZj4s/GD2w8IX5j708AcA2Xetpg==
               "], CurveClosed -> {1}]}, {
              JoinForm[{"Miter", 3.25}], 
              Thickness[0.045818], 
              RGBColor[0.5, 0.5, 0.5, 1.]}, StripOnInput -> False], 
            StyleBox[{
              
              FilledCurveBox[{{{1, 4, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1,
                3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}}}, CompressedData["
1:eJxTTMoPSmVmYGBgBGJJIGYC4oSnF5RuVyo58OlumvteXcIBxj//Pfjx0tky
Dp8u+SYJzFB0kGQJ49MtUnBYIKV/V4UNRis5GHKskYl6AlOnDNUHM0cFaq4I
nD/niMKGogx+OB+oO8X6Phtcf/+hrxox/Qxw80HKftZ9sYfZ/7BKZJ37w1f2
MPfB+DD3w/h+SQIRlluE4foh9vDBzYfQHHD7izMmvq2xZ4K7r9CW6/rigr/2
MPfD+DD/wfgw/8P0w8IHZj4s/GD2w8IX5j708AcA2Xetpg==
               "]]}, {
              FaceForm[
               RGBColor[0.5, 0.5, 0.5, 1.]]}, StripOnInput -> False], 
            StyleBox[{
              
              FilledCurveBox[{{{1, 4, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1,
                 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}}, {{0, 2, 0}, {0, 1, 
                0}, {0, 1, 0}, {0, 1, 0}, {1, 3, 3}, {1, 3, 3}, {0, 1, 0}, {1,
                 3, 3}, {1, 3, 3}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                0}, {0, 1, 0}, {0, 1, 0}, {1, 3, 3}, {1, 3, 3}, {0, 1, 
                0}}}, {CompressedData["
1:eJxTTMoPSmViYGCQBGIQ3b48/JRRi4jD3qBpin2m8g5n6j32194VhvNZnvdo
vPUVdoh2sntxM0feQfiT4/m0q0IOQNnSwtvyDmxCIvbHYoQcMhnyG1lUFRyk
eR/oTlAAym/iKVyTjeAf2aiXt/gggt+odqhtubgiXP+k00CLYxXh5mdrf5t+
d7Ii3P5LDPeYOE8pwt33vfTBHMGnig4w98P4j5fOPqJgIArn539oPRlyUBSu
/9OGgOxZ5mJw88sKgS5aKwa3XzOm/9DXF2Jw98H4MPfD+DD/wfTD/A8zHxY+
MPth4QdzHyx80cMfAIsMpwk=
                "], CompressedData["
1:eJxTTMoPSmViYGCQB2IQXTFnkfJOGwmHsNp125Lq+R1g/G8aMf2HvvI4KP39
VvrgjgAGH6b+c19wicp0IQeBKrPVduICcL6EWjDr4ksCqPLTBeH8211/U7+n
CMH5S+7v45tjLAznX773gHvySwS/qdhtyrc2ETj/04aA7FnfReH8RxHi2y8e
EIPzNUHOzRCH8x8vnX1E4QOCP+/98mPe5RJw/o9goAoWSTj/6vMs7W/TJR0O
X9ZOlVwk4PB2no3OlVsI/jKgcRs+STlonhY4vstCzCFoh1zr64syDkBXssXP
EHO4WvFSzbADwa9JNAo1yJKA82H+gfFh/oXxA29JA7Ug+GY2e4OmJQrB+f83
VX/aMEEQzrerjFhhelYAzofFB3r8AgApYdcE
                "]}]}, {
              FaceForm[
               RGBColor[0.99998, 0.99998, 0.99998, 1.]]}, StripOnInput -> 
             False]}, ImageSize -> {11., 11.}, 
           PlotRange -> {{0., 11.}, {0., 11.}}, AspectRatio -> Automatic]}, 
        Dynamic[
         CurrentValue["MouseOver"]], ImageSize -> Automatic, FrameMargins -> 
        0]& )}], 
   Cell[
    StyleData["MoreInfoOpenerButtonTemplate"], 
    TemplateBoxOptions -> {DisplayFunction -> (AdjustmentBox[
        DynamicModuleBox[{
         RSNB`mPosRegion$$, RSNB`attachPos$$, RSNB`offsetPos$$, 
          RSNB`horizontalRegion$$, RSNB`verticalRegion$$, 
          RSNB`chooseAttachLocation$$}, 
         TagBox[
          TemplateBox[{
            TemplateBox[{}, "MoreInfoOpenerIconTemplate"], 
            "\"Click for more information\""}, "PrettyTooltipTemplate"], 
          EventHandlerTag[{"MouseDown" :> AttachCell[
              ParentBox[
               EvaluationBox[]], #2, 
              RSNB`chooseAttachLocation$$[], 
              RemovalConditions -> {"EvaluatorQuit", "MouseClickOutside"}], 
            Method -> "Preemptive", PassEventsDown -> Automatic, PassEventsUp -> 
            True}]], 
         DynamicModuleValues :> {{DownValues[RSNB`mPosRegion$$] = {HoldPattern[
                RSNB`mPosRegion$$[]] :> RSNB`mPosRegion$$[
                Ceiling[MousePosition["WindowScaled"] 3]], HoldPattern[
                RSNB`mPosRegion$$[
                 Pattern[RSNB`reg, {
                   Blank[Integer], 
                   Blank[Integer]}]]] :> RSNB`reg, HoldPattern[
                RSNB`mPosRegion$$[
                 BlankNullSequence[]]] :> None}}, {
           DownValues[RSNB`attachPos$$] = {HoldPattern[
                RSNB`attachPos$$[{
                  Pattern[RSNB`h$, 
                   Blank[Integer]], 
                  Pattern[RSNB`v$, 
                   Blank[Integer]]}]] :> {
                RSNB`horizontalRegion$$[RSNB`h$], 
                RSNB`verticalRegion$$[RSNB`v$]}}}, {
           DownValues[RSNB`offsetPos$$] = {HoldPattern[
                RSNB`offsetPos$$[{
                  Pattern[RSNB`h$, 
                   Blank[Integer]], 
                  Pattern[RSNB`v$, 
                   Blank[Integer]]}]] :> {
                RSNB`horizontalRegion$$[4 - RSNB`h$], 
                RSNB`verticalRegion$$[4 - RSNB`v$]}}}, {
           DownValues[RSNB`horizontalRegion$$] = {HoldPattern[
                RSNB`horizontalRegion$$[1]] :> Left, HoldPattern[
                RSNB`horizontalRegion$$[2]] :> Center, HoldPattern[
                RSNB`horizontalRegion$$[3]] :> Right}}, {
           DownValues[RSNB`verticalRegion$$] = {HoldPattern[
                RSNB`verticalRegion$$[1]] :> Top, HoldPattern[
                RSNB`verticalRegion$$[2]] :> Top, HoldPattern[
                RSNB`verticalRegion$$[3]] :> Top}}, {
           DownValues[RSNB`chooseAttachLocation$$] = {HoldPattern[
                RSNB`chooseAttachLocation$$[]] :> 
              With[{RSNB`p$ = RSNB`mPosRegion$$[]}, 
                Apply[Sequence, {
                  RSNB`offsetPos$$[RSNB`p$], {-30, 30}, 
                  RSNB`attachPos$$[RSNB`p$]}]]}}}], BoxBaselineShift -> -0.5, 
        BoxMargins -> 0.2]& )}], 
   Cell[
    StyleData["InlineMoreInfoOpenerButtonTemplate"], 
    TemplateBoxOptions -> {DisplayFunction -> (AdjustmentBox[
        DynamicModuleBox[{
         RSNB`mPosRegion$$, RSNB`attachPos$$, RSNB`offsetPos$$, 
          RSNB`horizontalRegion$$, RSNB`verticalRegion$$, 
          RSNB`chooseAttachLocation$$}, 
         TagBox[
          TemplateBox[{
            TemplateBox[{}, "MoreInfoOpenerIconTemplate"], #4}, 
           "PrettyTooltipTemplate"], 
          EventHandlerTag[{"MouseDown" :> AttachCell[
              ParentBox[
               EvaluationBox[]], #2, 
              RSNB`chooseAttachLocation$$[], 
              RemovalConditions -> {"EvaluatorQuit", "MouseClickOutside"}], 
            Method -> "Preemptive", PassEventsDown -> Automatic, PassEventsUp -> 
            True}]], 
         DynamicModuleValues :> {{DownValues[RSNB`mPosRegion$$] = {HoldPattern[
                RSNB`mPosRegion$$[]] :> RSNB`mPosRegion$$[
                Ceiling[MousePosition["WindowScaled"] 3]], HoldPattern[
                RSNB`mPosRegion$$[
                 Pattern[RSNB`reg, {
                   Blank[Integer], 
                   Blank[Integer]}]]] :> RSNB`reg, HoldPattern[
                RSNB`mPosRegion$$[
                 BlankNullSequence[]]] :> None}}, {
           DownValues[RSNB`attachPos$$] = {HoldPattern[
                RSNB`attachPos$$[{
                  Pattern[RSNB`h$, 
                   Blank[Integer]], 
                  Pattern[RSNB`v$, 
                   Blank[Integer]]}]] :> {
                RSNB`horizontalRegion$$[RSNB`h$], 
                RSNB`verticalRegion$$[RSNB`v$]}}}, {
           DownValues[RSNB`offsetPos$$] = {HoldPattern[
                RSNB`offsetPos$$[{
                  Pattern[RSNB`h$, 
                   Blank[Integer]], 
                  Pattern[RSNB`v$, 
                   Blank[Integer]]}]] :> {
                RSNB`horizontalRegion$$[4 - RSNB`h$], 
                RSNB`verticalRegion$$[4 - RSNB`v$]}}}, {
           DownValues[RSNB`horizontalRegion$$] = {HoldPattern[
                RSNB`horizontalRegion$$[1]] :> Left, HoldPattern[
                RSNB`horizontalRegion$$[2]] :> Center, HoldPattern[
                RSNB`horizontalRegion$$[3]] :> Right}}, {
           DownValues[RSNB`verticalRegion$$] = {HoldPattern[
                RSNB`verticalRegion$$[1]] :> Top, HoldPattern[
                RSNB`verticalRegion$$[2]] :> Top, HoldPattern[
                RSNB`verticalRegion$$[3]] :> Top}}, {
           DownValues[RSNB`chooseAttachLocation$$] = {HoldPattern[
                RSNB`chooseAttachLocation$$[]] :> 
              With[{RSNB`p$ = RSNB`mPosRegion$$[]}, 
                Apply[Sequence, {
                  RSNB`offsetPos$$[RSNB`p$], {-30, 30}, 
                  RSNB`attachPos$$[RSNB`p$]}]]}}}], BoxBaselineShift -> -0.5, 
        BoxMargins -> 0.2]& )}], 
   Cell[
    StyleData["ClickToCopyTemplate"], 
    TemplateBoxOptions -> {
     DisplayFunction -> (PaneSelectorBox[{False -> TagBox[
           GridBox[{{#, 
              ButtonBox[
               GraphicsBox[{
                 GrayLevel[0.85], 
                 Thickness[
                  NCache[2/45, 0.044444]], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                   0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 
                   0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                   0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                   0}, {0, 1, 0}, {0, 1, 0}}}, {{{10.5, 18.75}, {10.5, 18.}, {
                   9., 18.}, {9., 15.75}, {13.5, 15.75}, {13.5, 18.}, {12., 
                   18.}, {12., 18.75}}, {{6., 18.}, {6., 4.5}, {16.5, 4.5}, {
                   16.5, 18.}, {14.25, 18.}, {14.25, 17.25}, {15.75, 17.25}, {
                   15.75, 5.25}, {6.75, 5.25}, {6.75, 17.25}, {8.25, 17.25}, {
                   8.25, 18.}}, {{9.75, 17.25}, {12.75, 17.25}, {12.75, 
                   16.5}, {9.75, 16.5}}}], 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                  0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 
                  0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{8.25, 14.25}, {
                  14.25, 14.25}, {14.25, 13.5}, {8.25, 13.5}}, {{8.25, 12.}, {
                  14.25, 12.}, {14.25, 11.25}, {8.25, 11.25}}, {{8.25, 
                  9.75}, {14.25, 9.75}, {14.25, 9.}, {8.25, 9.}}, {{8.25, 
                  7.5}, {14.25, 7.5}, {14.25, 6.75}, {8.25, 6.75}}}]}, 
                ImageSize -> 12], ButtonFunction :> Null, 
               Appearance -> {
                "Default" -> None, "Hover" -> None, "Pressed" -> None}, 
               Evaluator -> Automatic, Method -> "Preemptive"]}}, 
            GridBoxAlignment -> {"Columns" -> {{Left}}, "Rows" -> {{Center}}},
             AutoDelete -> False, 
            GridBoxItemSize -> {
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
            GridBoxSpacings -> {"Columns" -> {{0.4}}}], "Grid"], True -> 
         DynamicModuleBox[{RSNB`clickTime$$ = 0., RSNB`timeout$$ = 3.}, 
           TagBox[
            GridBox[{{#, 
               TagBox[
                ButtonBox[
                 DynamicBox[
                  ToBoxes[
                   Refresh[
                    If[AbsoluteTime[] - RSNB`clickTime$$ > RSNB`timeout$$, 
                    RawBoxes[
                    TemplateBox[{
                    PaneSelectorBox[{False -> GraphicsBox[{
                    GrayLevel[0.65], 
                    Thickness[
                    NCache[2/45, 0.044444]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                    0}, {0, 1, 0}, {0, 1, 0}}}, {{{10.5, 18.75}, {10.5, 
                    18.}, {9., 18.}, {9., 15.75}, {13.5, 15.75}, {13.5, 
                    18.}, {12., 18.}, {12., 18.75}}, {{6., 18.}, {6., 4.5}, {
                    16.5, 4.5}, {16.5, 18.}, {14.25, 18.}, {14.25, 17.25}, {
                    15.75, 17.25}, {15.75, 5.25}, {6.75, 5.25}, {6.75, 
                    17.25}, {8.25, 17.25}, {8.25, 18.}}, {{9.75, 17.25}, {
                    12.75, 17.25}, {12.75, 16.5}, {9.75, 16.5}}}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 
                    0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{8.25, 
                    14.25}, {14.25, 14.25}, {14.25, 13.5}, {8.25, 13.5}}, {{
                    8.25, 12.}, {14.25, 12.}, {14.25, 11.25}, {8.25, 
                    11.25}}, {{8.25, 9.75}, {14.25, 9.75}, {14.25, 9.}, {8.25,
                     9.}}, {{8.25, 7.5}, {14.25, 7.5}, {14.25, 6.75}, {8.25, 
                    6.75}}}]}, ImageSize -> 12], True -> GraphicsBox[{
                    RGBColor[0.98824, 0.41961, 0.20392], 
                    Thickness[
                    NCache[2/45, 0.044444]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                    0}, {0, 1, 0}, {0, 1, 0}}}, {{{10.5, 18.75}, {10.5, 
                    18.}, {9., 18.}, {9., 15.75}, {13.5, 15.75}, {13.5, 
                    18.}, {12., 18.}, {12., 18.75}}, {{6., 18.}, {6., 4.5}, {
                    16.5, 4.5}, {16.5, 18.}, {14.25, 18.}, {14.25, 17.25}, {
                    15.75, 17.25}, {15.75, 5.25}, {6.75, 5.25}, {6.75, 
                    17.25}, {8.25, 17.25}, {8.25, 18.}}, {{9.75, 17.25}, {
                    12.75, 17.25}, {12.75, 16.5}, {9.75, 16.5}}}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 
                    0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{8.25, 
                    14.25}, {14.25, 14.25}, {14.25, 13.5}, {8.25, 13.5}}, {{
                    8.25, 12.}, {14.25, 12.}, {14.25, 11.25}, {8.25, 
                    11.25}}, {{8.25, 9.75}, {14.25, 9.75}, {14.25, 9.}, {8.25,
                     9.}}, {{8.25, 7.5}, {14.25, 7.5}, {14.25, 6.75}, {8.25, 
                    6.75}}}]}, ImageSize -> 12]}, 
                    Dynamic[
                    CurrentValue["MouseOver"]], ImageSize -> Automatic, 
                    FrameMargins -> 0], "\"Click to copy to the clipboard\""},
                     "PrettyTooltipTemplate"]], 
                    RawBoxes[
                    TemplateBox[{
                    GraphicsBox[{
                    RGBColor[0, 
                    NCache[2/3, 0.66667], 0], 
                    Thickness[
                    NCache[2/45, 0.044444]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                    0}, {0, 1, 0}, {0, 1, 0}}}, {{{10.5, 18.75}, {10.5, 
                    18.}, {9., 18.}, {9., 15.75}, {13.5, 15.75}, {13.5, 
                    18.}, {12., 18.}, {12., 18.75}}, {{6., 18.}, {6., 4.5}, {
                    16.5, 4.5}, {16.5, 18.}, {14.25, 18.}, {14.25, 17.25}, {
                    15.75, 17.25}, {15.75, 5.25}, {6.75, 5.25}, {6.75, 
                    17.25}, {8.25, 17.25}, {8.25, 18.}}, {{9.75, 17.25}, {
                    12.75, 17.25}, {12.75, 16.5}, {9.75, 16.5}}}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 
                    0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{8.25, 
                    14.25}, {14.25, 14.25}, {14.25, 13.5}, {8.25, 13.5}}, {{
                    8.25, 12.}, {14.25, 12.}, {14.25, 11.25}, {8.25, 
                    11.25}}, {{8.25, 9.75}, {14.25, 9.75}, {14.25, 9.}, {8.25,
                     9.}}, {{8.25, 7.5}, {14.25, 7.5}, {14.25, 6.75}, {8.25, 
                    6.75}}}]}, ImageSize -> 12], "\"Copied\""}, 
                    "PrettyTooltipTemplate"]]], UpdateInterval -> 1, 
                    TrackedSymbols :> {RSNB`clickTime$$}], StandardForm], 
                  Evaluator -> "System"], 
                 ButtonFunction :> (RSNB`clickTime$$ = AbsoluteTime[]; 
                  CopyToClipboard[
                    BinaryDeserialize[
                    BaseDecode[#2], Defer]]), 
                 Appearance -> {
                  "Default" -> None, "Hover" -> None, "Pressed" -> None}, 
                 Method -> "Queued", Evaluator -> "System"], 
                MouseAppearanceTag["LinkHand"]]}}, 
             GridBoxAlignment -> {
              "Columns" -> {{Left}}, "Rows" -> {{Center}}}, AutoDelete -> 
             False, GridBoxItemSize -> {
              "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
             GridBoxSpacings -> {"Columns" -> {{0.4}}}], "Grid"], 
           DynamicModuleValues :> {}]}, 
        Dynamic[
         CurrentValue["MouseOver"]], ImageSize -> Automatic, FrameMargins -> 
        0]& )}], 
   Cell[
    StyleData["PrettyTooltipTemplate"], 
    TemplateBoxOptions -> {DisplayFunction -> (TagBox[
        TooltipBox[#, 
         FrameBox[
          
          StyleBox[#2, "Text", FontColor -> 
           RGBColor[0.53725, 0.53725, 0.53725], FontSize -> 12, FontWeight -> 
           "Plain", FontTracking -> "Plain", StripOnInput -> False], 
          Background -> RGBColor[0.96078, 0.96078, 0.96078], FrameStyle -> 
          RGBColor[0.89804, 0.89804, 0.89804], FrameMargins -> 8, 
          StripOnInput -> False], TooltipDelay -> 0.1, 
         TooltipStyle -> {Background -> None, CellFrame -> 0}], 
        Annotation[#, 
         Framed[
          Style[
          RSNB`$$tooltip, "Text", FontColor -> 
           RGBColor[0.53725, 0.53725, 0.53725], FontSize -> 12, FontWeight -> 
           "Plain", FontTracking -> "Plain"], Background -> 
          RGBColor[0.96078, 0.96078, 0.96078], FrameStyle -> 
          RGBColor[0.89804, 0.89804, 0.89804], FrameMargins -> 8], 
         "Tooltip"]& ]& )}], 
   Cell[
    StyleData["ToolsGridTemplate"], 
    TemplateBoxOptions -> {DisplayFunction -> (StyleBox[
        TagBox[
         GridBox[{{
            FrameBox[
             ButtonBox[
              TemplateBox[{
                StyleBox[
                 TagBox[
                  GridBox[{{"\"Insert ResourceObject\"", 
                    GraphicsBox[{
                    Thickness[0.05], {
                    FaceForm[{
                    GrayLevel[0.34902], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{1, 4, 3}, {0, 1, 0}, {1, 3, 3}, {0, 1, 
                    0}, {1, 3, 3}, {0, 1, 0}, {1, 3, 3}}}, {{{18., 17.5}, {
                    18., 18.328}, {17.328, 19.}, {16.5, 19.}, {4.5, 19.}, {
                    3.6716, 19.}, {3., 18.328}, {3., 17.5}, {3., 3.5}, {3., 
                    2.6716}, {3.6716, 2.}, {4.5, 2.}, {16.5, 2.}, {17.328, 
                    2.}, {18., 2.6716}, {18., 3.5}}}]}, {
                    FaceForm[{
                    GrayLevel[0.34902], 
                    Opacity[1.]}], 
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 
                    0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1,
                     0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}}, {{{5., 12.}, {5., 11.}, {2., 
                    11.}, {2., 12.}}, {{2., 10.}, {2., 9.}, {5., 9.}, {5., 
                    10.}}, {{2., 14.}, {2., 13.}, {5., 13.}, {5., 14.}}, {{2.,
                     8.}, {2., 7.}, {5., 7.}, {5., 8.}}, {{2., 6.}, {2., 
                    5.}, {5., 5.}, {5., 6.}}, {{5., 18.}, {2., 18.}, {2., 
                    17.}, {5., 17.}, {5., 18.}}, {{5., 4.}, {2., 4.}, {2., 
                    3.}, {5., 3.}, {5., 4.}}, {{2., 16.}, {2., 15.}, {5., 
                    15.}, {5., 16.}}}]}, {
                    FaceForm[{
                    GrayLevel[1], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {1, 3, 3}, {0, 1, 0}, {1, 3, 
                    3}, {0, 1, 0}, {1, 3, 3}, {0, 1, 0}, {1, 3, 3}}}, {{{4.5, 
                    18.}, {16.5, 18.}, {16.776, 18.}, {17., 17.776}, {17., 
                    17.5}, {17., 3.5}, {17., 3.2236}, {16.776, 3.}, {16.5, 
                    3.}, {4.5, 3.}, {4.2236, 3.}, {4., 3.2236}, {4., 3.5}, {
                    4., 17.5}, {4., 17.776}, {4.2236, 18.}, {4.5, 18.}}}]}, {
                    FaceForm[{
                    RGBColor[0.86667, 0.06667, 0.], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1,
                     0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 
                    2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 0}, {0, 
                    1, 0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 0}, {0,
                     1, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{
                    0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 0}, {
                    0, 1, 0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                    0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 
                    0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1,
                     0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 
                    2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 0}, {0, 
                    1, 0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 0}, {0,
                     1, 0}, {0, 1, 0}}}, {CompressedData["
1:eJxTTMoPSmViYGAQAWIQrbtp7vvlx3QcGMBA1aH5wKmFrt/0He77907Pm6Th
kCQQYbnFQ9shxRokoulw+KtGTP8hbQenhKcXlKL1HEIeL519JEHdASydpwPV
r+Iw54jChiIPAwdlr+pm/R4luPyd643FbiEyDue/Bz9eCtTv8bBKZJ27rMOn
S75JAjM0HZRyKqqWvhF2+FWXtadksoaDKlvjVGdvKbj7zq06fzUMKB8FclCu
osMuTx4mbaD+qxUv1QwzFBwOrlji5xAs4+CSmf+h1VPcAey9biWH3LDadduU
pOHum/i2xt70npDDcW/zTkeg+yWmXuHMAMrD/Afxtzjc/w3bHZoepSvAw2fj
w5dTN+UoOgAARNmGkQ==
                    "], {{14.809, 9.3454}, {13.744, 9.7099}, {13.017, 
                    10.654}, {13.953, 10.307}}, {{11.371, 7.1364}, {10.712, 
                    6.0044}, {10.712, 7.177}, {11.398, 8.1788}}, {{9.8213, 
                    12.979}, {8.6908, 13.381}, {8.0367, 14.264}, {9.2241, 
                    13.743}}, {{11.738, 13.743}, {12.925, 14.264}, {12.271, 
                    13.381}, {11.141, 12.979}}, {{13.177, 12.7}, {12.603, 
                    11.886}, {12.637, 13.113}, {13.309, 14.019}}, {{10.481, 
                    7.6484}, {9.6004, 8.9331}, {10.481, 10.128}, {11.361, 
                    8.9331}}, {{8.8261, 11.306}, {8.782, 12.866}, {10.249, 
                    12.344}, {10.249, 10.826}}, {{10.712, 12.344}, {12.179, 
                    12.866}, {12.137, 11.306}, {10.712, 10.826}}, {{7.7855, 
                    12.7}, {7.6538, 14.019}, {8.325, 13.113}, {8.3587, 
                    11.887}}, {{10.114, 10.394}, {9.2339, 9.2003}, {7.7378, 
                    9.6414}, {8.6871, 10.875}}, {{9.5648, 8.1792}, {10.249, 
                    7.177}, {10.249, 6.004}, {9.5887, 7.1366}}, {{10.848, 
                    10.394}, {12.275, 10.875}, {13.224, 9.6414}, {11.728, 
                    9.2003}}, {{15.126, 12.009}, {14.018, 10.766}, {12.711, 
                    11.252}, {13.495, 12.364}}, {{10.481, 15.384}, {11.321, 
                    13.946}, {10.481, 12.872}, {9.641, 13.946}}, {{5.8362, 
                    12.01}, {7.467, 12.365}, {8.2511, 11.252}, {6.9436, 
                    10.767}}, {{7.009, 10.307}, {7.9452, 10.655}, {7.2182, 
                    9.7099}, {6.152, 9.3459}}, {{6.2515, 8.9006}, {7.3612, 
                    9.2795}, {8.5462, 8.9302}, {7.5545, 8.6165}}, {{7.776, 
                    8.2109}, {9.1027, 8.6306}, {9.1365, 7.2193}, {7.6098, 
                    6.5491}}, {{11.824, 7.219}, {11.859, 8.6305}, {13.185, 
                    8.2104}, {13.351, 6.5484}}, {{13.407, 8.6159}, {12.415, 
                    8.9301}, {13.6, 9.2795}, {14.71, 8.8998}}}]}}, 
                    AspectRatio -> Automatic, ImageSize -> 12, 
                    PlotRange -> {{0., 20.}, {0., 20.}}, PlotRangePadding -> 
                    0, BaselinePosition -> Scaled[0.2]]}}, 
                   GridBoxAlignment -> {
                    "Columns" -> {{Center}}, "Rows" -> {{Baseline}}}, 
                   AutoDelete -> False, 
                   GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                   GridBoxSpacings -> {"Columns" -> {{0.25}}}], "Grid"], 
                 "Text", FontFamily -> "Source Sans Pro", FontSize -> 11, 
                 StripOnInput -> False], 
                "\"Insert an icon representing the ResourceObject\""}, 
               "PrettyTooltipTemplate"], ButtonFunction :> 
              With[{RSNB`nb$ = ButtonNotebook[], RSNB`$cp$ = $ContextPath}, 
                Quiet[
                 
                 Block[{$ContextPath = RSNB`$cp$, 
                   ResourceSystemClient`$\
AsyncronousResourceInformationUpdates = False, 
                   DefinitionNotebookClient`$ButtonCodeID = None}, 
                  Internal`WithLocalSettings[
                   DefinitionNotebookClient`$ButtonsDisabled = True; Once[
                    ReleaseHold[
                    CurrentValue[
                    RSNB`nb$, {TaggingRules, "CompatibilityTest"}]], 
                    "KernelSession"]; Needs["DefinitionNotebookClient`"], 
                    Annotation[
                    DefinitionNotebookClient`$ButtonCodeID = 
                    1728928931864632482; 
                    DefinitionNotebookClient`CheckForUpdates[RSNB`nb$, 
                    ReleaseHold[
                    DefinitionNotebookClient`$ButtonCode = 
                    HoldForm[
                    DefinitionNotebookClient`$ClickedButton = 
                    "InsertResourceObject"; 
                    DefinitionNotebookClient`InsertResourceObjectIcon[
                    ButtonNotebook[]]]]], 
                    DefinitionNotebookClient`ButtonCodeID[
                    1728928931864632482]], 
                    DefinitionNotebookClient`$ButtonsDisabled = False; Null]; 
                  Null]]], FrameMargins -> {{4, 4}, {0, 0}}, BaseStyle -> 
              Dynamic[
                FEPrivate`If[
                 CurrentValue[Enabled], 
                 FEPrivate`If[
                  CurrentValue["MouseOver"], {
                  FontColor -> RGBColor[1., 1., 1.], 
                   TaggingRules -> {"ButtonHovering" -> True}}, {
                  FontColor -> RGBColor[0.32941, 0.32941, 0.32941], 
                   TaggingRules -> {"ButtonHovering" -> False}}], {
                 FontColor -> RGBColor[0.83235, 0.83235, 0.83235], 
                  TaggingRules -> {"ButtonHovering" -> False}}], Evaluator -> 
                "System"], Appearance -> {"Default" -> Image[CompressedData["
1:eJytlD0OgkAQhYk2lnbW3sLW0tafjgYiEgswQRNjRcUdOAANR6Gj4RJg4Q3w
M6PEGJGN7Esgw9s3L7Mzy07tw3I3MAzjOOK1tM7zILAuqzEfG/+4d31nu/BP
jusEM3sIOXk+j7jugooG3PqhzSTP8zRNoyhyXiCGgVcxqaoqjuN1O1hF88Ok
KArP81CappkkSZZl1xeIYeBZRYPyqwn+4hCGYVmWX7sHz6r4NPW8m8gu0HQO
QnzQf5jQMdlFWw0f9ci+pM+NCZ2HZNedDgKU6Ml6N2GCkHRP0QQlerLIldNI
wEmAZAqKJijRkyUmoL+JlkpqfT3RMh0t50TLidX172j5i3XdJw163mx/oHMQ
tdptfwflbjTJ
                  "], "Byte", ColorSpace -> "RGB", ImageResolution -> 144, 
                  Interleaving -> True], "Hover" -> Image[CompressedData["
1:eJytlDFPg0AYhokujm6dnbrYsYmTiWNXWqMrRKAO0AQ0ps4yObKQ0LUD/4aF
X8HSf1Cf5quEYCkXuS8HOd57vyd33x13Y69M98IwjOiKl2l9PIShtZ5f8/EY
RK9e4LzMgjfHc8I7+xJxdHwO/X1fqHiI3bDoghRFked5HMfOb9BHQVeBVFWV
pumiOxjFcwZSlqXv+zjNp+f798/p1/dtspFGHwWdUTw4T0LgC2HmLidJNs62
fxs6o8Kp59OEyCrwnExvNuHgb0GomKyiaw6t+ci6pM41hMojsupegjSc+Mlq
QthBRKqnCMGJnyxy5TTS4SQgsguKEJz4yRIIMRyiZSYaa6Jld7ScEy0nVte/
o+Uv1nWf1DHwZvtHqFzjKrf9D0PJGfA=
                  "], "Byte", ColorSpace -> "RGB", ImageResolution -> 144, 
                  Interleaving -> True], "Pressed" -> Image[CompressedData["
1:eJytlDFuwkAQRS3SUNJRR0oDLU2aFOmgNZAGCnCyIEDeIIOEcgDfwVfwbdz4
FG64QXhoEssCjFd4R2Nr/PfP18x4d5+9b3fRcBxn1+Tlzg/vQTD/Gbb4GOvd
aqnV10Dv1VIFr94TYPvvOce/VWbCwY71rEwkSZI4jsMwVP9GDAJuIpJlWRRF
o3JjFc4dkTRNfd+H6Y4/3mafPbXubLbixCDgrMKBeVMEfVHoT6bdzfZF768d
nFXRyespikgXcG6mF1104F+IMDHpoqyGi3qkL5lzLsLkAem6UkEcJnyyiiL8
QUCmZygCEz5Z5MpuJGAnAHYMehGHCZ8sEcHqi1ipxOJMrPwdK/vEyo61dXas
nGJb90luNW+2B8zkGje57U/Hw9ZQ
                  "], "Byte", ColorSpace -> "RGB", ImageResolution -> 144, 
                  Interleaving -> True]}, Background -> 
              RGBColor[0.94118, 0.94118, 0.94118], Method -> "Queued", 
              ImageSize -> {All, 20}, Evaluator -> Automatic], FrameStyle -> 
             Directive[
               RGBColor[0.94118, 0.94118, 0.94118], 
               AbsoluteThickness[2]], FrameMargins -> -1, ContentPadding -> 
             False, StripOnInput -> False], 
            FrameBox[
             ButtonBox[
              TemplateBox[{
                StyleBox[
                "\"Template Input\"", "Text", FontFamily -> "Source Sans Pro",
                  FontSize -> 11, StripOnInput -> False], 
                "\"Format selection automatically using appropriate \
documentation styles\""}, "PrettyTooltipTemplate"], ButtonFunction :> 
              With[{RSNB`nb$ = ButtonNotebook[], RSNB`$cp$ = $ContextPath}, 
                Quiet[
                 
                 Block[{$ContextPath = RSNB`$cp$, 
                   ResourceSystemClient`$\
AsyncronousResourceInformationUpdates = False, 
                   DefinitionNotebookClient`$ButtonCodeID = None}, 
                  Internal`WithLocalSettings[
                   DefinitionNotebookClient`$ButtonsDisabled = True; Once[
                    ReleaseHold[
                    CurrentValue[
                    RSNB`nb$, {TaggingRules, "CompatibilityTest"}]], 
                    "KernelSession"]; Needs["DefinitionNotebookClient`"], 
                    Annotation[
                    DefinitionNotebookClient`$ButtonCodeID = 
                    7071186616034202283; 
                    DefinitionNotebookClient`CheckForUpdates[RSNB`nb$, 
                    ReleaseHold[
                    DefinitionNotebookClient`$ButtonCode = 
                    HoldForm[
                    DefinitionNotebookClient`$ClickedButton = 
                    "Template Input"; 
                    DefinitionNotebookClient`TemplateInput[]]]], 
                    DefinitionNotebookClient`ButtonCodeID[
                    7071186616034202283]], 
                    DefinitionNotebookClient`$ButtonsDisabled = False; Null]; 
                  Null]]], FrameMargins -> {{4, 4}, {0, 0}}, BaseStyle -> 
              Dynamic[
                FEPrivate`If[
                 CurrentValue[Enabled], 
                 FEPrivate`If[
                  CurrentValue["MouseOver"], {
                  FontColor -> RGBColor[1., 1., 1.], 
                   TaggingRules -> {"ButtonHovering" -> True}}, {
                  FontColor -> RGBColor[0.32941, 0.32941, 0.32941], 
                   TaggingRules -> {"ButtonHovering" -> False}}], {
                 FontColor -> RGBColor[0.83235, 0.83235, 0.83235], 
                  TaggingRules -> {"ButtonHovering" -> False}}], Evaluator -> 
                "System"], Appearance -> {"Default" -> Image[CompressedData["
1:eJytlD0OgkAQhYk2lnbW3sLW0tafjgYiEgswQRNjRcUdOAANR6Gj4RJg4Q3w
M6PEGJGN7Esgw9s3L7Mzy07tw3I3MAzjOOK1tM7zILAuqzEfG/+4d31nu/BP
jusEM3sIOXk+j7jugooG3PqhzSTP8zRNoyhyXiCGgVcxqaoqjuN1O1hF88Ok
KArP81CappkkSZZl1xeIYeBZRYPyqwn+4hCGYVmWX7sHz6r4NPW8m8gu0HQO
QnzQf5jQMdlFWw0f9ci+pM+NCZ2HZNedDgKU6Ml6N2GCkHRP0QQlerLIldNI
wEmAZAqKJijRkyUmoL+JlkpqfT3RMh0t50TLidX172j5i3XdJw163mx/oHMQ
tdptfwflbjTJ
                  "], "Byte", ColorSpace -> "RGB", ImageResolution -> 144, 
                  Interleaving -> True], "Hover" -> Image[CompressedData["
1:eJytlDFPg0AYhokujm6dnbrYsYmTiWNXWqMrRKAO0AQ0ps4yObKQ0LUD/4aF
X8HSf1Cf5quEYCkXuS8HOd57vyd33x13Y69M98IwjOiKl2l9PIShtZ5f8/EY
RK9e4LzMgjfHc8I7+xJxdHwO/X1fqHiI3bDoghRFked5HMfOb9BHQVeBVFWV
pumiOxjFcwZSlqXv+zjNp+f798/p1/dtspFGHwWdUTw4T0LgC2HmLidJNs62
fxs6o8Kp59OEyCrwnExvNuHgb0GomKyiaw6t+ci6pM41hMojsupegjSc+Mlq
QthBRKqnCMGJnyxy5TTS4SQgsguKEJz4yRIIMRyiZSYaa6Jld7ScEy0nVte/
o+Uv1nWf1DHwZvtHqFzjKrf9D0PJGfA=
                  "], "Byte", ColorSpace -> "RGB", ImageResolution -> 144, 
                  Interleaving -> True], "Pressed" -> Image[CompressedData["
1:eJytlDFuwkAQRS3SUNJRR0oDLU2aFOmgNZAGCnCyIEDeIIOEcgDfwVfwbdz4
FG64QXhoEssCjFd4R2Nr/PfP18x4d5+9b3fRcBxn1+Tlzg/vQTD/Gbb4GOvd
aqnV10Dv1VIFr94TYPvvOce/VWbCwY71rEwkSZI4jsMwVP9GDAJuIpJlWRRF
o3JjFc4dkTRNfd+H6Y4/3mafPbXubLbixCDgrMKBeVMEfVHoT6bdzfZF768d
nFXRyespikgXcG6mF1104F+IMDHpoqyGi3qkL5lzLsLkAem6UkEcJnyyiiL8
QUCmZygCEz5Z5MpuJGAnAHYMehGHCZ8sEcHqi1ipxOJMrPwdK/vEyo61dXas
nGJb90luNW+2B8zkGje57U/Hw9ZQ
                  "], "Byte", ColorSpace -> "RGB", ImageResolution -> 144, 
                  Interleaving -> True]}, Background -> 
              RGBColor[0.94118, 0.94118, 0.94118], Method -> "Queued", 
              ImageSize -> {All, 20}, Evaluator -> Automatic], FrameStyle -> 
             Directive[
               RGBColor[0.94118, 0.94118, 0.94118], 
               AbsoluteThickness[2]], FrameMargins -> -1, ContentPadding -> 
             False, StripOnInput -> False], 
            FrameBox[
             ButtonBox[
              TemplateBox[{
                StyleBox[
                "\"Literal Input\"", "Text", FontFamily -> "Source Sans Pro", 
                 FontSize -> 11, StripOnInput -> False], 
                "\"Format selection as literal Wolfram Language code\""}, 
               "PrettyTooltipTemplate"], ButtonFunction :> 
              With[{RSNB`nb$ = ButtonNotebook[], RSNB`$cp$ = $ContextPath}, 
                Quiet[
                 
                 Block[{$ContextPath = RSNB`$cp$, 
                   ResourceSystemClient`$\
AsyncronousResourceInformationUpdates = False, 
                   DefinitionNotebookClient`$ButtonCodeID = None}, 
                  Internal`WithLocalSettings[
                   DefinitionNotebookClient`$ButtonsDisabled = True; Once[
                    ReleaseHold[
                    CurrentValue[
                    RSNB`nb$, {TaggingRules, "CompatibilityTest"}]], 
                    "KernelSession"]; Needs["DefinitionNotebookClient`"], 
                    Annotation[
                    DefinitionNotebookClient`$ButtonCodeID = 
                    4937992391498864149; 
                    DefinitionNotebookClient`CheckForUpdates[RSNB`nb$, 
                    ReleaseHold[
                    DefinitionNotebookClient`$ButtonCode = 
                    HoldForm[
                    DefinitionNotebookClient`$ClickedButton = "Literal Input"; 
                    DefinitionNotebookClient`LiteralInput[]]]], 
                    DefinitionNotebookClient`ButtonCodeID[
                    4937992391498864149]], 
                    DefinitionNotebookClient`$ButtonsDisabled = False; Null]; 
                  Null]]], FrameMargins -> {{4, 4}, {0, 0}}, BaseStyle -> 
              Dynamic[
                FEPrivate`If[
                 CurrentValue[Enabled], 
                 FEPrivate`If[
                  CurrentValue["MouseOver"], {
                  FontColor -> RGBColor[1., 1., 1.], 
                   TaggingRules -> {"ButtonHovering" -> True}}, {
                  FontColor -> RGBColor[0.32941, 0.32941, 0.32941], 
                   TaggingRules -> {"ButtonHovering" -> False}}], {
                 FontColor -> RGBColor[0.83235, 0.83235, 0.83235], 
                  TaggingRules -> {"ButtonHovering" -> False}}], Evaluator -> 
                "System"], Appearance -> {"Default" -> Image[CompressedData["
1:eJytlD0OgkAQhYk2lnbW3sLW0tafjgYiEgswQRNjRcUdOAANR6Gj4RJg4Q3w
M6PEGJGN7Esgw9s3L7Mzy07tw3I3MAzjOOK1tM7zILAuqzEfG/+4d31nu/BP
jusEM3sIOXk+j7jugooG3PqhzSTP8zRNoyhyXiCGgVcxqaoqjuN1O1hF88Ok
KArP81CappkkSZZl1xeIYeBZRYPyqwn+4hCGYVmWX7sHz6r4NPW8m8gu0HQO
QnzQf5jQMdlFWw0f9ci+pM+NCZ2HZNedDgKU6Ml6N2GCkHRP0QQlerLIldNI
wEmAZAqKJijRkyUmoL+JlkpqfT3RMh0t50TLidX172j5i3XdJw163mx/oHMQ
tdptfwflbjTJ
                  "], "Byte", ColorSpace -> "RGB", ImageResolution -> 144, 
                  Interleaving -> True], "Hover" -> Image[CompressedData["
1:eJytlDFPg0AYhokujm6dnbrYsYmTiWNXWqMrRKAO0AQ0ps4yObKQ0LUD/4aF
X8HSf1Cf5quEYCkXuS8HOd57vyd33x13Y69M98IwjOiKl2l9PIShtZ5f8/EY
RK9e4LzMgjfHc8I7+xJxdHwO/X1fqHiI3bDoghRFked5HMfOb9BHQVeBVFWV
pumiOxjFcwZSlqXv+zjNp+f798/p1/dtspFGHwWdUTw4T0LgC2HmLidJNs62
fxs6o8Kp59OEyCrwnExvNuHgb0GomKyiaw6t+ci6pM41hMojsupegjSc+Mlq
QthBRKqnCMGJnyxy5TTS4SQgsguKEJz4yRIIMRyiZSYaa6Jld7ScEy0nVte/
o+Uv1nWf1DHwZvtHqFzjKrf9D0PJGfA=
                  "], "Byte", ColorSpace -> "RGB", ImageResolution -> 144, 
                  Interleaving -> True], "Pressed" -> Image[CompressedData["
1:eJytlDFuwkAQRS3SUNJRR0oDLU2aFOmgNZAGCnCyIEDeIIOEcgDfwVfwbdz4
FG64QXhoEssCjFd4R2Nr/PfP18x4d5+9b3fRcBxn1+Tlzg/vQTD/Gbb4GOvd
aqnV10Dv1VIFr94TYPvvOce/VWbCwY71rEwkSZI4jsMwVP9GDAJuIpJlWRRF
o3JjFc4dkTRNfd+H6Y4/3mafPbXubLbixCDgrMKBeVMEfVHoT6bdzfZF768d
nFXRyespikgXcG6mF1104F+IMDHpoqyGi3qkL5lzLsLkAem6UkEcJnyyiiL8
QUCmZygCEz5Z5MpuJGAnAHYMehGHCZ8sEcHqi1ipxOJMrPwdK/vEyo61dXas
nGJb90luNW+2B8zkGje57U/Hw9ZQ
                  "], "Byte", ColorSpace -> "RGB", ImageResolution -> 144, 
                  Interleaving -> True]}, Background -> 
              RGBColor[0.94118, 0.94118, 0.94118], Method -> "Queued", 
              ImageSize -> {All, 20}, Evaluator -> Automatic], FrameStyle -> 
             Directive[
               RGBColor[0.94118, 0.94118, 0.94118], 
               AbsoluteThickness[2]], FrameMargins -> -1, ContentPadding -> 
             False, StripOnInput -> False], 
            FrameBox[
             ButtonBox[
              TemplateBox[{
                StyleBox[
                "\"Insert Delimiter\"", "Text", FontFamily -> 
                 "Source Sans Pro", FontSize -> 11, StripOnInput -> False], 
                "\"Insert example delimiter\""}, "PrettyTooltipTemplate"], 
              ButtonFunction :> 
              With[{RSNB`nb$ = ButtonNotebook[], RSNB`$cp$ = $ContextPath}, 
                Quiet[
                 
                 Block[{$ContextPath = RSNB`$cp$, 
                   ResourceSystemClient`$\
AsyncronousResourceInformationUpdates = False, 
                   DefinitionNotebookClient`$ButtonCodeID = None}, 
                  Internal`WithLocalSettings[
                   DefinitionNotebookClient`$ButtonsDisabled = True; Once[
                    ReleaseHold[
                    CurrentValue[
                    RSNB`nb$, {TaggingRules, "CompatibilityTest"}]], 
                    "KernelSession"]; Needs["DefinitionNotebookClient`"], 
                    Annotation[
                    DefinitionNotebookClient`$ButtonCodeID = 
                    5468327008079127585; 
                    DefinitionNotebookClient`CheckForUpdates[RSNB`nb$, 
                    ReleaseHold[
                    DefinitionNotebookClient`$ButtonCode = 
                    HoldForm[
                    DefinitionNotebookClient`$ClickedButton = 
                    "Insert Delimiter"; 
                    DefinitionNotebookClient`DelimiterInsert[]]]], 
                    DefinitionNotebookClient`ButtonCodeID[
                    5468327008079127585]], 
                    DefinitionNotebookClient`$ButtonsDisabled = False; Null]; 
                  Null]]], FrameMargins -> {{4, 4}, {0, 0}}, BaseStyle -> 
              Dynamic[
                FEPrivate`If[
                 CurrentValue[Enabled], 
                 FEPrivate`If[
                  CurrentValue["MouseOver"], {
                  FontColor -> RGBColor[1., 1., 1.], 
                   TaggingRules -> {"ButtonHovering" -> True}}, {
                  FontColor -> RGBColor[0.32941, 0.32941, 0.32941], 
                   TaggingRules -> {"ButtonHovering" -> False}}], {
                 FontColor -> RGBColor[0.83235, 0.83235, 0.83235], 
                  TaggingRules -> {"ButtonHovering" -> False}}], Evaluator -> 
                "System"], Appearance -> {"Default" -> Image[CompressedData["
1:eJytlD0OgkAQhYk2lnbW3sLW0tafjgYiEgswQRNjRcUdOAANR6Gj4RJg4Q3w
M6PEGJGN7Esgw9s3L7Mzy07tw3I3MAzjOOK1tM7zILAuqzEfG/+4d31nu/BP
jusEM3sIOXk+j7jugooG3PqhzSTP8zRNoyhyXiCGgVcxqaoqjuN1O1hF88Ok
KArP81CappkkSZZl1xeIYeBZRYPyqwn+4hCGYVmWX7sHz6r4NPW8m8gu0HQO
QnzQf5jQMdlFWw0f9ci+pM+NCZ2HZNedDgKU6Ml6N2GCkHRP0QQlerLIldNI
wEmAZAqKJijRkyUmoL+JlkpqfT3RMh0t50TLidX172j5i3XdJw163mx/oHMQ
tdptfwflbjTJ
                  "], "Byte", ColorSpace -> "RGB", ImageResolution -> 144, 
                  Interleaving -> True], "Hover" -> Image[CompressedData["
1:eJytlDFPg0AYhokujm6dnbrYsYmTiWNXWqMrRKAO0AQ0ps4yObKQ0LUD/4aF
X8HSf1Cf5quEYCkXuS8HOd57vyd33x13Y69M98IwjOiKl2l9PIShtZ5f8/EY
RK9e4LzMgjfHc8I7+xJxdHwO/X1fqHiI3bDoghRFked5HMfOb9BHQVeBVFWV
pumiOxjFcwZSlqXv+zjNp+f798/p1/dtspFGHwWdUTw4T0LgC2HmLidJNs62
fxs6o8Kp59OEyCrwnExvNuHgb0GomKyiaw6t+ci6pM41hMojsupegjSc+Mlq
QthBRKqnCMGJnyxy5TTS4SQgsguKEJz4yRIIMRyiZSYaa6Jld7ScEy0nVte/
o+Uv1nWf1DHwZvtHqFzjKrf9D0PJGfA=
                  "], "Byte", ColorSpace -> "RGB", ImageResolution -> 144, 
                  Interleaving -> True], "Pressed" -> Image[CompressedData["
1:eJytlDFuwkAQRS3SUNJRR0oDLU2aFOmgNZAGCnCyIEDeIIOEcgDfwVfwbdz4
FG64QXhoEssCjFd4R2Nr/PfP18x4d5+9b3fRcBxn1+Tlzg/vQTD/Gbb4GOvd
aqnV10Dv1VIFr94TYPvvOce/VWbCwY71rEwkSZI4jsMwVP9GDAJuIpJlWRRF
o3JjFc4dkTRNfd+H6Y4/3mafPbXubLbixCDgrMKBeVMEfVHoT6bdzfZF768d
nFXRyespikgXcG6mF1104F+IMDHpoqyGi3qkL5lzLsLkAem6UkEcJnyyiiL8
QUCmZygCEz5Z5MpuJGAnAHYMehGHCZ8sEcHqi1ipxOJMrPwdK/vEyo61dXas
nGJb90luNW+2B8zkGje57U/Hw9ZQ
                  "], "Byte", ColorSpace -> "RGB", ImageResolution -> 144, 
                  Interleaving -> True]}, Background -> 
              RGBColor[0.94118, 0.94118, 0.94118], Method -> "Queued", 
              ImageSize -> {All, 20}, Evaluator -> Automatic], FrameStyle -> 
             Directive[
               RGBColor[0.94118, 0.94118, 0.94118], 
               AbsoluteThickness[2]], FrameMargins -> -1, ContentPadding -> 
             False, StripOnInput -> False], 
            ActionMenuBox[
             FrameBox[
              ButtonBox[
               TemplateBox[{
                 StyleBox[
                  
                  TemplateBox[{
                   "\"Tables\"", 
                    "\"\[ThinSpace]\[ThinSpace]\[ThinSpace]\
\[FilledDownTriangle]\""}, "RowDefault"], "Text", FontFamily -> 
                  "Source Sans Pro", FontSize -> 11, StripOnInput -> False], 
                 "\"Table functions\""}, "PrettyTooltipTemplate"], 
               ButtonFunction :> 
               With[{RSNB`nb$ = ButtonNotebook[], RSNB`$cp$ = $ContextPath}, 
                 Quiet[
                  
                  Block[{$ContextPath = RSNB`$cp$, 
                    ResourceSystemClient`$\
AsyncronousResourceInformationUpdates = False, 
                    DefinitionNotebookClient`$ButtonCodeID = None}, 
                   Internal`WithLocalSettings[
                    DefinitionNotebookClient`$ButtonsDisabled = True; Once[
                    ReleaseHold[
                    CurrentValue[
                    RSNB`nb$, {TaggingRules, "CompatibilityTest"}]], 
                    "KernelSession"]; Needs["DefinitionNotebookClient`"], 
                    Annotation[
                    DefinitionNotebookClient`$ButtonCodeID = 
                    4246462567992284997; 
                    DefinitionNotebookClient`CheckForUpdates[RSNB`nb$, 
                    ReleaseHold[
                    DefinitionNotebookClient`$ButtonCode = HoldForm[Null]]], 
                    DefinitionNotebookClient`ButtonCodeID[
                    4246462567992284997]], 
                    DefinitionNotebookClient`$ButtonsDisabled = False; Null]; 
                   Null]]], FrameMargins -> {{4, 4}, {0, 0}}, BaseStyle -> 
               Dynamic[
                 FEPrivate`If[
                  CurrentValue[Enabled], 
                  FEPrivate`If[
                   CurrentValue["MouseOver"], {
                   FontColor -> RGBColor[1., 1., 1.], 
                    TaggingRules -> {"ButtonHovering" -> True}}, {
                   FontColor -> RGBColor[0.32941, 0.32941, 0.32941], 
                    TaggingRules -> {"ButtonHovering" -> False}}], {
                  FontColor -> RGBColor[0.83235, 0.83235, 0.83235], 
                   TaggingRules -> {"ButtonHovering" -> False}}], Evaluator -> 
                 "System"], Appearance -> {"Default" -> Image[CompressedData["

1:eJytlD0OgkAQhYk2lnbW3sLW0tafjgYiEgswQRNjRcUdOAANR6Gj4RJg4Q3w
M6PEGJGN7Esgw9s3L7Mzy07tw3I3MAzjOOK1tM7zILAuqzEfG/+4d31nu/BP
jusEM3sIOXk+j7jugooG3PqhzSTP8zRNoyhyXiCGgVcxqaoqjuN1O1hF88Ok
KArP81CappkkSZZl1xeIYeBZRYPyqwn+4hCGYVmWX7sHz6r4NPW8m8gu0HQO
QnzQf5jQMdlFWw0f9ci+pM+NCZ2HZNedDgKU6Ml6N2GCkHRP0QQlerLIldNI
wEmAZAqKJijRkyUmoL+JlkpqfT3RMh0t50TLidX172j5i3XdJw163mx/oHMQ
tdptfwflbjTJ
                   "], "Byte", ColorSpace -> "RGB", ImageResolution -> 144, 
                   Interleaving -> True], "Hover" -> Image[CompressedData["
1:eJytlDFPg0AYhokujm6dnbrYsYmTiWNXWqMrRKAO0AQ0ps4yObKQ0LUD/4aF
X8HSf1Cf5quEYCkXuS8HOd57vyd33x13Y69M98IwjOiKl2l9PIShtZ5f8/EY
RK9e4LzMgjfHc8I7+xJxdHwO/X1fqHiI3bDoghRFked5HMfOb9BHQVeBVFWV
pumiOxjFcwZSlqXv+zjNp+f798/p1/dtspFGHwWdUTw4T0LgC2HmLidJNs62
fxs6o8Kp59OEyCrwnExvNuHgb0GomKyiaw6t+ci6pM41hMojsupegjSc+Mlq
QthBRKqnCMGJnyxy5TTS4SQgsguKEJz4yRIIMRyiZSYaa6Jld7ScEy0nVte/
o+Uv1nWf1DHwZvtHqFzjKrf9D0PJGfA=
                   "], "Byte", ColorSpace -> "RGB", ImageResolution -> 144, 
                   Interleaving -> True], "Pressed" -> Image[CompressedData["
1:eJytlDFuwkAQRS3SUNJRR0oDLU2aFOmgNZAGCnCyIEDeIIOEcgDfwVfwbdz4
FG64QXhoEssCjFd4R2Nr/PfP18x4d5+9b3fRcBxn1+Tlzg/vQTD/Gbb4GOvd
aqnV10Dv1VIFr94TYPvvOce/VWbCwY71rEwkSZI4jsMwVP9GDAJuIpJlWRRF
o3JjFc4dkTRNfd+H6Y4/3mafPbXubLbixCDgrMKBeVMEfVHoT6bdzfZF768d
nFXRyespikgXcG6mF1104F+IMDHpoqyGi3qkL5lzLsLkAem6UkEcJnyyiiL8
QUCmZygCEz5Z5MpuJGAnAHYMehGHCZ8sEcHqi1ipxOJMrPwdK/vEyo61dXas
nGJb90luNW+2B8zkGje57U/Hw9ZQ
                   "], "Byte", ColorSpace -> "RGB", ImageResolution -> 144, 
                   Interleaving -> True]}, Background -> 
               RGBColor[0.94118, 0.94118, 0.94118], Method -> "Queued", 
               ImageSize -> {All, 20}, Evaluator -> Automatic], FrameStyle -> 
              Directive[
                RGBColor[0.94118, 0.94118, 0.94118], 
                AbsoluteThickness[2]], FrameMargins -> -1, ContentPadding -> 
              False, StripOnInput -> False], {
             "\"Insert table with two columns\"" :> 
              With[{RSNB`nb$ = InputNotebook[], RSNB`$cp$ = $ContextPath}, 
                Quiet[
                 Block[{$ContextPath = RSNB`$cp$, 
                   ResourceSystemClient`$\
AsyncronousResourceInformationUpdates = False, 
                   DefinitionNotebookClient`$ButtonCodeID = None}, 
                  Internal`WithLocalSettings[
                   DefinitionNotebookClient`$ButtonsDisabled = True; Once[
                    ReleaseHold[
                    CurrentValue[
                    RSNB`nb$, {TaggingRules, "CompatibilityTest"}]], 
                    "KernelSession"]; Needs["DefinitionNotebookClient`"], 
                    Annotation[
                    DefinitionNotebookClient`$ButtonCodeID = 
                    6873451360295576381; 
                    DefinitionNotebookClient`CheckForUpdates[RSNB`nb$, 
                    ReleaseHold[
                    DefinitionNotebookClient`$ButtonCode = 
                    HoldForm[
                    DefinitionNotebookClient`$ClickedButton = "Tables"; 
                    DefinitionNotebookClient`$ClickedAction = 
                    "Insert table with two columns"; 
                    DefinitionNotebookClient`TableInsert[2]]]], 
                    DefinitionNotebookClient`ButtonCodeID[
                    6873451360295576381]], 
                    DefinitionNotebookClient`$ButtonsDisabled = False; Null]; 
                  Null]]], "\"Insert table with three columns\"" :> 
              With[{RSNB`nb$ = InputNotebook[], RSNB`$cp$ = $ContextPath}, 
                Quiet[
                 
                 Block[{$ContextPath = RSNB`$cp$, 
                   ResourceSystemClient`$\
AsyncronousResourceInformationUpdates = False, 
                   DefinitionNotebookClient`$ButtonCodeID = None}, 
                  Internal`WithLocalSettings[
                   DefinitionNotebookClient`$ButtonsDisabled = True; Once[
                    ReleaseHold[
                    CurrentValue[
                    RSNB`nb$, {TaggingRules, "CompatibilityTest"}]], 
                    "KernelSession"]; Needs["DefinitionNotebookClient`"], 
                    Annotation[
                    DefinitionNotebookClient`$ButtonCodeID = 
                    6172106006839516455; 
                    DefinitionNotebookClient`CheckForUpdates[RSNB`nb$, 
                    ReleaseHold[
                    DefinitionNotebookClient`$ButtonCode = 
                    HoldForm[
                    DefinitionNotebookClient`$ClickedButton = "Tables"; 
                    DefinitionNotebookClient`$ClickedAction = 
                    "Insert table with three columns"; 
                    DefinitionNotebookClient`TableInsert[3]]]], 
                    DefinitionNotebookClient`ButtonCodeID[
                    6172106006839516455]], 
                    DefinitionNotebookClient`$ButtonsDisabled = False; Null]; 
                  Null]]], "\"Add a row to the selected table\"" :> 
              With[{RSNB`nb$ = InputNotebook[], RSNB`$cp$ = $ContextPath}, 
                Quiet[
                 
                 Block[{$ContextPath = RSNB`$cp$, 
                   ResourceSystemClient`$\
AsyncronousResourceInformationUpdates = False, 
                   DefinitionNotebookClient`$ButtonCodeID = None}, 
                  Internal`WithLocalSettings[
                   DefinitionNotebookClient`$ButtonsDisabled = True; Once[
                    ReleaseHold[
                    CurrentValue[
                    RSNB`nb$, {TaggingRules, "CompatibilityTest"}]], 
                    "KernelSession"]; Needs["DefinitionNotebookClient`"], 
                    Annotation[
                    DefinitionNotebookClient`$ButtonCodeID = 
                    3926450748983119469; 
                    DefinitionNotebookClient`CheckForUpdates[RSNB`nb$, 
                    ReleaseHold[
                    DefinitionNotebookClient`$ButtonCode = 
                    HoldForm[
                    DefinitionNotebookClient`$ClickedButton = "Tables"; 
                    DefinitionNotebookClient`$ClickedAction = 
                    "Add a row to the selected table"; 
                    DefinitionNotebookClient`TableRowInsert[]]]], 
                    DefinitionNotebookClient`ButtonCodeID[
                    3926450748983119469]], 
                    DefinitionNotebookClient`$ButtonsDisabled = False; Null]; 
                  Null]]], "\"Sort the selected table\"" :> 
              With[{RSNB`nb$ = InputNotebook[], RSNB`$cp$ = $ContextPath}, 
                Quiet[
                 
                 Block[{$ContextPath = RSNB`$cp$, 
                   ResourceSystemClient`$\
AsyncronousResourceInformationUpdates = False, 
                   DefinitionNotebookClient`$ButtonCodeID = None}, 
                  Internal`WithLocalSettings[
                   DefinitionNotebookClient`$ButtonsDisabled = True; Once[
                    ReleaseHold[
                    CurrentValue[
                    RSNB`nb$, {TaggingRules, "CompatibilityTest"}]], 
                    "KernelSession"]; Needs["DefinitionNotebookClient`"], 
                    Annotation[
                    DefinitionNotebookClient`$ButtonCodeID = 
                    4086190758423840734; 
                    DefinitionNotebookClient`CheckForUpdates[RSNB`nb$, 
                    ReleaseHold[
                    DefinitionNotebookClient`$ButtonCode = 
                    HoldForm[
                    DefinitionNotebookClient`$ClickedButton = "Tables"; 
                    DefinitionNotebookClient`$ClickedAction = 
                    "Sort the selected table"; 
                    DefinitionNotebookClient`TableSort[]]]], 
                    DefinitionNotebookClient`ButtonCodeID[
                    4086190758423840734]], 
                    DefinitionNotebookClient`$ButtonsDisabled = False; Null]; 
                  Null]]], "\"Merge selected tables\"" :> 
              With[{RSNB`nb$ = InputNotebook[], RSNB`$cp$ = $ContextPath}, 
                Quiet[
                 
                 Block[{$ContextPath = RSNB`$cp$, 
                   ResourceSystemClient`$\
AsyncronousResourceInformationUpdates = False, 
                   DefinitionNotebookClient`$ButtonCodeID = None}, 
                  Internal`WithLocalSettings[
                   DefinitionNotebookClient`$ButtonsDisabled = True; Once[
                    ReleaseHold[
                    CurrentValue[
                    RSNB`nb$, {TaggingRules, "CompatibilityTest"}]], 
                    "KernelSession"]; Needs["DefinitionNotebookClient`"], 
                    Annotation[
                    DefinitionNotebookClient`$ButtonCodeID = 
                    8662206799689618007; 
                    DefinitionNotebookClient`CheckForUpdates[RSNB`nb$, 
                    ReleaseHold[
                    DefinitionNotebookClient`$ButtonCode = 
                    HoldForm[
                    DefinitionNotebookClient`$ClickedButton = "Tables"; 
                    DefinitionNotebookClient`$ClickedAction = 
                    "Merge selected tables"; 
                    DefinitionNotebookClient`TableMerge[]]]], 
                    DefinitionNotebookClient`ButtonCodeID[
                    8662206799689618007]], 
                    DefinitionNotebookClient`$ButtonsDisabled = False; Null]; 
                  Null]]]}, Appearance -> None, Method -> "Queued"], 
            ActionMenuBox[
             FrameBox[
              ButtonBox[
               StyleBox[
                
                TemplateBox[{
                 "\"Cells\"", 
                  "\"\[ThinSpace]\[ThinSpace]\[ThinSpace]\[FilledDownTriangle]\
\""}, "RowDefault"], "Text", FontFamily -> "Source Sans Pro", FontSize -> 11, 
                StripOnInput -> False], ButtonFunction :> 
               With[{RSNB`nb$ = ButtonNotebook[], RSNB`$cp$ = $ContextPath}, 
                 Quiet[
                  
                  Block[{$ContextPath = RSNB`$cp$, 
                    ResourceSystemClient`$\
AsyncronousResourceInformationUpdates = False, 
                    DefinitionNotebookClient`$ButtonCodeID = None}, 
                   Internal`WithLocalSettings[
                    DefinitionNotebookClient`$ButtonsDisabled = True; Once[
                    ReleaseHold[
                    CurrentValue[
                    RSNB`nb$, {TaggingRules, "CompatibilityTest"}]], 
                    "KernelSession"]; Needs["DefinitionNotebookClient`"], 
                    Annotation[
                    DefinitionNotebookClient`$ButtonCodeID = 
                    4246462567992284997; 
                    DefinitionNotebookClient`CheckForUpdates[RSNB`nb$, 
                    ReleaseHold[
                    DefinitionNotebookClient`$ButtonCode = HoldForm[Null]]], 
                    DefinitionNotebookClient`ButtonCodeID[
                    4246462567992284997]], 
                    DefinitionNotebookClient`$ButtonsDisabled = False; Null]; 
                   Null]]], FrameMargins -> {{4, 4}, {0, 0}}, BaseStyle -> 
               Dynamic[
                 FEPrivate`If[
                  CurrentValue[Enabled], 
                  FEPrivate`If[
                   CurrentValue["MouseOver"], {
                   FontColor -> RGBColor[1., 1., 1.], 
                    TaggingRules -> {"ButtonHovering" -> True}}, {
                   FontColor -> RGBColor[0.32941, 0.32941, 0.32941], 
                    TaggingRules -> {"ButtonHovering" -> False}}], {
                  FontColor -> RGBColor[0.83235, 0.83235, 0.83235], 
                   TaggingRules -> {"ButtonHovering" -> False}}], Evaluator -> 
                 "System"], Appearance -> {"Default" -> Image[CompressedData["

1:eJytlD0OgkAQhYk2lnbW3sLW0tafjgYiEgswQRNjRcUdOAANR6Gj4RJg4Q3w
M6PEGJGN7Esgw9s3L7Mzy07tw3I3MAzjOOK1tM7zILAuqzEfG/+4d31nu/BP
jusEM3sIOXk+j7jugooG3PqhzSTP8zRNoyhyXiCGgVcxqaoqjuN1O1hF88Ok
KArP81CappkkSZZl1xeIYeBZRYPyqwn+4hCGYVmWX7sHz6r4NPW8m8gu0HQO
QnzQf5jQMdlFWw0f9ci+pM+NCZ2HZNedDgKU6Ml6N2GCkHRP0QQlerLIldNI
wEmAZAqKJijRkyUmoL+JlkpqfT3RMh0t50TLidX172j5i3XdJw163mx/oHMQ
tdptfwflbjTJ
                   "], "Byte", ColorSpace -> "RGB", ImageResolution -> 144, 
                   Interleaving -> True], "Hover" -> Image[CompressedData["
1:eJytlDFPg0AYhokujm6dnbrYsYmTiWNXWqMrRKAO0AQ0ps4yObKQ0LUD/4aF
X8HSf1Cf5quEYCkXuS8HOd57vyd33x13Y69M98IwjOiKl2l9PIShtZ5f8/EY
RK9e4LzMgjfHc8I7+xJxdHwO/X1fqHiI3bDoghRFked5HMfOb9BHQVeBVFWV
pumiOxjFcwZSlqXv+zjNp+f798/p1/dtspFGHwWdUTw4T0LgC2HmLidJNs62
fxs6o8Kp59OEyCrwnExvNuHgb0GomKyiaw6t+ci6pM41hMojsupegjSc+Mlq
QthBRKqnCMGJnyxy5TTS4SQgsguKEJz4yRIIMRyiZSYaa6Jld7ScEy0nVte/
o+Uv1nWf1DHwZvtHqFzjKrf9D0PJGfA=
                   "], "Byte", ColorSpace -> "RGB", ImageResolution -> 144, 
                   Interleaving -> True], "Pressed" -> Image[CompressedData["
1:eJytlDFuwkAQRS3SUNJRR0oDLU2aFOmgNZAGCnCyIEDeIIOEcgDfwVfwbdz4
FG64QXhoEssCjFd4R2Nr/PfP18x4d5+9b3fRcBxn1+Tlzg/vQTD/Gbb4GOvd
aqnV10Dv1VIFr94TYPvvOce/VWbCwY71rEwkSZI4jsMwVP9GDAJuIpJlWRRF
o3JjFc4dkTRNfd+H6Y4/3mafPbXubLbixCDgrMKBeVMEfVHoT6bdzfZF768d
nFXRyespikgXcG6mF1104F+IMDHpoqyGi3qkL5lzLsLkAem6UkEcJnyyiiL8
QUCmZygCEz5Z5MpuJGAnAHYMehGHCZ8sEcHqi1ipxOJMrPwdK/vEyo61dXas
nGJb90luNW+2B8zkGje57U/Hw9ZQ
                   "], "Byte", ColorSpace -> "RGB", ImageResolution -> 144, 
                   Interleaving -> True]}, Background -> 
               RGBColor[0.94118, 0.94118, 0.94118], Method -> "Queued", 
               ImageSize -> {All, 20}, Evaluator -> Automatic], FrameStyle -> 
              Directive[
                RGBColor[0.94118, 0.94118, 0.94118], 
                AbsoluteThickness[2]], FrameMargins -> -1, ContentPadding -> 
              False, StripOnInput -> False], {
             "\"Insert comment for reviewer\"" :> 
              With[{RSNB`nb$ = InputNotebook[], RSNB`$cp$ = $ContextPath}, 
                Quiet[
                 
                 Block[{$ContextPath = RSNB`$cp$, 
                   ResourceSystemClient`$\
AsyncronousResourceInformationUpdates = False, 
                   DefinitionNotebookClient`$ButtonCodeID = None}, 
                  Internal`WithLocalSettings[
                   DefinitionNotebookClient`$ButtonsDisabled = True; Once[
                    ReleaseHold[
                    CurrentValue[
                    RSNB`nb$, {TaggingRules, "CompatibilityTest"}]], 
                    "KernelSession"]; Needs["DefinitionNotebookClient`"], 
                    Annotation[
                    DefinitionNotebookClient`$ButtonCodeID = 
                    7544339529118446740; 
                    DefinitionNotebookClient`CheckForUpdates[RSNB`nb$, 
                    ReleaseHold[
                    DefinitionNotebookClient`$ButtonCode = 
                    HoldForm[
                    DefinitionNotebookClient`$ClickedButton = "Cells"; 
                    DefinitionNotebookClient`$ClickedAction = 
                    "Insert comment for reviewer"; 
                    DefinitionNotebookClient`CommentInsert[]]]], 
                    DefinitionNotebookClient`ButtonCodeID[
                    7544339529118446740]], 
                    DefinitionNotebookClient`$ButtonsDisabled = False; Null]; 
                  Null]]], "\"Mark/unmark selected cells as comments\"" :> 
              With[{RSNB`nb$ = InputNotebook[], RSNB`$cp$ = $ContextPath}, 
                Quiet[
                 
                 Block[{$ContextPath = RSNB`$cp$, 
                   ResourceSystemClient`$\
AsyncronousResourceInformationUpdates = False, 
                   DefinitionNotebookClient`$ButtonCodeID = None}, 
                  Internal`WithLocalSettings[
                   DefinitionNotebookClient`$ButtonsDisabled = True; Once[
                    ReleaseHold[
                    CurrentValue[
                    RSNB`nb$, {TaggingRules, "CompatibilityTest"}]], 
                    "KernelSession"]; Needs["DefinitionNotebookClient`"], 
                    Annotation[
                    DefinitionNotebookClient`$ButtonCodeID = 
                    1923617830619908649; 
                    DefinitionNotebookClient`CheckForUpdates[RSNB`nb$, 
                    ReleaseHold[
                    DefinitionNotebookClient`$ButtonCode = 
                    HoldForm[
                    DefinitionNotebookClient`$ClickedButton = "Cells"; 
                    DefinitionNotebookClient`$ClickedAction = 
                    "Mark/unmark selected cells as comments"; 
                    DefinitionNotebookClient`CommentToggle[]]]], 
                    DefinitionNotebookClient`ButtonCodeID[
                    1923617830619908649]], 
                    DefinitionNotebookClient`$ButtonsDisabled = False; Null]; 
                  Null]]], "\"Mark/unmark selected cells as excluded\"" :> 
              With[{RSNB`nb$ = InputNotebook[], RSNB`$cp$ = $ContextPath}, 
                Quiet[
                 
                 Block[{$ContextPath = RSNB`$cp$, 
                   ResourceSystemClient`$\
AsyncronousResourceInformationUpdates = False, 
                   DefinitionNotebookClient`$ButtonCodeID = None}, 
                  Internal`WithLocalSettings[
                   DefinitionNotebookClient`$ButtonsDisabled = True; Once[
                    ReleaseHold[
                    CurrentValue[
                    RSNB`nb$, {TaggingRules, "CompatibilityTest"}]], 
                    "KernelSession"]; Needs["DefinitionNotebookClient`"], 
                    Annotation[
                    DefinitionNotebookClient`$ButtonCodeID = 
                    7488386888561581898; 
                    DefinitionNotebookClient`CheckForUpdates[RSNB`nb$, 
                    ReleaseHold[
                    DefinitionNotebookClient`$ButtonCode = 
                    HoldForm[
                    DefinitionNotebookClient`$ClickedButton = "Cells"; 
                    DefinitionNotebookClient`$ClickedAction = 
                    "Mark/unmark selected cells as excluded"; 
                    DefinitionNotebookClient`StyleToggle["Excluded"]]]], 
                    DefinitionNotebookClient`ButtonCodeID[
                    7488386888561581898]], 
                    DefinitionNotebookClient`$ButtonsDisabled = False; Null]; 
                  Null]]], "\"Mark/unmark selected cells as hidden\"" :> 
              With[{RSNB`nb$ = InputNotebook[], RSNB`$cp$ = $ContextPath}, 
                Quiet[
                 
                 Block[{$ContextPath = RSNB`$cp$, 
                   ResourceSystemClient`$\
AsyncronousResourceInformationUpdates = False, 
                   DefinitionNotebookClient`$ButtonCodeID = None}, 
                  Internal`WithLocalSettings[
                   DefinitionNotebookClient`$ButtonsDisabled = True; Once[
                    ReleaseHold[
                    CurrentValue[
                    RSNB`nb$, {TaggingRules, "CompatibilityTest"}]], 
                    "KernelSession"]; Needs["DefinitionNotebookClient`"], 
                    Annotation[
                    DefinitionNotebookClient`$ButtonCodeID = 
                    7435904361823047122; 
                    DefinitionNotebookClient`CheckForUpdates[RSNB`nb$, 
                    ReleaseHold[
                    DefinitionNotebookClient`$ButtonCode = 
                    HoldForm[
                    DefinitionNotebookClient`$ClickedButton = "Cells"; 
                    DefinitionNotebookClient`$ClickedAction = 
                    "Mark/unmark selected cells as hidden"; 
                    DefinitionNotebookClient`StyleToggle["HiddenMaterial"]]]], 
                    DefinitionNotebookClient`ButtonCodeID[
                    7435904361823047122]], 
                    DefinitionNotebookClient`$ButtonsDisabled = False; Null]; 
                  Null]]]}, Appearance -> None, Method -> "Queued"]}}, 
          GridBoxAlignment -> {"Columns" -> {{Left}}, "Rows" -> {{Center}}}, 
          AutoDelete -> False, 
          GridBoxBackground -> {"Columns" -> {{None}}, "Rows" -> {
              RGBColor[0.94118, 0.94118, 0.94118]}}, 
          GridBoxFrame -> {
           "Columns" -> False, 
            "RowsIndexed" -> {1 -> RGBColor[0.94118, 0.94118, 0.94118]}}, 
          GridBoxItemSize -> {
           "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
          GridBoxSpacings -> {
           "Columns" -> {5, {0.5}, 5}, "Rows" -> {{Automatic}}}, FrameStyle -> 
          GrayLevel[0.75]], "Grid"], ButtonBoxOptions -> {Enabled -> Dynamic[
            Not[
             TrueQ[DefinitionNotebookClient`$ButtonsDisabled]], 
            TrackedSymbols :> {DefinitionNotebookClient`$ButtonsDisabled}]}, 
        StripOnInput -> False]& )}], 
   Cell[
    StyleData["MainGridTemplate"], 
    TemplateBoxOptions -> {DisplayFunction -> (StyleBox[
        TagBox[
         GridBox[{{
            TagBox[
             GridBox[{{
                GraphicsBox[{
                  Thickness[0.0375], 
                  StyleBox[{
                    
                    JoinedCurveBox[{{{0, 2, 0}}, {{0, 2, 0}}, {{0, 2, 0}}, {{
                    0, 2, 0}}, {{0, 2, 0}}, {{0, 2, 0}}, {{0, 2, 0}}, {{0, 2, 
                    0}}, {{0, 2, 0}}, {{0, 2, 0}}, {{0, 2, 0}}, {{0, 2, 
                    0}}, {{0, 2, 0}}, {{0, 2, 0}}, {{0, 2, 0}}, {{0, 2, 
                    0}}, {{0, 2, 0}}, {{0, 2, 0}}, {{0, 2, 
                    0}}}, CompressedData["
1:eJxTTMoPSmVmYGAQBmImKAYDAWcHH/NOx4RSLwg91cMBLP7A1QFdHswvcIfw
VR0w5GfkCTUfyLJzyJj4tsZ+qi12/Qo2EHoCpvlgfaUGDltOlO2bP8sNwje1
hPK9MeTR7SMkD7bnKNSeUCOI/Re8IeJfnbDLf3Bx0L+rwtZ4VYU4eaA5YHtf
GWLY/50tfobPVUmIuJc1RD8DH4Re4IIhf1Hp9s+6LBW4eYT0Q9TrQfz/ywF7
fDjoQ+gGRWg8G0DNM8Mu72Dv8JZ3n8HMVaIE5cHmdEHjl0HPAQBjMcGK
                    "], 
                    CurveClosed -> {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
                    0, 0, 0, 0, 0}]}, {
                    CapForm["Butt"], 
                    JoinForm[{"Miter", 10.}], 
                    Thickness[0.023438], 
                    RGBColor[0.6, 0.6, 0.6, 1.]}, StripOnInput -> False], 
                  StyleBox[{
                    
                    FilledCurveBox[{{{1, 4, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
                    3}}}, {{{45., 10.417}, {45., 8.6907}, {43.601, 7.2916}, {
                    41.875, 7.2916}, {40.149, 7.2916}, {38.75, 8.6907}, {
                    38.75, 10.417}, {38.75, 12.142}, {40.149, 13.542}, {
                    41.875, 13.542}, {43.601, 13.542}, {45., 12.142}, {45., 
                    10.417}}}]}, {
                    FaceForm[
                    RGBColor[0.23529, 0.4549, 0.55294, 1.]]}, StripOnInput -> 
                   False], 
                  StyleBox[{
                    
                    FilledCurveBox[{{{1, 4, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
                    3}}}, {{{22.292, 8.75}, {22.292, 5.068}, {19.307, 
                    2.0833}, {15.625, 2.0833}, {11.943, 2.0833}, {8.9583, 
                    5.068}, {8.9583, 8.75}, {8.9583, 12.432}, {11.943, 
                    15.417}, {15.625, 15.417}, {19.307, 15.417}, {22.292, 
                    12.432}, {22.292, 8.75}}}]}, {
                    FaceForm[
                    RGBColor[0.23529, 0.4549, 0.55294, 1.]]}, StripOnInput -> 
                   False], 
                  StyleBox[{
                    
                    FilledCurveBox[{{{1, 4, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
                    3}}}, {{{40., 29.583}, {40., 24.291}, {35.709, 20.}, {
                    30.417, 20.}, {25.124, 20.}, {20.833, 24.291}, {20.833, 
                    29.583}, {20.833, 34.876}, {25.124, 39.167}, {30.417, 
                    39.167}, {35.709, 39.167}, {40., 34.876}, {40., 
                    29.583}}}]}, {
                    FaceForm[
                    RGBColor[0.23529, 0.4549, 0.55294, 1.]]}, StripOnInput -> 
                   False], 
                  StyleBox[{
                    
                    FilledCurveBox[{{{1, 4, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
                    3}}}, {{{59.167, 37.917}, {59.167, 35.961}, {57.581, 
                    34.375}, {55.625, 34.375}, {53.669, 34.375}, {52.083, 
                    35.961}, {52.083, 37.917}, {52.083, 39.873}, {53.669, 
                    41.458}, {55.625, 41.458}, {57.581, 41.458}, {59.167, 
                    39.873}, {59.167, 37.917}}}]}, {
                    FaceForm[
                    RGBColor[0.23529, 0.4549, 0.55294, 1.]]}, StripOnInput -> 
                   False], 
                  StyleBox[{
                    
                    FilledCurveBox[{{{1, 4, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
                    3}}}, {{{22.083, 45.208}, {22.083, 42.102}, {19.565, 
                    39.583}, {16.458, 39.583}, {13.352, 39.583}, {10.833, 
                    42.102}, {10.833, 45.208}, {10.833, 48.315}, {13.352, 
                    50.833}, {16.458, 50.833}, {19.565, 50.833}, {22.083, 
                    48.315}, {22.083, 45.208}}}]}, {
                    FaceForm[
                    RGBColor[0.23529, 0.4549, 0.55294, 1.]]}, StripOnInput -> 
                   False], 
                  StyleBox[{
                    
                    FilledCurveBox[{{{1, 4, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
                    3}}}, {{{7.2917, 41.25}, {7.2917, 39.294}, {5.706, 
                    37.708}, {3.75, 37.708}, {1.794, 37.708}, {0.20833, 
                    39.294}, {0.20833, 41.25}, {0.20833, 43.206}, {1.794, 
                    44.792}, {3.75, 44.792}, {5.706, 44.792}, {7.2917, 
                    43.206}, {7.2917, 41.25}}}]}, {
                    FaceForm[
                    RGBColor[0.23529, 0.4549, 0.55294, 1.]]}, StripOnInput -> 
                   False], 
                  StyleBox[{
                    
                    FilledCurveBox[{{{1, 4, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
                    3}}}, {{{51.458, 32.292}, {51.458, 29.76}, {49.406, 
                    27.708}, {46.875, 27.708}, {44.344, 27.708}, {42.292, 
                    29.76}, {42.292, 32.292}, {42.292, 34.823}, {44.344, 
                    36.875}, {46.875, 36.875}, {49.406, 36.875}, {51.458, 
                    34.823}, {51.458, 32.292}}}]}, {
                    FaceForm[
                    RGBColor[0.23529, 0.4549, 0.55294, 1.]]}, StripOnInput -> 
                   False], 
                  StyleBox[{
                    
                    FilledCurveBox[{{{1, 4, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
                    3}}}, {{{30.625, 43.125}, {30.625, 41.744}, {29.506, 
                    40.625}, {28.125, 40.625}, {26.744, 40.625}, {25.625, 
                    41.744}, {25.625, 43.125}, {25.625, 44.506}, {26.744, 
                    45.625}, {28.125, 45.625}, {29.506, 45.625}, {30.625, 
                    44.506}, {30.625, 43.125}}}]}, {
                    FaceForm[
                    RGBColor[0.40784, 0.67059, 0.71765, 1.]]}, StripOnInput -> 
                   False], 
                  StyleBox[{
                    
                    FilledCurveBox[{{{1, 4, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
                    3}}}, {{{44.792, 52.917}, {44.792, 49.235}, {41.807, 
                    46.25}, {38.125, 46.25}, {34.443, 46.25}, {31.458, 
                    49.235}, {31.458, 52.917}, {31.458, 56.599}, {34.443, 
                    59.583}, {38.125, 59.583}, {41.807, 59.583}, {44.792, 
                    56.599}, {44.792, 52.917}}}]}, {
                    FaceForm[
                    RGBColor[0.40784, 0.67059, 0.71765, 1.]]}, StripOnInput -> 
                   False], 
                  StyleBox[{
                    
                    FilledCurveBox[{{{1, 4, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
                    3}}}, {{{12.083, 27.292}, {12.083, 24.185}, {9.5649, 
                    21.667}, {6.4583, 21.667}, {3.3517, 21.667}, {0.83333, 
                    24.185}, {0.83333, 27.292}, {0.83333, 30.398}, {3.3517, 
                    32.917}, {6.4583, 32.917}, {9.5649, 32.917}, {12.083, 
                    30.398}, {12.083, 27.292}}}]}, {
                    FaceForm[
                    RGBColor[0.40784, 0.67059, 0.71765, 1.]]}, StripOnInput -> 
                   False], 
                  StyleBox[{
                    
                    FilledCurveBox[{{{1, 4, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
                    3}}}, {{{19.375, 22.292}, {19.375, 20.911}, {18.256, 
                    19.792}, {16.875, 19.792}, {15.494, 19.792}, {14.375, 
                    20.911}, {14.375, 22.292}, {14.375, 23.672}, {15.494, 
                    24.792}, {16.875, 24.792}, {18.256, 24.792}, {19.375, 
                    23.672}, {19.375, 22.292}}}]}, {
                    FaceForm[
                    RGBColor[0.40784, 0.67059, 0.71765, 1.]]}, StripOnInput -> 
                   False], 
                  StyleBox[{
                    
                    FilledCurveBox[{{{1, 4, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
                    3}}}, {{{31.042, 15.}, {31.042, 13.619}, {29.922, 12.5}, {
                    28.542, 12.5}, {27.161, 12.5}, {26.042, 13.619}, {26.042, 
                    15.}, {26.042, 16.381}, {27.161, 17.5}, {28.542, 17.5}, {
                    29.922, 17.5}, {31.042, 16.381}, {31.042, 15.}}}]}, {
                    FaceForm[
                    RGBColor[0.40784, 0.67059, 0.71765, 1.]]}, StripOnInput -> 
                   False], 
                  StyleBox[{
                    
                    FilledCurveBox[{{{1, 4, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
                    3}}}, {{{59.792, 18.333}, {59.792, 14.882}, {56.994, 
                    12.083}, {53.542, 12.083}, {50.09, 12.083}, {47.292, 
                    14.882}, {47.292, 18.333}, {47.292, 21.785}, {50.09, 
                    24.583}, {53.542, 24.583}, {56.994, 24.583}, {59.792, 
                    21.785}, {59.792, 18.333}}}]}, {
                    FaceForm[
                    RGBColor[0.40784, 0.67059, 0.71765, 1.]]}, StripOnInput -> 
                   False], 
                  StyleBox[{
                    
                    FilledCurveBox[{{{1, 4, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
                    3}}}, {{{29.167, 55.208}, {29.167, 53.022}, {27.394, 
                    51.25}, {25.208, 51.25}, {23.022, 51.25}, {21.25, 
                    53.022}, {21.25, 55.208}, {21.25, 57.394}, {23.022, 
                    59.167}, {25.208, 59.167}, {27.394, 59.167}, {29.167, 
                    57.394}, {29.167, 55.208}}}]}, {
                    FaceForm[
                    RGBColor[0.58431, 0.81961, 0.63922, 1.]]}, StripOnInput -> 
                   False], 
                  StyleBox[{
                    
                    FilledCurveBox[{{{1, 4, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
                    3}}}, {{{51.667, 43.75}, {51.667, 42.369}, {50.547, 
                    41.25}, {49.167, 41.25}, {47.786, 41.25}, {46.667, 
                    42.369}, {46.667, 43.75}, {46.667, 45.131}, {47.786, 
                    46.25}, {49.167, 46.25}, {50.547, 46.25}, {51.667, 
                    45.131}, {51.667, 43.75}}}]}, {
                    FaceForm[
                    RGBColor[0.58431, 0.81961, 0.63922, 1.]]}, StripOnInput -> 
                   False], 
                  StyleBox[{
                    
                    FilledCurveBox[{{{1, 4, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
                    3}}}, {{{17.917, 33.958}, {17.917, 32.463}, {16.704, 
                    31.25}, {15.208, 31.25}, {13.713, 31.25}, {12.5, 
                    32.463}, {12.5, 33.958}, {12.5, 35.454}, {13.713, 
                    36.667}, {15.208, 36.667}, {16.704, 36.667}, {17.917, 
                    35.454}, {17.917, 33.958}}}]}, {
                    FaceForm[
                    RGBColor[0.58431, 0.81961, 0.63922, 1.]]}, StripOnInput -> 
                   False], 
                  StyleBox[{
                    
                    FilledCurveBox[{{{1, 4, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
                    3}}}, {{{11.875, 17.917}, {11.875, 16.996}, {11.129, 
                    16.25}, {10.208, 16.25}, {9.2879, 16.25}, {8.5417, 
                    16.996}, {8.5417, 17.917}, {8.5417, 18.837}, {9.2879, 
                    19.583}, {10.208, 19.583}, {11.129, 19.583}, {11.875, 
                    18.837}, {11.875, 17.917}}}]}, {
                    FaceForm[
                    RGBColor[0.58431, 0.81961, 0.63922, 1.]]}, StripOnInput -> 
                   False], 
                  StyleBox[{
                    
                    FilledCurveBox[{{{1, 4, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
                    3}}}, {{{39.583, 17.917}, {39.583, 16.996}, {38.837, 
                    16.25}, {37.917, 16.25}, {36.996, 16.25}, {36.25, 
                    16.996}, {36.25, 17.917}, {36.25, 18.837}, {36.996, 
                    19.583}, {37.917, 19.583}, {38.837, 19.583}, {39.583, 
                    18.837}, {39.583, 17.917}}}]}, {
                    FaceForm[
                    RGBColor[0.58431, 0.81961, 0.63922, 1.]]}, StripOnInput -> 
                   False], 
                  StyleBox[{
                    
                    FilledCurveBox[{{{1, 4, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
                    3}}}, {{{36.25, 5.4166}, {36.25, 2.6552}, {34.011, 
                    0.41662}, {31.25, 0.41662}, {28.489, 0.41662}, {26.25, 
                    2.6552}, {26.25, 5.4166}, {26.25, 8.178}, {28.489, 
                    10.417}, {31.25, 10.417}, {34.011, 10.417}, {36.25, 
                    8.178}, {36.25, 5.4166}}}]}, {
                    FaceForm[
                    RGBColor[0.58431, 0.81961, 0.63922, 1.]]}, StripOnInput -> 
                   False]}, {
                 ImageSize -> {Automatic, 32}, 
                  ImagePadding -> {{5, 0}, {0, 0}}, BaselinePosition -> 
                  Scaled[0.25], ImageSize -> 32}], 
                StyleBox[
                 TagBox[
                  GridBox[{{
                    StyleBox[
                    "\"Example Resource\"", FontFamily -> "Source Sans Pro", 
                    FontWeight -> "SemiBold", StripOnInput -> False], 
                    StyleBox[
                    "\"DEFINITION NOTEBOOK\"", FontFamily -> 
                    "Source Sans Pro", FontTracking -> "SemiCondensed", 
                    FontVariations -> {"CapsType" -> "AllSmallCaps"}, 
                    StripOnInput -> False]}}, 
                   GridBoxAlignment -> {
                    "Columns" -> {{Left}}, "Rows" -> {{Baseline}}}, 
                   AutoDelete -> False, 
                   GridBoxDividers -> {
                    "ColumnsIndexed" -> {
                    2 -> RGBColor[0.32941, 0.32941, 0.32941]}, 
                    "Rows" -> {{None}}}, 
                   GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                  "Grid"], FontSize -> 24, FontColor -> 
                 RGBColor[0.32941, 0.32941, 0.32941], StripOnInput -> 
                 False]}}, 
              GridBoxAlignment -> {
               "Columns" -> {{Left}}, "Rows" -> {{Baseline}}}, AutoDelete -> 
              False, GridBoxItemSize -> {
               "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Grid"],
             "\[SpanFromLeft]", "\[SpanFromLeft]", "\[SpanFromLeft]", 
            "\[SpanFromLeft]", "\[SpanFromLeft]", "\[SpanFromLeft]", 
            TemplateBox[{
              StyleBox[
               
               TemplateBox[{
                "\"Example Repository\"", "\" \[RightGuillemet]  \""}, 
                "RowDefault"], "Text", FontColor -> 
               RGBColor[0.32941, 0.32941, 0.32941], StripOnInput -> False], 
              "https://resources.wolframcloud.com/ExampleRepository"}, 
             "HyperlinkURL"]}, {
            TemplateBox[{
              
              TemplateBox[{
               "\"Open Sample\"", 
                "\"View a completed sample definition notebook\""}, 
               "PrettyTooltipTemplate"], Annotation[
              DefinitionNotebookClient`$ButtonCodeID = 1953775238739395670; (
                DefinitionNotebookClient`$ClickedButton = "Open Sample"; 
                DefinitionNotebookClient`ViewExampleNotebook[
                  ButtonNotebook[]]), 
               DefinitionNotebookClient`ButtonCodeID[1953775238739395670]]& , 
              "\"View a completed sample definition notebook\"", False}, 
             "OrangeButtonTemplate"], 
            TemplateBox[{
              
              TemplateBox[{
               "\"Style Guidelines\"", 
                "\"View general guidelines for authoring resources\""}, 
               "PrettyTooltipTemplate"], Annotation[
              DefinitionNotebookClient`$ButtonCodeID = 4428028526384162518; (
                DefinitionNotebookClient`$ClickedButton = "Style Guidelines"; 
                DefinitionNotebookClient`ViewStyleGuidelines[
                  ButtonNotebook[]]), 
               DefinitionNotebookClient`ButtonCodeID[4428028526384162518]]& , 
              "\"View general guidelines for authoring resources\"", False}, 
             "OrangeButtonTemplate"], 
            TemplateBox[{
              TemplateBox[{
                TagBox[
                 GridBox[{{"\"Tools\"", 
                    PaneSelectorBox[{False -> GraphicsBox[{
                    RGBColor[1., 1., 1.], 
                    AbsoluteThickness[1.], 
                    LineBox[{{0, 0}, {0, 10}, {10, 10}, {10, 0}, {0, 0}}], 
                    LineBox[{{5, 2.5}, {5, 7.5}}], 
                    LineBox[{{2.5, 5}, {7.5, 5}}]}, ImageSize -> 12, 
                    PlotRangePadding -> 1.5], True -> GraphicsBox[{
                    RGBColor[1., 1., 1.], 
                    AbsoluteThickness[1.], 
                    LineBox[{{0, 0}, {0, 10}, {10, 10}, {10, 0}, {0, 0}}], 
                    LineBox[{{2.5, 5}, {7.5, 5}}]}, ImageSize -> 12, 
                    PlotRangePadding -> 1.5]}, 
                    Dynamic[
                    CurrentValue[
                    EvaluationNotebook[], {TaggingRules, "ToolsOpen"}, True]],
                     BaselinePosition -> Scaled[0.05]]}}, 
                  GridBoxAlignment -> {
                   "Columns" -> {{Automatic}}, "Rows" -> {{Baseline}}}, 
                  AutoDelete -> False, 
                  GridBoxItemSize -> {
                   "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                  GridBoxSpacings -> {"Columns" -> {{0.35}}}], "Grid"], 
                "\"Toggle documentation toolbar\""}, "PrettyTooltipTemplate"],
               Annotation[
              DefinitionNotebookClient`$ButtonCodeID = 1908941340027841465; (
                DefinitionNotebookClient`$ClickedButton = "Tools"; 
                DefinitionNotebookClient`ToggleToolbar[
                  ButtonNotebook[]]), 
               DefinitionNotebookClient`ButtonCodeID[1908941340027841465]]& , 
              "\"Toggle documentation toolbar\"", False}, 
             "OrangeButtonTemplate"], 
            TagBox[
             
             GridBox[{{"\"\"", "\"\""}}, 
              GridBoxAlignment -> {
               "Columns" -> {{Left}}, "Rows" -> {{Center}}}, AutoDelete -> 
              False, GridBoxDividers -> {
               "ColumnsIndexed" -> {2 -> True}, "Rows" -> {{False}}}, 
              GridBoxItemSize -> {
               "Columns" -> {{Automatic}}, "Rows" -> {{2}}}, 
              GridBoxSpacings -> {"Columns" -> {{0.5}}}, FrameStyle -> 
              RGBColor[0.96667, 0.98431, 0.97059]], "Grid"], 
            TemplateBox[{
              
              TemplateBox[{
               "\"Check\"", "\"Check notebook for potential errors\""}, 
               "PrettyTooltipTemplate"], Annotation[
              DefinitionNotebookClient`$ButtonCodeID = 3941141659801008137; (
                DefinitionNotebookClient`$ClickedButton = "Check"; 
                DefinitionNotebookClient`CheckDefinitionNotebook[
                  ButtonNotebook[]]), 
               DefinitionNotebookClient`ButtonCodeID[3941141659801008137]]& , 
              "\"Check notebook for potential errors\"", False}, 
             "OrangeButtonTemplate"], 
            ActionMenuBox[
             TemplateBox[{
               TemplateBox[{"\"Deploy\"", 
                 TemplateBox[{5}, "Spacer1"], "\"\[FilledDownTriangle]\""}, 
                "RowDefault"], Annotation[
               DefinitionNotebookClient`$ButtonCodeID = 6058522267645278627; 
                Null, 
                DefinitionNotebookClient`ButtonCodeID[6058522267645278627]]& ,
                "\"\"", True}, "OrangeButtonTemplate"], {
             "\"Locally on this computer\"" :> 
              With[{RSNB`nb$ = InputNotebook[], RSNB`$cp$ = $ContextPath}, 
                Quiet[
                 
                 Block[{$ContextPath = RSNB`$cp$, 
                   ResourceSystemClient`$\
AsyncronousResourceInformationUpdates = False, 
                   DefinitionNotebookClient`$SuppressDynamicEvents = True, 
                   DefinitionNotebookClient`$ButtonCodeID = None}, 
                  Internal`WithLocalSettings[
                   DefinitionNotebookClient`$ButtonsDisabled = True; 
                    CurrentValue[RSNB`nb$, {TaggingRules, "StatusMessage"}] = 
                    ProgressIndicator[Appearance -> "Necklace"]; Once[
                    ReleaseHold[
                    CurrentValue[
                    RSNB`nb$, {TaggingRules, "CompatibilityTest"}]], 
                    "KernelSession"]; Needs["DefinitionNotebookClient`"], 
                    Annotation[
                    DefinitionNotebookClient`$ButtonCodeID = 
                    3749335217312873674; 
                    DefinitionNotebookClient`CheckForUpdates[RSNB`nb$, 
                    ReleaseHold[
                    DefinitionNotebookClient`$ButtonCode = 
                    HoldForm[
                    DefinitionNotebookClient`$ClickedButton = "Deploy"; 
                    DefinitionNotebookClient`$ClickedAction = 
                    "Locally on this computer"; 
                    DefinitionNotebookClient`DisplayStripe[
                    ButtonNotebook[], 
                    DefinitionNotebookClient`DeployResource[
                    ButtonNotebook[], "Local"]]]]], 
                    DefinitionNotebookClient`ButtonCodeID[
                    3749335217312873674]], 
                    CurrentValue[RSNB`nb$, {TaggingRules, "StatusMessage"}] = 
                    ""; DefinitionNotebookClient`$ButtonsDisabled = False; 
                    Null]; Null]]], "\"For my cloud account\"" :> 
              With[{RSNB`nb$ = InputNotebook[], RSNB`$cp$ = $ContextPath}, 
                Quiet[
                 
                 Block[{$ContextPath = RSNB`$cp$, 
                   ResourceSystemClient`$\
AsyncronousResourceInformationUpdates = False, 
                   DefinitionNotebookClient`$SuppressDynamicEvents = True, 
                   DefinitionNotebookClient`$ButtonCodeID = None}, 
                  Internal`WithLocalSettings[
                   DefinitionNotebookClient`$ButtonsDisabled = True; 
                    CurrentValue[RSNB`nb$, {TaggingRules, "StatusMessage"}] = 
                    ProgressIndicator[Appearance -> "Necklace"]; Once[
                    ReleaseHold[
                    CurrentValue[
                    RSNB`nb$, {TaggingRules, "CompatibilityTest"}]], 
                    "KernelSession"]; Needs["DefinitionNotebookClient`"], 
                    Annotation[
                    DefinitionNotebookClient`$ButtonCodeID = 
                    7250853967221918483; 
                    DefinitionNotebookClient`CheckForUpdates[RSNB`nb$, 
                    ReleaseHold[
                    DefinitionNotebookClient`$ButtonCode = 
                    HoldForm[
                    DefinitionNotebookClient`$ClickedButton = "Deploy"; 
                    DefinitionNotebookClient`$ClickedAction = 
                    "For my cloud account"; 
                    DefinitionNotebookClient`DisplayStripe[
                    ButtonNotebook[], 
                    DefinitionNotebookClient`DeployResource[
                    ButtonNotebook[], "CloudPrivate"]]]]], 
                    DefinitionNotebookClient`ButtonCodeID[
                    7250853967221918483]], 
                    CurrentValue[RSNB`nb$, {TaggingRules, "StatusMessage"}] = 
                    ""; DefinitionNotebookClient`$ButtonsDisabled = False; 
                    Null]; Null]]], "\"Publicly in the cloud\"" :> 
              With[{RSNB`nb$ = InputNotebook[], RSNB`$cp$ = $ContextPath}, 
                Quiet[
                 
                 Block[{$ContextPath = RSNB`$cp$, 
                   ResourceSystemClient`$\
AsyncronousResourceInformationUpdates = False, 
                   DefinitionNotebookClient`$SuppressDynamicEvents = True, 
                   DefinitionNotebookClient`$ButtonCodeID = None}, 
                  Internal`WithLocalSettings[
                   DefinitionNotebookClient`$ButtonsDisabled = True; 
                    CurrentValue[RSNB`nb$, {TaggingRules, "StatusMessage"}] = 
                    ProgressIndicator[Appearance -> "Necklace"]; Once[
                    ReleaseHold[
                    CurrentValue[
                    RSNB`nb$, {TaggingRules, "CompatibilityTest"}]], 
                    "KernelSession"]; Needs["DefinitionNotebookClient`"], 
                    Annotation[
                    DefinitionNotebookClient`$ButtonCodeID = 
                    4892365933713591120; 
                    DefinitionNotebookClient`CheckForUpdates[RSNB`nb$, 
                    ReleaseHold[
                    DefinitionNotebookClient`$ButtonCode = 
                    HoldForm[
                    DefinitionNotebookClient`$ClickedButton = "Deploy"; 
                    DefinitionNotebookClient`$ClickedAction = 
                    "Publicly in the cloud"; 
                    DefinitionNotebookClient`DisplayStripe[
                    ButtonNotebook[], 
                    DefinitionNotebookClient`DeployResource[
                    ButtonNotebook[], "CloudPublic"]]]]], 
                    DefinitionNotebookClient`ButtonCodeID[
                    4892365933713591120]], 
                    CurrentValue[RSNB`nb$, {TaggingRules, "StatusMessage"}] = 
                    ""; DefinitionNotebookClient`$ButtonsDisabled = False; 
                    Null]; Null]]], 
              "\"In this session only (without documentation)\"" :> 
              With[{RSNB`nb$ = InputNotebook[], RSNB`$cp$ = $ContextPath}, 
                Quiet[
                 
                 Block[{$ContextPath = RSNB`$cp$, 
                   ResourceSystemClient`$\
AsyncronousResourceInformationUpdates = False, 
                   DefinitionNotebookClient`$SuppressDynamicEvents = True, 
                   DefinitionNotebookClient`$ButtonCodeID = None}, 
                  Internal`WithLocalSettings[
                   DefinitionNotebookClient`$ButtonsDisabled = True; 
                    CurrentValue[RSNB`nb$, {TaggingRules, "StatusMessage"}] = 
                    ProgressIndicator[Appearance -> "Necklace"]; Once[
                    ReleaseHold[
                    CurrentValue[
                    RSNB`nb$, {TaggingRules, "CompatibilityTest"}]], 
                    "KernelSession"]; Needs["DefinitionNotebookClient`"], 
                    Annotation[
                    DefinitionNotebookClient`$ButtonCodeID = 
                    7309290475811609296; 
                    DefinitionNotebookClient`CheckForUpdates[RSNB`nb$, 
                    ReleaseHold[
                    DefinitionNotebookClient`$ButtonCode = 
                    HoldForm[
                    DefinitionNotebookClient`$ClickedButton = "Deploy"; 
                    DefinitionNotebookClient`$ClickedAction = 
                    "In this session only (without documentation)"; 
                    DefinitionNotebookClient`DisplayStripe[
                    ButtonNotebook[], 
                    DefinitionNotebookClient`DeployResource[
                    ButtonNotebook[], "KernelSession"]]]]], 
                    DefinitionNotebookClient`ButtonCodeID[
                    7309290475811609296]], 
                    CurrentValue[RSNB`nb$, {TaggingRules, "StatusMessage"}] = 
                    ""; DefinitionNotebookClient`$ButtonsDisabled = False; 
                    Null]; Null]]]}, Appearance -> None, Method -> "Queued"], 
            
            ItemBox[
             StyleBox[
              DynamicBox[
               ToBoxes[
                CurrentValue[
                 EvaluationNotebook[], {TaggingRules, "StatusMessage"}, ""], 
                StandardForm], Initialization :> (CurrentValue[
                  EvaluationNotebook[], {TaggingRules, "StatusMessage"}] = 
                "")], "Text", 
              GrayLevel[1], StripOnInput -> False], ItemSize -> Fit, 
             Alignment -> Right, StripOnInput -> False], 
            DynamicBox[
             ToBoxes[
              If[
               CurrentValue[
                EvaluationNotebook[], {
                TaggingRules, "SubmissionReviewData", "Review"}, False], 
               RawBoxes[
                TemplateBox[{
                  TemplateBox[{
                    TagBox[
                    GridBox[{{
                    GraphicsBox[{
                    Thickness[0.06349], 
                    StyleBox[{
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 
                    0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1,
                     0}, {0, 1, 0}}}, CompressedData["
1:eJxTTMoPSmVmYGBgBWIWIGZigIEX9mCqQd8Bwv+Bnc/A54CiHs5HV6/ngJUP
p2HmwdTp4FCHTvOhqYfZrw2lhdDk0fno6tHcD1PPwOSAnY+uns8BAE8cGz4=

                    "]]}, {
                    FaceForm[
                    RGBColor[1., 1., 1.]]}, StripOnInput -> False], 
                    StyleBox[{
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 
                    0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1,
                     0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 
                    2, 0}, {0, 1, 0}, {0, 1, 0}}}, CompressedData["
1:eJxTTMoPSmVmYGBgB2IWIGZigAEJBwjNB6EblHHwX9ijqofxoeoYhKC0Bg4+
Hw4apk4Uap8aDr4QDhqqDu4uVRx8URw0TJ001D5lHHwJHDRUHYMclFbCwZfG
QUPVNSjgp+HmIWgAG/wcEg==
                    "]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 
                    0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1,
                     0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 
                    2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 0}, {0, 
                    1, 0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 0}, {0,
                     1, 0}, {0, 1, 0}}}, CompressedData["
1:eJx10EEKgCAQhWGpFtEyEAYGggQj6RKeoSMErbuCR0/IWfTgCcPwy7fR9XrO
u3fOTXWGOp2zM+ZvH2170nv+e2sFH0ijt45/XxJp9NgRPHYAb63kHhu9tf2H
eU8aPfbS9kxawAvxnrSCx3c3XzbS6JX4RFrAS34B53ckaw==
                    "]]}, {
                    FaceForm[
                    RGBColor[1., 1., 1.]]}, StripOnInput -> False]}, 
                    ImageSize -> 15, PlotRange -> {{0., 15.75}, {0., 16.5}}, 
                    AspectRatio -> 1.15], "\"Submit Update\""}}, 
                    GridBoxAlignment -> {
                    "Columns" -> {{Left}}, "Rows" -> {{Center}}}, AutoDelete -> 
                    False, GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {
                    "Columns" -> {{0}}, "ColumnsIndexed" -> {2 -> 0.5}, 
                    "Rows" -> {{0}}}], "Grid"], 
                    "\"Submit changes to update your example submission\""}, 
                   "PrettyTooltipTemplate"], Annotation[
                  DefinitionNotebookClient`$ButtonCodeID = 
                    2169377100431483360; (
                    DefinitionNotebookClient`$ClickedButton = "SubmitUpdate"; 
                    With[{RSNB`nb = ButtonNotebook[]}, 
                    DefinitionNotebookClient`DisplayStripe[RSNB`nb, 
                    DefinitionNotebookClient`SubmitRepositoryUpdate[RSNB`nb], 
                    "ShowProgress" -> True]]), 
                   DefinitionNotebookClient`ButtonCodeID[
                   2169377100431483360]]& , 
                  "\"Submit changes to update your example submission\"", 
                  True}, "OrangeButtonTemplate"]], 
               RawBoxes[
                TemplateBox[{
                  TemplateBox[{
                    TagBox[
                    GridBox[{{
                    GraphicsBox[{
                    Thickness[0.06349], 
                    StyleBox[{
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 
                    0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1,
                     0}, {0, 1, 0}}}, CompressedData["
1:eJxTTMoPSmVmYGBgBWIWIGZigIEX9mCqQd8Bwv+Bnc/A54CiHs5HV6/ngJUP
p2HmwdTp4FCHTvOhqYfZrw2lhdDk0fno6tHcD1PPwOSAnY+uns8BAE8cGz4=

                    "]]}, {
                    FaceForm[
                    RGBColor[1., 1., 1.]]}, StripOnInput -> False], 
                    StyleBox[{
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 
                    0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1,
                     0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 
                    2, 0}, {0, 1, 0}, {0, 1, 0}}}, CompressedData["
1:eJxTTMoPSmVmYGBgB2IWIGZigAEJBwjNB6EblHHwX9ijqofxoeoYhKC0Bg4+
Hw4apk4Uap8aDr4QDhqqDu4uVRx8URw0TJ001D5lHHwJHDRUHYMclFbCwZfG
QUPVNSjgp+HmIWgAG/wcEg==
                    "]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 
                    0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1,
                     0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 
                    2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 0}, {0, 
                    1, 0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 0}, {0,
                     1, 0}, {0, 1, 0}}}, CompressedData["
1:eJx10EEKgCAQhWGpFtEyEAYGggQj6RKeoSMErbuCR0/IWfTgCcPwy7fR9XrO
u3fOTXWGOp2zM+ZvH2170nv+e2sFH0ijt45/XxJp9NgRPHYAb63kHhu9tf2H
eU8aPfbS9kxawAvxnrSCx3c3XzbS6JX4RFrAS34B53ckaw==
                    "]]}, {
                    FaceForm[
                    RGBColor[1., 1., 1.]]}, StripOnInput -> False]}, 
                    ImageSize -> 15, PlotRange -> {{0., 15.75}, {0., 16.5}}, 
                    AspectRatio -> 1.15], "\"Submit to Repository\""}}, 
                    GridBoxAlignment -> {
                    "Columns" -> {{Left}}, "Rows" -> {{Center}}}, AutoDelete -> 
                    False, GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {
                    "Columns" -> {{0}}, "ColumnsIndexed" -> {2 -> 0.5}, 
                    "Rows" -> {{0}}}], "Grid"], 
                    "\"Submit your example to the Wolfram Example \
Repository\""}, "PrettyTooltipTemplate"], Annotation[
                  DefinitionNotebookClient`$ButtonCodeID = 
                    850153740503147579; (
                    DefinitionNotebookClient`$ClickedButton = "Submit"; 
                    With[{RSNB`nb = ButtonNotebook[]}, 
                    DefinitionNotebookClient`DisplayStripe[RSNB`nb, 
                    DefinitionNotebookClient`SubmitRepository[RSNB`nb], 
                    "ShowProgress" -> True]]), 
                   DefinitionNotebookClient`ButtonCodeID[
                   850153740503147579]]& , 
                  "\"Submit your example to the Wolfram Example Repository\"",
                   True}, "OrangeButtonTemplate"]]], StandardForm], Evaluator -> 
             "System", SingleEvaluation -> True]}}, 
          GridBoxAlignment -> {
           "Columns" -> {{Left}}, "ColumnsIndexed" -> {-1 -> Right}, 
            "Rows" -> {{Center}}}, AutoDelete -> False, 
          GridBoxBackground -> {"Columns" -> {{None}}, "Rows" -> {
              RGBColor[0.93333, 0.96863, 0.94118], 
              RGBColor[0.14902, 0.51765, 0.54902]}}, 
          GridBoxFrame -> {
           "Columns" -> False, 
            "RowsIndexed" -> {
             1 -> RGBColor[0.93333, 0.96863, 0.94118], 2 -> 
              RGBColor[0.14902, 0.51765, 0.54902]}}, 
          GridBoxItemSize -> {
           "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
          GridBoxSpacings -> {
           "Columns" -> {5, {0.9}, 5}, 
            "RowsIndexed" -> {1 -> 1.1, 2 -> 1.3, 3 -> 0.25}}, FrameStyle -> 
          RGBColor[0.93333, 0.96863, 0.94118]], "Grid"], 
        ButtonBoxOptions -> {Enabled -> Dynamic[
            Not[
             TrueQ[DefinitionNotebookClient`$ButtonsDisabled]], 
            TrackedSymbols :> {DefinitionNotebookClient`$ButtonsDisabled}]}, 
        StripOnInput -> False]& )}], 
   Cell[
    StyleData["ReviewerCommentLabelTemplate"], 
    TemplateBoxOptions -> {DisplayFunction -> (TagBox[
        GridBox[{{#, 
           TemplateBox[{
             GraphicsBox[{
               Thickness[0.0375], 
               StyleBox[{
                 
                 JoinedCurveBox[{{{0, 2, 0}}, {{0, 2, 0}}, {{0, 2, 0}}, {{0, 
                  2, 0}}, {{0, 2, 0}}, {{0, 2, 0}}, {{0, 2, 0}}, {{0, 2, 
                  0}}, {{0, 2, 0}}, {{0, 2, 0}}, {{0, 2, 0}}, {{0, 2, 0}}, {{
                  0, 2, 0}}, {{0, 2, 0}}, {{0, 2, 0}}, {{0, 2, 0}}, {{0, 2, 
                  0}}, {{0, 2, 0}}, {{0, 2, 0}}}, CompressedData["
1:eJxTTMoPSmVmYGAQBmImKAYDAWcHH/NOx4RSLwg91cMBLP7A1QFdHswvcIfw
VR0w5GfkCTUfyLJzyJj4tsZ+qi12/Qo2EHoCpvlgfaUGDltOlO2bP8sNwje1
hPK9MeTR7SMkD7bnKNSeUCOI/Re8IeJfnbDLf3Bx0L+rwtZ4VYU4eaA5YHtf
GWLY/50tfobPVUmIuJc1RD8DH4Re4IIhf1Hp9s+6LBW4eYT0Q9TrQfz/ywF7
fDjoQ+gGRWg8G0DNM8Mu72Dv8JZ3n8HMVaIE5cHmdEHjl0HPAQBjMcGK
                  "], 
                  CurveClosed -> {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                    0, 0, 0, 0}]}, {
                 CapForm["Butt"], 
                 JoinForm[{"Miter", 10.}], 
                 Thickness[0.023438], 
                 RGBColor[0.6, 0.6, 0.6, 1.]}, StripOnInput -> False], 
               StyleBox[{
                 
                 FilledCurveBox[{{{1, 4, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
                  3}}}, {{{45., 10.417}, {45., 8.6907}, {43.601, 7.2916}, {
                  41.875, 7.2916}, {40.149, 7.2916}, {38.75, 8.6907}, {38.75, 
                  10.417}, {38.75, 12.142}, {40.149, 13.542}, {41.875, 
                  13.542}, {43.601, 13.542}, {45., 12.142}, {45., 
                  10.417}}}]}, {
                 FaceForm[
                  RGBColor[0.23529, 0.4549, 0.55294, 1.]]}, StripOnInput -> 
                False], 
               StyleBox[{
                 
                 FilledCurveBox[{{{1, 4, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
                  3}}}, {{{22.292, 8.75}, {22.292, 5.068}, {19.307, 2.0833}, {
                  15.625, 2.0833}, {11.943, 2.0833}, {8.9583, 5.068}, {8.9583,
                   8.75}, {8.9583, 12.432}, {11.943, 15.417}, {15.625, 
                  15.417}, {19.307, 15.417}, {22.292, 12.432}, {22.292, 
                  8.75}}}]}, {
                 FaceForm[
                  RGBColor[0.23529, 0.4549, 0.55294, 1.]]}, StripOnInput -> 
                False], 
               StyleBox[{
                 
                 FilledCurveBox[{{{1, 4, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
                  3}}}, {{{40., 29.583}, {40., 24.291}, {35.709, 20.}, {
                  30.417, 20.}, {25.124, 20.}, {20.833, 24.291}, {20.833, 
                  29.583}, {20.833, 34.876}, {25.124, 39.167}, {30.417, 
                  39.167}, {35.709, 39.167}, {40., 34.876}, {40., 
                  29.583}}}]}, {
                 FaceForm[
                  RGBColor[0.23529, 0.4549, 0.55294, 1.]]}, StripOnInput -> 
                False], 
               StyleBox[{
                 
                 FilledCurveBox[{{{1, 4, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
                  3}}}, {{{59.167, 37.917}, {59.167, 35.961}, {57.581, 
                  34.375}, {55.625, 34.375}, {53.669, 34.375}, {52.083, 
                  35.961}, {52.083, 37.917}, {52.083, 39.873}, {53.669, 
                  41.458}, {55.625, 41.458}, {57.581, 41.458}, {59.167, 
                  39.873}, {59.167, 37.917}}}]}, {
                 FaceForm[
                  RGBColor[0.23529, 0.4549, 0.55294, 1.]]}, StripOnInput -> 
                False], 
               StyleBox[{
                 
                 FilledCurveBox[{{{1, 4, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
                  3}}}, {{{22.083, 45.208}, {22.083, 42.102}, {19.565, 
                  39.583}, {16.458, 39.583}, {13.352, 39.583}, {10.833, 
                  42.102}, {10.833, 45.208}, {10.833, 48.315}, {13.352, 
                  50.833}, {16.458, 50.833}, {19.565, 50.833}, {22.083, 
                  48.315}, {22.083, 45.208}}}]}, {
                 FaceForm[
                  RGBColor[0.23529, 0.4549, 0.55294, 1.]]}, StripOnInput -> 
                False], 
               StyleBox[{
                 
                 FilledCurveBox[{{{1, 4, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
                  3}}}, {{{7.2917, 41.25}, {7.2917, 39.294}, {5.706, 
                  37.708}, {3.75, 37.708}, {1.794, 37.708}, {0.20833, 
                  39.294}, {0.20833, 41.25}, {0.20833, 43.206}, {1.794, 
                  44.792}, {3.75, 44.792}, {5.706, 44.792}, {7.2917, 
                  43.206}, {7.2917, 41.25}}}]}, {
                 FaceForm[
                  RGBColor[0.23529, 0.4549, 0.55294, 1.]]}, StripOnInput -> 
                False], 
               StyleBox[{
                 
                 FilledCurveBox[{{{1, 4, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
                  3}}}, {{{51.458, 32.292}, {51.458, 29.76}, {49.406, 
                  27.708}, {46.875, 27.708}, {44.344, 27.708}, {42.292, 
                  29.76}, {42.292, 32.292}, {42.292, 34.823}, {44.344, 
                  36.875}, {46.875, 36.875}, {49.406, 36.875}, {51.458, 
                  34.823}, {51.458, 32.292}}}]}, {
                 FaceForm[
                  RGBColor[0.23529, 0.4549, 0.55294, 1.]]}, StripOnInput -> 
                False], 
               StyleBox[{
                 
                 FilledCurveBox[{{{1, 4, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
                  3}}}, {{{30.625, 43.125}, {30.625, 41.744}, {29.506, 
                  40.625}, {28.125, 40.625}, {26.744, 40.625}, {25.625, 
                  41.744}, {25.625, 43.125}, {25.625, 44.506}, {26.744, 
                  45.625}, {28.125, 45.625}, {29.506, 45.625}, {30.625, 
                  44.506}, {30.625, 43.125}}}]}, {
                 FaceForm[
                  RGBColor[0.40784, 0.67059, 0.71765, 1.]]}, StripOnInput -> 
                False], 
               StyleBox[{
                 
                 FilledCurveBox[{{{1, 4, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
                  3}}}, {{{44.792, 52.917}, {44.792, 49.235}, {41.807, 
                  46.25}, {38.125, 46.25}, {34.443, 46.25}, {31.458, 
                  49.235}, {31.458, 52.917}, {31.458, 56.599}, {34.443, 
                  59.583}, {38.125, 59.583}, {41.807, 59.583}, {44.792, 
                  56.599}, {44.792, 52.917}}}]}, {
                 FaceForm[
                  RGBColor[0.40784, 0.67059, 0.71765, 1.]]}, StripOnInput -> 
                False], 
               StyleBox[{
                 
                 FilledCurveBox[{{{1, 4, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
                  3}}}, {{{12.083, 27.292}, {12.083, 24.185}, {9.5649, 
                  21.667}, {6.4583, 21.667}, {3.3517, 21.667}, {0.83333, 
                  24.185}, {0.83333, 27.292}, {0.83333, 30.398}, {3.3517, 
                  32.917}, {6.4583, 32.917}, {9.5649, 32.917}, {12.083, 
                  30.398}, {12.083, 27.292}}}]}, {
                 FaceForm[
                  RGBColor[0.40784, 0.67059, 0.71765, 1.]]}, StripOnInput -> 
                False], 
               StyleBox[{
                 
                 FilledCurveBox[{{{1, 4, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
                  3}}}, {{{19.375, 22.292}, {19.375, 20.911}, {18.256, 
                  19.792}, {16.875, 19.792}, {15.494, 19.792}, {14.375, 
                  20.911}, {14.375, 22.292}, {14.375, 23.672}, {15.494, 
                  24.792}, {16.875, 24.792}, {18.256, 24.792}, {19.375, 
                  23.672}, {19.375, 22.292}}}]}, {
                 FaceForm[
                  RGBColor[0.40784, 0.67059, 0.71765, 1.]]}, StripOnInput -> 
                False], 
               StyleBox[{
                 
                 FilledCurveBox[{{{1, 4, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
                  3}}}, {{{31.042, 15.}, {31.042, 13.619}, {29.922, 12.5}, {
                  28.542, 12.5}, {27.161, 12.5}, {26.042, 13.619}, {26.042, 
                  15.}, {26.042, 16.381}, {27.161, 17.5}, {28.542, 17.5}, {
                  29.922, 17.5}, {31.042, 16.381}, {31.042, 15.}}}]}, {
                 FaceForm[
                  RGBColor[0.40784, 0.67059, 0.71765, 1.]]}, StripOnInput -> 
                False], 
               StyleBox[{
                 
                 FilledCurveBox[{{{1, 4, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
                  3}}}, {{{59.792, 18.333}, {59.792, 14.882}, {56.994, 
                  12.083}, {53.542, 12.083}, {50.09, 12.083}, {47.292, 
                  14.882}, {47.292, 18.333}, {47.292, 21.785}, {50.09, 
                  24.583}, {53.542, 24.583}, {56.994, 24.583}, {59.792, 
                  21.785}, {59.792, 18.333}}}]}, {
                 FaceForm[
                  RGBColor[0.40784, 0.67059, 0.71765, 1.]]}, StripOnInput -> 
                False], 
               StyleBox[{
                 
                 FilledCurveBox[{{{1, 4, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
                  3}}}, {{{29.167, 55.208}, {29.167, 53.022}, {27.394, 
                  51.25}, {25.208, 51.25}, {23.022, 51.25}, {21.25, 53.022}, {
                  21.25, 55.208}, {21.25, 57.394}, {23.022, 59.167}, {25.208, 
                  59.167}, {27.394, 59.167}, {29.167, 57.394}, {29.167, 
                  55.208}}}]}, {
                 FaceForm[
                  RGBColor[0.58431, 0.81961, 0.63922, 1.]]}, StripOnInput -> 
                False], 
               StyleBox[{
                 
                 FilledCurveBox[{{{1, 4, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
                  3}}}, {{{51.667, 43.75}, {51.667, 42.369}, {50.547, 
                  41.25}, {49.167, 41.25}, {47.786, 41.25}, {46.667, 
                  42.369}, {46.667, 43.75}, {46.667, 45.131}, {47.786, 
                  46.25}, {49.167, 46.25}, {50.547, 46.25}, {51.667, 
                  45.131}, {51.667, 43.75}}}]}, {
                 FaceForm[
                  RGBColor[0.58431, 0.81961, 0.63922, 1.]]}, StripOnInput -> 
                False], 
               StyleBox[{
                 
                 FilledCurveBox[{{{1, 4, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
                  3}}}, {{{17.917, 33.958}, {17.917, 32.463}, {16.704, 
                  31.25}, {15.208, 31.25}, {13.713, 31.25}, {12.5, 32.463}, {
                  12.5, 33.958}, {12.5, 35.454}, {13.713, 36.667}, {15.208, 
                  36.667}, {16.704, 36.667}, {17.917, 35.454}, {17.917, 
                  33.958}}}]}, {
                 FaceForm[
                  RGBColor[0.58431, 0.81961, 0.63922, 1.]]}, StripOnInput -> 
                False], 
               StyleBox[{
                 
                 FilledCurveBox[{{{1, 4, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
                  3}}}, {{{11.875, 17.917}, {11.875, 16.996}, {11.129, 
                  16.25}, {10.208, 16.25}, {9.2879, 16.25}, {8.5417, 
                  16.996}, {8.5417, 17.917}, {8.5417, 18.837}, {9.2879, 
                  19.583}, {10.208, 19.583}, {11.129, 19.583}, {11.875, 
                  18.837}, {11.875, 17.917}}}]}, {
                 FaceForm[
                  RGBColor[0.58431, 0.81961, 0.63922, 1.]]}, StripOnInput -> 
                False], 
               StyleBox[{
                 
                 FilledCurveBox[{{{1, 4, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
                  3}}}, {{{39.583, 17.917}, {39.583, 16.996}, {38.837, 
                  16.25}, {37.917, 16.25}, {36.996, 16.25}, {36.25, 16.996}, {
                  36.25, 17.917}, {36.25, 18.837}, {36.996, 19.583}, {37.917, 
                  19.583}, {38.837, 19.583}, {39.583, 18.837}, {39.583, 
                  17.917}}}]}, {
                 FaceForm[
                  RGBColor[0.58431, 0.81961, 0.63922, 1.]]}, StripOnInput -> 
                False], 
               StyleBox[{
                 
                 FilledCurveBox[{{{1, 4, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
                  3}}}, {{{36.25, 5.4166}, {36.25, 2.6552}, {34.011, 
                  0.41662}, {31.25, 0.41662}, {28.489, 0.41662}, {26.25, 
                  2.6552}, {26.25, 5.4166}, {26.25, 8.178}, {28.489, 
                  10.417}, {31.25, 10.417}, {34.011, 10.417}, {36.25, 
                  8.178}, {36.25, 5.4166}}}]}, {
                 FaceForm[
                  RGBColor[0.58431, 0.81961, 0.63922, 1.]]}, StripOnInput -> 
                False]}, {
              ImageSize -> {Automatic, 12}, ImagePadding -> {{5, 0}, {0, 0}}, 
               BaselinePosition -> Scaled[0.25], ImageSize -> 32}], 
             "Wolfram Example Repository Reviewer"}, 
            "PrettyTooltipTemplate"]}}, 
         GridBoxAlignment -> {
          "Columns" -> {{Automatic}}, "Rows" -> {{Center}}}, AutoDelete -> 
         False, GridBoxItemSize -> {
          "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
         GridBoxSpacings -> {"Columns" -> {{0.25}}}], "Grid"]& )}], 
   Cell[
    StyleData["CommentReplyIcon"], 
    TemplateBoxOptions -> {DisplayFunction -> (GraphicsBox[{
         Thickness[0.076923], 
         FaceForm[{#, 
           Opacity[1.]}], 
         FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}}}, {{{1.5, 7.5}, {6.5, 11.5}, {
          6.5, 3.5}}}], 
         FilledCurveBox[{{{1, 4, 3}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
          0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
          3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
          3}, {1, 3, 3}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
          0}, {0, 1, 0}, {0, 1, 0}, {1, 3, 3}}}, CompressedData["
1:eJw9U2tIVEEUvq5iVkttZmdfuo/ZbQukJGKVqPBLUTGJ0h9hVLIJRYhUVJj2
AjGRWCKiF0llZWRCSEnZExEJ06CotaiQyH7EIrthT3u6NXPn3jswnDlzzzlz
vu8711u9vWJzsqIoSXwv5tuk6IsgrQvOnLf+1CRC5ZKbg3WJAIJV90rNJoJF
XOR6sebI6W3pyXq8DxccIoGwa+uxj/v/McxNbTxZOJ3w4Rkb+ZVgWGk2ZbcQ
Yfm0V+07Jhm6St7vzVhI2JfBT78ZCkI8cj2hqe/xxaIJJm0PoWEssCgtzvCc
lzlYYwXP5iUYHpXlHV4xasXLeh4wyKCWX2fDqcJwbfQ+w4F83vGQDT1fJ1/U
dzJ842bsih1XB3hiI0NzrPyOq9mBPb1tjpyNDBXci5U7MVQnLhji4nMsE+9W
c6ARL3i3XSWbXNiiLi8EzPxbbqydsaD73LgHJ2wp/OiFoKVJ8Ui+Chha6M3T
H8NZUMPm+XB9p8h0QtATjvtxqUh0SBgV76QHZN+lszReA5pNQ66o1+8HV6O3
rdWCBIcTuKHxHJ4NQdO1sx4Nxxy4VYBug2dVt4lMnB/vGCi7TSgWz/504Etk
VbXlNSGkCmWHqFYbJXziYXlT7VKXEdLq2DDMwyvvksTZZ5W4OgiCjmCVFTUP
dh+3HSKJ8y9hqUogIfqn83PkCUndQoTLQsZ2gpperL3fQJLXIMEn5F5GaD3D
l50g2O3OIkhiCUf7v8/fMJOMuRPTmT2FjLlU+0ghY471+dV93epzr/sPPaJz
u3Ev65sNX/8//gP5Ei2u
          "]]}, AspectRatio -> Automatic, ImageSize -> {13., 13.}, 
        PlotRange -> {{0., 13.}, {0., 13.}}]& )}], 
   Cell[
    StyleData["CommentCellLabelTemplate"], 
    TemplateBoxOptions -> {DisplayFunction -> (StyleBox[
        TagBox[
         GridBox[{{
            StyleBox[#, FontSize -> 11], "\[SpanFromLeft]"}, {
            StyleBox[
             DynamicBox[
              ToBoxes[
               DateString[
                TimeZoneConvert[
                 DateObject[#2, TimeZone -> 0]], {
                "Month", "/", "Day", "/", "Year", " ", "Hour24", ":", 
                 "Minute"}], StandardForm], SingleEvaluation -> True], 
             FontSize -> 9], 
            ItemBox[
             ButtonBox[
              TagBox[
               StyleBox[
                TemplateBox[{"\"Reply \[RightGuillemet]\"", 
                  StyleBox["\"Reply \[RightGuillemet]\"", "HyperlinkActive"], 
                  BaseStyle -> "Hyperlink"}, "MouseoverTemplate"], FontSize -> 
                9], 
               MouseAppearanceTag["LinkHand"]], BaseStyle -> "Hyperlink", 
              ButtonFunction :> (SelectionMove[
                 ParentCell[
                  EvaluationCell[]], After, Cell]; 
               DefinitionNotebookClient`CommentInsert[]), Evaluator -> 
              Automatic, Method -> "Queued"], Alignment -> Right]}}, 
          GridBoxAlignment -> {"Columns" -> {{Left}}}, AutoDelete -> False, 
          GridBoxItemSize -> {
           "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
          GridBoxSpacings -> {"Columns" -> {{Automatic}}, "Rows" -> {{0}}}], 
         "Grid"], "CommentLabel", ShowStringCharacters -> False]& )}], 
   Cell[
    StyleData["OrangeButtonTemplate"], 
    TemplateBoxOptions -> {DisplayFunction -> (FrameBox[
        ButtonBox[
         StyleBox[#, "Text", FontFamily -> "Source Sans Pro", FontWeight -> 
          "SemiBold", FontTracking -> "Condensed", FontSize -> 13, FontColor -> 
          Dynamic[
            FEPrivate`If[
             CurrentValue[Enabled], 
             GrayLevel[1], 
             RGBColor[0.83235, 0.83235, 0.83235]], Evaluator -> "System"], 
          StripOnInput -> False], ButtonFunction :> 
         With[{RSNB`nb$ = ButtonNotebook[]}, 
           If[#4, CurrentValue[RSNB`nb$, {TaggingRules, "StatusMessage"}] = 
             ProgressIndicator[Appearance -> "Necklace"]]; 
           With[{RSNB`$cp$ = $ContextPath}, 
             Quiet[
              
              Block[{$ContextPath = RSNB`$cp$, 
                ResourceSystemClient`$AsyncronousResourceInformationUpdates = 
                False, DefinitionNotebookClient`$ButtonCodeID = None}, 
               Internal`WithLocalSettings[
                DefinitionNotebookClient`$ButtonsDisabled = True; Once[
                   ReleaseHold[
                    CurrentValue[
                    RSNB`nb$, {TaggingRules, "CompatibilityTest"}]], 
                   "KernelSession"]; Needs["DefinitionNotebookClient`"], 
                 Annotation[
                 DefinitionNotebookClient`$ButtonCodeID = 2045406886999866622; 
                  DefinitionNotebookClient`CheckForUpdates[RSNB`nb$, 
                    ReleaseHold[
                    DefinitionNotebookClient`$ButtonCode = HoldForm[
                    #2[]]]], 
                  DefinitionNotebookClient`ButtonCodeID[2045406886999866622]],
                  DefinitionNotebookClient`$ButtonsDisabled = False; Null]; 
               Null]]]; 
           CurrentValue[RSNB`nb$, {TaggingRules, "StatusMessage"}] = ""; 
           Null], FrameMargins -> {{5, 5}, {0, 0}}, 
         Appearance -> {"Default" -> Image[CompressedData["
1:eJxTTMoPSmNiYGAo5gASQYnljkVFiZXBAkBOaF5xZnpeaopnXklqemqRRRIz
UFAcikHs/4QAMWqAQK2lhxKEyxD9qgbrvCK35DT/yCgIArKBIkBxYgzRaO52
yMwJwQ2AskA1eAzRrW7yjYnFYwIEANUAVWI1BGg+MSbAzYG7B9kQ/L7A6i80
Q4AhRpIJEAAJZ7ghwJAnwxCgLmRDgDFIhiFAXUC9kNQIZABTAhmGAHVBDAEC
yg2hikuoGCZUiR2qpBOqpFhq5R2q5GJqlSfUKtnILmPxA2JKewB9E9G3
             "], "Byte", ColorSpace -> "RGB", ImageResolution -> 144, 
             Interleaving -> True], "Hover" -> Image[CompressedData["
1:eJxTTMoPSmNiYGAo5gASQYnljkVFiZXBAkBOaF5xZnpeaopnXklqemqRRRIz
UFAcikHs/4QAMWqAQK2lhxKEyxD9qgbrvCK35DT/yCgIArKBIkBxYgzRaO52
yMwJwQ2AskA1eAzRrW7yjYkFqgwKj7ArrTJt6daZPAeCgGygCFAcKAtUA1SJ
1RCg+RATPNMydCfPVp+9FBMBxYGyEHPg7kE2BOILoBqs2pERxBygejRDgCEG
8QUuN6C5B+IvSDjDDQGGPFAQ6GuCJkAQUCVQPVAXsiHAGAQKAkOPSEOAKoHq
gbqAeiGpEcgApgSgIDAWiDQEqBKoHqgLYggQUG4IVVxCxTChSuxQJZ1QJcVS
K+9QJRdTqzyhVslGdhmLHxBT2gMANFwcQQ==
             "], "Byte", ColorSpace -> "RGB", ImageResolution -> 144, 
             Interleaving -> True], "Pressed" -> Image[CompressedData["
1:eJxTTMoPSmNiYGAo5gASQYnljkVFiZXBAkBOaF5xZnpeaopnXklqemqRRRIz
UFAcikHs/4QAMWqAQK2lhxKEyxD9qgbrvCK35DT/yCgIArKBIkBxYgzRaO52
yMwJwQ2AskA1eAzRrW7yjYkFqgwKDbNNSDZOzdLMLoAgIBsoAhQHygLVAFVi
NQRoPsQEj+gYrewClbwSTAQUB8pCzIG7B9kQiC+AarBqR0YQc4Dq0QwBhhjE
F7jcgOYeiL8g4Qw3BBjyQEGgrwmaAEFAlUD1QF3IhgBjECgIDD0iDQGqBKoH
6gLqhaRGIAOYEoCCmkT4BYKAKoHqgboghgAB5YZQxSVUDBOqxA5V0glVUiy1
8g5VcjG1yhNqlWxkl7H4ATGlPQC4Vtih
             "], "Byte", ColorSpace -> "RGB", ImageResolution -> 144, 
             Interleaving -> True]}, Background -> 
         RGBColor[0.14902, 0.51765, 0.54902], Method -> "Queued", 
         ImageSize -> {All, 23}, Evaluator -> Automatic], FrameStyle -> 
        Directive[
          RGBColor[0.14902, 0.51765, 0.54902], 
          AbsoluteThickness[2]], FrameMargins -> -1, ContentPadding -> False, 
        StripOnInput -> False]& )}], 
   Cell[
    StyleData["SuggestionGridTemplate"], 
    TemplateBoxOptions -> {DisplayFunction -> (StyleBox[
        FrameBox[
         AdjustmentBox[
          TagBox[
           GridBox[{{
              
              TemplateBox[{#2, #3, {16., 16.}, {{1., 17.}, {1., 17.}}}, 
               "SuggestionIconTemplate"], 
              
              PaneBox[#, ImageSizeAction -> "ShrinkToFit", BaselinePosition -> 
               Baseline, ImageSize -> Full], 
              RowBox[{
                AdjustmentBox[
                 TemplateBox[{
                   ActionMenuBox[
                    TagBox[
                    PaneSelectorBox[{False -> GraphicsBox[{
                    EdgeForm[
                    Directive[
                    GrayLevel[1, 0], 
                    Thickness[0.025]]], 
                    FaceForm[#4], 
                    
                    RectangleBox[{-1.75, -2}, {1.75, 2}, RoundingRadius -> 
                    0.2], 
                    Thickness[0.15], #5, 
                    LineBox[{{-0.5, -1.}, {0.5, 0.}, {-0.5, 1.}}]}, 
                    ImageSize -> {Automatic, 15}, ImageMargins -> 0], True -> 
                    GraphicsBox[{
                    EdgeForm[
                    Directive[#5, 
                    Thickness[0.025]]], 
                    FaceForm[#2], 
                    
                    RectangleBox[{-1.75, -2}, {1.75, 2}, RoundingRadius -> 
                    0.2], 
                    Thickness[0.15], 
                    GrayLevel[1], 
                    LineBox[{{-0.5, -1.}, {0.5, 0.}, {-0.5, 1.}}]}, 
                    ImageSize -> {Automatic, 15}, ImageMargins -> 0]}, 
                    Dynamic[
                    CurrentValue["MouseOver"]], ImageSize -> Automatic, 
                    FrameMargins -> 0], 
                    MouseAppearanceTag["LinkHand"]], #6, Appearance -> None, 
                    Method -> "Queued"], "\"View suggestions\""}, 
                  "PrettyTooltipTemplate"], BoxBaselineShift -> -0.5], 
                " "}]}}, 
            GridBoxAlignment -> {
             "Columns" -> {{Left}}, "Rows" -> {{Baseline}}}, AutoDelete -> 
            False, GridBoxItemSize -> {
             "Columns" -> {Automatic, Automatic, Fit}, 
              "Rows" -> {{Automatic}}}, 
            GridBoxSpacings -> {"Columns" -> {{0.4}}}], "Grid"], 
          BoxMargins -> {{0.25, -0.5}, {0.15, -0.15}}], 
         RoundingRadius -> {13, 75}, Background -> #4, FrameStyle -> None, 
         FrameMargins -> {{0, 8}, {0, 0}}, ImageMargins -> {{0, 0}, {5, 5}}, 
         StripOnInput -> False], "Text", FontColor -> #5, FontSize -> 14, 
        FontFamily -> "Source Sans Pro", FontWeight -> "SemiBold", 
        FontTracking -> "Plain", 
        PrivateFontOptions -> {"OperatorSubstitution" -> False}, 
        LineBreakWithin -> False]& )}], 
   Cell[
    StyleData["SuggestionIconTemplate"], 
    TemplateBoxOptions -> {DisplayFunction -> (GraphicsBox[{
         Thickness[0.055556], 
         StyleBox[{
           
           FilledCurveBox[{{{1, 4, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3,
             3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}}}, CompressedData["
1:eJxTTMoPSmVmYGBgBGJJIGZigIIGAwcIQ8kBxk94ekHp9k9Vh8qXaoYcOfoO
m+a+X37stKZDTP+hrxpzdOA0TBymDqYPl7n2pnG7PHlk4Pw5RxQ2FGWIwPWD
jI3p54WbLxuVYn3fnwluD8S8H/Yo9gD5KPYA+TB7YPph9sDMh9EwcZg6FPdh
MRfdXpi7YPph7oaZD/MXzB5c4QCzBwA/Dn+d
            "]]}, 
          FaceForm[#]], 
         StyleBox[{
           
           FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1,
              0}, {0, 1, 0}}, {{1, 4, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1,
              3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}}}, {{{8.1753, 7.4169}, {
             7.7969, 11.308}, {7.7969, 13.38}, {10.12, 13.38}, {10.12, 
             11.308}, {9.7415, 7.4169}, {8.1753, 7.4169}}, CompressedData["
1:eJxTTMoPSmViYGCQBGIQDQFKDg+rRNa5P+RzKPOXE8vSVYTz8z+0ngxpVHCA
qBNwmPd++THv7/IO8q2vA3fICTpUvlQz5Hgj52DLdX1xga2QQxoYyDmcYLed
HTpfGM6/k8GQ3+giCue7M1dwq7wQg+vnmbyyKdBTAm6+tsTUK5wZknD7Pec2
qB1qk4K772Y8iCXtAHM/jP/bquBcxyUEfyJ/ldnqOmW4/qw9JZMlWFTg5tfa
m8bt6lSB23/2DAiowN0H48PcD+PD/AfTD/M/zHxY+MDsh4UfzH2w8EUPfwD5
N5G6
             "]}]}, 
          FaceForm[#2]]}, ImageSize -> #3, PlotRange -> #4, AspectRatio -> 
        Automatic, BaselinePosition -> Scaled[0.1]]& )}], 
   Cell[
    StyleData["FormEditValuesButtonTemplate"], 
    TemplateBoxOptions -> {DisplayFunction -> (TemplateBox[{
         TagBox[
          PaneBox[
           PaneSelectorBox[{False -> GraphicsBox[
               TagBox[
                RasterBox[CompressedData["
1:eJzNWHlMVEcYf28XlGM5VlcRapRDDFK0sBaLBWVXUDxTKpe4JgvoQlALAsvV
hHIoV4KK6wGiQlUqoqDcKKysDSZtPZJWTTzaxGrV2mqrNtqKB3Qnz8+Zd6Cv
tn90vkgyv+/4zc58M9/3dEtIXZoooSgqw8r8Z2l8tjo9PT43wtE8iUrJSE5K
0a1akKLXJenSAxKkZlD58h9y+X+M8Z7a/I3G7V/lHQgKp2kGmzw9rcrQb+j/
ZItPIGBvNywsVVGVJ01DWAqbpBYUFZ1hGsTYvssRqTLHt4nvoIgvbP6ZjM+I
Nt9PzUePPdbvcvX+ZwzTQ9vv8yMh6R04fFNY0/ciOkM8wzjXY4+F47xJgiPF
cqRuY3kOlnUGLFq4khsv53NPv8zd7NXs/lYsR+158Gm9l1Tu7IYwmq7oJaMd
uWMnR7jMMXLd/isYt7UXx4F9Rjtj1NmNXPPsCKyh6S9+AHzUOHEcpR3gMWM+
iQdHrq1kZFkmidvYQS633399ZBf31G21F/ZdLmmvPo0zVcyalCFg33Qr78Ce
7+qv5jdOm8W3e39u9yN+npR3ieHQ5ArlWGwW28pBIXwfilvFcESnC2eyMoS0
ii8UstncZ2XDjiaROihGjbMcyWVJLBP0N2ELC8vm229icHFPKKo+Y3zK3Jj6
q2lV3gFvZpk4BfSqKHwfFC4fLNDml3cVt2IGO7m+5sRzfoSNxglemGVV8dZT
yRXqaKeJ5V1gkWIALX5bk8r5u+3x3qEbwvuN3kJ1DN9j5mLQdz60skXIeM9X
PoPMnWYzdD4cjoGRMC3XRyI5+CNolyQhJK4A5mWdXGs7Ofs3HP+z9nz16fbf
Scz41Muf67c8B7Q7z6L5RiPMAxZxbfU1OFbDtVDNSGtmnb4qQz/W1F1ElYsc
8rG9A6BF8x1fw2zhSnbddHHHJ115kl3rJNI1mzBL6HI2x9SglrugQzHzG7Ft
RQ95IglF+DfwqylNb2gRugnWMnNteFWLj/+FsNlLyd3tfoTrTPWZV+vUcBnQ
cHbre8HoTzy3ljGYxzT2Cep3MespaibRtZWwGy9vnPmkmXPgjy1fgte7Mxlk
fhwZa/8V+9EQTZuPzwg4HBSA1J4XZqCotB1gExTO58hrYOoYM5RzcCcAHHIn
QKpPD8eBzx12GHP0PAlfjXPI3C8J7JXlSNjt9vuSYVrKkjbwUs4R2quCwxLU
mFJTZpCoaQjXuPqrgPmqhBhs7XH1lTsxmP889su24lOEZuzEyJE7ZJ3Gu23o
Z9bDHvitrb2A0Um+NedwxKO/IGzrKZhn15FnRFHeAdh2zSZuXxscCXtpGorR
kxqpRWx2zxPQsTk8/bgrxe+MaWj9UXw/be11pZih5VduxzPCqu03kiPFALPM
3VyOCV5kv9P3ovJk6rbkipI2du3n39AwLegO3UBzn0CYH3vMfzHUMeyM4Mu6
7Vwfiqr6BrRxBWhO0/suAxK5jm8fpoX7LszAz4bJStAanylcGCwiFbD9V2ja
xk4ZosmNTsc+Xv51F4Xit9yduwJbqaJ0JYEfoT4xaw9YFDaBVuaId93cVb58
MxPLsL/UIlSz2URmft3FGL2tA7YI1UAONF7HOeWnxhb6XULrJFnQsLHz+XDW
x6ooZQjcOD4DKXsvkfnu6i1kYxpaVcw/H/5QRQl7L0lk27HfLJCtp8Rw6EqF
fDe08F+54MjaC0jX8aDpFtglV4jhCAoH+44HzPvdfFuTy63xMGwd5GMpKq8B
fNTRpNZj2vw4RvznkfhoZ7A/fBO9AdzTEhrM70HiNBGj1jJcRY3PJvmSHod+
Ao3Yr2j8HVXeNXMx7Cr7K7HmHOzFZGXWHpytjmPEcXx2kIzWcG15juOYqUHk
dz+S2OwRVmFa3DkhaboljgF1R9wc6R3A/RJIz5PWe1wsNlssB0XFZgllI8Qe
TrOhxcJSPAfqIjabhOLkNYSvFsL3XlqsG67qv264eqcYuv4gI9V/bz+Kptcf
IbETz4ualXP+zf/+WMuWJO08i2J1P0qrYjJTIl2WyXx5NV6PK1C88/bR/7vx
N3kqZvY=
                 "], {{0, 50.}, {50., 0}}, {0, 255}, ColorFunction -> 
                 GrayLevel], 
                BoxForm`ImageTag[
                "Byte", ColorSpace -> "Grayscale", Interleaving -> True], 
                Selectable -> False], DefaultBaseStyle -> "ImageGraphics", 
               ImageSizeRaw -> {50., 50.}, PlotRange -> {{0, 50.}, {0, 50.}}],
              True -> GraphicsBox[
               TagBox[
                RasterBox[CompressedData["
1:eJzNWG1MU1cY7m1vS4GWttBLy0dLWyhl5aultrT0C2QzM5rMIWgyluDHkMwf
YgBF9gc1cWpijDNuRNFsv2Rmuqmb/NjIYIFkG2qyAYnAljidODfdmItu+AHs
Xi6n59x7D3LH9mPnRJLzvB/Pue95z3nfat3UWLVFKpFImpX0n6qNrRVNTRvb
1mrpRc225tcbttW/tnJbS31DfZN/k4wGS+b/MSb/jxFvt7QX95R86TytXyMh
WEztye1w97v7c97SBAG2tEHIqRpXX/ksnPlnCVIiMTWXz0DMN5rZSGqX4l+u
t+wp+wn1z05Lu7ZCiIYfOjoTnf+MQfd8aFLoiZmRR4FbeEl02tQsnkFpCT/E
+1lsUtViOezHOJYzhZdSVqVt5vvLe0/ldpzk7mbZN2I5vEPAJnjPdlBpnQOJ
4s9Qb2V3SB0Dk9rM7b4xiJNJ4jigjSINiaAV3TO1FjEgSr+PWRjFcRR+AiyS
X0RxqjrnCDtNO1Bcpga5HJp8tud4m/2Yd9g3WvixZxBmqpg96SqBfmDCeXrZ
t6XjzjOaMEbvhfADYZ4UdYvhMLfhcsy8k6sl1+PvQ8EFMRymJnwm6ypRLcse
nI7rc1kC1xshk+sVRmkcn8V2AGvfi1jKy24vxhBvs+71XI4+Zm9M6XhuR5J/
cZaE54CcqoH3IS49eaWlvai74AJkIHWOE9GnQg/FPQl5kMW6zz2QfSh1nTKr
qBto2I8CKXxbbQeF0VYVB27i4828hanrhRYpq4E8dF+WOBcFe8xmZv5OcxhC
9xdiYKexjm9DSP0/AGl6A4NYdoN14SW+NqnjfkPkT++QZzD0G4pFH6u9fDvz
LiD1XGHWxT1gnbKKr+s4AX35rxtqpfHsPrXl7n4o8Y4wlQsditTIIyBl1iVf
gVXaZm7djLfBk3b1cWsdIcs5DFkMr3A5NKHg3RgH7dN5BsmUT9ETse6F34Cp
pkTBedxNkKno2hCrxZG/GIyq4mTKA1hnPJdj+6wVMEiYlzg6PX8mT2UqFlMV
cU/Q0cnuJ/8ciuYcAdGYv3H0SbPnIByuL4BVUoBFjBtQX74xeQrwZmmHZwQ4
5PrYmQ7hGSSS3HeADt0XCTicXWwdY4duOewEAIfCEMu/wYU44LmDCEOOyFTG
VphDdL+EiZU0DkQ7NEks0FIWXgRWuuW4WOV/QDCNqSTJh6Lls7DGlY4DTFuO
YyCTYPVVGFgseQX3Zct6Yy6mxyFSdget0zDa7n52P9wB31rvMERVLs9VxOPP
DOYeAOu8d9Ezor/Qj0TwML+vpapBLOlvb0ElBGlujUzF7iCHQ+Xm7xS+M3RN
/AjeTzLJth8yBH/hdzxSZfBXlMN+NHZfTvI5EvLQfic67eqzH8s+VHiRW/uF
N9RYB2SBm8xaEwTr8EPhi5G6npsRwml/m29Dv4FfA6llNxs+3yhAMrcL9Y11
4L7jGYTZoC6JffmTuHQWy2wEmG+MvvRqXaW5zdSE2Hi9Izj/wbuGV6EWVWN7
U/8S0yc6TsXux1kgJbUw6nRXOf9m2g5Ae4I01Lp60cz3jphaSA3UMNSCHPDf
gDmlrYAajk7cPlEWZsjUmjL9y1SNrhLcOCEDOn3X0HxPdOJ0ymet+4TnIxxU
Dd46fQtXj/tmgekeEMNh24+zLTgvfOWoau8wIwv9HpgAetmHxHDo1wB92nbu
/S67bW7j13gwSI0ila6+XcAmdR0qVRUZN7AzeQWKK9KAfuAW8wbwTws32O9h
pjILojIVrKLRJyoXahH4EUjE/oqGv6OKulNWg6hyfyV6roJYqEscp2C2yilx
HM73UW/+6+ZdckoTQn/3M9PcKlUa62DnNBerCXEMTHfEz5HII9gvxbCp4D0+
Zm4Vy0H3kjtx2Qh8LyShs1UunoPpIly9OD/OroytONx3La1+oar/rJHotB8N
/4F6Kv1Onkz3hx+iWPRp/jm6Y/gX//sjU6U3eK4wvsIPcjvYzCRkph3sLy//
DcvuuIyle//vxt/PCE6d
                 "], {{0, 50.}, {50., 0}}, {0, 255}, ColorFunction -> 
                 GrayLevel], 
                BoxForm`ImageTag[
                "Byte", ColorSpace -> "Grayscale", Interleaving -> True], 
                Selectable -> False], DefaultBaseStyle -> "ImageGraphics", 
               ImageSizeRaw -> {50., 50.}, 
               PlotRange -> {{0, 50.}, {0, 50.}}]}, 
            Dynamic[
             CurrentValue["MouseOver"]], ImageSize -> Automatic, FrameMargins -> 
            0], ImageSize -> {Automatic, 15}, ImageSizeAction -> 
           "ResizeToFit"], 
          MouseAppearanceTag["LinkHand"]], "\"Edit values\""}, 
        "PrettyTooltipTemplate"]& )}], 
   Cell[
    StyleData["HintPodTitleBar"], 
    TemplateBoxOptions -> {DisplayFunction -> (GraphicsBox[{
         GrayLevel[0.97], 
         FilledCurveBox[
          BezierCurve[{
            Offset[{0, -3}, {1, 1}], 
            Offset[{0, -1.3443}, {1, 1}], 
            Offset[{-1.3443, 0}, {1, 1}], 
            Offset[{-3, 0}, {1, 1}], 
            Offset[{-3, 0}, {1, 1}], 
            Offset[{3, 0}, {-1, 1}], 
            Offset[{3, 0}, {-1, 1}], 
            Offset[{1.3443, 0}, {-1, 1}], 
            Offset[{0, -1.3443}, {-1, 1}], 
            Offset[{0, -3}, {-1, 1}], 
            Offset[{0, -3}, {-1, 1}], {-1, -1}, {-1, -1}, {-1, -1}, {1, -1}, {
            1, -1}}]], 
         InsetBox[
          FormBox[
           StyleBox[
           "\"Notebook Analysis\"", FontColor -> GrayLevel[0.4], FontColor -> 
            GrayLevel[0.4], FontFamily -> "Source Sans Pro", FontWeight -> 
            Plain, FontSize -> 13, StripOnInput -> False], TraditionalForm], 
          Offset[{8, 0}, {-1, 0}], 
          NCache[
           ImageScaled[{0, 1/2}], 
           ImageScaled[{0, 0.5}]]], 
         TagBox[
          TagBox[
           TooltipBox[{
             GrayLevel[0.6], 
             DiskBox[
              Offset[{-13, -10}, {1, 1}], 
              Offset[6]], 
             GrayLevel[0.97], 
             AbsoluteThickness[1.5], 
             CapForm["Round"], 
             LineBox[{{
                Offset[{-15, -8}, {1, 1}], 
                Offset[{-11, -12}, {1, 1}]}, {
                Offset[{-15, -12}, {1, 1}], 
                Offset[{-11, -8}, {1, 1}]}}]}, 
            FrameBox[
             StyleBox[
             "\"Close analysis pod\"", "Text", FontColor -> 
              RGBColor[0.53725, 0.53725, 0.53725], FontSize -> 12, FontWeight -> 
              "Plain", FontTracking -> "Plain", StripOnInput -> False], 
             Background -> RGBColor[0.96078, 0.96078, 0.96078], FrameStyle -> 
             RGBColor[0.89804, 0.89804, 0.89804], FrameMargins -> 8, 
             StripOnInput -> False], TooltipDelay -> 0.1, 
            TooltipStyle -> {Background -> None, CellFrame -> 0}], 
           Annotation[#, "Close analysis pod", "Tooltip"]& ], 
          EventHandlerTag[{"MouseClicked" :> NotebookDelete[
              EvaluationCell[]], Method -> "Preemptive", PassEventsDown -> 
            Automatic, PassEventsUp -> True}]]}, AspectRatio -> Full, 
        ImageSize -> {Full, 20}, PlotRange -> {{-1, 1}, {-1, 1}}, 
        ImageMargins -> {{0, 0}, {0, 0}}, 
        ImagePadding -> {{0, 0}, {0, 0}}]& )}], 
   Cell[
    StyleData["HintPodDelimiterTop"], 
    TemplateBoxOptions -> {DisplayFunction -> (GraphicsBox[{
         AbsoluteThickness[1], 
         GrayLevel[0.85], 
         CapForm["Round"], 
         LineBox[{{-1, 0}, {1, 0}}]}, AspectRatio -> Full, 
        PlotRange -> {{-1, 1}, {-1, 1}}, ImagePadding -> {{0, 0}, {0, 0}}, 
        ImageSize -> {Full, 2}, BaselinePosition -> Scaled[0.1], 
        ImageMargins -> {{0, 0}, {4, 0}}]& )}], 
   Cell[
    StyleData["HintPodDelimiterBottom"], 
    TemplateBoxOptions -> {DisplayFunction -> (GraphicsBox[{
         AbsoluteThickness[1], 
         GrayLevel[0.85], 
         CapForm["Round"], 
         LineBox[{{-1, 0}, {1, 0}}]}, AspectRatio -> Full, 
        PlotRange -> {{-1, 1}, {-1, 1}}, ImagePadding -> {{0, 0}, {0, 0}}, 
        ImageSize -> {Full, 2}, BaselinePosition -> Scaled[0.1], 
        ImageMargins -> {{0, 0}, {0, 4}}]& )}], 
   Cell[
    StyleData["HintPodFooter"], 
    TemplateBoxOptions -> {DisplayFunction -> (GraphicsBox[{
         GrayLevel[0.97], 
         FilledCurveBox[
          BezierCurve[{{-1, 1}, {-1, 1}, 
            Offset[{0, 3}, {-1, -1}], 
            Offset[{0, 3}, {-1, -1}], 
            Offset[{0, 1.3443}, {-1, -1}], 
            Offset[{1.3443, 0}, {-1, -1}], 
            Offset[{3, 0}, {-1, -1}], 
            Offset[{3, 0}, {-1, -1}], 
            Offset[{-3, 0}, {1, -1}], 
            Offset[{-3, 0}, {1, -1}], 
            Offset[{-1.3443, 0}, {1, -1}], 
            Offset[{0, 1.3443}, {1, -1}], 
            Offset[{0, 3}, {1, -1}], 
            Offset[{0, 3}, {1, -1}], {1, 1}, {1, 1}}]], 
         InsetBox[
          BoxData[
           FormBox[
            TemplateBox[{
              StyleBox[
               TemplateBox[{3}, "Spacer1"], FontColor -> GrayLevel[0.4], 
               FontFamily -> "Source Sans Pro", FontWeight -> Plain, FontSize -> 
               12, StripOnInput -> False], 
              
              StyleBox[#, FontColor -> GrayLevel[0.4], FontFamily -> 
               "Source Sans Pro", FontWeight -> Plain, FontSize -> 12, 
               StripOnInput -> False], 
              StyleBox[
               TemplateBox[{5}, "Spacer1"], FontColor -> GrayLevel[0.4], 
               FontFamily -> "Source Sans Pro", FontWeight -> Plain, FontSize -> 
               12, StripOnInput -> False]}, "RowDefault"], TraditionalForm]], 
          
          Offset[{5, 2.5}, {-1, 0}], {-1, 0}]}, AspectRatio -> Full, 
        ImageSize -> {Full, 21}, PlotRange -> {{-1, 1}, {-1, 1}}, 
        ImageMargins -> {{0, 0}, {0, 3}}, 
        ImagePadding -> {{0, 0}, {0, 0}}]& )}], 
   Cell[
    StyleData["HintPodMenuItems"], 
    TemplateBoxOptions -> {
     DisplayFunction -> (
       TemplateBox[{#, FrameMargins -> 3, Background -> GrayLevel[1], 
         RoundingRadius -> 0, FrameStyle -> Directive[
           AbsoluteThickness[1], 
           RGBColor[0.75686, 0.82745, 0.88235]], ImageMargins -> #2}, 
        "Highlighted"]& )}], 
   Cell[
    StyleData["HintPodActionMenuItem"], 
    TemplateBoxOptions -> {DisplayFunction -> (ButtonBox[
        TemplateBox[{
          TagBox[
           GridBox[{{#, 
              TemplateBox[{7}, "Spacer1"], #2}}, 
            GridBoxAlignment -> {"Columns" -> {{Left}}, "Rows" -> {{Top}}}, 
            AutoDelete -> False, 
            GridBoxItemSize -> {
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
            GridBoxSpacings -> {"Columns" -> {{0}}}], "Grid"], FrameStyle -> 
          None, RoundingRadius -> 0, FrameMargins -> {{5, 2}, {2, 2}}, 
          ImageSize -> Full, ImageMargins -> {{0, 0}, {0, 0}}, Background -> 
          Dynamic[
            If[
             CurrentValue["MouseOver"], 
             GrayLevel[0.96], 
             GrayLevel[1.]]]}, "Highlighted"], ButtonFunction :> 
        ReleaseHold[#3], 
        Appearance -> {
         "Default" -> 
          Image[RawArray["UnsignedInteger8",{{{255, 255, 255, 255}, {0, 0, 0, 
             255}, {255, 255, 255, 255}}, {{0, 0, 0, 255}, {0, 0, 0, 0}, {0, 
             0, 0, 255}}, {{255, 255, 255, 255}, {0, 0, 0, 255}, {255, 255, 
             255, 255}}}], "Byte", ColorSpace -> "RGB", 
            ImageResolution -> {72, 72}, Interleaving -> True], "Hover" -> 
          Image[RawArray["UnsignedInteger8",{{{255, 255, 255, 255}, {0, 0, 0, 
             255}, {255, 255, 255, 255}}, {{0, 0, 0, 255}, {0, 0, 0, 0}, {0, 
             0, 0, 255}}, {{255, 255, 255, 255}, {0, 0, 0, 255}, {255, 255, 
             255, 255}}}], "Byte", ColorSpace -> "RGB", 
            ImageResolution -> {72, 72}, Interleaving -> True], "Pressed" -> 
          Image[RawArray["UnsignedInteger8",{{{255, 255, 255, 255}, {0, 0, 0, 
             255}, {255, 255, 255, 255}}, {{0, 0, 0, 255}, {0, 0, 0, 0}, {0, 
             0, 0, 255}}, {{255, 255, 255, 255}, {0, 0, 0, 255}, {255, 255, 
             255, 255}}}], "Byte", ColorSpace -> "RGB", 
            ImageResolution -> {72, 72}, Interleaving -> True]}, Method -> 
        "Queued", Evaluator -> Automatic]& )}], 
   Cell[
    StyleData["HintPodDisabledMenuItem"], 
    TemplateBoxOptions -> {DisplayFunction -> (ButtonBox[
        TemplateBox[{
          TagBox[
           GridBox[{{#, 
              TemplateBox[{7}, "Spacer1"], 
              StyleBox[#2, FontOpacity -> 0.4]}}, 
            GridBoxAlignment -> {"Columns" -> {{Left}}, "Rows" -> {{Top}}}, 
            AutoDelete -> False, 
            GridBoxItemSize -> {
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
            GridBoxSpacings -> {"Columns" -> {{0}}}], "Grid"], FrameStyle -> 
          None, RoundingRadius -> 0, FrameMargins -> {{5, 2}, {2, 2}}, 
          ImageSize -> Full, ImageMargins -> {{0, 0}, {0, 0}}, Background -> 
          GrayLevel[1.]}, "Highlighted"], ButtonFunction :> Null, 
        Appearance -> {
         "Default" -> 
          Image[RawArray["UnsignedInteger8",{{{255, 255, 255, 255}, {0, 0, 0, 
             255}, {255, 255, 255, 255}}, {{0, 0, 0, 255}, {0, 0, 0, 0}, {0, 
             0, 0, 255}}, {{255, 255, 255, 255}, {0, 0, 0, 255}, {255, 255, 
             255, 255}}}], "Byte", ColorSpace -> "RGB", 
            ImageResolution -> {72, 72}, Interleaving -> True], "Hover" -> 
          Image[RawArray["UnsignedInteger8",{{{255, 255, 255, 255}, {0, 0, 0, 
             255}, {255, 255, 255, 255}}, {{0, 0, 0, 255}, {0, 0, 0, 0}, {0, 
             0, 0, 255}}, {{255, 255, 255, 255}, {0, 0, 0, 255}, {255, 255, 
             255, 255}}}], "Byte", ColorSpace -> "RGB", 
            ImageResolution -> {72, 72}, Interleaving -> True], "Pressed" -> 
          Image[RawArray["UnsignedInteger8",{{{255, 255, 255, 255}, {0, 0, 0, 
             255}, {255, 255, 255, 255}}, {{0, 0, 0, 255}, {0, 0, 0, 0}, {0, 
             0, 0, 255}}, {{255, 255, 255, 255}, {0, 0, 0, 255}, {255, 255, 
             255, 255}}}], "Byte", ColorSpace -> "RGB", 
            ImageResolution -> {72, 72}, Interleaving -> True]}, Method -> 
        "Queued", Evaluator -> Automatic, Enabled -> False]& )}], 
   Cell[
    StyleData["HintPodActionLabel"], 
    TemplateBoxOptions -> {DisplayFunction -> (PaneBox[
        StyleBox[#, FontColor -> GrayLevel[0.2], FontFamily -> 
         "Source Sans Pro", FontWeight -> Plain, FontSize -> 13, LineIndent -> 
         0, StripOnInput -> False], FrameMargins -> 0, ImageMargins -> 0, 
        BaselinePosition -> Baseline, ImageSize -> Full]& )}], 
   Cell[
    StyleData["HintPodMenuDelimiter"], 
    TemplateBoxOptions -> {DisplayFunction -> (PaneBox[
        StyleBox[
         GraphicsBox[{
           CapForm["Round"], 
           GrayLevel[0.9], 
           AbsoluteThickness[1], 
           LineBox[{{-1, 0}, {1, 0}}]}, AspectRatio -> Full, 
          PlotRange -> {{-1, 1}, {-1, 1}}, ImageMargins -> {{0, 0}, {2, 2}}, 
          ImagePadding -> {{5, 5}, {0, 0}}, ImageSize -> {Full, 2}], 
         LineIndent -> 0, StripOnInput -> False], FrameMargins -> 0, 
        ImageMargins -> 0, BaselinePosition -> Baseline, ImageSize -> 
        Full]& )}], 
   Cell[
    StyleData["HintPodIconChevron"], 
    TemplateBoxOptions -> {DisplayFunction -> (GraphicsBox[{
         GrayLevel[0.2], 
         AbsoluteThickness[1.8], 
         CapForm["Round"], 
         JoinForm["Miter"], 
         LineBox[{{-0.5, 1}, {0.5, 0}, {-0.5, -1}}]}, AspectRatio -> Full, 
        BaselinePosition -> Bottom, ImageMargins -> {{0, 4}, {0, 0}}, 
        ImageSize -> {5.6, 7.7}]& )}], 
   Cell[
    StyleData["HintPodIconPopOut"], 
    TemplateBoxOptions -> {DisplayFunction -> (GraphicsBox[{
         FaceForm[
          GrayLevel[0.4]], 
         FilledCurveBox[{{{1, 4, 3}, {1, 3, 3}, {0, 1, 0}, {1, 3, 3}, {1, 3, 
          3}, {0, 1, 0}, {0, 1, 0}, {1, 3, 3}, {1, 3, 3}, {0, 1, 0}, {0, 1, 
          0}, {1, 3, 3}, {1, 3, 3}, {0, 1, 0}, {1, 3, 3}}}, CompressedData["
1:eJxTTMoPSmVmYGBgBGIlIGYC4h1yra8Dd6g4rHN/WCWip+KwRiYqxXq+isNk
CZYwvlwEDROHqYPpKwUrUHFgAIEDKg5nzwDBG2VU/hlluPogMEMCzm9kOdpv
aC6OJi/mINR84NRCVwQfIq8M519wufHhi5Yymn4lNPOVHNLAQBHO/6YR03/o
K5eDB9Ab69wFHJoeHZ+xexqng8r0/xPqfvM5cG9dVnl8JacD0FO6m+byOPxL
/f4kUZHbQZr3ge4EBW6HD2IeAX9m8Dhkzyqfs2gxp8ONxmK3Kd/4HOYsUt75
p50Tbi6YesgF9b8ShJ+oCOfD3Anjw/zx9JP8pXx7hD9h4QfjqxtyAKNCBU0e
EY4wPqr5iHh4/nvlx0tnVRyYObvkk98pOwA9+X75MRUHWWD03udHxCssngGf
XO7X
          "]]}, AspectRatio -> Automatic, ImageSize -> {14., 14.}, 
        PlotRange -> {{0., 13.62}, {0., 13.62}}]& )}], 
   Cell[
    StyleData["HintPodIconWrench"], 
    TemplateBoxOptions -> {DisplayFunction -> (GraphicsBox[{
         GrayLevel[0.4], 
         AbsoluteThickness[1], 
         Opacity[1.], 
         JoinedCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
          0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
          0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {1, 3, 3}, {1, 3, 
          3}}}, CompressedData["
1:eJxTTMoPSmVmYGBgBGJRIGYCYmWv6mZ9n3/2cmJZvp/5BBzci37yv9wu6/Au
ysnuhaQynG8at8uT55AGXJwBDHQdPl3yTRKIUIfzo1Ks7/vzajiosjVOdfbW
ccjaUzJZokUFrv8ySLmlqoPbts9/r1iowsVh6mD6zp4BAh4NnPbA3AHTr+ss
8/rRNoS7YXyYv2D+7H/ySf5SPrdD7D/nX29ff7H/6hXZZnGNGc6HqYPRMPED
b+bZ6FxBqAPpOprL7YAefgCtVISU
          "], CurveClosed -> {1}]}, AspectRatio -> Automatic, 
        BaselinePosition -> Scaled[0.2], ImagePadding -> 0.5, 
        ImageSize -> {16., 16.}, PlotRange -> {{0., 16.}, {0., 16.}}]& )}], 
   Cell[
    StyleData["HintPodIconInfo"], 
    TemplateBoxOptions -> {DisplayFunction -> (GraphicsBox[{
         FaceForm[
          GrayLevel[0.4]], 
         FilledCurveBox[{{{1, 4, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}}, {{1, 4,
            3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
           3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}}, {{1, 4, 3}, {0, 1, 0}, {1, 3,
            3}, {0, 1, 0}, {1, 3, 3}, {0, 1, 0}, {1, 3, 3}}}, {{{6.81, 13.}, {
           3.3914, 13.}, {0.62, 10.229}, {0.62, 6.81}, {0.62, 3.3914}, {
           3.3914, 0.62}, {6.81, 0.62}, {10.229, 0.62}, {13., 3.3914}, {13., 
           6.81}, {13., 10.229}, {10.229, 13.}, {6.81, 13.}}, CompressedData["

1:eJxTTMoPSmViYGCQB2IQbct1fXGBrbRD6+vAHXKtvA7r3B9WiayTdoCI8zgc
/qoR039IHkoLOjCAgYKDB0iZu4CDPFijgsOsmSDAC1UnCzWPE0rLQMXZHV6x
mAia1Ug56E1Y8MMwjdXh685bXX9VJRx4Jq9sCvRkcTh7BgREHfoPgTSwOAQB
db8OFHYAO4eLFeo+IQcRMIMLzoe4h9dBW2LqFc4MYYd4zdMCx38JOviYdzom
pIo4PJgjuHSvo6jDkgKQz0QdCsEelHDQjAHZJAa1VxIqLwH3Jzofok8S4i9W
RQews67LQsJhnoKDMRjIQ9Q3wMJJwQFMJULDSRJmrhzUPKh6Blmof+QcwM6K
kXb4Bgq2rzJQcXFovMhA5UUdciqqluo0SztsKMqY+NZG2OHV1E08hTrSDquA
oTmXQdABPX4BaWq/EA==
           "], {{8.81, 9.79}, {8.8101, 9.5122}, {8.5878, 9.2854}, {8.31, 
           9.28}, {7.51, 9.28}, {7.2283, 9.28}, {7., 9.5083}, {7., 9.79}, {7.,
            10.62}, {7.0054, 10.898}, {7.2322, 11.12}, {7.51, 11.12}, {8.35, 
           11.12}, {8.6239, 11.115}, {8.8447, 10.894}, {8.85, 10.62}}}]}, 
        AspectRatio -> Automatic, ImagePadding -> 0.5, 
        ImageSize -> {14., 14.}, 
        PlotRange -> {{0., 13.62}, {0., 13.62}}]& )}], 
   Cell[
    StyleData["HintPodIconNone"], 
    TemplateBoxOptions -> {
     DisplayFunction -> (
       GraphicsBox[{}, AspectRatio -> Automatic, ImageSize -> {16., 16.}, 
        PlotRange -> {{0., 16.}, {0., 16.}}, BaselinePosition -> Scaled[0.2], 
        ImagePadding -> 0.5]& )}], 
   Cell[
    StyleData["HintPodIconIgnoreAlways"], 
    TemplateBoxOptions -> {DisplayFunction -> (GraphicsBox[{
         EdgeForm[None], 
         FaceForm[
          GrayLevel[0.4]], 
         FilledCurveBox[{{{0, 2, 0}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
          3}, {0, 1, 0}, {0, 1, 0}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
          3}, {0, 1, 0}, {0, 1, 0}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {0, 1, 
          0}, {0, 1, 0}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
          3}}}, CompressedData["
1:eJxTTMoPSmVmYGBgBGJTIGYCYpF17g+rROQcbLmuLy6wlXaoBguoOvQf+qoR
w6/i8CZwh1zralWH4oyJb2vsVRx0N819v/yYqoO0/l0VtkYEv/U1UOFRBP/D
8mPe5pyqcP0z8oSaD3ipws2H0famcbs8fVQd2BqnOnevUXUAa+dWdUgSiLDc
ckLVwQPounXHVeB8kK1TmxH8gN7peULOKnD9EP+owM2H+QvmzyUFIBEeuHxC
mb+c2CtuuP75NjpXZj3jgpsP0s11nRPO5+feuqzyOAec73dxYsy/w+xw/WDr
uNjh5n9MPhPr7cEG93+V2Wq78Nus8PCB8WHhB+PDwhemHxb+MPNh8ZMGBhJw
f8Lkv2nEAJXwOGyu/rQh4DWrwwrTs9Z+F7kdvHiYtNunsTrYgrwpy+XQteHh
y6lGbA6HxNWCWRdzOJwKObhiyTk2B3fmCm4VDXaouRwOEaeMjmzUY4OHhybI
eA02eHgt/GH4bJ0qm4PT+bSrz4Hh+Z0tfobPVDZ4eIOVx7DD3QlzNwMYIPx1
smzffCl9FUg4u7M5hPEBU1S+isPs0Pmr195gdTAGgc0qUHewOswDJhfv7yoO
/g7CiYcvszoAU9vrQAtVh6V+QAFnNqg9iHj5dMk3SWAGIt78wBGJiFcYH+ZP
GB/mT5h+WLqBmQ/zJwC4F0s3
          "]]}, AspectRatio -> Automatic, ImageMargins -> {{0, 0}, {0, 2}}, 
        ImageSize -> {14., 14.}, 
        PlotRange -> {{-0.5, 13.62}, {-0.5, 13.62}}]& )}], 
   Cell[
    StyleData["HintPodIconIgnoreInCell"], 
    TemplateBoxOptions -> {DisplayFunction -> (GraphicsBox[{
         EdgeForm[None], 
         FaceForm[
          GrayLevel[0.4]], 
         FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
           0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1,
            0}}}, {{{11.69, 13.37}, {7.57, 13.37}, {7.57, 12.37}, {7.76, 
           12.37}, {11.19, 8.93}, {11.19, 1.25}, {7.57, 1.25}, {7.57, 0.25}, {
           12.19, 0.25}, {12.19, 13.37}}, {{9.17, 12.37}, {11.17, 12.37}, {
           11.17, 10.37}}}], 
         FilledCurveBox[{{{0, 2, 0}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {0, 1, 
          0}, {0, 1, 0}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {0, 1, 
          0}, {0, 1, 0}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {0, 1, 
          0}, {0, 1, 0}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}}}, CompressedData["
1:eJxTTMoPSmVmYGBgBGIjIGYCYo+HVSLr3EUdbLmuLy6wlXZYUgBiyTlAxJUc
kt9FOdllyDuU6yrKf1mD4LM879F466sMV28MApuVHX7yv9y+3lkOQj9WdngU
Ib794gFZh/Dojfvf/FN22CHX+jrQAsHvf/JJ/tJ6GTgfbI+ODFz/2TMgIA03
vxroqodVQg5gSkQO6m4mVPubGR1E7I/d2fpE2cHy2tFckwYGB2n9uypsjCoO
YG89/GcP4wd5zm1QO/QHzr9wNeyN/u5f9jD9kHD4aQ8zX+z36XcnD3+3v8fE
2SXfrOygvqBzw8OX3+yDQAxHBB/srr9KcL7mW959BjuV4PrnCi7de7BcCW4+
LLwhND88PmDyEHcLOjg2PTo+Y/d3+/21shbpLYIOTglPLyjd/mZ//wH35JVM
CD4knATgfL0JC34YPuOH688Nq1237REf3HzNmP5DXzX4HLhVNOp6dv6yP3xZ
O1UyiRcePrlH/22q/sQDD79vGiANPA5yy1946NUzOOy61fU39TuPw5GNenmL
GxkdwPal8cLjB2Y+LP7SwEDCgQEMZODyf7+VPpgTKOOw9ldM7tE6XgfmCqCL
9sk43PfvnZ4nxAuJZ2NZB5j9UV933uraK+swf/XaG/HfeCDudZJzuA1yTgov
PH3CzBcAJg/mdHmHVElQyuSH851lXj8ykxKEq4eFNwCKHGBr
          "]]}, AspectRatio -> Automatic, ImageMargins -> {{0, 0}, {0, 2}}, 
        ImageSize -> {14., 14.}, 
        PlotRange -> {{-0.5, 13.62}, {-0.5, 13.62}}]& )}], 
   Cell[
    StyleData["HintPodIconIgnoreInNotebook"], 
    TemplateBoxOptions -> {DisplayFunction -> (GraphicsBox[{
         FaceForm[
          GrayLevel[0.4]], 
         FilledCurveBox[{{{0, 2, 0}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
          3}, {0, 1, 0}, {0, 1, 0}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
          3}, {0, 1, 0}, {0, 1, 0}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
          3}, {0, 1, 0}, {0, 1, 0}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
          3}}}, CompressedData["
1:eJxTTMoPSmVmYGBgBGJTIGYC4qAdcq2vAwUcbLmuLy6wFXdYUgBiSTp4PKwS
Weeu4GCgtVL4AouUw1zBpXsPlis4vDlgqexlLeWg+ZZ3n8FOBB+s/y+CH6S+
oHODoyJc/z0mzi75ZkW4+cYgsFnRoanYbco3N0kHEftjd7Y+UXRYeM3kvcVR
CYeQx0tnH2FQgroLwb9pWxmxYqs4nP9zQfrmV8bicP0g1VzXxeDmf9OI6T/0
lcsB6Bmgj6QcGMDggz1MvoTnRNz7f2/sf/K/3L7+saLDzmCriP/PX9iHR2/c
/+YfzL1P4Pz+Xoc96+IfwPkrVqZm1068AdcPtAxo4yW4+ccenln/jOGkPcz/
MjWJRqEGh+xh4QPjw8IPxoeFL0w/LPxh5sPiB0KzwuNPHhibO+Su2h8GKTvE
7aAYeYAl7+5Z+/rfVgXnOLgdPu6qO5h345j9voPiasGsXHA+JJw44Hy9CQt+
GD5jh+vPDatdt+0RG9x8TZByDTYH/uky5V7st+21JaZe4cxgdZgp5PnFqOuh
vQY/99ZlP1kcIO54CjWfxeFeX0HUh0Uv7bdEft15i4vVoa2/Q3Oiy1t77Xax
m+fKWeHxAzMfFn9pYCACj1+YfMeX29cbgfF/+LJ2qmQSKzx95B79t6n6Ews8
/cDsB3O5JB1Upv+fUPebxeHIRr28xQeB6e+Cy40PX1gdnjTPO7uKX8qh/8kn
+Uv57A4sYXy6m2KlHDjBCY3DwV9OLMvXGJjeda7MejaXC56eYeENAPSkchE=

          "]], 
         FilledCurveBox[{{{0, 2, 0}, {1, 3, 3}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
          0}, {1, 3, 3}, {0, 1, 0}, {1, 3, 3}, {0, 1, 0}, {1, 3, 3}, {0, 1, 
          0}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {0, 1, 0}, {0, 1, 0}, {1, 3, 
          3}, {0, 1, 0}, {1, 3, 3}, {0, 1, 0}, {1, 3, 3}, {1, 3, 
          3}}}, CompressedData["
1:eJxTTMoPSmVmYGBgBGJdIGYC4qAdcq2vL6o52HJdX1ywVwtC24rB+YdTViWE
XBKE86tF1rk/rOJxMAaBzxpwPkReDY2vCDVPCMpXhvPB+jerwfnPf6/8eOms
ukPDdoemR+wiUHkNuHtgfJh7YXy2xqnO3W/U0eQ14ObB+DD7YHzNmP5DXzWY
4PzY3KP/NlX/toeZBxYP/GIPsw/GBzuHSxrOX7TF/MchFSkH9g9iHgF/Ptmb
vrdwdTeSdNjZywYU+WQPcb8E1B+f7H8EP146m0XcYeE1E6DKT/Z9IGUXRB02
V3/aEJD92R5s7A4Rh1kzQeCr/YQFPwyfvRN2+Put9MEcwe/2894vP+ZtLuxw
3793ep7QT3uIOiEHkC651t/2YH8a80LtY3NA5TPB+RPrflsVnPtkL/8lJ6xW
T8jhTSDYo1DzxOB8BjBQh/O/aQADzlQTTV4bbh6MD7MPxoeFfwDI2czaDmfP
gAA0nCdqOTglPL2gdFvDweNhlci645oO8iAPzdOEmPNXw+EPMDp9k7Qc4nZ5
8jC9VncAG39KywE9/QIAH6UuJw==
          "]], 
         FilledCurveBox[{{{0, 2, 0}, {1, 3, 3}, {0, 1, 0}, {0, 1, 0}}}, {{{
          5.63, 11.05}, {5.63, 10.44}, {6.0569, 10.539}, {6.5048, 10.49}, {
          6.9, 10.3}, {9.53, 10.3}, {9.53, 11.05}}}], 
         FilledCurveBox[{{{1, 4, 3}, {0, 1, 0}, {0, 1, 0}}}, {{{7.92, 3.73}, {
          8.0396, 3.4994}, {8.0784, 3.2353}, {8.03, 2.98}, {9.41, 2.98}, {
          9.41, 3.73}}}], 
         FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
          0}}}, {{{6.73, 6.21}, {6.2, 5.82}, {6.67, 5.46}, {11.22, 5.46}, {
          11.22, 6.21}, {6.73, 6.21}}}], 
         FilledCurveBox[{{{1, 4, 3}, {0, 1, 0}, {0, 1, 0}}}, {{{8., 8.7}, {
          8.0514, 8.4458}, {8.0162, 8.1818}, {7.9, 7.95}, {10.25, 7.95}, {
          10.25, 8.7}}}]}, AspectRatio -> Automatic, ImagePadding -> 0.75, 
        ImageSize -> {15., 15.}, 
        PlotRange -> {{0., 13.62}, {0., 13.62}}]& )}], 
   Cell[
    StyleData["HintPodIconHint"], 
    TemplateBoxOptions -> {DisplayFunction -> (GraphicsBox[{
         EdgeForm[None], 
         FaceForm[#], 
         FilledCurveBox[{{{1, 4, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}}, {{1, 4,
            3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
           3}, {1, 3, 3}}, {{0, 2, 0}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3,
            3}, {0, 1, 0}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
           3}, {1, 3, 3}}}, {{{9.015, 17.37}, {4.4559, 17.37}, {0.76, 
           13.645}, {0.76, 9.05}, {0.76, 4.455}, {4.4559, 0.73}, {9.015, 
           0.73}, {13.574, 0.73}, {17.27, 4.455}, {17.27, 9.05}, {17.27, 
           13.645}, {13.574, 17.37}, {9.015, 17.37}}, CompressedData["
1:eJxTTMoPSmViYGCQBGIQbcixRiYqRcVh3bak+pu23A5rf8XkHt2n7OC/fkpq
x2MOB8+5DWqHnik5nP8e/HjpbHYHj4dVIuvYlRyAiisjVrA78Bau6b6toegQ
ApQ9soDdQepAtIJjoILDJ8fzaVefczgs6Nzw8GWoPNx84yMb9fIeyzr831T9
acMFXod1N+LL/OVkHV5uX8/8/IyAw7Fck4btDrIOZQ/mCC7dK+TAXMGtomEn
6/DP+dfb1w0iDkIi9sfufJV1ePRy6iYeQzGHac7dOc+t5R3SwEDcwe7FzTW/
bBQc9kybwF+1TcLh7TwbnStSig7Hd+3oZSuQdDjab1iuy6jk0MIL8qGkg8f+
WlmL50oO9uHRG/fnSDr4fu4LLjmi7HDw1ELXbZslHGDhAzO//9BXjRh+VQeG
iXW/rQzEHKzv+/dOz1N1uFfY1fekSMRhzhGFDUUZqhB/LhaCmFOs6sC0h1VI
ZL+Ag8g6d2AIqjqYCJrZ7L3E64Ae/gDrrapT
           "], CompressedData["
1:eJxTTMoPSmViYGBQBGIQ/emSb5KAhJoDAwg0aDhYbjlRtu++isNudX7urWpK
DrX2pnG7Tqo4TFPsKy2sVnRQvv2zLqtGBULfUXAI6J2eJ8Ss4mDSsN2hKUnB
Ia0jOfZOmrKD/l0Vtsar8g5Gz9apPlms5GDgs4zLLVXeweLHoZRVDxQdnNdm
3ivskneQW/7CQ09e0aHEbco3tnh5h+jLex6LxCo4FErzPtC9IO+wVfT36Xed
8nDzH5tJHYheIOeQBxJ4pOCgu2nu++Vscg75Qs0HTjUqOjDkN7IcPS/rcObd
ycNOukoObqqlTLM4ZOD+O7JRL2/xQWkHHibtdrFITYeb8WX+ctOkHQ6eWui6
zVjLQfD4rh29bdIO/Ye+asTwazuAnJswRdohaIdc6+uL2g6qbI1TnbtlHGy5
ri8uqNVxEIgAhtg3WYj5B3QcgKEkzcsAdOfS2UcUDHQdEp5eULotqehw89z3
4Mepug63pGsSjUyVHMr3zZfSj9V1uKKdKvkoQtmhOGPi25p6XQeQ8p91KhB9
lroOIGH7UlWH+qw9JZNn6EDs54bGF4OOA9AVtlzhag6KG4oyJupqO4CCYaGr
mgM4XiO0HK5WvFQz9FBzuAzi7tR0cNv2+e8VCzUHJ5AF0poO6PEPAFdvzZk=

           "]}]}, AspectRatio -> Automatic, BaselinePosition -> Scaled[0.1], 
        ImagePadding -> 0.5, ImageSize -> {14., 14.778}, 
        PlotRange -> {{0.76, 17.27}, {0.73, 17.37}}]& )}], 
   Cell["Documentation", "Section"], 
   Cell["Usage", "Subsection"], 
   Cell[
    StyleData["UsageInputs", StyleDefinitions -> StyleData["Input"]], 
    CellMargins -> {{66, 10}, {0, 8}}, 
    StyleKeyMapping -> {"Tab" -> "UsageDescription"}, Evaluatable -> False, 
    CellEventActions -> {"ReturnKeyDown" :> With[{RSNB`nb$ = Notebooks[
           EvaluationCell[]]}, SelectionMove[
          EvaluationCell[], After, Cell]; NotebookWrite[RSNB`nb$, 
          Cell["", "UsageDescription"], All]; 
        SelectionMove[RSNB`nb$, Before, CellContents]], {"KeyDown", "\t"} :> 
      Replace[SelectionMove[
          SelectedNotebook[], After, Cell]; NotebookFind[
          SelectedNotebook[], "TabNext", Next, CellTags, AutoScroll -> True, 
          WrapAround -> True], Blank[NotebookSelection] :> SelectionMove[
          SelectedNotebook[], All, CellContents, AutoScroll -> True]]}, 
    ShowAutoStyles -> False, ShowCodeAssist -> False, 
    CodeAssistOptions -> {"DynamicHighlighting" -> False}, 
    LineSpacing -> {1, 3}, TabSpacings -> {2.5}, CounterIncrements -> "Text", 
    FontFamily -> "Source Sans Pro", FontSize -> 15, FontWeight -> "Plain"], 
   Cell[
    StyleData["UsageDescription", StyleDefinitions -> StyleData["Text"]], 
    CellMargins -> {{86, 10}, {7, 0}}, 
    StyleKeyMapping -> {"Backspace" -> "UsageInputs"}, CellGroupingRules -> 
    "OutputGrouping", 
    CellEventActions -> {"ReturnKeyDown" :> With[{RSNB`nb$ = Notebooks[
           EvaluationCell[]]}, SelectionMove[
          EvaluationCell[], After, Cell]; NotebookWrite[RSNB`nb$, 
          Cell[
           BoxData[""], "UsageInputs", FontFamily -> "Source Sans Pro"], All]; 
        SelectionMove[RSNB`nb$, Before, CellContents]], {"KeyDown", "\t"} :> 
      Replace[SelectionMove[
          SelectedNotebook[], After, Cell]; NotebookFind[
          SelectedNotebook[], "TabNext", Next, CellTags, AutoScroll -> True, 
          WrapAround -> True], Blank[NotebookSelection] :> SelectionMove[
          SelectedNotebook[], All, CellContents, AutoScroll -> True]]}, 
    ShowAutoSpellCheck -> False], 
   Cell["Details & Options", "Subsection"], 
   Cell[
    StyleData["Notes", StyleDefinitions -> StyleData["Item"]], CellDingbat -> 
    StyleBox["\[FilledVerySmallSquare]", FontColor -> GrayLevel[0.6]], 
    CellMargins -> {{66, 24}, {9, 7}}, ReturnCreatesNewCell -> False, 
    StyleKeyMapping -> {}, DefaultNewCellStyle -> "Notes", ShowAutoSpellCheck -> 
    False, GridBoxOptions -> {BaseStyle -> "TableNotes"}], 
   Cell[
    StyleData["TableNotes", StyleDefinitions -> StyleData["Notes"]], 
    CellDingbat -> None, CellFrameColor -> RGBColor[0.749, 0.694, 0.553], 
    StyleMenuListing -> None, 
    ButtonBoxOptions -> {Appearance -> {Automatic, None}}, 
    GridBoxOptions -> {
     FrameStyle -> GrayLevel[0.906], 
      GridBoxAlignment -> {
       "Columns" -> {{Left}}, "ColumnsIndexed" -> {}, "Rows" -> {{Baseline}}, 
        "RowsIndexed" -> {}}, 
      GridBoxDividers -> {"Columns" -> {{None}}, "Rows" -> {{True}}}, 
      GridDefaultElement -> Cell["\[Placeholder]", "TableText"]}], 
   Cell[
    StyleData["TableText"], DefaultInlineFormatType -> 
    "DefaultInputInlineFormatType", AutoQuoteCharacters -> {}, 
    PasteAutoQuoteCharacters -> {}, StyleMenuListing -> None], 
   Cell["Examples", "Subsection"], 
   Cell[
    StyleData["ExampleDelimiter"], Selectable -> False, ShowCellBracket -> 
    Automatic, CellMargins -> {{66, 14}, {5, 10}}, Evaluatable -> True, 
    CellGroupingRules -> {"SectionGrouping", 58}, 
    CellEvaluationFunction -> (($Line = 0; Null)& ), ShowCellLabel -> False, 
    CellLabelAutoDelete -> True, TabFilling -> 
    "\[LongDash]\[NegativeThickSpace]", TabSpacings -> {100}, 
    StyleMenuListing -> None, FontFamily -> "Verdana", FontWeight -> Bold, 
    FontSlant -> "Plain", FontColor -> GrayLevel[0.906]], 
   Cell[
    StyleData["ExampleText", StyleDefinitions -> StyleData["Text"]]], 
   Cell[
    StyleData["PageBreak", StyleDefinitions -> StyleData["ExampleDelimiter"]],
     Selectable -> False, CellFrame -> {{0, 0}, {1, 0}}, 
    CellMargins -> {{66, 14}, {15, -5}}, 
    CellElementSpacings -> {"CellMinHeight" -> 1}, Evaluatable -> True, 
    CellEvaluationFunction -> (($Line = 0; Null)& ), CellFrameColor -> 
    GrayLevel[
      Rational[77, 85]]], 
   Cell[
    StyleData["Subsection"], Evaluatable -> True, 
    CellEvaluationFunction -> (($Line = 0; Null)& ), ShowCellLabel -> False], 
   
   Cell[
    StyleData["Subsubsection"], Evaluatable -> True, 
    CellEvaluationFunction -> (($Line = 0; Null)& ), ShowCellLabel -> False], 
   
   Cell[
    StyleData["ExampleImage"], PageWidth :> 650, 
    CellMargins -> {{66, 66}, {16, 5}}, Evaluatable -> False, ShowCellLabel -> 
    False, MenuSortingValue -> 10000, 
    RasterBoxOptions -> {ImageEditMode -> False}], 
   Cell["Links", "Section"], 
   Cell[
    StyleData["Link"], FontFamily -> "Source Sans Pro", FontColor -> Dynamic[
      If[
       CurrentValue["MouseOver"], 
       RGBColor[0.855, 0.396, 0.145], 
       RGBColor[0.02, 0.286, 0.651]]]], 
   Cell[
    StyleData["StringTypeLink", StyleDefinitions -> StyleData["Link"]], 
    FontColor -> Dynamic[
      If[
       CurrentValue["MouseOver"], 
       RGBColor[0.969, 0.467, 0.], 
       GrayLevel[0.467]]]], 
   Cell[
    StyleData["CharactersRefLink"], ShowSpecialCharacters -> False], 
   Cell["Annotation", "Section"], 
   Cell[
    StyleData["Excluded"], 
    CellBracketOptions -> {
     "Color" -> RGBColor[0.9, 0.4, 0.4], "Thickness" -> 2}, 
    GeneratedCellStyles -> {
     "Graphics" -> {"Graphics", "Excluded"}, 
      "Message" -> {"Message", "MSG", "Excluded"}, 
      "Output" -> {"Output", "Excluded"}, "Print" -> {"Print", "Excluded"}, 
      "PrintTemporary" -> {"PrintTemporary", "Excluded"}}, CellFrameMargins -> 
    4, CellFrameLabels -> {{None, 
       Cell[
        BoxData[
         TemplateBox[{
           StyleBox[
           "\"excluded\"", "ExcludedCellLabel", StripOnInput -> False], 
           "\"Excluded cells will not appear anywhere in the published \
resource except for the definition notebook\""}, "PrettyTooltipTemplate"]], 
        "ExcludedCellLabel"]}, {None, None}}, StyleMenuListing -> None, 
    Background -> RGBColor[1, 0.95, 0.95]], 
   Cell[
    StyleData["ExcludedCellLabel", StyleDefinitions -> StyleData["Text"]], 
    ShowStringCharacters -> False, FontFamily -> "Source Sans Pro", FontSize -> 
    9, FontWeight -> Plain, FontSlant -> Italic, FontColor -> 
    RGBColor[0.9, 0.4, 0.4, 0.5], Background -> None], 
   Cell[
    StyleData["HiddenMaterial"], 
    CellBracketOptions -> {
     "Color" -> RGBColor[0.3, 0.7, 0.6], "Thickness" -> 2}, CellFrameMargins -> 
    4, CellFrameLabels -> {{None, 
       Cell[
        BoxData[
         TemplateBox[{
           StyleBox[
           "\"hidden\"", "HiddenMaterialCellLabel", StripOnInput -> False], 
           "\"Hidden input cells will be closed on the published web page but \
will remain open in the downloadable example notebook\""}, 
          "PrettyTooltipTemplate"]], "HiddenMaterialCellLabel"]}, {
      None, None}}, StyleMenuListing -> None, Background -> 
    RGBColor[0.8, 1., 0.9]], 
   Cell[
    StyleData[
    "HiddenMaterialCellLabel", StyleDefinitions -> StyleData["Text"]], 
    ShowStringCharacters -> False, FontFamily -> "Source Sans Pro", FontSize -> 
    9, FontWeight -> Plain, FontSlant -> Italic, FontColor -> 
    RGBColor[0.3, 0.7, 0.6, 0.5], Background -> None], 
   Cell[
    StyleData["Comment", StyleDefinitions -> StyleData["Text"]], 
    CellFrame -> {{3, 0}, {0, 0}}, CellMargins -> {{66, 0}, {1, 0}}, 
    CellElementSpacings -> {"ClosedCellHeight" -> 0}, 
    GeneratedCellStyles -> {
     "Graphics" -> {"Graphics", "Comment"}, 
      "Message" -> {"Message", "MSG", "Comment"}, 
      "Output" -> {"Output", "Comment"}, "Print" -> {"Print", "Comment"}, 
      "PrintTemporary" -> {"PrintTemporary", "Comment"}}, CellFrameColor -> 
    RGBColor[0.88072, 0.61104, 0.14205], 
    CellFrameLabelMargins -> {{0, 10}, {0, 0}}, FontColor -> GrayLevel[0.25], 
    Background -> RGBColor[0.982, 0.942, 0.871]], 
   Cell[
    StyleData["AuthorComment", StyleDefinitions -> StyleData["Comment"]], 
    GeneratedCellStyles -> {
     "Graphics" -> {"Graphics", "AuthorComment"}, 
      "Message" -> {"Message", "MSG", "AuthorComment"}, 
      "Output" -> {"Output", "AuthorComment"}, 
      "Print" -> {"Print", "AuthorComment"}, 
      "PrintTemporary" -> {"PrintTemporary", "AuthorComment"}}, 
    CellFrameColor -> RGBColor[0.36842, 0.50678, 0.7098], Background -> 
    RGBColor[0.905, 0.926, 0.956]], 
   Cell[
    StyleData["ReviewerComment", StyleDefinitions -> StyleData["Comment"]], 
    GeneratedCellStyles -> {
     "Graphics" -> {"Graphics", "ReviewerComment"}, 
      "Message" -> {"Message", "MSG", "ReviewerComment"}, 
      "Output" -> {"Output", "ReviewerComment"}, 
      "Print" -> {"Print", "ReviewerComment"}, 
      "PrintTemporary" -> {"PrintTemporary", "ReviewerComment"}}, 
    CellFrameColor -> RGBColor[0.56018, 0.69157, 0.19488], Background -> 
    RGBColor[0.934, 0.954, 0.879]], 
   Cell[
    StyleData["CommentLabel", StyleDefinitions -> StyleData["Text"]], 
    ShowStringCharacters -> False, FontSlant -> "Italic", 
    PrivateFontOptions -> {"OperatorSubstitution" -> False}, FontColor -> 
    GrayLevel[0.5]], 
   Cell["Special Input", "Section"], 
   Cell[
    StyleData["FormObjectCell"], CellMargins -> {{66, 66}, {16, 5}}], 
   Cell[
    StyleData["LocalFileInput", StyleDefinitions -> StyleData["Input"]], 
    CellFrameLabels -> {{None, 
       Cell[
        BoxData[
         ButtonBox[
         "\"Choose\"", FrameMargins -> {{5, 5}, {0, 0}}, 
          BaseStyle -> {"Panel", FontSize -> 12}, Evaluator -> Automatic, 
          Method -> "Queued", ButtonFunction :> 
          With[{RSNB`nb$ = ButtonNotebook[], RSNB`$cp$ = $ContextPath}, 
            Quiet[
             
             Block[{$ContextPath = RSNB`$cp$, 
               ResourceSystemClient`$AsyncronousResourceInformationUpdates = 
               False, DefinitionNotebookClient`$ButtonCodeID = None}, 
              Internal`WithLocalSettings[
               DefinitionNotebookClient`$ButtonsDisabled = True; Once[
                  ReleaseHold[
                   CurrentValue[
                   RSNB`nb$, {TaggingRules, "CompatibilityTest"}]], 
                  "KernelSession"]; Needs["DefinitionNotebookClient`"], 
                Annotation[
                DefinitionNotebookClient`$ButtonCodeID = 8263526385974082686; 
                 DefinitionNotebookClient`CheckForUpdates[RSNB`nb$, 
                   ReleaseHold[DefinitionNotebookClient`$ButtonCode = HoldForm[
                    If[$VersionNumber >= 13., 
                    DefinitionNotebookClient`LocalFileInputDialog["Example", 
                    ParentCell[
                    EvaluationCell[]], "Type" -> "FileOpen"], 
                    MessageDialog[
                    "This feature requires Wolfram Language version 13 or \
later."]]]]], 
                 DefinitionNotebookClient`ButtonCodeID[8263526385974082686]], 
                DefinitionNotebookClient`$ButtonsDisabled = False; Null]; 
              Null]]], Appearance :> 
          FEPrivate`FrontEndResource[
           "FEExpressions", "GrayButtonNinePatchAppearance"]]]]}, {
      None, None}}], 
   Cell[
    StyleData["LocalDirectoryInput", StyleDefinitions -> StyleData["Input"]], 
    CellFrameLabels -> {{None, 
       Cell[
        BoxData[
         ButtonBox[
         "\"Choose\"", FrameMargins -> {{5, 5}, {0, 0}}, 
          BaseStyle -> {"Panel", FontSize -> 12}, Evaluator -> Automatic, 
          Method -> "Queued", ButtonFunction :> 
          With[{RSNB`nb$ = ButtonNotebook[], RSNB`$cp$ = $ContextPath}, 
            Quiet[
             
             Block[{$ContextPath = RSNB`$cp$, 
               ResourceSystemClient`$AsyncronousResourceInformationUpdates = 
               False, DefinitionNotebookClient`$ButtonCodeID = None}, 
              Internal`WithLocalSettings[
               DefinitionNotebookClient`$ButtonsDisabled = True; Once[
                  ReleaseHold[
                   CurrentValue[
                   RSNB`nb$, {TaggingRules, "CompatibilityTest"}]], 
                  "KernelSession"]; Needs["DefinitionNotebookClient`"], 
                Annotation[
                DefinitionNotebookClient`$ButtonCodeID = 5263076252613204070; 
                 DefinitionNotebookClient`CheckForUpdates[RSNB`nb$, 
                   ReleaseHold[DefinitionNotebookClient`$ButtonCode = HoldForm[
                    If[$VersionNumber >= 13., 
                    DefinitionNotebookClient`LocalFileInputDialog["Example", 
                    ParentCell[
                    EvaluationCell[]], "Type" -> "Directory"], 
                    MessageDialog[
                    "This feature requires Wolfram Language version 13 or \
later."]]]]], 
                 DefinitionNotebookClient`ButtonCodeID[5263076252613204070]], 
                DefinitionNotebookClient`$ButtonsDisabled = False; Null]; 
              Null]]], Appearance :> 
          FEPrivate`FrontEndResource[
           "FEExpressions", "GrayButtonNinePatchAppearance"]]]]}, {
      None, None}}], 
   Cell["Misc", "Section"], 
   Cell[
    StyleData["Item"], DefaultNewCellStyle -> "Item"], 
   Cell[
    StyleData["RelatedSymbol", StyleDefinitions -> StyleData["Item"]], 
    DefaultNewCellStyle -> {"RelatedSymbol", FontFamily -> "Source Sans Pro"},
     DefaultFormatType -> DefaultInputFormatType, FormatType -> InputForm], 
   Cell[
    StyleData["ButtonText"], FontFamily -> "Sans Serif", FontSize -> 11, 
    FontWeight -> Bold, FontColor -> RGBColor[0.459, 0.459, 0.459]], 
   Cell[
    StyleData["InlineFormula"], 
    HyphenationOptions -> {"HyphenationCharacter" -> "\[Continuation]"}, 
    LanguageCategory -> "Formula", AutoSpacing -> True, ScriptLevel -> 1, 
    SingleLetterItalics -> False, SpanMaxSize -> 1, StyleMenuListing -> None, 
    FontFamily -> "Source Sans Pro", FontSize -> 1. Inherited, 
    ButtonBoxOptions -> {Appearance -> {Automatic, None}}, 
    FractionBoxOptions -> {BaseStyle -> {SpanMaxSize -> Automatic}}, 
    GridBoxOptions -> {
     GridBoxItemSize -> {
       "Columns" -> {{Automatic}}, "ColumnsIndexed" -> {}, "Rows" -> {{1.}}, 
        "RowsIndexed" -> {}}}], 
   Cell[
    StyleData["Input"], CellProlog :> Quiet[
      (Block[{$ContextPath}, Once[
         ReleaseHold[
          CurrentValue[#, {TaggingRules, "CompatibilityTest"}]], 
         "KernelSession"]; If[$VersionNumber >= 12.2, 
         Needs["DefinitionNotebookClient`"], 
         Needs["ResourceSystemClient`DefinitionNotebook`"]]; 
       DefinitionNotebookClient`LoadDefinitionNotebook["Example", #]; Null]& )[
       InputNotebook[]]]], 
   Cell[
    StyleData["Code"], CellProlog :> Quiet[
      (Block[{$ContextPath}, Once[
         ReleaseHold[
          CurrentValue[#, {TaggingRules, "CompatibilityTest"}]], 
         "KernelSession"]; If[$VersionNumber >= 12.2, 
         Needs["DefinitionNotebookClient`"], 
         Needs["ResourceSystemClient`DefinitionNotebook`"]]; 
       DefinitionNotebookClient`LoadDefinitionNotebook["Example", #]; Null]& )[
       InputNotebook[]]]], 
   Cell[
    StyleData["DockedCell"], CellFrameColor -> GrayLevel[0.75], Background -> 
    RGBColor[0.94118, 0.94118, 0.94118]]}, Visible -> False, FrontEndVersion -> 
  "13.2 for Mac OS X x86 (64-bit) (January 30, 2023)", StyleDefinitions -> 
  "PrivateStylesheetFormatting.nb"],
ExpressionUUID->"a839f5e5-7cb6-4d83-8150-2e5dc6aa769f"
]

